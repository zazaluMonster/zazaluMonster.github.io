{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-cactus/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/js/md5.min.js","path":"js/md5.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/parallax/parallax.min.js","path":"parallax/parallax.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/waifu-tips.js","path":"live2d/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxController.js","path":"parallax/parallaxController.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxCss.css","path":"parallax/parallaxCss.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/waifu-tips.json","path":"live2d/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/Java_Character_1.png","path":"images/tmpImage/Java_Character_1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/dongfang.jpg","path":"images/tmpImage/dongfang.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/lambda.png","path":"images/tmpImage/lambda.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/blog_donation_zfb.png","path":"images/tmpImage/blog_donation_zfb.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/test.png","path":"images/tmpImage/test.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/model.json","path":"live2d/Tia/model.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/model.json","path":"live2d/Pio/model.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/live2d.js","path":"live2d/live2d.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxBg.jpg","path":"parallax/parallaxBg.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/FunctionInterface_2.png","path":"images/tmpImage/FunctionInterface_2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/boot分区配好后截图.png","path":"images/tmpImage/boot分区配好后截图.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/huanghe.jpg","path":"images/tmpImage/huanghe.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mysql_1.png","path":"images/tmpImage/mysql_1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/使用Rufus创造U盘启动盘.JPG","path":"images/tmpImage/使用Rufus创造U盘启动盘.JPG","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/原子性_1.png","path":"images/tmpImage/原子性_1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/html/live2d.html","path":"live2d/html/live2d.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/root分区home分区swap分区配好后.png","path":"images/tmpImage/root分区home分区swap分区配好后.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/model.moc","path":"live2d/Pio/model.moc","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/model.moc","path":"live2d/Tia/model.moc","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/waifu.css","path":"live2d/css/waifu.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/FunctionInterface_1.png","path":"images/tmpImage/FunctionInterface_1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/MyIona.jpg","path":"images/tmpImage/MyIona.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mybatis_level_2_global.png","path":"images/tmpImage/mybatis_level_2_global.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/安装前磁盘分区情况.JPG","path":"images/tmpImage/安装前磁盘分区情况.JPG","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/HELP-US-OUT.txt","path":"live2d/css/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/bower.json","path":"live2d/css/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere1.mtn","path":"live2d/Tia/motions/Breath Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere3.mtn","path":"live2d/Tia/motions/Breath Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere2.mtn","path":"live2d/Tia/motions/Breath Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath1.mtn","path":"live2d/Tia/motions/Breath1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath2.mtn","path":"live2d/Tia/motions/Breath2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath4.mtn","path":"live2d/Tia/motions/Breath4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath3.mtn","path":"live2d/Tia/motions/Breath3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath6.mtn","path":"live2d/Tia/motions/Breath6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath5.mtn","path":"live2d/Tia/motions/Breath5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath8.mtn","path":"live2d/Tia/motions/Breath8.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath7.mtn","path":"live2d/Tia/motions/Breath7.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Fail.mtn","path":"live2d/Tia/motions/Fail.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath9.mtn","path":"live2d/Tia/motions/Breath9.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Success.mtn","path":"live2d/Tia/motions/Success.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sleeping.mtn","path":"live2d/Tia/motions/Sleeping.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei1.mtn","path":"live2d/Tia/motions/Sukebei1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei2.mtn","path":"live2d/Tia/motions/Sukebei2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere3.mtn","path":"live2d/Tia/motions/Touch Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere5.mtn","path":"live2d/Tia/motions/Touch Dere5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere4.mtn","path":"live2d/Tia/motions/Touch Dere4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere6.mtn","path":"live2d/Tia/motions/Touch Dere6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere1.mtn","path":"live2d/Tia/motions/Touch Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei3.mtn","path":"live2d/Tia/motions/Sukebei3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch2.mtn","path":"live2d/Tia/motions/Touch2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere2.mtn","path":"live2d/Tia/motions/Touch Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch1.mtn","path":"live2d/Tia/motions/Touch1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch3.mtn","path":"live2d/Tia/motions/Touch3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch4.mtn","path":"live2d/Tia/motions/Touch4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/WakeUp.mtn","path":"live2d/Tia/motions/WakeUp.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch6.mtn","path":"live2d/Tia/motions/Touch6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch5.mtn","path":"live2d/Tia/motions/Touch5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere1.mtn","path":"live2d/Pio/motions/Breath Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath1.mtn","path":"live2d/Pio/motions/Breath1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere2.mtn","path":"live2d/Pio/motions/Breath Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath3.mtn","path":"live2d/Pio/motions/Breath3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere3.mtn","path":"live2d/Pio/motions/Breath Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath2.mtn","path":"live2d/Pio/motions/Breath2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath5.mtn","path":"live2d/Pio/motions/Breath5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath6.mtn","path":"live2d/Pio/motions/Breath6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath7.mtn","path":"live2d/Pio/motions/Breath7.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath4.mtn","path":"live2d/Pio/motions/Breath4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Fail.mtn","path":"live2d/Pio/motions/Fail.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sleeping.mtn","path":"live2d/Pio/motions/Sleeping.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath8.mtn","path":"live2d/Pio/motions/Breath8.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Success.mtn","path":"live2d/Pio/motions/Success.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei1.mtn","path":"live2d/Pio/motions/Sukebei1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei3.mtn","path":"live2d/Pio/motions/Sukebei3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei2.mtn","path":"live2d/Pio/motions/Sukebei2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere4.mtn","path":"live2d/Pio/motions/Touch Dere4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere1.mtn","path":"live2d/Pio/motions/Touch Dere1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere3.mtn","path":"live2d/Pio/motions/Touch Dere3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere5.mtn","path":"live2d/Pio/motions/Touch Dere5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere2.mtn","path":"live2d/Pio/motions/Touch Dere2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere6.mtn","path":"live2d/Pio/motions/Touch Dere6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch1.mtn","path":"live2d/Pio/motions/Touch1.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch2.mtn","path":"live2d/Pio/motions/Touch2.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch3.mtn","path":"live2d/Pio/motions/Touch3.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch4.mtn","path":"live2d/Pio/motions/Touch4.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch5.mtn","path":"live2d/Pio/motions/Touch5.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch6.mtn","path":"live2d/Pio/motions/Touch6.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/WakeUp.mtn","path":"live2d/Pio/motions/WakeUp.mtn","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mybatis_level_2.png","path":"images/tmpImage/mybatis_level_2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/logo.png","path":"images/tmpImage/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.css","path":"live2d/css/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.css.map","path":"live2d/css/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.min.css","path":"live2d/css/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.eot","path":"live2d/css/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.woff","path":"live2d/css/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/FontAwesome.otf","path":"live2d/css/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.ttf","path":"live2d/css/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.woff2","path":"live2d/css/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/jersey-costume-blue.png","path":"live2d/Tia/textures/jersey-costume-blue.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/pajamas-costume-green.png","path":"live2d/Tia/textures/pajamas-costume-green.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.svg","path":"live2d/css/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/default-costume.png","path":"live2d/Tia/textures/default-costume.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/pajamas-costume.png","path":"live2d/Pio/textures/pajamas-costume.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/school-costume.png","path":"live2d/Pio/textures/school-costume.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/default-costume.png","path":"live2d/Pio/textures/default-costume.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/IMG_20190430_200611.jpg","path":"images/tmpImage/IMG_20190430_200611.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/IMG_20190430_200623.jpg","path":"images/tmpImage/IMG_20190430_200623.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"42be8cd38e581ba629ba9d238f14851fe8bc24b0","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/.DS_Store","hash":"a803879e930c3cd399f72b6cffec384d26a783d1","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1556763834949},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/_config.yml","hash":"a999115e91f9081aa0768991ba18b83e14ca1c0d","modified":1569381921431},{"_id":"source/FunctionalProgram_Reading_Notes/index.md","hash":"9122bb737aea92710a14b8dcf815c77b66fee237","modified":1571490070536},{"_id":"source/_posts/2019-Happy-National-Day.md","hash":"975207335f78ddd0db59c89c8ffb2db722d8efa0","modified":1571490070536},{"_id":"source/_posts/JAVA堆排序.md","hash":"39e41ec8512f1319ca9b1a5018cff77574399c13","modified":1560238184746},{"_id":"source/_posts/2017俺の年终总结.md","hash":"944cd443b75c5012745fe1e71bc4fbfc1d5200af","modified":1556763834949},{"_id":"source/_posts/2019我的个人电脑机械硬盘问题引发的故事.md","hash":"d94fbec5a980363d6d0c218f4b43faf6ec3b68c7","modified":1556763834949},{"_id":"source/_posts/Java的字符编码问题一语道破-GBK-UTF等常用编码.md","hash":"70a49a49b5bb875f48796fc832b955dacbb820aa","modified":1571490070548},{"_id":"source/_posts/CORS-question-and-curl-use-in-web-test.md","hash":"d74bb42ad6b3de29326fcbac77eefe92add1a19b","modified":1561885356002},{"_id":"source/_posts/JavaEncoded3.md","hash":"632d3b0c97bbac0b7d213bf7b93a76ef11155377","modified":1561354038931},{"_id":"source/_posts/Servlet的总结.md","hash":"3965f3cd6cfa48ac633876cb2c796e66dc806972","modified":1561367176814},{"_id":"source/_posts/ToFather.md","hash":"2c7e9f798239dadc7de10b871e33460635ed7f21","modified":1560657944890},{"_id":"source/_posts/git-push大文件报错解决.md","hash":"a3bbed11eb57a2f88630a694bcc690f8889a79c0","modified":1559968557149},{"_id":"source/_posts/gitalk-issue-automatic-create.md","hash":"4755d98c8b73f3acf0264762510ea8e7c2d7b8a0","modified":1571490070548},{"_id":"source/_posts/always-smail-but-not-always-happy.md","hash":"a9324eb2937227bc14eeed806b96754286085135","modified":1567607161298},{"_id":"source/_posts/database-timestamp-timezone-notice.md","hash":"c0e35763c2fbfa3e015d244683f14d867a378096","modified":1562925923684},{"_id":"source/_posts/hexo博客备份浅谈.md","hash":"c5aaad6af849850dec9887732a0f3a08283d6c35","modified":1556848275163},{"_id":"source/_posts/hexo-next主题自定义css格式切换.md","hash":"27eed669528305db2d26b5dfae84fe737c0e98f6","modified":1556763834949},{"_id":"source/_posts/hexo备份之路.md","hash":"e081e8f7f88f053766b94716be09296271f0134c","modified":1569381921291},{"_id":"source/_posts/hot-to-use-runtime-param-to-init-a-prototype-bean-in-spring.md","hash":"178ea32184f6e69a7b5a438bdb8e0fe0d27ef106","modified":1564150385873},{"_id":"source/_posts/java-amount-calculation.md","hash":"3ba54a4995eb146a2a8ebe1414c03d4bb936a937","modified":1571490070548},{"_id":"source/_posts/java-amount-calculation-2.md","hash":"53fbc440af448a89a0ce1d33a780c5f1ad87b60a","modified":1571490070548},{"_id":"source/_posts/learn-FP-2.md","hash":"fe8096f2724d264619de835ced17c1973e04c465","modified":1571665815302},{"_id":"source/_posts/learn-FP.md","hash":"566e8a4b84e538d00f80cda9e68aca70cae0cb65","modified":1571564924075},{"_id":"source/_posts/javascript-setCookie-path.md","hash":"aec1d8c3f8b459e1b2e0ad77aae4cc9c9e078f7c","modified":1562984990580},{"_id":"source/_posts/mybatis-level-2-cache-global-i.md","hash":"74154a619edc456be8e726bc1e732c10b46b42e2","modified":1571490070548},{"_id":"source/_posts/hexo博客多环境同步使用.md","hash":"60d72e2369189dcc28ecf0f8bc821a251dfad5c3","modified":1556763834949},{"_id":"source/_posts/mysql-batch-insert-1.md","hash":"296ea48c1a3af8889c688f59910be35da5f5275d","modified":1566985027908},{"_id":"source/_posts/mysql-redis-diff-in-my-eyes.md","hash":"19d4888f9d8bdc4cba69bf46d85da2ea960c808b","modified":1565842549711},{"_id":"source/_posts/one-day-i-lost-all-my-Memory-but-i-just-laugh-at-last.md","hash":"503d3a898ca36b1840bd4f4bb334f261d73121fb","modified":1566659351185},{"_id":"source/_posts/pages-hexo-accelerate.md","hash":"5c7bd508e54e0ae51c04aa225ab26614442501b8","modified":1571490070548},{"_id":"source/_posts/mysql-pagination-optimization-1.md","hash":"60f68732a03672d7623718e2200a657cb6d74368","modified":1567047773138},{"_id":"source/_posts/ubuntu18-04安装mysql8-0-16-Community.md","hash":"11052b88848800cb980b03b4ab4567f43111ebeb","modified":1571490070548},{"_id":"source/_posts/use-gitalk-in-hexo-by-script.md","hash":"cdcee86791ab0bd01966f9201ea2d34b381f0624","modified":1571490070552},{"_id":"source/_posts/ubuntu18-04配置shadowsocks客户端.md","hash":"33bb14c1afcaefffc200863c9c51e9a3aed7f716","modified":1571490070552},{"_id":"source/_posts/人性的混乱.md","hash":"1be5559cce59c6a735f1c608401e4940f7f52f29","modified":1559183033651},{"_id":"source/_posts/what-is-cloud-service-1.md","hash":"03e961815d0e8e3ed1913d4437ff2c2bad10bda4","modified":1563078771937},{"_id":"source/_posts/java-memory-error-solution-Theoretically.md","hash":"16bb93474442a21197e2e465633b459fbee457b7","modified":1571490070548},{"_id":"source/_posts/使用JavaSeurity进行数字签名-二.md","hash":"1d4097c855fee238fc0da829bf127420f5d02c20","modified":1571490070552},{"_id":"source/_posts/使用JavaSeurity进行数字签名-一.md","hash":"d28b4266bbb14b4b295fb8ceeb43af825e0bac0a","modified":1571490070552},{"_id":"source/_posts/修复ubuntu18-04-Wi-Fi-adapter-not-found.md","hash":"9a44a63a5d0a818e0ff3cd1477b85454622a03fa","modified":1571490070556},{"_id":"source/_posts/大学的日子-一.md","hash":"71048fc9ee2ae72ac21c5b23930dc00001be50e5","modified":1556763834949},{"_id":"source/_posts/在我的双硬盘windows电脑上安装ubuntu18-04-Desktop-LTS.md","hash":"eba201a061e361ff715037588931a68cb464f24e","modified":1557152929544},{"_id":"source/_posts/大学的日子-二.md","hash":"c95f8ba7b4ddde91d0437b312750559c7a6c9e5f","modified":1556763834949},{"_id":"source/_posts/spring-boot-2-0-use-jedis.md","hash":"432d31dcefcbb01699de21307a4d6ccd73690e61","modified":1565843761718},{"_id":"source/_posts/我的恋爱文字冒险游戏答卷.md","hash":"2ea24050778557ccd4a687fe8dbc5a1ee2cec894","modified":1556763834949},{"_id":"source/_posts/并发编程中的原子性.md","hash":"d1330f8b7e24d4bec9dce0312657cca18f9f98e5","modified":1560263159658},{"_id":"source/_posts/自由软件许可证杂谈.md","hash":"ea79f91f97ad138fd2aea3f69d6027b6c6b83f63","modified":1556763834949},{"_id":"source/_posts/我的字符编码总结.md","hash":"f2481f91ff9527cc0ba04135d7bb9ec5145d4f9f","modified":1556763834949},{"_id":"source/categories/index.md","hash":"aab4b717fb7fec3b7dfb17fe36307b2927344561","modified":1556763834949},{"_id":"source/_posts/番茄工作法的有用论.md","hash":"0f49e86494e78b030d92ceb05cc3d17d9d4e879f","modified":1559730509255},{"_id":"source/_posts/踩坑的Bug总集.md","hash":"f1d1133b2120c8c2ef9acfa98cd44a4c6a7af265","modified":1556763834949},{"_id":"source/about/index.md","hash":"f8a4da2ef3255c21a4a08487ae2e392af0b535ad","modified":1556763834949},{"_id":"source/_posts/why-i-cannot-see-all-pics-in-pictures-panel-when-i-set-lock-screen.md","hash":"2b0ceed3687540fe18b5d9991f80c745b7d49555","modified":1566664674960},{"_id":"source/search/index.md","hash":"fd2a28c7c8f0c55b7664771aec2b6d7ea399e197","modified":1556763834949},{"_id":"source/resume/index.md","hash":"310a9e7b6dce350e9828fb402024bff2e9ba31d2","modified":1569381921419},{"_id":"source/tags/index.md","hash":"bd525fa3256799710d0ec661ebc7fdeef009efb4","modified":1556763834949},{"_id":"source/interview/index.md","hash":"8c8843156c7dd0d1fd8169d9eb9fb5d55b6d6a73","modified":1571490070568},{"_id":"themes/hexo-theme-cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1556763834949},{"_id":"source/whyLeaveLandi/index.md","hash":"bac662518bb75f29d15c579595e7ce53d59f91ea","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/zh-CN.yml","hash":"ca5582329d9721d58fe8504725108769080e9993","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/.DS_Store","hash":"3b7052f5f6fe23f8dde58a035a3df736174492dc","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/scripts/donation_register.js","hash":"3ffd69bfda1f6926a2f741994b4e6ace2b515294","modified":1571490070568},{"_id":"themes/hexo-theme-cactus/scripts/license_register.js","hash":"687f35f50db51c3effa99a70c5b26d2dc75a7184","modified":1571490070568},{"_id":"themes/hexo-theme-cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/page.ejs","hash":"9f293054956c1331fd5b1fc3d631d3d6cca4ece4","modified":1571490070568},{"_id":"themes/hexo-theme-cactus/scripts/gitalk_register.js","hash":"c03ec1f55a7d73f5efd918c355b55ac171c3bde4","modified":1570499171712},{"_id":"themes/hexo-theme-cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/CNAME","hash":"caffe4d914002a4f50e2764448d4e29c48e9a0e5","modified":1569732862861},{"_id":"themes/hexo-theme-cactus/source/.DS_Store","hash":"06b5fe8b6ccca6fafd2a7f9edccdbb05c0f50194","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/layout.ejs","hash":"b6e5653ea29956408d7e05d5bf8b3310979226da","modified":1571490070568},{"_id":"themes/hexo-theme-cactus/layout/_partial/.DS_Store","hash":"0af4458db0eb004a5a78c033931219532df46e65","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/footer.ejs","hash":"8bbd9f92b41d460de2f104bfd6c7b5a9c010b9fd","modified":1569739977646},{"_id":"themes/hexo-theme-cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/header.ejs","hash":"a2df112c3d773c76accf5d10ed7472088e10e9ea","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/scripts.ejs","hash":"7079032770323237569001abe428700db4f6d2af","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/layout/_partial/styles.ejs","hash":"edad36c8f89622478bbc6d387d7815efb1649e45","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/layout/_partial/head.ejs","hash":"1594a055045558a1d1a2c4c74c0ea4d6833d8ac5","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/source/css/.DS_Store","hash":"f175c0b73343e27f62de5643ec33ba6772df1999","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/images/.DS_Store","hash":"923520cf581c0ff7bfc82e0e550ea8370292371d","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/js/md5.min.js","hash":"d993aef965bea08c54c5bb7de1b7d2569154251c","modified":1569381921431},{"_id":"themes/hexo-theme-cactus/source/css/style.styl","hash":"2a75f526001b0f11740dcc1532c69448cddbe644","modified":1560238135017},{"_id":"themes/hexo-theme-cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/live2d/.DS_Store","hash":"0b81dc4066ac964fbd20a401306912c80bd86b02","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/lib/.DS_Store","hash":"dcfdb711c0e929e609ecea57a89ccb09d4808eea","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/parallax/parallax.min.js","hash":"0a7ac970f67b7fa08738a5be55233e9e741ad267","modified":1505039797000},{"_id":"themes/hexo-theme-cactus/source/live2d/waifu-tips.js","hash":"c3453a230e6ea961f84a32bf0d4bc2a33bcfba6f","modified":1559182093493},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxController.js","hash":"b01a6ad89e92bbf51a555e89182113ea678b8ecf","modified":1561138926632},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxCss.css","hash":"7a8de875d1bb5d8526852ca2f61e2443d28e3307","modified":1561146783236},{"_id":"themes/hexo-theme-cactus/source/live2d/waifu-tips.json","hash":"7f17487c75cb8e7ce383f1e6b18e8379b0fc8cd2","modified":1567818480060},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/actions_mobile.ejs","hash":"f04f12d3c40e0566251f9ba8201f7b631d2785c8","modified":1559181416124},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1559181049364},{"_id":"themes/hexo-theme-cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1556763834949},{"_id":"source/_posts/java-amount-caculation/BigInteger.java","hash":"046f1ae5b9ea9e2c168285c695bee3da17db4ef8","modified":1569485070533},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1556763834949},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/article.styl","hash":"7ff5b6a28dc3f2cd4ebfc4f5351054a18800bf96","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/pagination.styl","hash":"6f5f1f248fae229091537523114bc9477b0bd16a","modified":1559182364144},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/Java_Character_1.png","hash":"17daae42c6678ddd9f0a3ad6533a32e2837ed249","modified":1560598227523},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/dongfang.jpg","hash":"41ad5e2c5ebcc7fd67823e2d985835333db921e8","modified":1566657171873},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/lambda.png","hash":"c08da6c0d4a9ede789bcad382ee941217bd427c0","modified":1571661984132},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/blog_donation_zfb.png","hash":"bb18186b085afa47b55935d211e7bb9392da6cb2","modified":1569728012552},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/.DS_Store","hash":"16247f7786d424b3d6fb6b7ffeb3e59a49957b07","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/test.png","hash":"79c40c8c235ea73cff56ca88299225e2b24eed6d","modified":1569736981528},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/model.json","hash":"6ec2b9494b70e08417217a41f33f1900047e57e6","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/.DS_Store","hash":"7a6f14f0b39a2dfa5c22f325ad31441e5fd6fa50","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/model.json","hash":"1b2b2c255a575c769d7b6f3bf1335b1e6fd11248","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/live2d.js","hash":"86dcec89139bf72a8be0a17feaeca631721ffee7","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/parallax/parallaxBg.jpg","hash":"c1a2ed1aae1a850f992739a70de17f55d7171aef","modified":1561145248565},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/FunctionInterface_2.png","hash":"5a21c60bfd7a9984048c3d3d4d38c693f5d12d1c","modified":1571663421892},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/boot分区配好后截图.png","hash":"ef50a686c839a0d334626959d813b72c2453eab5","modified":1556763834969},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/huanghe.jpg","hash":"4edfb38fc491cf5125dd3a716e88b995785a2c2d","modified":1566269662693},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mysql_1.png","hash":"f2d29203b6552ffe28bca6cf1aca3bcea2efb2b7","modified":1560479071552},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/使用Rufus创造U盘启动盘.JPG","hash":"5b834722337e0b264454749d9145486716719e43","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/原子性_1.png","hash":"4b68853c2e8be2626b7606ff618767b8a83baf1e","modified":1560261620447},{"_id":"themes/hexo-theme-cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/live2d/html/live2d.html","hash":"de39ff9342e14f0c19726dfb9db5e1b8bcb65836","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/root分区home分区swap分区配好后.png","hash":"8e472303116639383c14e8dfe8c0feeed9b62d1a","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1556763834993},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/model.moc","hash":"0f883ea279bda9133028124003b11c7f3edf20bb","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/model.moc","hash":"ec4becdfb64a722a878aa69ed8429043402f7259","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/css/waifu.css","hash":"52b669e381afb2e8d20840498c9bfd611abc79a7","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/.DS_Store","hash":"9f596ed1cfd553fafffc5d6947e5de801b478d6f","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1556763834953},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/FunctionInterface_1.png","hash":"1cbf6f108b0eba08c24fdd693e94d0237b620a34","modified":1571663410888},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/MyIona.jpg","hash":"f26104636526e6dc4b6227449ed7ad7fb8bf4173","modified":1566283324856},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mybatis_level_2_global.png","hash":"d1fe27025be0f1970819c91229ebe4898951ed9f","modified":1564568175894},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/安装前磁盘分区情况.JPG","hash":"719a82315e44e31dbf2ae007065a0a206b317fed","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath1.mtn","hash":"e9fe2ad68ba66ae2cbf8d2f4662bae9b3144b1cc","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath2.mtn","hash":"1c1b35419e237327e5d6f7187b7738d2b853fa92","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath4.mtn","hash":"c291bd06b3b072fe22a790d3412358ec003e7aba","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath6.mtn","hash":"4394ca06d4791c76e4fa0c913e3bf0b08883c5e9","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath8.mtn","hash":"d2b8adfbcaf107f617cd9401cf7cbac266b921c7","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath7.mtn","hash":"1cfccb24f92a073e9f644caaa66d4f642695d873","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Fail.mtn","hash":"2282256817cf3df568dc99e0b26c78e02ed6aa69","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Breath9.mtn","hash":"e18ba38b62b417dcb3e2df7be15ccb9c487788d6","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Success.mtn","hash":"80bbe4a27282dfe30edf0944ddba314f8d1600ac","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sleeping.mtn","hash":"7cd4c2a961eab44f9cac8cf49de96850c5dbd20d","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei1.mtn","hash":"c48e9d14f9e040f93d0dbd2996be2986d319da70","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere3.mtn","hash":"e664a4d0dc4003bceb6c65e7df1ceecfb538da8c","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere5.mtn","hash":"2195fa2b5aabe06aa110730477e307cee88333ba","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere6.mtn","hash":"118498c1bad58056ac926d6533d6af68ca03f0f5","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch2.mtn","hash":"2c07642b2feb01472ea5381d9256e003703b1c40","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/WakeUp.mtn","hash":"99508a5176a2d1864fa1088f46b36d39eb9cd76c","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath1.mtn","hash":"8b9830960269c57540f235550b662bd8bb2eb9e7","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath2.mtn","hash":"2f1d687ac155865af6176d77e0ec6f4a4d29071b","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath6.mtn","hash":"222e9801e2394950398c4904897b5ad89244f429","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath7.mtn","hash":"cbab9298b360f3548e2365813ec0ed95ab111135","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath4.mtn","hash":"e046b214762c0cf59d41c5a794aa0f48ebbfadab","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Fail.mtn","hash":"ee758e7fc4f7080de4576b05ad685834c995ac47","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sleeping.mtn","hash":"14371217f96d56b7920c89e8336aa19d2dc1b457","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Breath8.mtn","hash":"366b357fb26bcc39ed3f6d397f280d0e6381be0c","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Success.mtn","hash":"fb2c6350010c0841598d645e354fb8f301e21593","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei1.mtn","hash":"7baa2802152d82bba7eb0edb31b0ddc054d85180","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere3.mtn","hash":"9f4f5ed6831fb262afbabc9536c87262fa10c471","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere5.mtn","hash":"340ee5d25c44de3d899e5d42e93a140207e820e2","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch Dere6.mtn","hash":"1dbc118605f33ec4e0e82dee60499d69ef07a741","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch2.mtn","hash":"b6c6c3022aae612d4f0ce7cd59f99db1f6241a43","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/motions/WakeUp.mtn","hash":"8778f42f1ce509ca2fc4a385db96a4976f44647e","modified":1556763834997},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/mybatis_level_2.png","hash":"0ffd9ae2db04e1785b7e7302deb505c55cb9d67a","modified":1564567329551},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1556763834973},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1556763834985},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1556763834989},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/jersey-costume-blue.png","hash":"55d7108d2da804ed87d61062a9182f86ba7d8ae1","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/pajamas-costume-green.png","hash":"0bf40e12faee07faff7d33c799404c6fc4c327ff","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/css/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1556763835013},{"_id":"themes/hexo-theme-cactus/source/live2d/Tia/textures/default-costume.png","hash":"cdd979265d0b854dd8679119d73c2eea30e0e37d","modified":1556763835009},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1556763834981},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/pajamas-costume.png","hash":"a0bf4a08335eeee7fb68a372c91d91372c8d08ec","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/school-costume.png","hash":"77f79821d879f5027c950de3adedf5b8fb4b2904","modified":1556763835005},{"_id":"themes/hexo-theme-cactus/source/live2d/Pio/textures/default-costume.png","hash":"badeb207fa62b28ae3b4cc8a3e9ad06d873f4808","modified":1556763835001},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1556763834977},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/IMG_20190430_200611.jpg","hash":"9ee7d234ffd3cd6d3f7e2efa8c4725b86bb22182","modified":1556763834961},{"_id":"themes/hexo-theme-cactus/source/images/tmpImage/IMG_20190430_200623.jpg","hash":"5e1cc79f485ea02fcc76f412ff7e0a8ecb67d503","modified":1556763834969},{"_id":"public/search.xml","hash":"6b9328602ffcf72ac543b0f0663741164206756d","modified":1571665822504},{"_id":"public/baidusitemap.xml","hash":"e2d393ad96cee0d7708a542f03cec92c585d0c15","modified":1571664808701},{"_id":"public/sitemap.xml","hash":"e5fb47d297b2b42b51bf8d960d7ceee31217461d","modified":1571665822526},{"_id":"public/categories/index.html","hash":"b2b962ea22bd61ec4541da11d69212fad1fccc13","modified":1571664808911},{"_id":"public/about/index.html","hash":"bc40d681f83a627a92b2efaaa05f5b2b33a29716","modified":1571664808914},{"_id":"public/search/index.html","hash":"f027acc8da8201c26db9e984e10369e714e34396","modified":1571664808916},{"_id":"public/tags/index.html","hash":"e902b3da7045fbfbd65c79a62712a4d9eba1bb9a","modified":1571664809085},{"_id":"public/FunctionalProgram_Reading_Notes/index.html","hash":"5a0455d1d9779679b62f8871fd070f48bc71a1a3","modified":1571664809136},{"_id":"public/2019/10/20/learn-FP/index.html","hash":"04ddc9668885b4768c4add613ce89d81db7763c7","modified":1571664809143},{"_id":"public/2019/10/21/learn-FP-2/index.html","hash":"ba6a086debda127e1772f732fd23a66e2775bcdb","modified":1571665823273},{"_id":"public/resume/index.html","hash":"855554e72f4cd944d06951a67af01d571d6ecca6","modified":1571664809474},{"_id":"public/whyLeaveLandi/index.html","hash":"8f003664c21e7dc2be5917a67b1e393a000a90df","modified":1571664809477},{"_id":"public/2019/09/27/java-amount-calculation-2/index.html","hash":"36c74b2120928f60764396f5da2ffea6f36c6e10","modified":1571664809802},{"_id":"public/2019/09/25/java-amount-calculation/index.html","hash":"c634bdd226d069afbdf18a652b55ecf844ab4b98","modified":1571664809896},{"_id":"public/2019/10/02/2019-Happy-National-Day/index.html","hash":"043f496d0a4d9d0fc3a1ff1f37b7e40f8668fcfd","modified":1571664809919},{"_id":"public/interview/index.html","hash":"625598b9c2915eb227444dd1def0797ba1764264","modified":1571664809919},{"_id":"public/2019/09/19/use-gitalk-in-hexo-by-script/index.html","hash":"38b7d8ad1ab2249838929e03fa6ed110e6143fbc","modified":1571664809933},{"_id":"public/2019/09/20/pages-hexo-accelerate/index.html","hash":"dcbbeaa9234107c90b56146cdecc9dd0056842a6","modified":1571664809933},{"_id":"public/2019/09/24/gitalk-issue-automatic-create/index.html","hash":"efe37bb7b02b344a3e95280ebd79f6d5dc311972","modified":1571664809933},{"_id":"public/2019/09/04/always-smail-but-not-always-happy/index.html","hash":"9f993db742826b3f0dea70652eb79d97ba8294b6","modified":1571664809933},{"_id":"public/2019/08/27/mysql-batch-insert-1/index.html","hash":"91bf359fc67ad3dc2f0c2c2f01ab6c3a8438bb92","modified":1571664809933},{"_id":"public/2019/08/25/why-i-cannot-see-all-pics-in-pictures-panel-when-i-set-lock-screen/index.html","hash":"ce4baccd7b71bfac5927ceede8ea05d03bcb4ee4","modified":1571664809933},{"_id":"public/2019/08/28/mysql-pagination-optimization-1/index.html","hash":"505731a718a50820e45db16e6efe5223b26589c3","modified":1571664809933},{"_id":"public/2019/08/24/one-day-i-lost-all-my-Memory-but-i-just-laugh-at-last/index.html","hash":"5131fc2db066f6bb6f7fe6cc43e42e709803ad3e","modified":1571664809933},{"_id":"public/2019/09/17/java-memory-error-solution-Theoretically/index.html","hash":"3bb997cfd8e9ce3708ff1b17a1710054bcd6601f","modified":1571664809933},{"_id":"public/2019/07/31/mybatis-level-2-cache-global-i/index.html","hash":"74fb8f2fb78fa6314d06445f7ff1b96993d38790","modified":1571664809933},{"_id":"public/2019/07/26/hot-to-use-runtime-param-to-init-a-prototype-bean-in-spring/index.html","hash":"2de50d76d1b072ccdc9a0cf508f15dd477258dc7","modified":1571664809934},{"_id":"public/2019/08/14/mysql-redis-diff-in-my-eyes/index.html","hash":"2f3967a9285f21e21e3a7b7db5c4135d6ec328cf","modified":1571664809934},{"_id":"public/2019/08/15/spring-boot-2-0-use-jedis/index.html","hash":"079ee7dc8682339a3583ab63d12c1e97952c77f0","modified":1571664809934},{"_id":"public/2019/07/13/javascript-setCookie-path/index.html","hash":"3cd3a9af3a4b1018ab1045aa40171485f3dbd1f9","modified":1571664809934},{"_id":"public/archives/index.html","hash":"f9d2ed2fddc5d62081173c68dc14780ae88fe3a5","modified":1571664809959},{"_id":"public/archives/page/2/index.html","hash":"50e779869aab7bb43138bdcd2056155ec4735bdd","modified":1571664809960},{"_id":"public/archives/page/4/index.html","hash":"681a89e08e08882e5a47f3c0df14d4ac35b3d8b1","modified":1571664809960},{"_id":"public/archives/2019/index.html","hash":"4712d66abd5ee1e0019b4be299b9ca4ef7a3fab5","modified":1571664809966},{"_id":"public/archives/2019/page/2/index.html","hash":"f02adb025c6c5a8e2d2881bb79636fba32f112ab","modified":1571664809968},{"_id":"public/archives/page/5/index.html","hash":"782486505bafd18684dce30c4be287bb1e71a1b2","modified":1571664809968},{"_id":"public/archives/page/3/index.html","hash":"0ecd3b28102bd743b3c1a9cf4ebb97f045d7bac4","modified":1571664809968},{"_id":"public/archives/2019/page/3/index.html","hash":"ab3633dc43c6f067637bae969deefc529046f7ef","modified":1571664809968},{"_id":"public/archives/2019/04/index.html","hash":"67bb7c0e78487a3bfd0a3c09d43258e489164970","modified":1571664809968},{"_id":"public/archives/2019/04/page/2/index.html","hash":"193a951e4bbd0abff7602625adf08f42929af8b7","modified":1571664809969},{"_id":"public/archives/2019/05/index.html","hash":"b4330dd583c6dd3f8465044d88bf357a6a19d17d","modified":1571664809969},{"_id":"public/archives/2019/page/4/index.html","hash":"9c2d46c69ecaf8e598723a333343db918cc73be3","modified":1571664809969},{"_id":"public/archives/2019/06/index.html","hash":"f9f7fbe8dbdb4fea1fdd6f73c7b121ed1d1d7808","modified":1571664809969},{"_id":"public/archives/2019/page/5/index.html","hash":"e09b3e0d77e649f1518ac5b6d1f1104c72bf5c72","modified":1571664809969},{"_id":"public/archives/2019/09/index.html","hash":"5056a636e507deaaba40bc4b67254c6d68a00425","modified":1571664809969},{"_id":"public/archives/2019/10/index.html","hash":"09be699342153ce756dbafe533b19416a29e0693","modified":1571664809969},{"_id":"public/categories/生活/index.html","hash":"ee19ce86cebe5dde6fcfac20f3876318144d661a","modified":1571664809969},{"_id":"public/categories/IT/index.html","hash":"eb9d5aebcaaa1973ec2530e7c2ca0637db806c33","modified":1571664809969},{"_id":"public/categories/IT/page/2/index.html","hash":"edaf65c29375eb46dddedf56bdfd13eae097db94","modified":1571664809969},{"_id":"public/archives/2019/07/index.html","hash":"023213b24f9eeb073d6246f7ed27fef3970edeaf","modified":1571664809969},{"_id":"public/archives/2019/08/index.html","hash":"89ac912ee9cbbec6c8113d337275fae7d9f34de9","modified":1571664809969},{"_id":"public/categories/计算机/index.html","hash":"ecdb6d3db06e53e2545ffa543c38eb845828f30f","modified":1571664809969},{"_id":"public/categories/游戏/index.html","hash":"f413ffd84f7bedf60f8d3c2fcc5561bb0ddc0d04","modified":1571664809969},{"_id":"public/index.html","hash":"c7667da9a370fab5b0cbc396542bfaed5e76ba93","modified":1571664809969},{"_id":"public/page/2/index.html","hash":"24caadbec0e8a6caee335b61ee5207fc8bd7ea81","modified":1571664809969},{"_id":"public/categories/IT/page/4/index.html","hash":"35887e0d2a3250c8563f65e15564d58d0db75f58","modified":1571664809969},{"_id":"public/page/3/index.html","hash":"a577ee8d375a157b49a913a596a35b34b05752ed","modified":1571664809969},{"_id":"public/page/5/index.html","hash":"5afca298d59950c2d5bdc23ab5161a20c1f36d4c","modified":1571664809969},{"_id":"public/tags/国庆/index.html","hash":"75434744bc4f27cdf6f0e50358b85fdda20f79f3","modified":1571664809969},{"_id":"public/page/4/index.html","hash":"229a389380cb0e7fee5847699491dcb2cff03c2d","modified":1571664809969},{"_id":"public/tags/随笔/index.html","hash":"8b1c93898daecea319a9ca55e4341c26a0f0dfc4","modified":1571664809969},{"_id":"public/tags/数据结构/index.html","hash":"a5f2703cab235405e2e1d3c04d4a98066b7eb1c1","modified":1571664809969},{"_id":"public/tags/编码/index.html","hash":"1d142c6c5b4b5ec908234750c3b732b25adc3865","modified":1571664809969},{"_id":"public/tags/Bugs/index.html","hash":"ecc1c9ffed0e996cbac49447c5bb0e96f4058f7a","modified":1571664809970},{"_id":"public/tags/Gitalk/index.html","hash":"31adea1e9b54790965764b7721d0037ad62652b5","modified":1571664809970},{"_id":"public/tags/跨域访问/index.html","hash":"a21d6f6a3b17257934e3615109462533102dc0a8","modified":1571664809970},{"_id":"public/tags/hexo/index.html","hash":"9c84ff29f2b6d00dca478acea7082ef36d4aa651","modified":1571664809970},{"_id":"public/tags/Java高精度计算/index.html","hash":"111b41b583e571541c5bf715dd5c43eceed0e945","modified":1571664809970},{"_id":"public/tags/FunctionalProgramming/index.html","hash":"3f32f5fb3643695c8aa2db5faf99e436bfc4a57c","modified":1571664809970},{"_id":"public/categories/IT/page/3/index.html","hash":"b0599ac613fc7e83b07b09a55f36e4c9d2f7cd9d","modified":1571664809970},{"_id":"public/tags/时区/index.html","hash":"553af16f39ab5db0fbac33b235659ff5552ce825","modified":1571664809970},{"_id":"public/tags/cookie/index.html","hash":"3f73eff0d897002a43216d01c67b58e94dd70660","modified":1571664809970},{"_id":"public/tags/redis/index.html","hash":"4bb2e579bd84913f79401f48b8fe8258f3b0e755","modified":1571664809970},{"_id":"public/tags/batchInsert/index.html","hash":"c6dfb6ab1def35d95014ba75931e71c3abed0010","modified":1571664809970},{"_id":"public/tags/Hexo魔改/index.html","hash":"430ada9b876b2021fca46c2708e1e7167c5bf36f","modified":1571664809970},{"_id":"public/tags/mysql/index.html","hash":"1a6e6886529a91c87cb857a404c94757681166e0","modified":1571664809970},{"_id":"public/tags/Proxy/index.html","hash":"fc04afb536c8d0e961e56a4e1059e29021f8cd4f","modified":1571664809970},{"_id":"public/tags/云服务/index.html","hash":"5462dc73c2ff2c7708231258507aa372f25a8a86","modified":1571664809970},{"_id":"public/tags/signature/index.html","hash":"bcef5f6cd6454186747838592176cd50967eff78","modified":1571664809970},{"_id":"public/tags/ubuntu/index.html","hash":"b5230e1308da7dc08045b55e5efe7dd4a226c571","modified":1571664809970},{"_id":"public/tags/回忆向/index.html","hash":"4d5b1905fa19e08ccaf2288681fa603385ffa2a4","modified":1571664809970},{"_id":"public/tags/java/index.html","hash":"2f457fafa7530754f89e6f4ef0cac2118a5fd764","modified":1571664809970},{"_id":"public/tags/JavaWeb/index.html","hash":"022d7af866e2b8324a24f055e6e004389e3c4408","modified":1571664809970},{"_id":"public/tags/JVM/index.html","hash":"b3c71eb075a6e3a7d99b06d5b8ca95956db6b097","modified":1571664809970},{"_id":"public/tags/数据库优化/index.html","hash":"59beac745b61fa37c96026152f3ce792eea6d070","modified":1571664809970},{"_id":"public/2019/07/12/database-timestamp-timezone-notice/index.html","hash":"00896122d0178d93eedef6043267504ee7ac1c62","modified":1571664809970},{"_id":"public/2019/06/30/CORS-question-and-curl-use-in-web-test/index.html","hash":"f22b08af5eff189df7c28aac7fd0f1ee4d547aca","modified":1571664809970},{"_id":"public/2019/07/14/what-is-cloud-service-1/index.html","hash":"e3cd0e96020d55851480bb7eccf27da8f5c0c593","modified":1571664809970},{"_id":"public/2019/06/15/Java的字符编码问题一语道破-GBK-UTF等常用编码/index.html","hash":"0d7169f0ab49c3db98f31175f19a5dba4686fb5f","modified":1571664809971},{"_id":"public/2019/06/24/JavaEncoded3/index.html","hash":"c8e0063f2e592a7745a940962abe49acb597e8b2","modified":1571664809971},{"_id":"public/2019/06/16/ToFather/index.html","hash":"98a5053873b76afa62ae6a96abc4a0a7446c4037","modified":1571664809971},{"_id":"public/2019/06/14/ubuntu18-04安装mysql8-0-16-Community/index.html","hash":"07a9851c0a818b61ff9d798a9edc84e03bdf022d","modified":1571664809971},{"_id":"public/2019/06/11/并发编程中的原子性/index.html","hash":"fc08e097d5e26fe71075d9bb0203f228d45e6586","modified":1571664809971},{"_id":"public/2019/06/11/JAVA堆排序/index.html","hash":"3828d812ba54f0f71cc576cce706ac3237fef512","modified":1571664809971},{"_id":"public/2019/06/08/git-push大文件报错解决/index.html","hash":"ecaa66ee9de9180421693a448f9e4a9239f6c543","modified":1571664809971},{"_id":"public/2019/06/05/番茄工作法的有用论/index.html","hash":"d45116c92e877ccd28c72f9e18eb910867b69075","modified":1571664809971},{"_id":"public/2019/05/01/修复ubuntu18-04-Wi-Fi-adapter-not-found/index.html","hash":"c05fcd25b90cdb23439ab751ecde2522780d36a7","modified":1571664809971},{"_id":"public/2019/04/30/在我的双硬盘windows电脑上安装ubuntu18-04-Desktop-LTS/index.html","hash":"377458ffd5b0176ddec12c92679d107a99516d3f","modified":1571664809971},{"_id":"public/2019/04/30/hexo博客多环境同步使用/index.html","hash":"778184cec26e01adb35742c88eae906573acab3f","modified":1571664809971},{"_id":"public/2019/04/25/hexo备份之路/index.html","hash":"39212194a712ade67c464ad34605bdeb8f8c7684","modified":1571664809971},{"_id":"public/2019/04/24/2019我的个人电脑机械硬盘问题引发的故事/index.html","hash":"1db8024c9cc331ac8062654e64da935f42524b76","modified":1571664809971},{"_id":"public/2019/04/24/使用JavaSeurity进行数字签名-二/index.html","hash":"8dc41b9d7c545ca890570759958bd6cafbef4556","modified":1571664809971},{"_id":"public/2019/04/24/使用JavaSeurity进行数字签名-一/index.html","hash":"6b9a2504947222853a6d24267acec793d7b98979","modified":1571664809971},{"_id":"public/2019/04/24/hexo-next主题自定义css格式切换/index.html","hash":"68631b4e066c06a86d34b080851a059b8902f1c3","modified":1571664809971},{"_id":"public/2019/04/24/2017俺の年终总结/index.html","hash":"4ee242c2a61d44747b912537c435ead9ead8eab6","modified":1571664809971},{"_id":"public/2019/04/24/大学的日子-二/index.html","hash":"35398957db56211dfdd2c26a3b555b72ffaf8a5b","modified":1571664809971},{"_id":"public/2019/04/24/踩坑的Bug总集/index.html","hash":"b299be6abedb8a180abbf86d1f9fa74ccf2b2b39","modified":1571664809971},{"_id":"public/2019/04/24/自由软件许可证杂谈/index.html","hash":"82b675d59865ce4e6767f21ae70b9e7ad9079d95","modified":1571664809971},{"_id":"public/2019/04/24/Servlet的总结/index.html","hash":"52a95c0e05a401a6a535a6773f74bf96cc8a053d","modified":1571664809971},{"_id":"public/2019/04/24/我的字符编码总结/index.html","hash":"50af5e515f72a845d088ceeac8976d3915742afc","modified":1571664809971},{"_id":"public/2019/04/24/我的恋爱文字冒险游戏答卷/index.html","hash":"a7c2b824bb4d22bd86def6b062ba3354c8f31c8c","modified":1571664809971},{"_id":"public/2019/04/24/大学的日子-一/index.html","hash":"ddfec86fc620c34f5d99b25f1abece7b3eb09368","modified":1571664809971},{"_id":"public/2019/05/29/人性的混乱/index.html","hash":"334edf5901485e7a6514aa002a704304c5757a88","modified":1571664809972},{"_id":"public/2019/05/02/hexo博客备份浅谈/index.html","hash":"df662c41ffe45de1109660e9e0324f9976c958bf","modified":1571664809972},{"_id":"public/2019/06/06/ubuntu18-04配置shadowsocks客户端/index.html","hash":"fbd2f1140d72e6ffaa3701c38f377c8e51909373","modified":1571664809972},{"_id":"public/tags/mybatis/index.html","hash":"b6d7f77e443b36e21e846e1c6ed9e7d911197873","modified":1571664809986},{"_id":"public/tags/hexo魔改/index.html","hash":"d74c68fe9d6a54e66695a2fc6bc4d022888a6867","modified":1571664809986},{"_id":"public/CNAME","hash":"caffe4d914002a4f50e2764448d4e29c48e9a0e5","modified":1571664809986},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1571664809986},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1571664809986},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1571664809986},{"_id":"public/images/tmpImage/Java_Character_1.png","hash":"17daae42c6678ddd9f0a3ad6533a32e2837ed249","modified":1571664809986},{"_id":"public/images/tmpImage/dongfang.jpg","hash":"41ad5e2c5ebcc7fd67823e2d985835333db921e8","modified":1571664809986},{"_id":"public/images/tmpImage/test.png","hash":"79c40c8c235ea73cff56ca88299225e2b24eed6d","modified":1571664809986},{"_id":"public/images/tmpImage/blog_donation_zfb.png","hash":"bb18186b085afa47b55935d211e7bb9392da6cb2","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1571664809986},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1571664809987},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1571664809987},{"_id":"public/images/tmpImage/lambda.png","hash":"c08da6c0d4a9ede789bcad382ee941217bd427c0","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1571664809987},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1571664809987},{"_id":"public/live2d/css/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath1.mtn","hash":"e9fe2ad68ba66ae2cbf8d2f4662bae9b3144b1cc","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath2.mtn","hash":"1c1b35419e237327e5d6f7187b7738d2b853fa92","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath4.mtn","hash":"c291bd06b3b072fe22a790d3412358ec003e7aba","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath6.mtn","hash":"4394ca06d4791c76e4fa0c913e3bf0b08883c5e9","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath8.mtn","hash":"d2b8adfbcaf107f617cd9401cf7cbac266b921c7","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath7.mtn","hash":"1cfccb24f92a073e9f644caaa66d4f642695d873","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Fail.mtn","hash":"2282256817cf3df568dc99e0b26c78e02ed6aa69","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Breath9.mtn","hash":"e18ba38b62b417dcb3e2df7be15ccb9c487788d6","modified":1571664809987},{"_id":"public/live2d/Tia/motions/Success.mtn","hash":"80bbe4a27282dfe30edf0944ddba314f8d1600ac","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Sleeping.mtn","hash":"7cd4c2a961eab44f9cac8cf49de96850c5dbd20d","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Sukebei1.mtn","hash":"c48e9d14f9e040f93d0dbd2996be2986d319da70","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere3.mtn","hash":"e664a4d0dc4003bceb6c65e7df1ceecfb538da8c","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere5.mtn","hash":"2195fa2b5aabe06aa110730477e307cee88333ba","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere6.mtn","hash":"118498c1bad58056ac926d6533d6af68ca03f0f5","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch2.mtn","hash":"2c07642b2feb01472ea5381d9256e003703b1c40","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1571664809988},{"_id":"public/live2d/Tia/motions/WakeUp.mtn","hash":"99508a5176a2d1864fa1088f46b36d39eb9cd76c","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1571664809988},{"_id":"public/live2d/Tia/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath Dere1.mtn","hash":"11f7cbf6068937965aeda4a3ebbce3fba58a0495","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath1.mtn","hash":"8b9830960269c57540f235550b662bd8bb2eb9e7","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath Dere2.mtn","hash":"b1b280ba08365d986a219f843601d478802c84af","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath3.mtn","hash":"848c2740a0b824a53c592c8052ce06453b1ca346","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath Dere3.mtn","hash":"421f00d9b263eb1ba5ae7744d3e36b874f3574cd","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath2.mtn","hash":"2f1d687ac155865af6176d77e0ec6f4a4d29071b","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath5.mtn","hash":"df45551eb085bd60ec0da2aa053bf50d362f8f98","modified":1571664809988},{"_id":"public/live2d/Pio/motions/Breath7.mtn","hash":"cbab9298b360f3548e2365813ec0ed95ab111135","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Breath6.mtn","hash":"222e9801e2394950398c4904897b5ad89244f429","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Breath4.mtn","hash":"e046b214762c0cf59d41c5a794aa0f48ebbfadab","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Fail.mtn","hash":"ee758e7fc4f7080de4576b05ad685834c995ac47","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Breath8.mtn","hash":"366b357fb26bcc39ed3f6d397f280d0e6381be0c","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Sleeping.mtn","hash":"14371217f96d56b7920c89e8336aa19d2dc1b457","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Success.mtn","hash":"fb2c6350010c0841598d645e354fb8f301e21593","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Sukebei1.mtn","hash":"7baa2802152d82bba7eb0edb31b0ddc054d85180","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Sukebei3.mtn","hash":"deb7994cc055443e6287b0e983351efa46129326","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Sukebei2.mtn","hash":"d684cbcc31e794dae0cecd6d940167ae372f946f","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere4.mtn","hash":"e556a3618d394848488b056561d7219b8dd6b086","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere1.mtn","hash":"408960c3b98c4d43c30e33cd3d8c34a24b96fdc5","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere3.mtn","hash":"9f4f5ed6831fb262afbabc9536c87262fa10c471","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere2.mtn","hash":"a6e1c2437d0280b59d9f937fca7e5957a0fbb9d2","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere5.mtn","hash":"340ee5d25c44de3d899e5d42e93a140207e820e2","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch Dere6.mtn","hash":"1dbc118605f33ec4e0e82dee60499d69ef07a741","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch1.mtn","hash":"9089e535269648f14d45edee01d108cd9c93fcf6","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch2.mtn","hash":"b6c6c3022aae612d4f0ce7cd59f99db1f6241a43","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch3.mtn","hash":"ccf97daf9208ea25865fc409bfdc713be31e41f7","modified":1571664809989},{"_id":"public/live2d/Pio/motions/Touch4.mtn","hash":"21925fa7aac4003a10a7cd46006cfa9b13374ff9","modified":1571664809990},{"_id":"public/live2d/Pio/motions/Touch6.mtn","hash":"3bb0a1a1fe5dc13146fb4347f3b408f496280898","modified":1571664809990},{"_id":"public/live2d/Pio/motions/Touch5.mtn","hash":"19bd0390dc69b28437a908373895dccf2bb8d7eb","modified":1571664809990},{"_id":"public/live2d/Pio/motions/WakeUp.mtn","hash":"8778f42f1ce509ca2fc4a385db96a4976f44647e","modified":1571664809990},{"_id":"public/live2d/css/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1571664809990},{"_id":"public/live2d/css/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1571664809990},{"_id":"public/images/tmpImage/boot分区配好后截图.png","hash":"ef50a686c839a0d334626959d813b72c2453eab5","modified":1571664811099},{"_id":"public/images/tmpImage/使用Rufus创造U盘启动盘.JPG","hash":"5b834722337e0b264454749d9145486716719e43","modified":1571664811100},{"_id":"public/images/tmpImage/huanghe.jpg","hash":"4edfb38fc491cf5125dd3a716e88b995785a2c2d","modified":1571664811100},{"_id":"public/images/tmpImage/原子性_1.png","hash":"4b68853c2e8be2626b7606ff618767b8a83baf1e","modified":1571664811100},{"_id":"public/images/tmpImage/mysql_1.png","hash":"f2d29203b6552ffe28bca6cf1aca3bcea2efb2b7","modified":1571664811101},{"_id":"public/images/tmpImage/root分区home分区swap分区配好后.png","hash":"8e472303116639383c14e8dfe8c0feeed9b62d1a","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1571664811101},{"_id":"public/live2d/Pio/model.moc","hash":"0f883ea279bda9133028124003b11c7f3edf20bb","modified":1571664811101},{"_id":"public/live2d/Tia/model.moc","hash":"ec4becdfb64a722a878aa69ed8429043402f7259","modified":1571664811101},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1571664811102},{"_id":"public/images/tmpImage/FunctionInterface_2.png","hash":"5a21c60bfd7a9984048c3d3d4d38c693f5d12d1c","modified":1571664811102},{"_id":"public/images/tmpImage/FunctionInterface_1.png","hash":"1cbf6f108b0eba08c24fdd693e94d0237b620a34","modified":1571664811102},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1571664811102},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1571664811102},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1571664811102},{"_id":"public/live2d/css/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1571664811102},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1571664811102},{"_id":"public/live2d/css/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1571664811102},{"_id":"public/live2d/css/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1571664811102},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1571664811106},{"_id":"public/js/md5.min.js","hash":"d993aef965bea08c54c5bb7de1b7d2569154251c","modified":1571664811106},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1571664811107},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1571664811107},{"_id":"public/live2d/waifu-tips.json","hash":"82ba64b27020a63c4859ff0b2a8b002f46819fda","modified":1571664811107},{"_id":"public/live2d/Tia/model.json","hash":"6ec2b9494b70e08417217a41f33f1900047e57e6","modified":1571664811107},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1571664811107},{"_id":"public/live2d/Pio/model.json","hash":"1b2b2c255a575c769d7b6f3bf1335b1e6fd11248","modified":1571664811107},{"_id":"public/parallax/parallaxController.js","hash":"b01a6ad89e92bbf51a555e89182113ea678b8ecf","modified":1571664811107},{"_id":"public/live2d/css/waifu.css","hash":"52b669e381afb2e8d20840498c9bfd611abc79a7","modified":1571664811107},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1571664811107},{"_id":"public/live2d/css/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1571664811107},{"_id":"public/live2d/html/live2d.html","hash":"8ec5d506be57ded1c25a47896a004e98ff35ebf6","modified":1571664811107},{"_id":"public/css/style.css","hash":"7c7b7821125c52e941281925f6711dbfefca0f9c","modified":1571664811107},{"_id":"public/parallax/parallaxBg.jpg","hash":"c1a2ed1aae1a850f992739a70de17f55d7171aef","modified":1571664811107},{"_id":"public/images/tmpImage/MyIona.jpg","hash":"f26104636526e6dc4b6227449ed7ad7fb8bf4173","modified":1571664811107},{"_id":"public/images/tmpImage/mybatis_level_2.png","hash":"0ffd9ae2db04e1785b7e7302deb505c55cb9d67a","modified":1571664811107},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1571664811107},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1571664811107},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1571664811107},{"_id":"public/live2d/css/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1571664811107},{"_id":"public/live2d/waifu-tips.js","hash":"c3453a230e6ea961f84a32bf0d4bc2a33bcfba6f","modified":1571664811113},{"_id":"public/images/tmpImage/安装前磁盘分区情况.JPG","hash":"719a82315e44e31dbf2ae007065a0a206b317fed","modified":1571664811113},{"_id":"public/images/tmpImage/mybatis_level_2_global.png","hash":"d1fe27025be0f1970819c91229ebe4898951ed9f","modified":1571664811113},{"_id":"public/images/tmpImage/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1571664811113},{"_id":"public/parallax/parallax.min.js","hash":"0a7ac970f67b7fa08738a5be55233e9e741ad267","modified":1571664811117},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1571664811117},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1571664811120},{"_id":"public/live2d/css/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1571664811122},{"_id":"public/live2d/css/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1571664811122},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1571664811134},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1571664811141},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1571664811141},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1571664811141},{"_id":"public/live2d/css/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1571664811142},{"_id":"public/live2d/Tia/textures/jersey-costume-blue.png","hash":"55d7108d2da804ed87d61062a9182f86ba7d8ae1","modified":1571664811143},{"_id":"public/parallax/parallaxCss.css","hash":"7a8de875d1bb5d8526852ca2f61e2443d28e3307","modified":1571664811146},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1571664811146},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1571664811146},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1571664811146},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1571664811147},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1571664811147},{"_id":"public/live2d/Tia/textures/pajamas-costume-green.png","hash":"0bf40e12faee07faff7d33c799404c6fc4c327ff","modified":1571664811148},{"_id":"public/live2d/Tia/textures/default-costume.png","hash":"cdd979265d0b854dd8679119d73c2eea30e0e37d","modified":1571664811148},{"_id":"public/live2d/Pio/textures/pajamas-costume.png","hash":"a0bf4a08335eeee7fb68a372c91d91372c8d08ec","modified":1571664811148},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1571664811150},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1571664811150},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1571664811150},{"_id":"public/live2d/Pio/textures/school-costume.png","hash":"77f79821d879f5027c950de3adedf5b8fb4b2904","modified":1571664811150},{"_id":"public/live2d/Pio/textures/default-costume.png","hash":"badeb207fa62b28ae3b4cc8a3e9ad06d873f4808","modified":1571664811152},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1571664811154},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1571664811156},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1571664811156},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1571664811156},{"_id":"public/live2d/live2d.js","hash":"86dcec89139bf72a8be0a17feaeca631721ffee7","modified":1571664811162},{"_id":"public/images/tmpImage/IMG_20190430_200611.jpg","hash":"9ee7d234ffd3cd6d3f7e2efa8c4725b86bb22182","modified":1571664811184},{"_id":"public/images/tmpImage/IMG_20190430_200623.jpg","hash":"5e1cc79f485ea02fcc76f412ff7e0a8ecb67d503","modified":1571664811188}],"Category":[{"name":"生活","_id":"ck20gn9sp0004m6elwkwxxa6q"},{"name":"IT","_id":"ck20gn9sv000cm6eluq3rvust"},{"name":"计算机","_id":"ck20gn9t50014m6elklio0sp0"},{"name":"游戏","_id":"ck20gn9uw0057m6elrk28w51b"}],"Data":[],"Page":[{"_content":"# 《函数式编程》Neal Ford著 笔记\n\n1. 使用完美数实现来演示FP的简洁，参数传递，函数复合的特点\n\n## 什么是 函数式编程&Stream\n\n函数式编程&Stream以参数传递和函数的复合作为主要的表现手段\n\nStream可以说就是为函数式编程而打造的武器，利用Stream的API我们可以写出非常简洁的FP代码\n\n## 为什么学习函数式编程&Stream\n\n1. 在函数式编程越来越高效(至少不像10多年前慢的让人失望)，它能节约开发者的时间和精力\n\n2. 将部分低层次代码细节的控制权转手出来，\n    - 比如简单的循环或者迭代代码，我们只需要关注每次循环迭代要做什么事情即可，而不需要自己去编写循环迭代的实现；\n    - Stream有些API可以让开发人员简单的利用并行化处理数据，这相当于将原先需要自己实现的多线程处理转手了出来，交给运行时去处理，让开发人员更少的关注线程管理。（但是并不是说开发人员不需要知道这底层的来龙去脉）\n\n3. 闭包特性，这个特性其实我们在java的匿名内部类的使用中就已经充分感受到了， 不过由于闭包是函数式编程必不可少的部分， 我也把它放出来提一下\n\n## 函数式编程&Stream中最常见的三大函数\n\n1. 筛选 filter\n\n2. 映射 map\n\n3. 折叠/化约 folder/reduce, 一般分从左或者从右折叠/化约\n\n## 递归\n\n尾递归优化，Erlang很可能有一些尾递归循环已经在生产系统运行了数年而从未中断\n\n## Stream相关\n\n1. Stream很多方面的行为都与集合相似，但它不像集合那样事先备妥了所有的值，而是需要的时候才让数据从源头“流”向目的地。\n\n2. Stream的各类操作比如map，filter，运行时会有优化，在保证正确性的情况下，就算你代码中先写map后再filter，运行时也许会先执行filter后执行map操作，这样可以减少操作数据的量，提高效率。\n\n## 缓存 记忆\n\n由于函数式编程宣扬的一个特点是编写纯函数，一种输入参数只有唯一一种输出，一一对应，所以这种特点非常契合缓存，我们可以在每次执行函数后缓存这一次执行的结果，在下一次又接收到该参数后直接从缓存中读取。\n\n有些支持函数式编程的语言，内嵌了“记忆”机制，类似mybatis的一级缓存，来加快函数下一次调用的速度，但是貌似Java并没有做这方面支持，需要开发人员额外做出一点努力。\n\n## 缓求值 lazy evaluation\n\n\n\n## 备注\n\n即使有了Java8的StreamAPI，他们仍然需要理解Fork/Join库的细节才能写出高性能的代码。 Fork/Join库是JDK7用于并行执行任务的一个框架","source":"FunctionalProgram_Reading_Notes/index.md","raw":"# 《函数式编程》Neal Ford著 笔记\n\n1. 使用完美数实现来演示FP的简洁，参数传递，函数复合的特点\n\n## 什么是 函数式编程&Stream\n\n函数式编程&Stream以参数传递和函数的复合作为主要的表现手段\n\nStream可以说就是为函数式编程而打造的武器，利用Stream的API我们可以写出非常简洁的FP代码\n\n## 为什么学习函数式编程&Stream\n\n1. 在函数式编程越来越高效(至少不像10多年前慢的让人失望)，它能节约开发者的时间和精力\n\n2. 将部分低层次代码细节的控制权转手出来，\n    - 比如简单的循环或者迭代代码，我们只需要关注每次循环迭代要做什么事情即可，而不需要自己去编写循环迭代的实现；\n    - Stream有些API可以让开发人员简单的利用并行化处理数据，这相当于将原先需要自己实现的多线程处理转手了出来，交给运行时去处理，让开发人员更少的关注线程管理。（但是并不是说开发人员不需要知道这底层的来龙去脉）\n\n3. 闭包特性，这个特性其实我们在java的匿名内部类的使用中就已经充分感受到了， 不过由于闭包是函数式编程必不可少的部分， 我也把它放出来提一下\n\n## 函数式编程&Stream中最常见的三大函数\n\n1. 筛选 filter\n\n2. 映射 map\n\n3. 折叠/化约 folder/reduce, 一般分从左或者从右折叠/化约\n\n## 递归\n\n尾递归优化，Erlang很可能有一些尾递归循环已经在生产系统运行了数年而从未中断\n\n## Stream相关\n\n1. Stream很多方面的行为都与集合相似，但它不像集合那样事先备妥了所有的值，而是需要的时候才让数据从源头“流”向目的地。\n\n2. Stream的各类操作比如map，filter，运行时会有优化，在保证正确性的情况下，就算你代码中先写map后再filter，运行时也许会先执行filter后执行map操作，这样可以减少操作数据的量，提高效率。\n\n## 缓存 记忆\n\n由于函数式编程宣扬的一个特点是编写纯函数，一种输入参数只有唯一一种输出，一一对应，所以这种特点非常契合缓存，我们可以在每次执行函数后缓存这一次执行的结果，在下一次又接收到该参数后直接从缓存中读取。\n\n有些支持函数式编程的语言，内嵌了“记忆”机制，类似mybatis的一级缓存，来加快函数下一次调用的速度，但是貌似Java并没有做这方面支持，需要开发人员额外做出一点努力。\n\n## 缓求值 lazy evaluation\n\n\n\n## 备注\n\n即使有了Java8的StreamAPI，他们仍然需要理解Fork/Join库的细节才能写出高性能的代码。 Fork/Join库是JDK7用于并行执行任务的一个框架","date":"2019-10-19T13:01:10.536Z","updated":"2019-10-19T13:01:10.536Z","path":"FunctionalProgram_Reading_Notes/index.html","title":"","comments":1,"layout":"page","_id":"ck20gn9si0000m6elvgm25048","content":"<h1 id=\"《函数式编程》Neal-Ford著-笔记\"><a href=\"#《函数式编程》Neal-Ford著-笔记\" class=\"headerlink\" title=\"《函数式编程》Neal Ford著 笔记\"></a>《函数式编程》Neal Ford著 笔记</h1><ol>\n<li>使用完美数实现来演示FP的简洁，参数传递，函数复合的特点</li>\n</ol>\n<h2 id=\"什么是-函数式编程-amp-Stream\"><a href=\"#什么是-函数式编程-amp-Stream\" class=\"headerlink\" title=\"什么是 函数式编程&amp;Stream\"></a>什么是 函数式编程&amp;Stream</h2><p>函数式编程&amp;Stream以参数传递和函数的复合作为主要的表现手段</p>\n<p>Stream可以说就是为函数式编程而打造的武器，利用Stream的API我们可以写出非常简洁的FP代码</p>\n<h2 id=\"为什么学习函数式编程-amp-Stream\"><a href=\"#为什么学习函数式编程-amp-Stream\" class=\"headerlink\" title=\"为什么学习函数式编程&amp;Stream\"></a>为什么学习函数式编程&amp;Stream</h2><ol>\n<li><p>在函数式编程越来越高效(至少不像10多年前慢的让人失望)，它能节约开发者的时间和精力</p>\n</li>\n<li><p>将部分低层次代码细节的控制权转手出来，</p>\n<ul>\n<li>比如简单的循环或者迭代代码，我们只需要关注每次循环迭代要做什么事情即可，而不需要自己去编写循环迭代的实现；</li>\n<li>Stream有些API可以让开发人员简单的利用并行化处理数据，这相当于将原先需要自己实现的多线程处理转手了出来，交给运行时去处理，让开发人员更少的关注线程管理。（但是并不是说开发人员不需要知道这底层的来龙去脉）</li>\n</ul>\n</li>\n<li><p>闭包特性，这个特性其实我们在java的匿名内部类的使用中就已经充分感受到了， 不过由于闭包是函数式编程必不可少的部分， 我也把它放出来提一下</p>\n</li>\n</ol>\n<h2 id=\"函数式编程-amp-Stream中最常见的三大函数\"><a href=\"#函数式编程-amp-Stream中最常见的三大函数\" class=\"headerlink\" title=\"函数式编程&amp;Stream中最常见的三大函数\"></a>函数式编程&amp;Stream中最常见的三大函数</h2><ol>\n<li><p>筛选 filter</p>\n</li>\n<li><p>映射 map</p>\n</li>\n<li><p>折叠/化约 folder/reduce, 一般分从左或者从右折叠/化约</p>\n</li>\n</ol>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>尾递归优化，Erlang很可能有一些尾递归循环已经在生产系统运行了数年而从未中断</p>\n<h2 id=\"Stream相关\"><a href=\"#Stream相关\" class=\"headerlink\" title=\"Stream相关\"></a>Stream相关</h2><ol>\n<li><p>Stream很多方面的行为都与集合相似，但它不像集合那样事先备妥了所有的值，而是需要的时候才让数据从源头“流”向目的地。</p>\n</li>\n<li><p>Stream的各类操作比如map，filter，运行时会有优化，在保证正确性的情况下，就算你代码中先写map后再filter，运行时也许会先执行filter后执行map操作，这样可以减少操作数据的量，提高效率。</p>\n</li>\n</ol>\n<h2 id=\"缓存-记忆\"><a href=\"#缓存-记忆\" class=\"headerlink\" title=\"缓存 记忆\"></a>缓存 记忆</h2><p>由于函数式编程宣扬的一个特点是编写纯函数，一种输入参数只有唯一一种输出，一一对应，所以这种特点非常契合缓存，我们可以在每次执行函数后缓存这一次执行的结果，在下一次又接收到该参数后直接从缓存中读取。</p>\n<p>有些支持函数式编程的语言，内嵌了“记忆”机制，类似mybatis的一级缓存，来加快函数下一次调用的速度，但是貌似Java并没有做这方面支持，需要开发人员额外做出一点努力。</p>\n<h2 id=\"缓求值-lazy-evaluation\"><a href=\"#缓求值-lazy-evaluation\" class=\"headerlink\" title=\"缓求值 lazy evaluation\"></a>缓求值 lazy evaluation</h2><h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>即使有了Java8的StreamAPI，他们仍然需要理解Fork/Join库的细节才能写出高性能的代码。 Fork/Join库是JDK7用于并行执行任务的一个框架</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"《函数式编程》Neal-Ford著-笔记\"><a href=\"#《函数式编程》Neal-Ford著-笔记\" class=\"headerlink\" title=\"《函数式编程》Neal Ford著 笔记\"></a>《函数式编程》Neal Ford著 笔记</h1><ol>\n<li>使用完美数实现来演示FP的简洁，参数传递，函数复合的特点</li>\n</ol>\n<h2 id=\"什么是-函数式编程-amp-Stream\"><a href=\"#什么是-函数式编程-amp-Stream\" class=\"headerlink\" title=\"什么是 函数式编程&amp;Stream\"></a>什么是 函数式编程&amp;Stream</h2><p>函数式编程&amp;Stream以参数传递和函数的复合作为主要的表现手段</p>\n<p>Stream可以说就是为函数式编程而打造的武器，利用Stream的API我们可以写出非常简洁的FP代码</p>\n<h2 id=\"为什么学习函数式编程-amp-Stream\"><a href=\"#为什么学习函数式编程-amp-Stream\" class=\"headerlink\" title=\"为什么学习函数式编程&amp;Stream\"></a>为什么学习函数式编程&amp;Stream</h2><ol>\n<li><p>在函数式编程越来越高效(至少不像10多年前慢的让人失望)，它能节约开发者的时间和精力</p>\n</li>\n<li><p>将部分低层次代码细节的控制权转手出来，</p>\n<ul>\n<li>比如简单的循环或者迭代代码，我们只需要关注每次循环迭代要做什么事情即可，而不需要自己去编写循环迭代的实现；</li>\n<li>Stream有些API可以让开发人员简单的利用并行化处理数据，这相当于将原先需要自己实现的多线程处理转手了出来，交给运行时去处理，让开发人员更少的关注线程管理。（但是并不是说开发人员不需要知道这底层的来龙去脉）</li>\n</ul>\n</li>\n<li><p>闭包特性，这个特性其实我们在java的匿名内部类的使用中就已经充分感受到了， 不过由于闭包是函数式编程必不可少的部分， 我也把它放出来提一下</p>\n</li>\n</ol>\n<h2 id=\"函数式编程-amp-Stream中最常见的三大函数\"><a href=\"#函数式编程-amp-Stream中最常见的三大函数\" class=\"headerlink\" title=\"函数式编程&amp;Stream中最常见的三大函数\"></a>函数式编程&amp;Stream中最常见的三大函数</h2><ol>\n<li><p>筛选 filter</p>\n</li>\n<li><p>映射 map</p>\n</li>\n<li><p>折叠/化约 folder/reduce, 一般分从左或者从右折叠/化约</p>\n</li>\n</ol>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>尾递归优化，Erlang很可能有一些尾递归循环已经在生产系统运行了数年而从未中断</p>\n<h2 id=\"Stream相关\"><a href=\"#Stream相关\" class=\"headerlink\" title=\"Stream相关\"></a>Stream相关</h2><ol>\n<li><p>Stream很多方面的行为都与集合相似，但它不像集合那样事先备妥了所有的值，而是需要的时候才让数据从源头“流”向目的地。</p>\n</li>\n<li><p>Stream的各类操作比如map，filter，运行时会有优化，在保证正确性的情况下，就算你代码中先写map后再filter，运行时也许会先执行filter后执行map操作，这样可以减少操作数据的量，提高效率。</p>\n</li>\n</ol>\n<h2 id=\"缓存-记忆\"><a href=\"#缓存-记忆\" class=\"headerlink\" title=\"缓存 记忆\"></a>缓存 记忆</h2><p>由于函数式编程宣扬的一个特点是编写纯函数，一种输入参数只有唯一一种输出，一一对应，所以这种特点非常契合缓存，我们可以在每次执行函数后缓存这一次执行的结果，在下一次又接收到该参数后直接从缓存中读取。</p>\n<p>有些支持函数式编程的语言，内嵌了“记忆”机制，类似mybatis的一级缓存，来加快函数下一次调用的速度，但是貌似Java并没有做这方面支持，需要开发人员额外做出一点努力。</p>\n<h2 id=\"缓求值-lazy-evaluation\"><a href=\"#缓求值-lazy-evaluation\" class=\"headerlink\" title=\"缓求值 lazy evaluation\"></a>缓求值 lazy evaluation</h2><h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>即使有了Java8的StreamAPI，他们仍然需要理解Fork/Join库的细节才能写出高性能的代码。 Fork/Join库是JDK7用于并行执行任务的一个框架</p>\n"},{"title":"categories","date":"2019-04-24T04:49:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-24 12:49:16\ntype: categories\n---\n","updated":"2019-05-02T02:23:54.949Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck20gn9sn0002m6elvg9oz85j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-04-24T04:46:21.000Z","_content":"\n## 网名\nzazalu，因大学时玩游戏觉得取名十分的麻烦，随后任意敲打了键盘后，屏幕上出现了zazalu的字样，觉得十分简单好记，遂用到今日(2019.04.24)\n\n## 来历\n浙江绍兴上虞人，高中就读于春晖中学，大学就读于西安电子科技大学，目前从事Java开发工作\n\n## 学习\n自小是一个朴实无华，死读书的人，学习能力中等，不讨厌学习，但是也不喜欢一直不停的学习。学习欲望从高中的强烈，到大学的低迷，最后再到工作期间的强烈。学习的内容，从高中的语文数学等，到大学的IT技术，最后到生活中的所有能学习的能化为我自身力量的知识。\n一直想自学日语，但因自控能力太差，休息时间全拿去娱乐，遂目前日语水平只停留在能听懂日常用语，看不懂日语。\n不拒绝除java以外的IT技术学习，其实有段时间很沉迷前端的vue.js\n\n## 计算机\n从小因经常看哥哥们玩电脑，自幼开始就对电脑有好感，小时候不怎么外出和小伙伴一起玩，而是经常宅在家里不停捣鼓windows电脑，高中时候就特别喜欢上计算机课，当时觉得课上教的东西对我来说非常简单。高中毕业后第一志愿填了西安电子科技大学的软件工程专业，从此开始了IT的学习道路。大学期间因自控能力较低，大一大二基本都过着娱乐为主的生活，大三开始专注学业，放弃了windows系统，转投了OS X，有效减少了我的游戏时间，毕业后总算混了口饭吃，也开始不断提升自我，直到今日\n\n## 目标\n最终目标是能够在杭州站稳脚步，IT行业特别是Java行业，渐进饱和，再由自己能力欠佳，没能进入鹅厂，阿里巴巴等大厂，目前对自己的未来存在较大的迷茫，不过唯有努力生活，才能笑到最后\n\n## 心态\n有一颗乐观向上的积极心态，觉得只是还活着就是一种快乐。喜欢名言\"留有青山在不怕没柴烧\"\n\n## 爱好\n是一个彻头彻底的ACG的爱好者，虽然没有狂热到买手办，买周边，也没有逛过漫展，但是提到ACG相关话题，我就非常健谈，也非常欢迎ACG爱好者加我QQ做个ACG同好网友\n也非常喜欢IT，IT就像一个我始终摸不透的女人，总有新问题难倒我，并且每次克服它的时候，总能感觉它是那么的美丽动人\n目前还是非常讨厌资产阶级，认为资产阶级是限制人类想象力的存在，但是也不否认没有资产阶级的推动是没有现在的发达社会的\n\n## 联系\n手机：18767578219\nQQ：451558654\n微博：自由之翼\nTwitter：zazalu\nEmail：hejiajun1432@gmail.com; 451558654@qq.com\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-24 12:46:21\n---\n\n## 网名\nzazalu，因大学时玩游戏觉得取名十分的麻烦，随后任意敲打了键盘后，屏幕上出现了zazalu的字样，觉得十分简单好记，遂用到今日(2019.04.24)\n\n## 来历\n浙江绍兴上虞人，高中就读于春晖中学，大学就读于西安电子科技大学，目前从事Java开发工作\n\n## 学习\n自小是一个朴实无华，死读书的人，学习能力中等，不讨厌学习，但是也不喜欢一直不停的学习。学习欲望从高中的强烈，到大学的低迷，最后再到工作期间的强烈。学习的内容，从高中的语文数学等，到大学的IT技术，最后到生活中的所有能学习的能化为我自身力量的知识。\n一直想自学日语，但因自控能力太差，休息时间全拿去娱乐，遂目前日语水平只停留在能听懂日常用语，看不懂日语。\n不拒绝除java以外的IT技术学习，其实有段时间很沉迷前端的vue.js\n\n## 计算机\n从小因经常看哥哥们玩电脑，自幼开始就对电脑有好感，小时候不怎么外出和小伙伴一起玩，而是经常宅在家里不停捣鼓windows电脑，高中时候就特别喜欢上计算机课，当时觉得课上教的东西对我来说非常简单。高中毕业后第一志愿填了西安电子科技大学的软件工程专业，从此开始了IT的学习道路。大学期间因自控能力较低，大一大二基本都过着娱乐为主的生活，大三开始专注学业，放弃了windows系统，转投了OS X，有效减少了我的游戏时间，毕业后总算混了口饭吃，也开始不断提升自我，直到今日\n\n## 目标\n最终目标是能够在杭州站稳脚步，IT行业特别是Java行业，渐进饱和，再由自己能力欠佳，没能进入鹅厂，阿里巴巴等大厂，目前对自己的未来存在较大的迷茫，不过唯有努力生活，才能笑到最后\n\n## 心态\n有一颗乐观向上的积极心态，觉得只是还活着就是一种快乐。喜欢名言\"留有青山在不怕没柴烧\"\n\n## 爱好\n是一个彻头彻底的ACG的爱好者，虽然没有狂热到买手办，买周边，也没有逛过漫展，但是提到ACG相关话题，我就非常健谈，也非常欢迎ACG爱好者加我QQ做个ACG同好网友\n也非常喜欢IT，IT就像一个我始终摸不透的女人，总有新问题难倒我，并且每次克服它的时候，总能感觉它是那么的美丽动人\n目前还是非常讨厌资产阶级，认为资产阶级是限制人类想象力的存在，但是也不否认没有资产阶级的推动是没有现在的发达社会的\n\n## 联系\n手机：18767578219\nQQ：451558654\n微博：自由之翼\nTwitter：zazalu\nEmail：hejiajun1432@gmail.com; 451558654@qq.com\n\n\n\n","updated":"2019-05-02T02:23:54.949Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck20gn9sq0006m6el8zx0wzc0","content":"<h2 id=\"网名\"><a href=\"#网名\" class=\"headerlink\" title=\"网名\"></a>网名</h2><p>zazalu，因大学时玩游戏觉得取名十分的麻烦，随后任意敲打了键盘后，屏幕上出现了zazalu的字样，觉得十分简单好记，遂用到今日(2019.04.24)</p>\n<h2 id=\"来历\"><a href=\"#来历\" class=\"headerlink\" title=\"来历\"></a>来历</h2><p>浙江绍兴上虞人，高中就读于春晖中学，大学就读于西安电子科技大学，目前从事Java开发工作</p>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><p>自小是一个朴实无华，死读书的人，学习能力中等，不讨厌学习，但是也不喜欢一直不停的学习。学习欲望从高中的强烈，到大学的低迷，最后再到工作期间的强烈。学习的内容，从高中的语文数学等，到大学的IT技术，最后到生活中的所有能学习的能化为我自身力量的知识。<br>一直想自学日语，但因自控能力太差，休息时间全拿去娱乐，遂目前日语水平只停留在能听懂日常用语，看不懂日语。<br>不拒绝除java以外的IT技术学习，其实有段时间很沉迷前端的vue.js</p>\n<h2 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h2><p>从小因经常看哥哥们玩电脑，自幼开始就对电脑有好感，小时候不怎么外出和小伙伴一起玩，而是经常宅在家里不停捣鼓windows电脑，高中时候就特别喜欢上计算机课，当时觉得课上教的东西对我来说非常简单。高中毕业后第一志愿填了西安电子科技大学的软件工程专业，从此开始了IT的学习道路。大学期间因自控能力较低，大一大二基本都过着娱乐为主的生活，大三开始专注学业，放弃了windows系统，转投了OS X，有效减少了我的游戏时间，毕业后总算混了口饭吃，也开始不断提升自我，直到今日</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>最终目标是能够在杭州站稳脚步，IT行业特别是Java行业，渐进饱和，再由自己能力欠佳，没能进入鹅厂，阿里巴巴等大厂，目前对自己的未来存在较大的迷茫，不过唯有努力生活，才能笑到最后</p>\n<h2 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h2><p>有一颗乐观向上的积极心态，觉得只是还活着就是一种快乐。喜欢名言”留有青山在不怕没柴烧”</p>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><p>是一个彻头彻底的ACG的爱好者，虽然没有狂热到买手办，买周边，也没有逛过漫展，但是提到ACG相关话题，我就非常健谈，也非常欢迎ACG爱好者加我QQ做个ACG同好网友<br>也非常喜欢IT，IT就像一个我始终摸不透的女人，总有新问题难倒我，并且每次克服它的时候，总能感觉它是那么的美丽动人<br>目前还是非常讨厌资产阶级，认为资产阶级是限制人类想象力的存在，但是也不否认没有资产阶级的推动是没有现在的发达社会的</p>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><p>手机：18767578219<br>QQ：451558654<br>微博：自由之翼<br>Twitter：zazalu<br>Email：<a href=\"mailto:hejiajun1432@gmail.com\" target=\"_blank\" rel=\"noopener\">hejiajun1432@gmail.com</a>; <a href=\"mailto:451558654@qq.com\" target=\"_blank\" rel=\"noopener\">451558654@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"网名\"><a href=\"#网名\" class=\"headerlink\" title=\"网名\"></a>网名</h2><p>zazalu，因大学时玩游戏觉得取名十分的麻烦，随后任意敲打了键盘后，屏幕上出现了zazalu的字样，觉得十分简单好记，遂用到今日(2019.04.24)</p>\n<h2 id=\"来历\"><a href=\"#来历\" class=\"headerlink\" title=\"来历\"></a>来历</h2><p>浙江绍兴上虞人，高中就读于春晖中学，大学就读于西安电子科技大学，目前从事Java开发工作</p>\n<h2 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h2><p>自小是一个朴实无华，死读书的人，学习能力中等，不讨厌学习，但是也不喜欢一直不停的学习。学习欲望从高中的强烈，到大学的低迷，最后再到工作期间的强烈。学习的内容，从高中的语文数学等，到大学的IT技术，最后到生活中的所有能学习的能化为我自身力量的知识。<br>一直想自学日语，但因自控能力太差，休息时间全拿去娱乐，遂目前日语水平只停留在能听懂日常用语，看不懂日语。<br>不拒绝除java以外的IT技术学习，其实有段时间很沉迷前端的vue.js</p>\n<h2 id=\"计算机\"><a href=\"#计算机\" class=\"headerlink\" title=\"计算机\"></a>计算机</h2><p>从小因经常看哥哥们玩电脑，自幼开始就对电脑有好感，小时候不怎么外出和小伙伴一起玩，而是经常宅在家里不停捣鼓windows电脑，高中时候就特别喜欢上计算机课，当时觉得课上教的东西对我来说非常简单。高中毕业后第一志愿填了西安电子科技大学的软件工程专业，从此开始了IT的学习道路。大学期间因自控能力较低，大一大二基本都过着娱乐为主的生活，大三开始专注学业，放弃了windows系统，转投了OS X，有效减少了我的游戏时间，毕业后总算混了口饭吃，也开始不断提升自我，直到今日</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>最终目标是能够在杭州站稳脚步，IT行业特别是Java行业，渐进饱和，再由自己能力欠佳，没能进入鹅厂，阿里巴巴等大厂，目前对自己的未来存在较大的迷茫，不过唯有努力生活，才能笑到最后</p>\n<h2 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h2><p>有一颗乐观向上的积极心态，觉得只是还活着就是一种快乐。喜欢名言”留有青山在不怕没柴烧”</p>\n<h2 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h2><p>是一个彻头彻底的ACG的爱好者，虽然没有狂热到买手办，买周边，也没有逛过漫展，但是提到ACG相关话题，我就非常健谈，也非常欢迎ACG爱好者加我QQ做个ACG同好网友<br>也非常喜欢IT，IT就像一个我始终摸不透的女人，总有新问题难倒我，并且每次克服它的时候，总能感觉它是那么的美丽动人<br>目前还是非常讨厌资产阶级，认为资产阶级是限制人类想象力的存在，但是也不否认没有资产阶级的推动是没有现在的发达社会的</p>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><p>手机：18767578219<br>QQ：451558654<br>微博：自由之翼<br>Twitter：zazalu<br>Email：<a href=\"mailto:hejiajun1432@gmail.com\" target=\"_blank\" rel=\"noopener\">hejiajun1432@gmail.com</a>; <a href=\"mailto:451558654@qq.com\" target=\"_blank\" rel=\"noopener\">451558654@qq.com</a></p>\n"},{"title":"search","date":"2019-04-24T04:43:45.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2019-04-24 12:43:45\ntype: search\n---\n","updated":"2019-05-02T02:23:54.949Z","path":"search/index.html","comments":1,"layout":"page","_id":"ck20gn9ss0008m6el5wxzgqrq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-24T04:47:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-24 12:47:00\ntype: \"tags\"\n---\n","updated":"2019-05-02T02:23:54.949Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck20gn9st000am6el7gemlcrd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"resume","date":"2019-08-19T04:46:21.000Z","_content":"\n>个人信息\n\n何镓钧\n\n浙江绍兴上虞人, 毕业于西安电子科技大学软件学院\n\n曾就职于福建联迪商用设备有限公司, 担任java系统软件开发工作\n\n手机：18767578219\nQQ：451558654\n微博：自由之翼\nEmail：hejiajun1432@gmail.com; 451558654@qq.com\nGitHub: https://github.com/zazaluMonster\n\n生为IT魂, 死为IT骨\n\n> 项目一览\n\n### 银行商户收单系统和一码付后台管理系统\n\n#### 项目概述\n\n1. 为黄河银行提供一码付聚合支付平台，包括了扫卡支付，微信支付，支付宝支付，银联一闪付\n\n2. 为黄河银行提供一码付聚合支付平台的资金清算业务, 包括对账，清算，入账(T+1)系统\n\n3. 为黄河银行提供一码付聚合支付平台的面向行内员工和面向商户的两套管理系统\n\n#### 项目网络拓扑图\n\n[查看大图](https://zazalu.space/images/tmpImage/huanghe.jpg)\n\n<img src=\"/images/tmpImage/huanghe.jpg\">\n\n#### 我负责的内容\n\n1. 功能开发与维护\n      后端：\n      -商户申请，商户审核(多级审核机制), 机构管理, 行内用户管理 \n      -手续费管理, POS出入库管理, 码牌管理\n      -资金对账清算入账系统(T+1)\n      -移动端APP接口开发, 对接文档编写\n      -根据银行提的数据修改单，编写过sql脚本来修改相关数据，比如机构撤并\n      前端：\n      -整合银行密码控件\n      -优化旧版本的扫码支付页面(利用VUE.js)\n      -各类JSP页面根据新需求进行调配修改，有效提高了页面可理解性，使得操作员更容易上手\n2.  担任银行驻场现场技术支持\n      -管理部署测试环境, 配合银行测试人员提供后台支持, 灵活开发,比如配合银行核心的资金划拨进行联调测试\n      -负责排查生产环境的问题并及时解决, 比如排查不同层级员工查看同一商户显示内容不一致等问题\n      -负责审查新需求和改动的需求, 把控需求不会走偏超出项目需求书的范围\n\n### 一个SpringBoot+Vue的简易微博系统\n\n#### 项目概述\n\n一个拥有注册/登录, 会话管理, 发博, 转发, 评论, 点赞及在线聊天的微博系统\n\ngithub地址: https://github.com/zazaluMonster/MyIona\n\n在线地址(目前已失效): http://47.111.146.215:8080/MyIona/\n\n#### 项目技术说明\n\n1. 使用SpringBoot2搭建后台Server\n2. 使用Vue2搭建前端用户界面\n3. 使用Websocet实现实时性高的功能，比如在线聊天\n4. 使用Redis存储临时数据，用户session，利用incr的原子性操作，计算点赞数\n5. 使用MySQL数据库\n\n#### 项目网络拓扑图\n\n[查看大图](https://zazalu.space/images/tmpImage/MyIona.jpg)\n\n<img src=\"/images/tmpImage/MyIona.jpg\">\n\n\n> 经历一览\n\n### 福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12\n\n1. 公司现有系统和工具库的优化维护, 添加新工具等\n2. 银行一码付收单系统的开发和维护, 银行驻场开发\n3. 获得过公司内部的优秀新人奖, 说明具备了一定的责任心, 较强沟通能力, 能主动工作, 学习和适应能力强\n\n### 个人私活项目组 2019-01 - 2019-03\n\n原公司离职前就受前领导邀请，为他的个人项目组工作, 是一个接私活的小团队. 项目架构几乎和前公司一致, 业务也类似, 做了2个月后, 由于家庭原因, 家长要求还是回浙江,不想在外头,故离开了\n\n### 日本旅游 2019-03 - 2019-04\n进行了一次日本旅游, 算是圆了大学时候的愿望, 让我有了更广的见识和经历\n\n### 自我充电 2019-05 - 至今\n由于之前的公司项目技术比较老旧, 不太符合现在的招聘要求, 所以为了不被面试官怼的太惨, 我进行了一段时间的自我充电, 这段时间主要输出项目有\n\n1. 我的个人电脑的shell工具, 用于提高我在ubuntu上做软件开发的效率, [sys-info-manager](https://github.com/zazaluMonster/terminal_costomizi_sh)\n\n2. 纯JavaSE实现的Java网络爬虫应用, 组件式, 可以通过替换组件来实现不同的爬虫效果, [MySpider](https://github.com/zazaluMonster/MySpider)\n\n3. 使用SpringMvc为爬虫应用做了Web应用,方便查看, [MyBelfast](https://github.com/zazaluMonster/MyBelfast) \n\n4. SpringBoot+Vue的简易微博系统, [MyIona](https://github.com/zazaluMonster/MyIona)\n\n\n> 技术一览\n\n技术 | 使用频率\n--- | ---\nJava|常用\nJavaScript|常用\nLinux-Shell-bash|常用\nMysql|常用\nMaven|常用\nGit|常用\nVue|熟悉\nSpring相关|熟悉\nMyBatis(-Plus)|熟悉\nOracle|会\nRedis|会\nNginx|会","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2019-08-19 12:46:21\n---\n\n>个人信息\n\n何镓钧\n\n浙江绍兴上虞人, 毕业于西安电子科技大学软件学院\n\n曾就职于福建联迪商用设备有限公司, 担任java系统软件开发工作\n\n手机：18767578219\nQQ：451558654\n微博：自由之翼\nEmail：hejiajun1432@gmail.com; 451558654@qq.com\nGitHub: https://github.com/zazaluMonster\n\n生为IT魂, 死为IT骨\n\n> 项目一览\n\n### 银行商户收单系统和一码付后台管理系统\n\n#### 项目概述\n\n1. 为黄河银行提供一码付聚合支付平台，包括了扫卡支付，微信支付，支付宝支付，银联一闪付\n\n2. 为黄河银行提供一码付聚合支付平台的资金清算业务, 包括对账，清算，入账(T+1)系统\n\n3. 为黄河银行提供一码付聚合支付平台的面向行内员工和面向商户的两套管理系统\n\n#### 项目网络拓扑图\n\n[查看大图](https://zazalu.space/images/tmpImage/huanghe.jpg)\n\n<img src=\"/images/tmpImage/huanghe.jpg\">\n\n#### 我负责的内容\n\n1. 功能开发与维护\n      后端：\n      -商户申请，商户审核(多级审核机制), 机构管理, 行内用户管理 \n      -手续费管理, POS出入库管理, 码牌管理\n      -资金对账清算入账系统(T+1)\n      -移动端APP接口开发, 对接文档编写\n      -根据银行提的数据修改单，编写过sql脚本来修改相关数据，比如机构撤并\n      前端：\n      -整合银行密码控件\n      -优化旧版本的扫码支付页面(利用VUE.js)\n      -各类JSP页面根据新需求进行调配修改，有效提高了页面可理解性，使得操作员更容易上手\n2.  担任银行驻场现场技术支持\n      -管理部署测试环境, 配合银行测试人员提供后台支持, 灵活开发,比如配合银行核心的资金划拨进行联调测试\n      -负责排查生产环境的问题并及时解决, 比如排查不同层级员工查看同一商户显示内容不一致等问题\n      -负责审查新需求和改动的需求, 把控需求不会走偏超出项目需求书的范围\n\n### 一个SpringBoot+Vue的简易微博系统\n\n#### 项目概述\n\n一个拥有注册/登录, 会话管理, 发博, 转发, 评论, 点赞及在线聊天的微博系统\n\ngithub地址: https://github.com/zazaluMonster/MyIona\n\n在线地址(目前已失效): http://47.111.146.215:8080/MyIona/\n\n#### 项目技术说明\n\n1. 使用SpringBoot2搭建后台Server\n2. 使用Vue2搭建前端用户界面\n3. 使用Websocet实现实时性高的功能，比如在线聊天\n4. 使用Redis存储临时数据，用户session，利用incr的原子性操作，计算点赞数\n5. 使用MySQL数据库\n\n#### 项目网络拓扑图\n\n[查看大图](https://zazalu.space/images/tmpImage/MyIona.jpg)\n\n<img src=\"/images/tmpImage/MyIona.jpg\">\n\n\n> 经历一览\n\n### 福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12\n\n1. 公司现有系统和工具库的优化维护, 添加新工具等\n2. 银行一码付收单系统的开发和维护, 银行驻场开发\n3. 获得过公司内部的优秀新人奖, 说明具备了一定的责任心, 较强沟通能力, 能主动工作, 学习和适应能力强\n\n### 个人私活项目组 2019-01 - 2019-03\n\n原公司离职前就受前领导邀请，为他的个人项目组工作, 是一个接私活的小团队. 项目架构几乎和前公司一致, 业务也类似, 做了2个月后, 由于家庭原因, 家长要求还是回浙江,不想在外头,故离开了\n\n### 日本旅游 2019-03 - 2019-04\n进行了一次日本旅游, 算是圆了大学时候的愿望, 让我有了更广的见识和经历\n\n### 自我充电 2019-05 - 至今\n由于之前的公司项目技术比较老旧, 不太符合现在的招聘要求, 所以为了不被面试官怼的太惨, 我进行了一段时间的自我充电, 这段时间主要输出项目有\n\n1. 我的个人电脑的shell工具, 用于提高我在ubuntu上做软件开发的效率, [sys-info-manager](https://github.com/zazaluMonster/terminal_costomizi_sh)\n\n2. 纯JavaSE实现的Java网络爬虫应用, 组件式, 可以通过替换组件来实现不同的爬虫效果, [MySpider](https://github.com/zazaluMonster/MySpider)\n\n3. 使用SpringMvc为爬虫应用做了Web应用,方便查看, [MyBelfast](https://github.com/zazaluMonster/MyBelfast) \n\n4. SpringBoot+Vue的简易微博系统, [MyIona](https://github.com/zazaluMonster/MyIona)\n\n\n> 技术一览\n\n技术 | 使用频率\n--- | ---\nJava|常用\nJavaScript|常用\nLinux-Shell-bash|常用\nMysql|常用\nMaven|常用\nGit|常用\nVue|熟悉\nSpring相关|熟悉\nMyBatis(-Plus)|熟悉\nOracle|会\nRedis|会\nNginx|会","updated":"2019-09-25T03:25:21.419Z","path":"resume/index.html","comments":1,"layout":"page","_id":"ck20gn9sw000fm6elcewogiqg","content":"<blockquote>\n<p>个人信息</p>\n</blockquote>\n<p>何镓钧</p>\n<p>浙江绍兴上虞人, 毕业于西安电子科技大学软件学院</p>\n<p>曾就职于福建联迪商用设备有限公司, 担任java系统软件开发工作</p>\n<p>手机：18767578219<br>QQ：451558654<br>微博：自由之翼<br>Email：<a href=\"mailto:hejiajun1432@gmail.com\" target=\"_blank\" rel=\"noopener\">hejiajun1432@gmail.com</a>; <a href=\"mailto:451558654@qq.com\" target=\"_blank\" rel=\"noopener\">451558654@qq.com</a><br>GitHub: <a href=\"https://github.com/zazaluMonster\" target=\"_blank\" rel=\"noopener\">https://github.com/zazaluMonster</a></p>\n<p>生为IT魂, 死为IT骨</p>\n<blockquote>\n<p>项目一览</p>\n</blockquote>\n<h3 id=\"银行商户收单系统和一码付后台管理系统\"><a href=\"#银行商户收单系统和一码付后台管理系统\" class=\"headerlink\" title=\"银行商户收单系统和一码付后台管理系统\"></a>银行商户收单系统和一码付后台管理系统</h3><h4 id=\"项目概述\"><a href=\"#项目概述\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h4><ol>\n<li><p>为黄河银行提供一码付聚合支付平台，包括了扫卡支付，微信支付，支付宝支付，银联一闪付</p>\n</li>\n<li><p>为黄河银行提供一码付聚合支付平台的资金清算业务, 包括对账，清算，入账(T+1)系统</p>\n</li>\n<li><p>为黄河银行提供一码付聚合支付平台的面向行内员工和面向商户的两套管理系统</p>\n</li>\n</ol>\n<h4 id=\"项目网络拓扑图\"><a href=\"#项目网络拓扑图\" class=\"headerlink\" title=\"项目网络拓扑图\"></a>项目网络拓扑图</h4><p><a href=\"https://zazalu.space/images/tmpImage/huanghe.jpg\">查看大图</a></p>\n<p><img src=\"/images/tmpImage/huanghe.jpg\"></p>\n<h4 id=\"我负责的内容\"><a href=\"#我负责的内容\" class=\"headerlink\" title=\"我负责的内容\"></a>我负责的内容</h4><ol>\n<li>功能开发与维护<br>   后端：<br>   -商户申请，商户审核(多级审核机制), 机构管理, 行内用户管理<br>   -手续费管理, POS出入库管理, 码牌管理<br>   -资金对账清算入账系统(T+1)<br>   -移动端APP接口开发, 对接文档编写<br>   -根据银行提的数据修改单，编写过sql脚本来修改相关数据，比如机构撤并<br>   前端：<br>   -整合银行密码控件<br>   -优化旧版本的扫码支付页面(利用VUE.js)<br>   -各类JSP页面根据新需求进行调配修改，有效提高了页面可理解性，使得操作员更容易上手</li>\n<li>担任银行驻场现场技术支持<br>  -管理部署测试环境, 配合银行测试人员提供后台支持, 灵活开发,比如配合银行核心的资金划拨进行联调测试<br>  -负责排查生产环境的问题并及时解决, 比如排查不同层级员工查看同一商户显示内容不一致等问题<br>  -负责审查新需求和改动的需求, 把控需求不会走偏超出项目需求书的范围</li>\n</ol>\n<h3 id=\"一个SpringBoot-Vue的简易微博系统\"><a href=\"#一个SpringBoot-Vue的简易微博系统\" class=\"headerlink\" title=\"一个SpringBoot+Vue的简易微博系统\"></a>一个SpringBoot+Vue的简易微博系统</h3><h4 id=\"项目概述-1\"><a href=\"#项目概述-1\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h4><p>一个拥有注册/登录, 会话管理, 发博, 转发, 评论, 点赞及在线聊天的微博系统</p>\n<p>github地址: <a href=\"https://github.com/zazaluMonster/MyIona\" target=\"_blank\" rel=\"noopener\">https://github.com/zazaluMonster/MyIona</a></p>\n<p>在线地址(目前已失效): <a href=\"http://47.111.146.215:8080/MyIona/\" target=\"_blank\" rel=\"noopener\">http://47.111.146.215:8080/MyIona/</a></p>\n<h4 id=\"项目技术说明\"><a href=\"#项目技术说明\" class=\"headerlink\" title=\"项目技术说明\"></a>项目技术说明</h4><ol>\n<li>使用SpringBoot2搭建后台Server</li>\n<li>使用Vue2搭建前端用户界面</li>\n<li>使用Websocet实现实时性高的功能，比如在线聊天</li>\n<li>使用Redis存储临时数据，用户session，利用incr的原子性操作，计算点赞数</li>\n<li>使用MySQL数据库</li>\n</ol>\n<h4 id=\"项目网络拓扑图-1\"><a href=\"#项目网络拓扑图-1\" class=\"headerlink\" title=\"项目网络拓扑图\"></a>项目网络拓扑图</h4><p><a href=\"https://zazalu.space/images/tmpImage/MyIona.jpg\">查看大图</a></p>\n<p><img src=\"/images/tmpImage/MyIona.jpg\"></p>\n<blockquote>\n<p>经历一览</p>\n</blockquote>\n<h3 id=\"福建联迪商用设备有限公司-系统软件开发-2017-07-2018-12\"><a href=\"#福建联迪商用设备有限公司-系统软件开发-2017-07-2018-12\" class=\"headerlink\" title=\"福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12\"></a>福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12</h3><ol>\n<li>公司现有系统和工具库的优化维护, 添加新工具等</li>\n<li>银行一码付收单系统的开发和维护, 银行驻场开发</li>\n<li>获得过公司内部的优秀新人奖, 说明具备了一定的责任心, 较强沟通能力, 能主动工作, 学习和适应能力强</li>\n</ol>\n<h3 id=\"个人私活项目组-2019-01-2019-03\"><a href=\"#个人私活项目组-2019-01-2019-03\" class=\"headerlink\" title=\"个人私活项目组 2019-01 - 2019-03\"></a>个人私活项目组 2019-01 - 2019-03</h3><p>原公司离职前就受前领导邀请，为他的个人项目组工作, 是一个接私活的小团队. 项目架构几乎和前公司一致, 业务也类似, 做了2个月后, 由于家庭原因, 家长要求还是回浙江,不想在外头,故离开了</p>\n<h3 id=\"日本旅游-2019-03-2019-04\"><a href=\"#日本旅游-2019-03-2019-04\" class=\"headerlink\" title=\"日本旅游 2019-03 - 2019-04\"></a>日本旅游 2019-03 - 2019-04</h3><p>进行了一次日本旅游, 算是圆了大学时候的愿望, 让我有了更广的见识和经历</p>\n<h3 id=\"自我充电-2019-05-至今\"><a href=\"#自我充电-2019-05-至今\" class=\"headerlink\" title=\"自我充电 2019-05 - 至今\"></a>自我充电 2019-05 - 至今</h3><p>由于之前的公司项目技术比较老旧, 不太符合现在的招聘要求, 所以为了不被面试官怼的太惨, 我进行了一段时间的自我充电, 这段时间主要输出项目有</p>\n<ol>\n<li><p>我的个人电脑的shell工具, 用于提高我在ubuntu上做软件开发的效率, <a href=\"https://github.com/zazaluMonster/terminal_costomizi_sh\" target=\"_blank\" rel=\"noopener\">sys-info-manager</a></p>\n</li>\n<li><p>纯JavaSE实现的Java网络爬虫应用, 组件式, 可以通过替换组件来实现不同的爬虫效果, <a href=\"https://github.com/zazaluMonster/MySpider\" target=\"_blank\" rel=\"noopener\">MySpider</a></p>\n</li>\n<li><p>使用SpringMvc为爬虫应用做了Web应用,方便查看, <a href=\"https://github.com/zazaluMonster/MyBelfast\" target=\"_blank\" rel=\"noopener\">MyBelfast</a> </p>\n</li>\n<li><p>SpringBoot+Vue的简易微博系统, <a href=\"https://github.com/zazaluMonster/MyIona\" target=\"_blank\" rel=\"noopener\">MyIona</a></p>\n</li>\n</ol>\n<blockquote>\n<p>技术一览</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>技术</th>\n<th>使用频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Linux-Shell-bash</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Mysql</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Maven</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Git</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Vue</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>Spring相关</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>MyBatis(-Plus)</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>会</td>\n</tr>\n<tr>\n<td>Redis</td>\n<td>会</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>会</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>个人信息</p>\n</blockquote>\n<p>何镓钧</p>\n<p>浙江绍兴上虞人, 毕业于西安电子科技大学软件学院</p>\n<p>曾就职于福建联迪商用设备有限公司, 担任java系统软件开发工作</p>\n<p>手机：18767578219<br>QQ：451558654<br>微博：自由之翼<br>Email：<a href=\"mailto:hejiajun1432@gmail.com\" target=\"_blank\" rel=\"noopener\">hejiajun1432@gmail.com</a>; <a href=\"mailto:451558654@qq.com\" target=\"_blank\" rel=\"noopener\">451558654@qq.com</a><br>GitHub: <a href=\"https://github.com/zazaluMonster\" target=\"_blank\" rel=\"noopener\">https://github.com/zazaluMonster</a></p>\n<p>生为IT魂, 死为IT骨</p>\n<blockquote>\n<p>项目一览</p>\n</blockquote>\n<h3 id=\"银行商户收单系统和一码付后台管理系统\"><a href=\"#银行商户收单系统和一码付后台管理系统\" class=\"headerlink\" title=\"银行商户收单系统和一码付后台管理系统\"></a>银行商户收单系统和一码付后台管理系统</h3><h4 id=\"项目概述\"><a href=\"#项目概述\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h4><ol>\n<li><p>为黄河银行提供一码付聚合支付平台，包括了扫卡支付，微信支付，支付宝支付，银联一闪付</p>\n</li>\n<li><p>为黄河银行提供一码付聚合支付平台的资金清算业务, 包括对账，清算，入账(T+1)系统</p>\n</li>\n<li><p>为黄河银行提供一码付聚合支付平台的面向行内员工和面向商户的两套管理系统</p>\n</li>\n</ol>\n<h4 id=\"项目网络拓扑图\"><a href=\"#项目网络拓扑图\" class=\"headerlink\" title=\"项目网络拓扑图\"></a>项目网络拓扑图</h4><p><a href=\"https://zazalu.space/images/tmpImage/huanghe.jpg\">查看大图</a></p>\n<p><img src=\"/images/tmpImage/huanghe.jpg\"></p>\n<h4 id=\"我负责的内容\"><a href=\"#我负责的内容\" class=\"headerlink\" title=\"我负责的内容\"></a>我负责的内容</h4><ol>\n<li>功能开发与维护<br>   后端：<br>   -商户申请，商户审核(多级审核机制), 机构管理, 行内用户管理<br>   -手续费管理, POS出入库管理, 码牌管理<br>   -资金对账清算入账系统(T+1)<br>   -移动端APP接口开发, 对接文档编写<br>   -根据银行提的数据修改单，编写过sql脚本来修改相关数据，比如机构撤并<br>   前端：<br>   -整合银行密码控件<br>   -优化旧版本的扫码支付页面(利用VUE.js)<br>   -各类JSP页面根据新需求进行调配修改，有效提高了页面可理解性，使得操作员更容易上手</li>\n<li>担任银行驻场现场技术支持<br>  -管理部署测试环境, 配合银行测试人员提供后台支持, 灵活开发,比如配合银行核心的资金划拨进行联调测试<br>  -负责排查生产环境的问题并及时解决, 比如排查不同层级员工查看同一商户显示内容不一致等问题<br>  -负责审查新需求和改动的需求, 把控需求不会走偏超出项目需求书的范围</li>\n</ol>\n<h3 id=\"一个SpringBoot-Vue的简易微博系统\"><a href=\"#一个SpringBoot-Vue的简易微博系统\" class=\"headerlink\" title=\"一个SpringBoot+Vue的简易微博系统\"></a>一个SpringBoot+Vue的简易微博系统</h3><h4 id=\"项目概述-1\"><a href=\"#项目概述-1\" class=\"headerlink\" title=\"项目概述\"></a>项目概述</h4><p>一个拥有注册/登录, 会话管理, 发博, 转发, 评论, 点赞及在线聊天的微博系统</p>\n<p>github地址: <a href=\"https://github.com/zazaluMonster/MyIona\" target=\"_blank\" rel=\"noopener\">https://github.com/zazaluMonster/MyIona</a></p>\n<p>在线地址(目前已失效): <a href=\"http://47.111.146.215:8080/MyIona/\" target=\"_blank\" rel=\"noopener\">http://47.111.146.215:8080/MyIona/</a></p>\n<h4 id=\"项目技术说明\"><a href=\"#项目技术说明\" class=\"headerlink\" title=\"项目技术说明\"></a>项目技术说明</h4><ol>\n<li>使用SpringBoot2搭建后台Server</li>\n<li>使用Vue2搭建前端用户界面</li>\n<li>使用Websocet实现实时性高的功能，比如在线聊天</li>\n<li>使用Redis存储临时数据，用户session，利用incr的原子性操作，计算点赞数</li>\n<li>使用MySQL数据库</li>\n</ol>\n<h4 id=\"项目网络拓扑图-1\"><a href=\"#项目网络拓扑图-1\" class=\"headerlink\" title=\"项目网络拓扑图\"></a>项目网络拓扑图</h4><p><a href=\"https://zazalu.space/images/tmpImage/MyIona.jpg\">查看大图</a></p>\n<p><img src=\"/images/tmpImage/MyIona.jpg\"></p>\n<blockquote>\n<p>经历一览</p>\n</blockquote>\n<h3 id=\"福建联迪商用设备有限公司-系统软件开发-2017-07-2018-12\"><a href=\"#福建联迪商用设备有限公司-系统软件开发-2017-07-2018-12\" class=\"headerlink\" title=\"福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12\"></a>福建联迪商用设备有限公司 系统软件开发 2017-07 - 2018-12</h3><ol>\n<li>公司现有系统和工具库的优化维护, 添加新工具等</li>\n<li>银行一码付收单系统的开发和维护, 银行驻场开发</li>\n<li>获得过公司内部的优秀新人奖, 说明具备了一定的责任心, 较强沟通能力, 能主动工作, 学习和适应能力强</li>\n</ol>\n<h3 id=\"个人私活项目组-2019-01-2019-03\"><a href=\"#个人私活项目组-2019-01-2019-03\" class=\"headerlink\" title=\"个人私活项目组 2019-01 - 2019-03\"></a>个人私活项目组 2019-01 - 2019-03</h3><p>原公司离职前就受前领导邀请，为他的个人项目组工作, 是一个接私活的小团队. 项目架构几乎和前公司一致, 业务也类似, 做了2个月后, 由于家庭原因, 家长要求还是回浙江,不想在外头,故离开了</p>\n<h3 id=\"日本旅游-2019-03-2019-04\"><a href=\"#日本旅游-2019-03-2019-04\" class=\"headerlink\" title=\"日本旅游 2019-03 - 2019-04\"></a>日本旅游 2019-03 - 2019-04</h3><p>进行了一次日本旅游, 算是圆了大学时候的愿望, 让我有了更广的见识和经历</p>\n<h3 id=\"自我充电-2019-05-至今\"><a href=\"#自我充电-2019-05-至今\" class=\"headerlink\" title=\"自我充电 2019-05 - 至今\"></a>自我充电 2019-05 - 至今</h3><p>由于之前的公司项目技术比较老旧, 不太符合现在的招聘要求, 所以为了不被面试官怼的太惨, 我进行了一段时间的自我充电, 这段时间主要输出项目有</p>\n<ol>\n<li><p>我的个人电脑的shell工具, 用于提高我在ubuntu上做软件开发的效率, <a href=\"https://github.com/zazaluMonster/terminal_costomizi_sh\" target=\"_blank\" rel=\"noopener\">sys-info-manager</a></p>\n</li>\n<li><p>纯JavaSE实现的Java网络爬虫应用, 组件式, 可以通过替换组件来实现不同的爬虫效果, <a href=\"https://github.com/zazaluMonster/MySpider\" target=\"_blank\" rel=\"noopener\">MySpider</a></p>\n</li>\n<li><p>使用SpringMvc为爬虫应用做了Web应用,方便查看, <a href=\"https://github.com/zazaluMonster/MyBelfast\" target=\"_blank\" rel=\"noopener\">MyBelfast</a> </p>\n</li>\n<li><p>SpringBoot+Vue的简易微博系统, <a href=\"https://github.com/zazaluMonster/MyIona\" target=\"_blank\" rel=\"noopener\">MyIona</a></p>\n</li>\n</ol>\n<blockquote>\n<p>技术一览</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>技术</th>\n<th>使用频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Linux-Shell-bash</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Mysql</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Maven</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Git</td>\n<td>常用</td>\n</tr>\n<tr>\n<td>Vue</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>Spring相关</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>MyBatis(-Plus)</td>\n<td>熟悉</td>\n</tr>\n<tr>\n<td>Oracle</td>\n<td>会</td>\n</tr>\n<tr>\n<td>Redis</td>\n<td>会</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>会</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"WhyLeaveLandi","date":"2019-08-19T04:46:21.000Z","_content":"\n# Why i leave landi company\n\n本文主题是聊聊我为什么离开联迪，因为很多面试官都常常问我这个问题，所以我自己写了一篇文章，一方面是纪念，另一方面是让自己再回答这个问题的时候，可以表现的更好，不会说到一半卡壳\n\n## what is landi\n\n联迪是我毕业后的第一家公司，也是我最有感情的一家公司。\n\n联迪是主打做POS的，在我做的办公室内，放眼望去，可以看到很多不同型号的POS机摆在桌子上。\n\n随着智能手机的出现，智能POS也紧跟其上，智能POS内置的是一个经过改造的Android系统，具备了一定的安全防控系统。\n\n由于智能POS的销量不断攀升，而智能POS本身支持运行的都是Android应用，所以自然而然公司拥有了大量Android程序员。\n\n每个Andorid程序员都会被分配一台A8POS，作为其日常开发的测试机使用。\n\n后来Z系列的出现，他们日常可以捣鼓的机子就又多了一台，而且由于Z系列面向的是收银，所以体型很大，使得Android程序员的桌子上显得异常拥挤\n\n---\n\n而我是公司的系统开发人员，你可以想象那么多智能POS，在他们上面运行的APP应用，如果没有后台支持，那么就无法正常运行。而我就是负责编写后台开发的程序员。\n\n除了做POS后台以外，我们部门还有做银医的，做聚合支付的，或者其他各式各样的平台系统的。每种系统都可以与POS相关联，不过说的更前沿一点，每种系统都与电子支付相关联。比如银医，他们做的系统主要是为医院的大型一体机服务的，他们做的也是网站，但是大部分时候需要克服网站在ie浏览器里能够正常运行的问题，因为医院的一体机绝大多数还比较落后，内部装的都是ie浏览器，没有火狐或者chrome等时代瞩目的浏览器。所以银医的小伙伴总是吐槽自己做的项目前端的技术太老旧，做的不舒心。 我当时也非常同意他们的观点，那时的我也是一个盲目追新的程序员，觉得老旧的系统就应该升级换代。随着时间的推移，以及我参与的项目变多，其实大部分老旧系统不升级也是有原因的，毕竟迭代需要时间，就算迭代完成，也需要进行测试人员进行完整的测试，才能保证具有生产能力。并且作为给医院做的系统来看，目前所能支持的技术已经可以满足市场需求，所以没有做升级的必要。\n\n不过虽然前端的技术比较老旧，但是后台还是和大部分项目一样，因为后台服务器依旧是linux，相比来看做升级的成本比前端的状态要好得多。 我记得当时银医的后台就用到了开源的webservice，而我所在部门还在使用自己编写的一套webservice。对于喜欢学习新技术的我来说，当时是有点不满意的。\n\n---\n\n说完了银医，再来说说我所在的部门，我所在的部门主要是做聚合支付的，所谓聚合支付是指一个可以聚合各类第三方支付的一种平台，其使用“一码付”来对外宣传这种平台的产品形态。一码的意思就是用户可以通过任何第三方支付软件扫描同一个二维码，完成扫码支付。它的核心技术是通过http协议的user-agent实现的。 因为每个第三方支付app，他们都有内置的定制浏览器，这些内置浏览器都会带有不同的user-agent标志。 聚合支付正是利用了这一点，每次扫描“一码付”的时候，通过判断不同的user-agent标志来实现对不同第三方支付发起支付请求，从而实现聚合支付，使得用户不需要担心自己扫错码(比如拿微信扫支付宝的码，从而扫不出来或者提示url让你复制后在浏览器里执行))\n\n我就职的时候，聚合支付平台的后台都是Java后台，框架使用的是Spring+Sturts2+Mybatis这一套，正向代理使用的是httpd(不知道为什么不用nginx)，反向代理使用的是nginx，数据库规定使用oracle10g还是11g来着，服务器一般使用的是red hat(和不同银行有关系)，Web容器使用的是Tomcat，webservice等等。\n\n>说说一次扫码的经过\n\n每个“一码付”的二维码的内置url的格式为`xxx/juhezhifu/{md5}`\n\n“一码付”内置的restful url，传统的结尾是一个码牌id，但是后续由于银行方认为不能向外透露明显的码牌id，所以改用了md5加密。每次扫描后都会请求到对应的Action中(一个判断MappingUrl是否为md5串的Action)，随后在该Action中对user-agent进行判断，如果是支付宝，则走支付宝的控制流代码，其他方式类似。\n\n因为不同的第三方支付的调用方式是几乎一致的，所以接下来我就已支付宝为例。\n\n首先聚合支付使用的是js调起一次支付宝支付方式(其他方式还有很多，可以看看这个链接： [支付宝接入文档中心](https://docs.open.alipay.com/200/105304))\n\n发起一次支付宝js支付的必要条件是，你必须要持有一个有效的支付宝商户id，这个id一般是银行给您的一个id，因为银行必须先和支付宝签约，也许我说到这可能你已经看不懂了，因为你对钱的流向还没有一个概念，我这里先给你介绍下\n\n一此扫码的钱是如何最终留到商户银行卡账户中的：\n比如你到一个冰淇淋店买冰淇淋，你扫了冰淇淋店的一码付后付款，提示付款成功，但是钱是第一时间到达银行的一个支付宝账户中，而不是直接到达冰淇淋店老板的钱包里的，第二天支付宝会将冰淇淋老板的钱转到指定的银行卡账户中，最后由银行的清算平台进行清算，最终才会打款到冰淇淋老板的银行卡里。\n\n这个过程中，冰淇淋老板是银行聚合支付服务的签约商户，银行会给其签约商户发放一个对应的码牌，也就是你扫的码牌。刚刚说了钱是第一时间到了银行的支付宝账户中的，而这个支付宝账户就是银行在支付宝那里申请的账户，不同于我们的个人支付宝账户，这种银行的支付宝账户是一种特殊的支付宝账户，支付宝可以为这种商户提供各类服务并且开发平台各类支付产品的调用，比如我前面说的js调用的形式。\n\n现在你应该已经理解了js调起支付宝支付交易为啥需要银行的支付宝商户id。那么我们接着说。\n\n当客户付款完成后，支付宝会回调我们聚合支付平台指定的方法，调用哪个方法也是我们需要去支付宝开放平台上注册并配置的。 比如每次支付完成都会访问`xxx/juhezhifu/success`，最终聚合支付平台对应的Action会被调用，我们可以从这次请求的Request中获取我们需要的数据，这里有个小细节，就是如果知道Request域中的键key。这是我们在发起js请求的时候会发送给支付宝的一个数据，会要求支付宝按照我们指定的key来返回我们需要的数据。如果没看明白的话，就多看几遍我写的内容。\n\n有了支付宝的返回数据，接下来的事情无非就是增删改查的事情。\n\n到这里一次扫码的大致过程已经说明完毕。\n\n---\n\n说了这么多，都是为了介绍我所在的联迪，所在部门的大致业务以及我自己负责的聚合支付平台的大致运行流程。我想应该对联迪有了一定认知，接下来我就来说说我在联迪工作后对其的好坏评价\n\n# Advantages of working in landi\n\n我在大学的学习成绩一般般，我也不是一个优秀的人，平时爱打游戏，所有优秀的行为都是为生活和压力所迫。 当没有压力的时候，我可以宅在家里玩一整天的游戏而不会感到负罪感。 当有压力的时候，我也会依然抽空打打游戏，并且安慰自己说一切都会好的，我现在打游戏是为了放松自己，为了明天可以更好的工作。平时也不爱和故友聊天，整天窝在自己的小世界里，无法自拔。人际圈非常小，存在感已经微弱到冰点，却也依然开朗面对，觉得这都没有什么，我想一直活着像我自己，没有约束。\n\n正因为这种性格，所以导致我的技术能力不强，所以我认为在联迪工作的最大好处就是，联迪目前的技术体系对Java技术的要求不高，它没有微服务，没有分布式，有的只有纯粹的传统IT开发模式，是个非常适合养老(混)的公司。\n\n在联迪你可以学到不少传统IT行业的开发知识，至少做了带你入行的公司来说，是个非常不错的公司了。\n\n# Disadvantages of working in landi\n\n由于联迪还是属于传统IT公司，技术含金量不高，由于开发流程不统一，所以常常需要加班赶工，做一些粗制杂活\n\n并且我所在的部门，项目很多不是省内，所以开发人员出差的频率非常高，经常会需要出差好几个月。\n\n如果你是想多学一些更前沿的技术，那么联迪不太适合你，互联网公司更适合你。不过互联网公司需要你由更强的技术能力以及学习能力，并且996会被认为是正常的上下班时间，长期以来这也不是一个很好的工作方式。毕竟越是加班就越会感觉自己没有了生活，自己就像一个机器一样，没有灵魂。\n\n# why I leave\n\n我觉得我离开联迪的原因是个复杂情况导致的结果。 \n\n有点自以为是，觉得自己的能力很高，能胜任公司的绝大部分任务。但是事实上说明我在设计模式，以及开发效率上存在严重问题，我有点多虑，导致开发效率慢；我对整体设计经验不到位，导致一个流程的开发没有良好的代码设计，导致我自己维护起来额外花费不少时间，最终导致一直需要加班解决问题\n\n加班加的多了，我的心理积攒的负面情绪也越来越多，导致我的工作态度也变差，甚至可能还影响了我的代码质量。在一次bug处理中，我就不小心搞了一个bug出来，导致生产数据混乱(这也是我后来自己想到的，一开始我以为是银行技术人员估计搞我，毕竟当时我们关系处的不是很融洽。)\n\n此外，由于项目原因，我一直在黄河银行那里做驻场开发，一直出差了1年多，长期出差对于年轻的我来说，是个致命的打击，我因长期出差导致内心的负面情绪变本加厉，甚至开始扭曲，我开始看不清现实，觉得周围的一切都在和我作对。于是我开始故意迟到，故意不去上班，来发泄自己的负面情绪。\n\n同时我父母也在这段时间常常问我为什么一直在出差，怎么工作那么不稳定，随机联想到自己岁数一直在增长，但是却连女朋友都还没有，感觉自己的未来一条黑，于是就更加给自己添油加醋，让自己的负面情绪上升到了我无法控制的底部。\n\n最后不管我通过什么方式发泄内心的不满，都没法平复我内心的波澜，所以没有办法，我最终还是被自己的内心打败，提出了辞职。\n\n整个过程对我现在来想都是可怕的，我一直以为自己的内心是强大的，我一直以为自己是一个坚强的人。但是时间向我证明了我其实是个问题很大的人。\n\n# after story\n\n辞职后，公司补发了我不少出差补贴的钱，办完离职手续后，我便开始了一段“堕落”的日子，我一股脑的将自己埋进了游戏的世界。我缩小自己平时的所有日常开销，换了一个一个月非常便宜的租房，一直宅到19年5月。 19年五月我回了次家，看了父母一面，突然醒悟觉得自己到底在干什么，于是回去后我便开始为重新找工作做准备，从5月到8月我学习了不少也做了不少练习项目，最后开始投简历，很快我收到了很多面试邀请，西电的这个学历真的非常有用，给了我很大的帮助。\n\n现在我在一家外包公司入职，负责浙商银行柜面系统的开发，但是还不确定是否能一直留下来，毕竟还有一次面试，只有通过的那次面试，我才能真正算找工作成功。如果没有通过，我就又要开始慢慢找工作了。\n\n但是我对现在的我的自控能力是不满意的，我现在有点不乐意去学习技术知识。一方面是因为很多知识我觉得学了不知道有啥用，另一方面是面试的时候，面试官不一定会叼你做的东西，除非你做的作品可以优秀到你可以自信的甩他一脸的那种才行。\n\n现在我还在等待第二次面试的来临，我已经准备好了简单的自我介绍，并做了背诵，我也对黄河银行的项目做了简单的回顾，防止自己在被问到的时候卡壳。希望自己可以通过面试，重新回归生活的正轨","source":"whyLeaveLandi/index.md","raw":"---\ntitle: WhyLeaveLandi\ndate: 2019-08-19 12:46:21\n---\n\n# Why i leave landi company\n\n本文主题是聊聊我为什么离开联迪，因为很多面试官都常常问我这个问题，所以我自己写了一篇文章，一方面是纪念，另一方面是让自己再回答这个问题的时候，可以表现的更好，不会说到一半卡壳\n\n## what is landi\n\n联迪是我毕业后的第一家公司，也是我最有感情的一家公司。\n\n联迪是主打做POS的，在我做的办公室内，放眼望去，可以看到很多不同型号的POS机摆在桌子上。\n\n随着智能手机的出现，智能POS也紧跟其上，智能POS内置的是一个经过改造的Android系统，具备了一定的安全防控系统。\n\n由于智能POS的销量不断攀升，而智能POS本身支持运行的都是Android应用，所以自然而然公司拥有了大量Android程序员。\n\n每个Andorid程序员都会被分配一台A8POS，作为其日常开发的测试机使用。\n\n后来Z系列的出现，他们日常可以捣鼓的机子就又多了一台，而且由于Z系列面向的是收银，所以体型很大，使得Android程序员的桌子上显得异常拥挤\n\n---\n\n而我是公司的系统开发人员，你可以想象那么多智能POS，在他们上面运行的APP应用，如果没有后台支持，那么就无法正常运行。而我就是负责编写后台开发的程序员。\n\n除了做POS后台以外，我们部门还有做银医的，做聚合支付的，或者其他各式各样的平台系统的。每种系统都可以与POS相关联，不过说的更前沿一点，每种系统都与电子支付相关联。比如银医，他们做的系统主要是为医院的大型一体机服务的，他们做的也是网站，但是大部分时候需要克服网站在ie浏览器里能够正常运行的问题，因为医院的一体机绝大多数还比较落后，内部装的都是ie浏览器，没有火狐或者chrome等时代瞩目的浏览器。所以银医的小伙伴总是吐槽自己做的项目前端的技术太老旧，做的不舒心。 我当时也非常同意他们的观点，那时的我也是一个盲目追新的程序员，觉得老旧的系统就应该升级换代。随着时间的推移，以及我参与的项目变多，其实大部分老旧系统不升级也是有原因的，毕竟迭代需要时间，就算迭代完成，也需要进行测试人员进行完整的测试，才能保证具有生产能力。并且作为给医院做的系统来看，目前所能支持的技术已经可以满足市场需求，所以没有做升级的必要。\n\n不过虽然前端的技术比较老旧，但是后台还是和大部分项目一样，因为后台服务器依旧是linux，相比来看做升级的成本比前端的状态要好得多。 我记得当时银医的后台就用到了开源的webservice，而我所在部门还在使用自己编写的一套webservice。对于喜欢学习新技术的我来说，当时是有点不满意的。\n\n---\n\n说完了银医，再来说说我所在的部门，我所在的部门主要是做聚合支付的，所谓聚合支付是指一个可以聚合各类第三方支付的一种平台，其使用“一码付”来对外宣传这种平台的产品形态。一码的意思就是用户可以通过任何第三方支付软件扫描同一个二维码，完成扫码支付。它的核心技术是通过http协议的user-agent实现的。 因为每个第三方支付app，他们都有内置的定制浏览器，这些内置浏览器都会带有不同的user-agent标志。 聚合支付正是利用了这一点，每次扫描“一码付”的时候，通过判断不同的user-agent标志来实现对不同第三方支付发起支付请求，从而实现聚合支付，使得用户不需要担心自己扫错码(比如拿微信扫支付宝的码，从而扫不出来或者提示url让你复制后在浏览器里执行))\n\n我就职的时候，聚合支付平台的后台都是Java后台，框架使用的是Spring+Sturts2+Mybatis这一套，正向代理使用的是httpd(不知道为什么不用nginx)，反向代理使用的是nginx，数据库规定使用oracle10g还是11g来着，服务器一般使用的是red hat(和不同银行有关系)，Web容器使用的是Tomcat，webservice等等。\n\n>说说一次扫码的经过\n\n每个“一码付”的二维码的内置url的格式为`xxx/juhezhifu/{md5}`\n\n“一码付”内置的restful url，传统的结尾是一个码牌id，但是后续由于银行方认为不能向外透露明显的码牌id，所以改用了md5加密。每次扫描后都会请求到对应的Action中(一个判断MappingUrl是否为md5串的Action)，随后在该Action中对user-agent进行判断，如果是支付宝，则走支付宝的控制流代码，其他方式类似。\n\n因为不同的第三方支付的调用方式是几乎一致的，所以接下来我就已支付宝为例。\n\n首先聚合支付使用的是js调起一次支付宝支付方式(其他方式还有很多，可以看看这个链接： [支付宝接入文档中心](https://docs.open.alipay.com/200/105304))\n\n发起一次支付宝js支付的必要条件是，你必须要持有一个有效的支付宝商户id，这个id一般是银行给您的一个id，因为银行必须先和支付宝签约，也许我说到这可能你已经看不懂了，因为你对钱的流向还没有一个概念，我这里先给你介绍下\n\n一此扫码的钱是如何最终留到商户银行卡账户中的：\n比如你到一个冰淇淋店买冰淇淋，你扫了冰淇淋店的一码付后付款，提示付款成功，但是钱是第一时间到达银行的一个支付宝账户中，而不是直接到达冰淇淋店老板的钱包里的，第二天支付宝会将冰淇淋老板的钱转到指定的银行卡账户中，最后由银行的清算平台进行清算，最终才会打款到冰淇淋老板的银行卡里。\n\n这个过程中，冰淇淋老板是银行聚合支付服务的签约商户，银行会给其签约商户发放一个对应的码牌，也就是你扫的码牌。刚刚说了钱是第一时间到了银行的支付宝账户中的，而这个支付宝账户就是银行在支付宝那里申请的账户，不同于我们的个人支付宝账户，这种银行的支付宝账户是一种特殊的支付宝账户，支付宝可以为这种商户提供各类服务并且开发平台各类支付产品的调用，比如我前面说的js调用的形式。\n\n现在你应该已经理解了js调起支付宝支付交易为啥需要银行的支付宝商户id。那么我们接着说。\n\n当客户付款完成后，支付宝会回调我们聚合支付平台指定的方法，调用哪个方法也是我们需要去支付宝开放平台上注册并配置的。 比如每次支付完成都会访问`xxx/juhezhifu/success`，最终聚合支付平台对应的Action会被调用，我们可以从这次请求的Request中获取我们需要的数据，这里有个小细节，就是如果知道Request域中的键key。这是我们在发起js请求的时候会发送给支付宝的一个数据，会要求支付宝按照我们指定的key来返回我们需要的数据。如果没看明白的话，就多看几遍我写的内容。\n\n有了支付宝的返回数据，接下来的事情无非就是增删改查的事情。\n\n到这里一次扫码的大致过程已经说明完毕。\n\n---\n\n说了这么多，都是为了介绍我所在的联迪，所在部门的大致业务以及我自己负责的聚合支付平台的大致运行流程。我想应该对联迪有了一定认知，接下来我就来说说我在联迪工作后对其的好坏评价\n\n# Advantages of working in landi\n\n我在大学的学习成绩一般般，我也不是一个优秀的人，平时爱打游戏，所有优秀的行为都是为生活和压力所迫。 当没有压力的时候，我可以宅在家里玩一整天的游戏而不会感到负罪感。 当有压力的时候，我也会依然抽空打打游戏，并且安慰自己说一切都会好的，我现在打游戏是为了放松自己，为了明天可以更好的工作。平时也不爱和故友聊天，整天窝在自己的小世界里，无法自拔。人际圈非常小，存在感已经微弱到冰点，却也依然开朗面对，觉得这都没有什么，我想一直活着像我自己，没有约束。\n\n正因为这种性格，所以导致我的技术能力不强，所以我认为在联迪工作的最大好处就是，联迪目前的技术体系对Java技术的要求不高，它没有微服务，没有分布式，有的只有纯粹的传统IT开发模式，是个非常适合养老(混)的公司。\n\n在联迪你可以学到不少传统IT行业的开发知识，至少做了带你入行的公司来说，是个非常不错的公司了。\n\n# Disadvantages of working in landi\n\n由于联迪还是属于传统IT公司，技术含金量不高，由于开发流程不统一，所以常常需要加班赶工，做一些粗制杂活\n\n并且我所在的部门，项目很多不是省内，所以开发人员出差的频率非常高，经常会需要出差好几个月。\n\n如果你是想多学一些更前沿的技术，那么联迪不太适合你，互联网公司更适合你。不过互联网公司需要你由更强的技术能力以及学习能力，并且996会被认为是正常的上下班时间，长期以来这也不是一个很好的工作方式。毕竟越是加班就越会感觉自己没有了生活，自己就像一个机器一样，没有灵魂。\n\n# why I leave\n\n我觉得我离开联迪的原因是个复杂情况导致的结果。 \n\n有点自以为是，觉得自己的能力很高，能胜任公司的绝大部分任务。但是事实上说明我在设计模式，以及开发效率上存在严重问题，我有点多虑，导致开发效率慢；我对整体设计经验不到位，导致一个流程的开发没有良好的代码设计，导致我自己维护起来额外花费不少时间，最终导致一直需要加班解决问题\n\n加班加的多了，我的心理积攒的负面情绪也越来越多，导致我的工作态度也变差，甚至可能还影响了我的代码质量。在一次bug处理中，我就不小心搞了一个bug出来，导致生产数据混乱(这也是我后来自己想到的，一开始我以为是银行技术人员估计搞我，毕竟当时我们关系处的不是很融洽。)\n\n此外，由于项目原因，我一直在黄河银行那里做驻场开发，一直出差了1年多，长期出差对于年轻的我来说，是个致命的打击，我因长期出差导致内心的负面情绪变本加厉，甚至开始扭曲，我开始看不清现实，觉得周围的一切都在和我作对。于是我开始故意迟到，故意不去上班，来发泄自己的负面情绪。\n\n同时我父母也在这段时间常常问我为什么一直在出差，怎么工作那么不稳定，随机联想到自己岁数一直在增长，但是却连女朋友都还没有，感觉自己的未来一条黑，于是就更加给自己添油加醋，让自己的负面情绪上升到了我无法控制的底部。\n\n最后不管我通过什么方式发泄内心的不满，都没法平复我内心的波澜，所以没有办法，我最终还是被自己的内心打败，提出了辞职。\n\n整个过程对我现在来想都是可怕的，我一直以为自己的内心是强大的，我一直以为自己是一个坚强的人。但是时间向我证明了我其实是个问题很大的人。\n\n# after story\n\n辞职后，公司补发了我不少出差补贴的钱，办完离职手续后，我便开始了一段“堕落”的日子，我一股脑的将自己埋进了游戏的世界。我缩小自己平时的所有日常开销，换了一个一个月非常便宜的租房，一直宅到19年5月。 19年五月我回了次家，看了父母一面，突然醒悟觉得自己到底在干什么，于是回去后我便开始为重新找工作做准备，从5月到8月我学习了不少也做了不少练习项目，最后开始投简历，很快我收到了很多面试邀请，西电的这个学历真的非常有用，给了我很大的帮助。\n\n现在我在一家外包公司入职，负责浙商银行柜面系统的开发，但是还不确定是否能一直留下来，毕竟还有一次面试，只有通过的那次面试，我才能真正算找工作成功。如果没有通过，我就又要开始慢慢找工作了。\n\n但是我对现在的我的自控能力是不满意的，我现在有点不乐意去学习技术知识。一方面是因为很多知识我觉得学了不知道有啥用，另一方面是面试的时候，面试官不一定会叼你做的东西，除非你做的作品可以优秀到你可以自信的甩他一脸的那种才行。\n\n现在我还在等待第二次面试的来临，我已经准备好了简单的自我介绍，并做了背诵，我也对黄河银行的项目做了简单的回顾，防止自己在被问到的时候卡壳。希望自己可以通过面试，重新回归生活的正轨","updated":"2019-09-25T03:25:21.431Z","path":"whyLeaveLandi/index.html","comments":1,"layout":"page","_id":"ck20gn9up004om6elr6johiog","content":"<h1 id=\"Why-i-leave-landi-company\"><a href=\"#Why-i-leave-landi-company\" class=\"headerlink\" title=\"Why i leave landi company\"></a>Why i leave landi company</h1><p>本文主题是聊聊我为什么离开联迪，因为很多面试官都常常问我这个问题，所以我自己写了一篇文章，一方面是纪念，另一方面是让自己再回答这个问题的时候，可以表现的更好，不会说到一半卡壳</p>\n<h2 id=\"what-is-landi\"><a href=\"#what-is-landi\" class=\"headerlink\" title=\"what is landi\"></a>what is landi</h2><p>联迪是我毕业后的第一家公司，也是我最有感情的一家公司。</p>\n<p>联迪是主打做POS的，在我做的办公室内，放眼望去，可以看到很多不同型号的POS机摆在桌子上。</p>\n<p>随着智能手机的出现，智能POS也紧跟其上，智能POS内置的是一个经过改造的Android系统，具备了一定的安全防控系统。</p>\n<p>由于智能POS的销量不断攀升，而智能POS本身支持运行的都是Android应用，所以自然而然公司拥有了大量Android程序员。</p>\n<p>每个Andorid程序员都会被分配一台A8POS，作为其日常开发的测试机使用。</p>\n<p>后来Z系列的出现，他们日常可以捣鼓的机子就又多了一台，而且由于Z系列面向的是收银，所以体型很大，使得Android程序员的桌子上显得异常拥挤</p>\n<hr>\n<p>而我是公司的系统开发人员，你可以想象那么多智能POS，在他们上面运行的APP应用，如果没有后台支持，那么就无法正常运行。而我就是负责编写后台开发的程序员。</p>\n<p>除了做POS后台以外，我们部门还有做银医的，做聚合支付的，或者其他各式各样的平台系统的。每种系统都可以与POS相关联，不过说的更前沿一点，每种系统都与电子支付相关联。比如银医，他们做的系统主要是为医院的大型一体机服务的，他们做的也是网站，但是大部分时候需要克服网站在ie浏览器里能够正常运行的问题，因为医院的一体机绝大多数还比较落后，内部装的都是ie浏览器，没有火狐或者chrome等时代瞩目的浏览器。所以银医的小伙伴总是吐槽自己做的项目前端的技术太老旧，做的不舒心。 我当时也非常同意他们的观点，那时的我也是一个盲目追新的程序员，觉得老旧的系统就应该升级换代。随着时间的推移，以及我参与的项目变多，其实大部分老旧系统不升级也是有原因的，毕竟迭代需要时间，就算迭代完成，也需要进行测试人员进行完整的测试，才能保证具有生产能力。并且作为给医院做的系统来看，目前所能支持的技术已经可以满足市场需求，所以没有做升级的必要。</p>\n<p>不过虽然前端的技术比较老旧，但是后台还是和大部分项目一样，因为后台服务器依旧是linux，相比来看做升级的成本比前端的状态要好得多。 我记得当时银医的后台就用到了开源的webservice，而我所在部门还在使用自己编写的一套webservice。对于喜欢学习新技术的我来说，当时是有点不满意的。</p>\n<hr>\n<p>说完了银医，再来说说我所在的部门，我所在的部门主要是做聚合支付的，所谓聚合支付是指一个可以聚合各类第三方支付的一种平台，其使用“一码付”来对外宣传这种平台的产品形态。一码的意思就是用户可以通过任何第三方支付软件扫描同一个二维码，完成扫码支付。它的核心技术是通过http协议的user-agent实现的。 因为每个第三方支付app，他们都有内置的定制浏览器，这些内置浏览器都会带有不同的user-agent标志。 聚合支付正是利用了这一点，每次扫描“一码付”的时候，通过判断不同的user-agent标志来实现对不同第三方支付发起支付请求，从而实现聚合支付，使得用户不需要担心自己扫错码(比如拿微信扫支付宝的码，从而扫不出来或者提示url让你复制后在浏览器里执行))</p>\n<p>我就职的时候，聚合支付平台的后台都是Java后台，框架使用的是Spring+Sturts2+Mybatis这一套，正向代理使用的是httpd(不知道为什么不用nginx)，反向代理使用的是nginx，数据库规定使用oracle10g还是11g来着，服务器一般使用的是red hat(和不同银行有关系)，Web容器使用的是Tomcat，webservice等等。</p>\n<blockquote>\n<p>说说一次扫码的经过</p>\n</blockquote>\n<p>每个“一码付”的二维码的内置url的格式为<code>xxx/juhezhifu/{md5}</code></p>\n<p>“一码付”内置的restful url，传统的结尾是一个码牌id，但是后续由于银行方认为不能向外透露明显的码牌id，所以改用了md5加密。每次扫描后都会请求到对应的Action中(一个判断MappingUrl是否为md5串的Action)，随后在该Action中对user-agent进行判断，如果是支付宝，则走支付宝的控制流代码，其他方式类似。</p>\n<p>因为不同的第三方支付的调用方式是几乎一致的，所以接下来我就已支付宝为例。</p>\n<p>首先聚合支付使用的是js调起一次支付宝支付方式(其他方式还有很多，可以看看这个链接： <a href=\"https://docs.open.alipay.com/200/105304\" target=\"_blank\" rel=\"noopener\">支付宝接入文档中心</a>)</p>\n<p>发起一次支付宝js支付的必要条件是，你必须要持有一个有效的支付宝商户id，这个id一般是银行给您的一个id，因为银行必须先和支付宝签约，也许我说到这可能你已经看不懂了，因为你对钱的流向还没有一个概念，我这里先给你介绍下</p>\n<p>一此扫码的钱是如何最终留到商户银行卡账户中的：<br>比如你到一个冰淇淋店买冰淇淋，你扫了冰淇淋店的一码付后付款，提示付款成功，但是钱是第一时间到达银行的一个支付宝账户中，而不是直接到达冰淇淋店老板的钱包里的，第二天支付宝会将冰淇淋老板的钱转到指定的银行卡账户中，最后由银行的清算平台进行清算，最终才会打款到冰淇淋老板的银行卡里。</p>\n<p>这个过程中，冰淇淋老板是银行聚合支付服务的签约商户，银行会给其签约商户发放一个对应的码牌，也就是你扫的码牌。刚刚说了钱是第一时间到了银行的支付宝账户中的，而这个支付宝账户就是银行在支付宝那里申请的账户，不同于我们的个人支付宝账户，这种银行的支付宝账户是一种特殊的支付宝账户，支付宝可以为这种商户提供各类服务并且开发平台各类支付产品的调用，比如我前面说的js调用的形式。</p>\n<p>现在你应该已经理解了js调起支付宝支付交易为啥需要银行的支付宝商户id。那么我们接着说。</p>\n<p>当客户付款完成后，支付宝会回调我们聚合支付平台指定的方法，调用哪个方法也是我们需要去支付宝开放平台上注册并配置的。 比如每次支付完成都会访问<code>xxx/juhezhifu/success</code>，最终聚合支付平台对应的Action会被调用，我们可以从这次请求的Request中获取我们需要的数据，这里有个小细节，就是如果知道Request域中的键key。这是我们在发起js请求的时候会发送给支付宝的一个数据，会要求支付宝按照我们指定的key来返回我们需要的数据。如果没看明白的话，就多看几遍我写的内容。</p>\n<p>有了支付宝的返回数据，接下来的事情无非就是增删改查的事情。</p>\n<p>到这里一次扫码的大致过程已经说明完毕。</p>\n<hr>\n<p>说了这么多，都是为了介绍我所在的联迪，所在部门的大致业务以及我自己负责的聚合支付平台的大致运行流程。我想应该对联迪有了一定认知，接下来我就来说说我在联迪工作后对其的好坏评价</p>\n<h1 id=\"Advantages-of-working-in-landi\"><a href=\"#Advantages-of-working-in-landi\" class=\"headerlink\" title=\"Advantages of working in landi\"></a>Advantages of working in landi</h1><p>我在大学的学习成绩一般般，我也不是一个优秀的人，平时爱打游戏，所有优秀的行为都是为生活和压力所迫。 当没有压力的时候，我可以宅在家里玩一整天的游戏而不会感到负罪感。 当有压力的时候，我也会依然抽空打打游戏，并且安慰自己说一切都会好的，我现在打游戏是为了放松自己，为了明天可以更好的工作。平时也不爱和故友聊天，整天窝在自己的小世界里，无法自拔。人际圈非常小，存在感已经微弱到冰点，却也依然开朗面对，觉得这都没有什么，我想一直活着像我自己，没有约束。</p>\n<p>正因为这种性格，所以导致我的技术能力不强，所以我认为在联迪工作的最大好处就是，联迪目前的技术体系对Java技术的要求不高，它没有微服务，没有分布式，有的只有纯粹的传统IT开发模式，是个非常适合养老(混)的公司。</p>\n<p>在联迪你可以学到不少传统IT行业的开发知识，至少做了带你入行的公司来说，是个非常不错的公司了。</p>\n<h1 id=\"Disadvantages-of-working-in-landi\"><a href=\"#Disadvantages-of-working-in-landi\" class=\"headerlink\" title=\"Disadvantages of working in landi\"></a>Disadvantages of working in landi</h1><p>由于联迪还是属于传统IT公司，技术含金量不高，由于开发流程不统一，所以常常需要加班赶工，做一些粗制杂活</p>\n<p>并且我所在的部门，项目很多不是省内，所以开发人员出差的频率非常高，经常会需要出差好几个月。</p>\n<p>如果你是想多学一些更前沿的技术，那么联迪不太适合你，互联网公司更适合你。不过互联网公司需要你由更强的技术能力以及学习能力，并且996会被认为是正常的上下班时间，长期以来这也不是一个很好的工作方式。毕竟越是加班就越会感觉自己没有了生活，自己就像一个机器一样，没有灵魂。</p>\n<h1 id=\"why-I-leave\"><a href=\"#why-I-leave\" class=\"headerlink\" title=\"why I leave\"></a>why I leave</h1><p>我觉得我离开联迪的原因是个复杂情况导致的结果。 </p>\n<p>有点自以为是，觉得自己的能力很高，能胜任公司的绝大部分任务。但是事实上说明我在设计模式，以及开发效率上存在严重问题，我有点多虑，导致开发效率慢；我对整体设计经验不到位，导致一个流程的开发没有良好的代码设计，导致我自己维护起来额外花费不少时间，最终导致一直需要加班解决问题</p>\n<p>加班加的多了，我的心理积攒的负面情绪也越来越多，导致我的工作态度也变差，甚至可能还影响了我的代码质量。在一次bug处理中，我就不小心搞了一个bug出来，导致生产数据混乱(这也是我后来自己想到的，一开始我以为是银行技术人员估计搞我，毕竟当时我们关系处的不是很融洽。)</p>\n<p>此外，由于项目原因，我一直在黄河银行那里做驻场开发，一直出差了1年多，长期出差对于年轻的我来说，是个致命的打击，我因长期出差导致内心的负面情绪变本加厉，甚至开始扭曲，我开始看不清现实，觉得周围的一切都在和我作对。于是我开始故意迟到，故意不去上班，来发泄自己的负面情绪。</p>\n<p>同时我父母也在这段时间常常问我为什么一直在出差，怎么工作那么不稳定，随机联想到自己岁数一直在增长，但是却连女朋友都还没有，感觉自己的未来一条黑，于是就更加给自己添油加醋，让自己的负面情绪上升到了我无法控制的底部。</p>\n<p>最后不管我通过什么方式发泄内心的不满，都没法平复我内心的波澜，所以没有办法，我最终还是被自己的内心打败，提出了辞职。</p>\n<p>整个过程对我现在来想都是可怕的，我一直以为自己的内心是强大的，我一直以为自己是一个坚强的人。但是时间向我证明了我其实是个问题很大的人。</p>\n<h1 id=\"after-story\"><a href=\"#after-story\" class=\"headerlink\" title=\"after story\"></a>after story</h1><p>辞职后，公司补发了我不少出差补贴的钱，办完离职手续后，我便开始了一段“堕落”的日子，我一股脑的将自己埋进了游戏的世界。我缩小自己平时的所有日常开销，换了一个一个月非常便宜的租房，一直宅到19年5月。 19年五月我回了次家，看了父母一面，突然醒悟觉得自己到底在干什么，于是回去后我便开始为重新找工作做准备，从5月到8月我学习了不少也做了不少练习项目，最后开始投简历，很快我收到了很多面试邀请，西电的这个学历真的非常有用，给了我很大的帮助。</p>\n<p>现在我在一家外包公司入职，负责浙商银行柜面系统的开发，但是还不确定是否能一直留下来，毕竟还有一次面试，只有通过的那次面试，我才能真正算找工作成功。如果没有通过，我就又要开始慢慢找工作了。</p>\n<p>但是我对现在的我的自控能力是不满意的，我现在有点不乐意去学习技术知识。一方面是因为很多知识我觉得学了不知道有啥用，另一方面是面试的时候，面试官不一定会叼你做的东西，除非你做的作品可以优秀到你可以自信的甩他一脸的那种才行。</p>\n<p>现在我还在等待第二次面试的来临，我已经准备好了简单的自我介绍，并做了背诵，我也对黄河银行的项目做了简单的回顾，防止自己在被问到的时候卡壳。希望自己可以通过面试，重新回归生活的正轨</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Why-i-leave-landi-company\"><a href=\"#Why-i-leave-landi-company\" class=\"headerlink\" title=\"Why i leave landi company\"></a>Why i leave landi company</h1><p>本文主题是聊聊我为什么离开联迪，因为很多面试官都常常问我这个问题，所以我自己写了一篇文章，一方面是纪念，另一方面是让自己再回答这个问题的时候，可以表现的更好，不会说到一半卡壳</p>\n<h2 id=\"what-is-landi\"><a href=\"#what-is-landi\" class=\"headerlink\" title=\"what is landi\"></a>what is landi</h2><p>联迪是我毕业后的第一家公司，也是我最有感情的一家公司。</p>\n<p>联迪是主打做POS的，在我做的办公室内，放眼望去，可以看到很多不同型号的POS机摆在桌子上。</p>\n<p>随着智能手机的出现，智能POS也紧跟其上，智能POS内置的是一个经过改造的Android系统，具备了一定的安全防控系统。</p>\n<p>由于智能POS的销量不断攀升，而智能POS本身支持运行的都是Android应用，所以自然而然公司拥有了大量Android程序员。</p>\n<p>每个Andorid程序员都会被分配一台A8POS，作为其日常开发的测试机使用。</p>\n<p>后来Z系列的出现，他们日常可以捣鼓的机子就又多了一台，而且由于Z系列面向的是收银，所以体型很大，使得Android程序员的桌子上显得异常拥挤</p>\n<hr>\n<p>而我是公司的系统开发人员，你可以想象那么多智能POS，在他们上面运行的APP应用，如果没有后台支持，那么就无法正常运行。而我就是负责编写后台开发的程序员。</p>\n<p>除了做POS后台以外，我们部门还有做银医的，做聚合支付的，或者其他各式各样的平台系统的。每种系统都可以与POS相关联，不过说的更前沿一点，每种系统都与电子支付相关联。比如银医，他们做的系统主要是为医院的大型一体机服务的，他们做的也是网站，但是大部分时候需要克服网站在ie浏览器里能够正常运行的问题，因为医院的一体机绝大多数还比较落后，内部装的都是ie浏览器，没有火狐或者chrome等时代瞩目的浏览器。所以银医的小伙伴总是吐槽自己做的项目前端的技术太老旧，做的不舒心。 我当时也非常同意他们的观点，那时的我也是一个盲目追新的程序员，觉得老旧的系统就应该升级换代。随着时间的推移，以及我参与的项目变多，其实大部分老旧系统不升级也是有原因的，毕竟迭代需要时间，就算迭代完成，也需要进行测试人员进行完整的测试，才能保证具有生产能力。并且作为给医院做的系统来看，目前所能支持的技术已经可以满足市场需求，所以没有做升级的必要。</p>\n<p>不过虽然前端的技术比较老旧，但是后台还是和大部分项目一样，因为后台服务器依旧是linux，相比来看做升级的成本比前端的状态要好得多。 我记得当时银医的后台就用到了开源的webservice，而我所在部门还在使用自己编写的一套webservice。对于喜欢学习新技术的我来说，当时是有点不满意的。</p>\n<hr>\n<p>说完了银医，再来说说我所在的部门，我所在的部门主要是做聚合支付的，所谓聚合支付是指一个可以聚合各类第三方支付的一种平台，其使用“一码付”来对外宣传这种平台的产品形态。一码的意思就是用户可以通过任何第三方支付软件扫描同一个二维码，完成扫码支付。它的核心技术是通过http协议的user-agent实现的。 因为每个第三方支付app，他们都有内置的定制浏览器，这些内置浏览器都会带有不同的user-agent标志。 聚合支付正是利用了这一点，每次扫描“一码付”的时候，通过判断不同的user-agent标志来实现对不同第三方支付发起支付请求，从而实现聚合支付，使得用户不需要担心自己扫错码(比如拿微信扫支付宝的码，从而扫不出来或者提示url让你复制后在浏览器里执行))</p>\n<p>我就职的时候，聚合支付平台的后台都是Java后台，框架使用的是Spring+Sturts2+Mybatis这一套，正向代理使用的是httpd(不知道为什么不用nginx)，反向代理使用的是nginx，数据库规定使用oracle10g还是11g来着，服务器一般使用的是red hat(和不同银行有关系)，Web容器使用的是Tomcat，webservice等等。</p>\n<blockquote>\n<p>说说一次扫码的经过</p>\n</blockquote>\n<p>每个“一码付”的二维码的内置url的格式为<code>xxx/juhezhifu/{md5}</code></p>\n<p>“一码付”内置的restful url，传统的结尾是一个码牌id，但是后续由于银行方认为不能向外透露明显的码牌id，所以改用了md5加密。每次扫描后都会请求到对应的Action中(一个判断MappingUrl是否为md5串的Action)，随后在该Action中对user-agent进行判断，如果是支付宝，则走支付宝的控制流代码，其他方式类似。</p>\n<p>因为不同的第三方支付的调用方式是几乎一致的，所以接下来我就已支付宝为例。</p>\n<p>首先聚合支付使用的是js调起一次支付宝支付方式(其他方式还有很多，可以看看这个链接： <a href=\"https://docs.open.alipay.com/200/105304\" target=\"_blank\" rel=\"noopener\">支付宝接入文档中心</a>)</p>\n<p>发起一次支付宝js支付的必要条件是，你必须要持有一个有效的支付宝商户id，这个id一般是银行给您的一个id，因为银行必须先和支付宝签约，也许我说到这可能你已经看不懂了，因为你对钱的流向还没有一个概念，我这里先给你介绍下</p>\n<p>一此扫码的钱是如何最终留到商户银行卡账户中的：<br>比如你到一个冰淇淋店买冰淇淋，你扫了冰淇淋店的一码付后付款，提示付款成功，但是钱是第一时间到达银行的一个支付宝账户中，而不是直接到达冰淇淋店老板的钱包里的，第二天支付宝会将冰淇淋老板的钱转到指定的银行卡账户中，最后由银行的清算平台进行清算，最终才会打款到冰淇淋老板的银行卡里。</p>\n<p>这个过程中，冰淇淋老板是银行聚合支付服务的签约商户，银行会给其签约商户发放一个对应的码牌，也就是你扫的码牌。刚刚说了钱是第一时间到了银行的支付宝账户中的，而这个支付宝账户就是银行在支付宝那里申请的账户，不同于我们的个人支付宝账户，这种银行的支付宝账户是一种特殊的支付宝账户，支付宝可以为这种商户提供各类服务并且开发平台各类支付产品的调用，比如我前面说的js调用的形式。</p>\n<p>现在你应该已经理解了js调起支付宝支付交易为啥需要银行的支付宝商户id。那么我们接着说。</p>\n<p>当客户付款完成后，支付宝会回调我们聚合支付平台指定的方法，调用哪个方法也是我们需要去支付宝开放平台上注册并配置的。 比如每次支付完成都会访问<code>xxx/juhezhifu/success</code>，最终聚合支付平台对应的Action会被调用，我们可以从这次请求的Request中获取我们需要的数据，这里有个小细节，就是如果知道Request域中的键key。这是我们在发起js请求的时候会发送给支付宝的一个数据，会要求支付宝按照我们指定的key来返回我们需要的数据。如果没看明白的话，就多看几遍我写的内容。</p>\n<p>有了支付宝的返回数据，接下来的事情无非就是增删改查的事情。</p>\n<p>到这里一次扫码的大致过程已经说明完毕。</p>\n<hr>\n<p>说了这么多，都是为了介绍我所在的联迪，所在部门的大致业务以及我自己负责的聚合支付平台的大致运行流程。我想应该对联迪有了一定认知，接下来我就来说说我在联迪工作后对其的好坏评价</p>\n<h1 id=\"Advantages-of-working-in-landi\"><a href=\"#Advantages-of-working-in-landi\" class=\"headerlink\" title=\"Advantages of working in landi\"></a>Advantages of working in landi</h1><p>我在大学的学习成绩一般般，我也不是一个优秀的人，平时爱打游戏，所有优秀的行为都是为生活和压力所迫。 当没有压力的时候，我可以宅在家里玩一整天的游戏而不会感到负罪感。 当有压力的时候，我也会依然抽空打打游戏，并且安慰自己说一切都会好的，我现在打游戏是为了放松自己，为了明天可以更好的工作。平时也不爱和故友聊天，整天窝在自己的小世界里，无法自拔。人际圈非常小，存在感已经微弱到冰点，却也依然开朗面对，觉得这都没有什么，我想一直活着像我自己，没有约束。</p>\n<p>正因为这种性格，所以导致我的技术能力不强，所以我认为在联迪工作的最大好处就是，联迪目前的技术体系对Java技术的要求不高，它没有微服务，没有分布式，有的只有纯粹的传统IT开发模式，是个非常适合养老(混)的公司。</p>\n<p>在联迪你可以学到不少传统IT行业的开发知识，至少做了带你入行的公司来说，是个非常不错的公司了。</p>\n<h1 id=\"Disadvantages-of-working-in-landi\"><a href=\"#Disadvantages-of-working-in-landi\" class=\"headerlink\" title=\"Disadvantages of working in landi\"></a>Disadvantages of working in landi</h1><p>由于联迪还是属于传统IT公司，技术含金量不高，由于开发流程不统一，所以常常需要加班赶工，做一些粗制杂活</p>\n<p>并且我所在的部门，项目很多不是省内，所以开发人员出差的频率非常高，经常会需要出差好几个月。</p>\n<p>如果你是想多学一些更前沿的技术，那么联迪不太适合你，互联网公司更适合你。不过互联网公司需要你由更强的技术能力以及学习能力，并且996会被认为是正常的上下班时间，长期以来这也不是一个很好的工作方式。毕竟越是加班就越会感觉自己没有了生活，自己就像一个机器一样，没有灵魂。</p>\n<h1 id=\"why-I-leave\"><a href=\"#why-I-leave\" class=\"headerlink\" title=\"why I leave\"></a>why I leave</h1><p>我觉得我离开联迪的原因是个复杂情况导致的结果。 </p>\n<p>有点自以为是，觉得自己的能力很高，能胜任公司的绝大部分任务。但是事实上说明我在设计模式，以及开发效率上存在严重问题，我有点多虑，导致开发效率慢；我对整体设计经验不到位，导致一个流程的开发没有良好的代码设计，导致我自己维护起来额外花费不少时间，最终导致一直需要加班解决问题</p>\n<p>加班加的多了，我的心理积攒的负面情绪也越来越多，导致我的工作态度也变差，甚至可能还影响了我的代码质量。在一次bug处理中，我就不小心搞了一个bug出来，导致生产数据混乱(这也是我后来自己想到的，一开始我以为是银行技术人员估计搞我，毕竟当时我们关系处的不是很融洽。)</p>\n<p>此外，由于项目原因，我一直在黄河银行那里做驻场开发，一直出差了1年多，长期出差对于年轻的我来说，是个致命的打击，我因长期出差导致内心的负面情绪变本加厉，甚至开始扭曲，我开始看不清现实，觉得周围的一切都在和我作对。于是我开始故意迟到，故意不去上班，来发泄自己的负面情绪。</p>\n<p>同时我父母也在这段时间常常问我为什么一直在出差，怎么工作那么不稳定，随机联想到自己岁数一直在增长，但是却连女朋友都还没有，感觉自己的未来一条黑，于是就更加给自己添油加醋，让自己的负面情绪上升到了我无法控制的底部。</p>\n<p>最后不管我通过什么方式发泄内心的不满，都没法平复我内心的波澜，所以没有办法，我最终还是被自己的内心打败，提出了辞职。</p>\n<p>整个过程对我现在来想都是可怕的，我一直以为自己的内心是强大的，我一直以为自己是一个坚强的人。但是时间向我证明了我其实是个问题很大的人。</p>\n<h1 id=\"after-story\"><a href=\"#after-story\" class=\"headerlink\" title=\"after story\"></a>after story</h1><p>辞职后，公司补发了我不少出差补贴的钱，办完离职手续后，我便开始了一段“堕落”的日子，我一股脑的将自己埋进了游戏的世界。我缩小自己平时的所有日常开销，换了一个一个月非常便宜的租房，一直宅到19年5月。 19年五月我回了次家，看了父母一面，突然醒悟觉得自己到底在干什么，于是回去后我便开始为重新找工作做准备，从5月到8月我学习了不少也做了不少练习项目，最后开始投简历，很快我收到了很多面试邀请，西电的这个学历真的非常有用，给了我很大的帮助。</p>\n<p>现在我在一家外包公司入职，负责浙商银行柜面系统的开发，但是还不确定是否能一直留下来，毕竟还有一次面试，只有通过的那次面试，我才能真正算找工作成功。如果没有通过，我就又要开始慢慢找工作了。</p>\n<p>但是我对现在的我的自控能力是不满意的，我现在有点不乐意去学习技术知识。一方面是因为很多知识我觉得学了不知道有啥用，另一方面是面试的时候，面试官不一定会叼你做的东西，除非你做的作品可以优秀到你可以自信的甩他一脸的那种才行。</p>\n<p>现在我还在等待第二次面试的来临，我已经准备好了简单的自我介绍，并做了背诵，我也对黄河银行的项目做了简单的回顾，防止自己在被问到的时候卡壳。希望自己可以通过面试，重新回归生活的正轨</p>\n"},{"title":"interview","date":"2019-08-22T05:41:21.000Z","_content":"\n# 银信科技面试题\n\n## HR提前放出的题目\n\n1. 从项目开始到线上的流程\n\n我就拿我黄河银行收单系统来举例说明, 当时项目一期刚好结束, 我过去接手开发时(已经提前熟悉了一遍项目一期的项目架构,代码以及系统负责的黄河银行业务内容),双方正准备筹划项目二期建设需求,黄河银行那边先给了我们一份项目二期建设的需求书, 随后我和另一名负责pos的app相关开发(c的)的同事(他全程参加了项目一期的开发,但是java那块的负责人在一期结束后离职,他对java后台不太熟悉), 我们两人外加上部门负责的领导, 进行了几次开会, 其中涉及java后台的改动和新功能的开发, 我对需求进行了评测,从现有系统架构以及现有代码出发, 评估了下工时, 并说了一些自己的看法, 领导听取了一些意见, 最后与银行方一起开会把需求定版. 随后就是分模块开发, 二期开发过程中, 公司也多派了几位开发人员,协助完成了整体开发工作. \n\n由于项目还包括ios和app,所以开发期间也少不了和移动端开发人员进行沟通,为他们编写后台接口文档\n\n整体开发的差不多后, 将测试环境部署起来(由于一期构建好了一个完整的测试环境, 我做的只是将新版本导包部署), 银行测试人员开始进行业务测试, 银行技术人员开始查阅源代码以及做压力测试等技术性高的测试. 测试过程中银行方会发现需求业务存在问题(我按照需求做了), 要求我改逻辑. 一开始我由于缺乏行业经验, 同时觉得难度不大,就加班加点帮忙改了. 随后银行方要求改的越来越多, 脱离需求书过多, 我便提出要求银行方重新定制新的需求书, 并发版本备案, 走正式流程, 否则不能进行修改(前提是自己实现的功能和需求已经一致)\n\n最后测试环境测试没问题后, 需要进行项目上线,, 上线前,我先编写了傻瓜式的上线步骤,每一步干什么都要写清楚. 然后召开一次上线评审. 评审没问题后就会上线, 当时上线时间是选择了晚上12点, 我10点左右陪同银行技术人员进入生产区, 然后银行技术人员根据上线步骤文档,一步步操作系统. 关闭系统-部署项目-重启服务-对重要业务进行立即在线测试, 这些全都没问题后便开始了真正的试运行阶段\n\n试运行期间, 我常常跑生产区看日志(有些地方实现确实缺乏经验,包括日志打印这些), 在试运行阶段出现的问题, 会统一在一个时间点打补丁包进行更新(所谓的增量更新)\n\n最终系统稳定后, 可能会继续做一些边缘的开发任务(公司项目组开发人员有限,其实后期就我一个java后台), 比如测试期间的一些页面觉得不好看的进行下一些优化, 银行部分机构撤并后, 系统需要进行下数据修改(写数据变动sql,系统不能停止运行), 符合最新的机构报表情况(因为会影响到资金清算入账,所以很重要)\n\n2. mybatis的$和#\n\n比如 select name from user where ${column} = #{value},jdbcType=VARCHAR}(先暂且不谈sql注入啥的,我只是举个简单例子来说明) 首先它们都会被替换为mapper中传入的参数的具体值, 但是有个区别, #内的参数会被mybatis预处理, 有点类似jdbc的preparedStatement中的?, 就像我这个例子中的描写的一样,最终`value`参数会使用双引号来修饰,使得其在sql中表示为一个字符串. 而${column}它是不会进行预处理,或者说进行转义的, 它会直接将column参数包含的内容替换到这个sql语句中.\n\n3. 数据库的优化? 索引怎么创建?\n\n数据库优化如果指的是查询优化,那么我的个人经验总结如下(根据体系结构从上倒下来讲):\n\n- 作为数据库使用者,还非数据库开发者, 最显而易见的道理就是, 我查的少了速度肯定就快了. 在实际开发中, 我遇到不少抉择, 是再查一遍数据(只需增加少量代码), 还是修改多处java代码把数据重新传进来(需要改动很多地方,从开发者角度出发,产生了极度的抗拒心理). 我认为这也算是一种优化, 我应该恪守DRY原则, 不重复获取数据,并且争取在一次业务逻辑中就获取到所需的数据,不多查也不少查. 真正想去完成到这一点其实很难. 很多时候由于项目周期紧,所以很容易打破这个原则,采用比较暴力的方式去获取.\n\n- 在sql层面上, 最重要的优化思路就是重构查询方式, 但是mysql不是静止不变的东西,所以不同版本,对于sql的重构方式也不经相同, sql解析器和查询优化器的行为不是我能掌控的, 因为我没看过源代码,也不是其开发人员. 幸运的是, 这个优化思路可以说是在长远来看不会变的, 针对不同的情况, 我们可以将我们的sql重构,来达到更快的效果, 比方说现在被大多数人所认同的 用JOIN替代子查询的方式就是一种优化思路. 子查询虽然更容易理解,但是在基准测试上会发现其性能不如JOIN的形式. 其他还有很多sql优化思路,比如切分查询,分解关联查询等等.\n\n- 使用索引, 分表等等\n\n- 理解数据库的内部机制,比如通信协议数据包定义是否还能继续优化,查询优化器怎么运作的, 如何配合他使得我的sql更加高效的运作, 或者说有能力的话对其进行改造,. 这一层次的优化思路对开发人员的要求特别高, 一般来说对于忙碌(菜)的应用开发人员来说是不太可能的. 或者说分配给数据库更多的可用内存空间等等\n\n- 文件引擎层面, 我们的数据最终是需要存到存储器中的, 那么想加速, 提高硬盘IO速度也是很关键的一环, 最快的当然是直接跑在内存中.\n\n- 建立数据库集群，实现读写分离，负载均衡，热备等，简单来说就是多个数据库共同完成一个工作，来减少单数据库的访问压力，从而提高查询速度\n\n\n索引如何创建?\n\nCREATE INDEX indexName ON mytable(username(length));?\n\n4. 数据库的引擎? 以及区别\n\n首先说到数据库的引擎, 一般指的是Mysql的存储引擎, 而不是Oracle. 因为Mysql的体系结构中,从上到下大致分四层, 第一层就是我们应用开发人员一直接触的一层, 就是连接池组件, 第二层可以算是Mysql的控制层,里面包含sql分析,sql优化器,缓存组件等等, 这一层的任务不是查数据,而是处理应用开发人员的各类sql语句,并根据既定的优化方案去制定如何查询数据, 第三层便是Mysql的存储引擎, 由于Mysql制定了存储引擎规范, 所以我们可以自定义存储引擎的行为来得到我们需要的查询效果(本人并没有自定义存储引擎的任何经验),所以世界各地不同地方的编程大牛或者公司都开发了自己的存储引擎, 最著名的应该就是InnoDB, MyISAM以及Memory引擎(拿出来作对比,因为其数据都存在内存中,和别的存储引擎区别明显). 第四层是就是文件引擎了,真正持久化数据的地方.\n\n而Oracle的体系结构没有这个特点,所以没有引擎这种说法, 但是其内部的数据存储机制,换句话来说其实也是一种\"引擎\"\n\nMysql引擎的区别我觉得总结起来有几点核心的技术点:\n\n- 如何存储数据? 是存储在文件硬盘中还是存储在内存中,或者存储在其他存储器上. 比如InnoDB和Memory的区别, Memory的数据都是存储在内存中, 好处显而易见,内存中操作数据的速度是最快的\n\n- 是否支持事务? 我们知道事务的好处是, 万一中间的某个sql执行失败, 就全部失败, 不会影响数据库已有数据. 当我在进行数据迁移的时候, 对事务的距离是最近的, 编写数据迁移脚本的时候, 我个人水平有限, 没法一口气写出毫无错误的代码, 所以使用事务已经是一个必须品了(不过也要注意DDL和DML, 当使用DDL语句,比如CREATE,DROP,ALTER的时候,由于表本身结构要变动,所以变动前会隐式提交事务, 这一点一定要非常注意,我以前在数据迁移的时候遇到过这个问题,导致了严重后果,花费了更多的时间去修复). InnoDB就是支持事务的一个存储引擎, 而MyISAM则不支持事务. 支持与不支持, 我觉得好与坏,一切都要根据实际. 因为事务逻辑, 必将导致InnoDB写更多的代码去实现事务, 这也就会降低InnoDB的执行效率,因为它要处理的事情变多了. 从这一点上也可以很好的解释为什么MyISAM的查询速度通常都比InnoDB表现要好\n\n- 索引类型的区别,换句话说, 它们是如何想办法查数据的,数据的组织方式是怎么样的. InnoDB采用的是主键索引(也就是聚集索引)为主,非聚集索引为辅的模式, 我们可以抽象成, 它把所有数据构建成了一个B+树, 利用B+树的特点, 做到快速定位. 而MyISAM最大的特点也许就是全文索引了,同时它将数据和文件分开存储, 所以采用的是类似非聚集索引的机制(后者能不说则不说,毕竟我自己用的很少)\n\n又比如InnoDB支持外键约束, 而其他常见Mysql的存储引擎不支持\n\n5. 聚集索引和非聚集索引的区别?\n\n简单来说, 在Mysql中存在聚集索引这种说法, 聚集的意思其实就是, InnoDB它将数据和索引放在了一起,抽象成了一颗B+树, 叶节点上存放了所有的行数据, 所以叫聚集. \n\n而非聚集的意思是, 数据和索引它是分开的. 比如InnoDB的普通索引(非主键索引)都是非聚集索引, 这些索引自身构成了一个B+树, 并且叶节点上存的是主键索引对应的值(理解为存的是一个指针,或者说引用). 拿到这个引用后,再去主键索引的那颗B+树上搜索到对应的行\n\n6. 怎么和第三方或APP交互?\n\n- 交互的大前提是, 两台计算机必须可以进行网络互联, 简单来说就是可以进行TCP或者UDP连接(Socket则是这些连接协议的一个抽象层,方便开发人员使用的), 随后在TCP基础上,数据包内容按照HTTP协议规定的格式(目前使用最广的TCP/IP通信协议)进行传输数据. \n\n- 我们的业务数据都是放在http请求的报文体中的, 目前来看json格式是最流行的一种方式, 因为应用层上有很多优秀的解析库支持, 且json数据易读, 方便沟通.\n\n- 最终请求会根据url地址 被转发器代码分配到不同的业务逻辑代码中进行处理,并返回\n\n这样便完成了一次简单的第三方或者APP交互(也可以举支付宝对账文件的例子)\n\n7. 会单元测试吗?\n\n说实话, 我的单元测试的思维只停留下, 比如使用Junit 测试下我的一些我不太确定的函数是否运行正常,输出对不对,会不会报错等等. 或者使用框架的单元测试框架 比如Spirng-test对我刚开发的一个controller方法进行测试.\n\n但是一些普通的 我感觉很自信的地方, 我都不会去写专门的单元测试代码. 毕竟写单元测试代码也是一种时间的开销, 如果原代码出现问题, 那么你还必须同时修改单元测试代码的逻辑. \n\n所以对于这一块, 我仍然存在一定的迷惑, 不知道面试官可以说一点自己的见解\n\n8. 经常使用的集合?\n\nlist有ArrayList,LinkedList, 简单通用性能中肯, 如果插入频繁,量大的话 我会用LinkedList,因为不需要做扩容. 如果读取操作比较多的话,会使用ArrayList, 总而言之要根据不同情况使用.\n\nSet有HashSet,当我不希望有重复数据的时候使用,但是实际用的很少,因为重复数据基本不会出现在java业务层面上; TreeSet, 当我希望进行自动排序的时候会用.\n\nMap有HashMap, 效率高, jdk8后碰撞几率低,真的碰撞了还会用红黑树来降低查询时间复杂度. 如果存在并发操作map的场景的话, 会使用ConcurrentHashMap代替; TreeMap, 当我需要对key做排序的时候使用\n\nCopyOnWriteArrayList 没用过,但是CopyOnWrite是个很不错的编程思想\n\n若需要考虑线程安全, 则都会对应使用相关的线程安全实现类, 或者使用同步转换方法\n\n9. 用到SpringCloud的哪些组件?\n\n没用过SpringCloud\n\n10. 用的什么开发工具?\n\n个人毕业开始就一直用的InteliJ idea, 用它的好处是, 总是能第一时间支持框架的最新功能, 界面风格更喜欢\n\n大学期间用的是Eclipse\n\n代码编辑器一直再用Vscode, 有良好的插件社区, 能当半个IDE使用\n\n11. 有用到定时器吗?\n\n有, 但是不知道您问这个问题具体含义是什么呢? 目前来看我使用定时器并没有踩到过什么坑, 他们都很好的在工作\n\n12. redis主要场景使用?\n\n- 做缓存, 因为全是内存操作,读写性能优异, 且支持过期时间设置\n\n- redis不同于Ehcache Memchache 它有多种存储数据结构,而不是单一的String, redis支持使用存储list,而且可以从前后端进行操作, 可以用于实现消息队列. 又比如有序set, 可以用于实现一些排行榜热度榜功能; \n\n- redis的部分指令是原子性的, `incr`, 这样就可以用于做一些简单的计数器功能, 比如浏览数, 播放量等等\n\n## 面试当天流程记录\n\n发我的面试邮件突然说地址错了,更改地址, 所以我判断这肯定有点猫腻, 有可能存在邮件造假风险\n\n说好的两点钟, 结果居然没有提前,反而是延迟了9分钟才下来..\n\nok, 人下来了, 准备进行第一场社交面试,管他是黑是白, 反正我就是个半斤八两但是愿意干活的人\n\n待会不要紧张, 不要以为面试官有多厉害, 回答好自己知道的就行了, 同时也不要关心自己说的语气啥的, 慢慢说就行了\n\n面试官一开始有两个, 但是面着面着有一个出去了. \n\n面试问的问题还算可以, 但是有些东西我确实没答上来(感觉面试前HR给的题目我回答的都特别棒, 但是没给的题目我就回答的不是特别好了)\n\n我回答的特别不好的有: \n\n1. 知道消息中间件吗, 它有什么作用?\n\n2. 知道axios的底层是什么吗? 我说了ajax, 然后他说是promise. (https://segmentfault.com/a/1190000006708151 + https://www.jianshu.com/p/c09916018f3d)\n\n3. vue里的三个点是什么 ...(主要是写了ES6,结果导致他问了,结果我没复习好,加上本身用到es6的语法就很少)\n    https://forum.vuejs.org/t/vue-form/29440\n\n4. 微服务,分布式,SpringCloud 这三个都问了, 我没接触过,所以都没回答\n\n5. oracle三大范式(https://blog.csdn.net/Daniel_Chen_/article/details/53482663)\n\n6. springboot的properties文件或者yaml文件是怎么读取的(https://blog.csdn.net/jlh912008548/article/details/81437036 + 建议自己读一下源码)\n\n\n最后面试官觉得我数据库这块说的还是蛮好的, 感觉面试官非常和蔼, 让我面试体验很棒, 虽然已经被筛掉, 但是整个面试过程对我来说获益匪浅\n\n\n## SpringBoot是如何读取properties文件或者yaml文件的\n\nSpringBoot启动时, 先创建SpringApplicationContext, SpringApplicationContext在初始化阶段, 会从spring.factorys文件中读取初始化器和监听器, 其中有一个ConfigFileListener, 当Enviromet类准备完毕后. 会调用ConfigFileListener的一个回调方法onApplicationEnvironmentPreparedEvent, 这个方法会去搜索默认位置下的配置文件内容以及profile的内容, 并将他们也加载到Environment中\n\nEnvironment是SpringBoot存储运行时所有配置资源的地方, 后期SpringBoot获取properties文件或者yaml文件的配置,都是从这个类中读取的\n\n## vue的promise\n\nhttps://segmentfault.com/a/1190000006708151 + https://www.jianshu.com/p/c09916018f3d\n\n总结来说: \n当遇到多次回调的时候, js代码会变因不同开发人员的习惯, 写出不同的臃肿代码, 不美观且不宜读, 这种叫做回环金字塔或者回调地域问题. \n\n而promise是es6标准的一部分, 它将异步回调进行的统一, 使得开发人员拥有了统一的编写异步回调的语法, 遵照promise可以让我们的异步编程代码更规范更合理\n\npromise使用了三种状态pending, resolve, reject来统一管理回调执行时期, 同时使用then函数和catch函数分别处理正常回调和异常回调(then函数也可以处理异常,只不过为了更合理,写在catch函数中更好)\n\n# 仍需了解的知识\n\n消息中间件RabbitMQ, springcloud+dubbo, oracle或者mysql的存储过程,函数编写, db2数据库使用\n\nzookeeper, kafka, webservice, lua, nginx, elasticsearch,\n\n\n# 浙江承志信科技有限公司面试流程\n\n面试官题目:\n\n1. 抽象类和接口的区别\n\n抽象类通常作为一种骨架实现，为各自子类实现公共的方法, 包含了公共的基类行为, 减少了代码重复性, 提高了代码可重用\n\n此外(我的个人见解), 抽象类的这种能力, 其实我们也完全可以使用一个非抽象类的父类去实现, 在父类中也可以为各自子类实现公共的方法. 但是这就好比正式与非正式的区别, 当你使用抽象类语法的时候, 其他开发人员可以一目了然的知道, 这个类包含了基类的公共方法, 为我们实现某个接口提供了一个骨架实现. 而如果你写的是一个普通的方法, 你可能还需要写注释去解释类的行为目的.\n\n接口是一种行为约束, 一种规范, 使得声明和实现解耦 , 提高了代码灵活性, 比如jdbc是java官方提出的接口, 随后不同的数据库厂商对其进行了实现, 当想换另一个数据库的时候, 不需要修改大部分代码(因为它们和实现是解耦的), 只需要修改使用的实现类即可\n\n接口类体现了自然界“如果你是……则必须能……”的理念\n\n我认为，抽象类和接口的区别在于使用动机。\n\n使用抽象类是为了代码的复用，是具体开发后会考虑的事情\n而使用接口的动机是为了实现多态性,声明和实现解耦,是具体开发之前做的事情, \n\n接口就像领导分配职位和职位要求, 这样的话, 后续想要替换某个职位的人员, 就找相应职位的其他人员即可(解耦,组件化,多态)\n而抽象类就像一个职位的一个代表, 当领导不知道如何具体讲述一个岗位该干什么的时候, 便挑一个代表出来, 告诉大家这个代表知道所有的基本工作内容, 大家可以学习借鉴(代码复用)以及创新(重写)\n\n\n2. 谈谈你熟悉的设计模式\n\n3. 对Spring的理解, IOC, AOP\n\n# 久久基因\n\n1. 二分查找\n\n2. 实现String的indexOf\n\n3. 伪代码实现生产者/消费者模式\n\n```java\n//生产者消费者伪代码\nProducer p;\nConsumer c;\nLinkedList buffer;\nBoolean door = true;//true = open , flase = close\n\nvoid produceItem(){\n    if(closeDoor()){\n        if(buffer.size >= max){\n            sout(\"is full, i can take a rest now\");\n            openDoor();\n        }else{\n            buffer.add(Item);\n        }\n    }else{\n        sout(\"door is close, i am waiting\"); // sout = System.out.println\n    }\n}\n\nvoid comsumeItem(){\n    if(closeDoor()){\n        if(buffer.size != 0){\n            buffer.remove(Item);\n        }else{\n            sout(\"nothing to do!\");\n        }\n        openDoor();\n    }else{\n        sout(\"door is close, i am waiting\");\n    }\n}\n\nvoid synchronized closeDoor(){\n    if(door){\n        door = false;\n    }\n    return door;\n}\n\nvoid openDoor(){\n    if(!door){\n        door = true;\n    }\n}\n\nmain(){\n    //Thread A\n    while(true){\n        produceItem();\n    }\n\n    //Thread B\n    while(true){\n        comsumeItem();\n    }\n}\n```\n\n\n4. 单点登录\n\n- 什么是单点登录\n\n单点登录(SSO, Single Sign on), SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。\n\n- 为什么要单点登录\n\n针对企业多套不同系统提供统一的登录方式, 提高用户的使用体验. 简单来说就是为了方便, 一把锁可以开同一个公司的多个门, 而不是每次开个门都要换一把锁\n\n- 如何实现单点登录\n\n同域:\n如果你的所有域名地址都是同域的, 比如app1.a.com, app2.a.com, 那么可以使用cookie和session就能够实现单点登录\n在不同的后台server中进行session的共享, 同时将sessionid存至顶级域cookie中, 比如存至a.com中(cookie的存取是按照域来划分的,它无法跨域获取,比如你如果是a.com的系统,是无法获取到baidu.com的cookie的). 这样如果你在app1.a.com中登录, 那么当你在app2.a.com中登录的时候,发现已存在cookie,所以就直接发送这个cookie内容给app2的后台, 而app2的后台从共享session中获取到了由app1存取的session, 于是验证成功,登录完成\n\n不同域:\n如果是不同域, 那么cookie就没法用了,因为cookie是无法跨域访问的, 这时候就必须使用另一种方式, token的方式.\n专门分配一个sso服务用于登录, 比如sso.a.com, 当访问app1.a.com的时候, 会先跳转至sso.a.com进行登录, 要求输入用户名和密码,并返回一个唯一的token, app1拿到这个token后, 发送给后端sso进行验证, 验证无误后, 记录登录状态, 并成功登录. 随后访问app2的时候, 也是一样跳转到sso.a.com进行登录, 但由于之前已经登录过, 所以这次就直接返回token给app2, app2拿到后也进行一次验证, 无误后,直接登陆成功.\n\n\n# 鸿程系统\n\n1. mysql分页\nhttps://zazalu.space/2019/08/28/mysql-pagination-optimization-1/\n\n2. mybatis的statement要素 \n\n比如<select> 我们最常见的属性有:\n\n- id, 唯一的标识符，可以被用来引用这条语句。\n\n- parameterType, 指示传入参数的类型, 我自己最常用的是传入map,  这个参数可以不选, 因为mybais可以通过类型选择器(TypeHandle)进行判断\n\n- resultType 或者 resultMap, resultMap对应自己定义的<resultMap>我觉得适用了大部分情况, 也可以使用resultType, 对应指定相应的pojo类\n\n- flushCache, 如果设置为true, 则会清除一级和二级缓存, 一个在特殊需求下会很好用的设置\n\n- useCache, 设置为false, 则会取消这个statement进行二级缓存, <select>是默认为true的\n\n- timeout, 超时时间\n\n3. vue的生命周期\n\nbeforeCreate 和 created\n在这俩个钩子函数执行的时候，并没有渲染 DOM，所以我们也不能够访问 DOM，一般来说，如果组件在加载的时候需要和后端有交互，放在这俩个钩子函数执行都可以，如果是需要访问 props、data、method 等数据的话，就需要使用 created 钩子函数\n\n在 mounted 钩子函数中可以访问到 DOM\n\n在 destroy 钩子函数中可以做一些定时器销毁工作，了解它们有利于我们在合适的生命周期去做不同的事情。\n\n4. 常用的io类\n\n- 字节流 File(Buffered)Input(Output)Stream\n- 字符流 BufferedWriter和BufferedReader, PrintWriter和PrintReader\n\n看下我写的Java基础.md中的I/O部分\n\n\n# 其他\n\n1. simpleDataFormat 高并发下存在问题\n\n由于SimpleDateFormat不是线程安全的, 导致多个线程使用同一个SimpleDateFormat实例的时候, 会因为状态变量共享导致异常报错\n\n解决方法: 使用ThreadLocal包装,使得每个线程对应一个实例. 但是这样如果线程很多的情况下又会创建太多的SimpleDateFormat实例, 这时候你可以使用DateTimeFormatter, LocalDateTime(jdk8)去代替, 不过线程安全其实也就意味着要做控制,所以我认为性能可能会低于前者\n\n2. 常见的线程安全集合类\n\nVector HashTable\n\nConcurrentXXX, CopyOnWriteXXX\n\n3. 正向和反向代理\n\n正向代理是内网需访问外网，由一个可以访问外网的代理服务器进行代理转发请求\n反向代理是外网需访问内网，外网服务器访问代理服务器，由代理服务器转发请求\n\n# 非技术类问题\n\n1. 为什么离职\n\n- 工作不在浙江,父母不愿意\n- 出差过久\n- 自己原因\n\n2. 为什么那么久没有再工作\n\n- 自己原因\n\n3. 你觉得你的优点 你的核心竞争力是什么\n\n- 处境不容乐观, 但是依旧开朗\n- 前后端,测试,生产全都熟悉,会写数据接口, 会搞整一点系统架构, 有长期单人驻场开发经验, 有很好的沟通能力\n- 深知自己以前的缺点, 不卑不亢, 踏实干事\n\n# 面试自我介绍（浙商银行版）\n\n## 基本信息\n我叫何镓钧，来自浙江绍兴，17年毕业于西安电子科技大学软件学院，今年8月以来就一直就职于赞同科技。\n\n## 聊聊黄河银行项目\n\n（从项目的简单介绍说起）\n我毕业后就一直从事银行相关业务系统的开发，比如我参与过黄河银行其一码付平台二期的开发，一码付平台是福建联迪（我当时就职的公司），为黄河银行提供的一套聚合支付交易平台，所谓的一码是指一个二维码就可以向客户提供各类第三方支付服务，比如支付宝，微信支付，银闪付等等。同时一码付平台还提供了面向行内用户的管理平台和面向商户的商户服务平台。\n\nVersion1.0\n【我当时主要负责的功能模块有，比如行内员工管理，商户管理，机构管理，码牌管理，移动端APP数据接口，以及涉及资金的交易流水对账清算入账功能。 同时我作为驻场开发人员，我还负责部署开发和测试环境，配合银行测试人员测试；负责与银行经理对接项目需求，参与各种与需求相关的会议，并代表公司发表意见；对接银行新核心接口并做联调测试；编写项目相关开发文档等等。】\n\nVersion2.0\n【我主要负责面向行内员工的管理平台开发，比如行内员工管理，商户管理，多级审核以及资金的对账清算入账功能；同时也作为驻场开发人员负责对接银行测试人员和负责与银行核心接口进行联调测试等。】\n\n我觉得从我的经历来看，我对自己的沟通能力，协调能力以及严谨的软件开发能力有一定的信心，我非常希望可以为浙商银行贡献自己的一份力，并努力实现自己的自我价值！谢谢\n\n----如果时间来得及继续讲下面的----\n\n（主要是为了体现我自己对于业务学习能力，以及十分看重业务的态度）\n先拿商户管理为例，它听上去感觉很简单， 但其实在商户开立的过程中，需要涉及第三方支付的商户开立，银行本身的内部账户开立，商户银行账户查询验证，同时还要提供多级审核(授权)机制，每个功能的完成都必须对业务有非常清醒的认知。 类推到我们柜面系统开发上来看，柜面系统涉及的业务量也是非常多的，只有熟悉了业务的程序员才能开发出银行需要的优秀交易，才能胜任并满足项目的长期发展。而我毕业后就一直从事银行开发工作，虽说之前的属于边缘子系统，不太涉及银行核心业务，但是对银行业务的学习能力充满信心。\n\n行内员工管理主要任务是新增行内员工以及修改行内员工的基本信息和职级，\n\n\n（目的是表现我开发上的严谨性）\n再说下交易流水的对账清算入账功能，\n\n对账：通过定时任务，每天10点都会根据第三方支付特有的银行商户号从第三方支付那里获取对账文件，内含第三方交易流水记录，根据银行交易流水号来一一比对对账文件内的交易流水和平台交易流水的交易状态，交易金额，手续费是否一致。若都一致则标记为对账成功否则失败。\n\n清算：将对账成功的交易流水，根据银行需求里提出的手续费规则（银行手续费，机构手续费，第三方手续费，是否手续费返还，是否手续费优惠等），计算每笔交易的手续费，并记录入表，并标记为已清算\n\n入账：根据日期取出已清算的交易流水，按照规定转账路线，调用核心入账接口（比如先转入内部账再转到商户账），完成对商户T+1的打款\n\n差错处理这一块也要讲。对账的差错处理，由人工审核，无误后重新进行对账清算流程。\n\n全部采用了Java的BigDecimal完成了所有涉及金额的操作，并且按照int类型存储至单位分，保证了资金计算无误\n\n### 如何与银行核心系统互通互调的？\nhttp，具体来说借助http工具类(当时公司内部对socket的封装类)，根据接口文档的规定，发送http报文，并接受返回报文，根据返回报文头携带的核心状态码，展开后续的操作\n\n说到HTTP, 这里就涉及了TCP连接的概念(HTTP的实现不是非使用TCP传输协议不可, 但是一般都是使用TCP, 从默认端口80就可以知道这点). TCP是一种可靠的字节流服务. 为了规范连接以及统一分层, 我们都使用Socket来进行TCP连接. TCP是全双工的, 字节数据可以双向传输. TCP属于\n\nTCP是如何保证可靠的?\n`数据完整性校验机制`,`分组丢失重传机制`,`滑动窗口提高信道吞吐量`\n\nTCP连接最常问的两个东西:\n三次握手(用于建立连接)和四次挥手(用于拆除连接)\n\nTCP三次握手:\n1. 客户端发送SYN包(SYN=1,seq=x),进入SYN SEND状态\n2. 服务端接收到SYN包, 向客户端回复SYNACK包(SYN=1,ACK=1,seq=y,ack_seq=x+1),从LISTEN状态进入SYN RCVD状态\n3. 客户端接收到SYNACK包后, 向服务端回复ACK包(SYN=1,seq=x,ack_seq=y+1), 客户端进入ESTABLISHED状态.服务端接收到这个ACK包后也进入ESTABLISHED状态,.至此, 双方连接建立完毕\n\nTCP四次挥手:\n1. 客户端发送FIN段, 要求断开连接, 状态进入到FIN_WAIT_1, 这个状态下客户端不会再发送新的数据包\n2. 服务端应答这个FIN段, 并返回一个ACK段, 状态进入到CLOSE_WAIT, 这个状态下的意思是服务端会继续发送剩余未发送的数据包, 但是不会再接收新的数据包.客户端接收到ACK段后, 状态进入到FIN_WAIT_2\n3. 服务端发送完剩余数据包后, 会向客户端也发送一个FIN段,状态进入到LAST_ACK, 这个状态的命名含义是服务端只接受客户端最后一次的ACK段.\n4. 客户端接收到服务端的FIN包后,返回ACK段, 状态进入到TIME_WAIT, 等待2MSL后进入CLOSED状态. 服务端接收到最后的ACK包后进入到CLOSED状态.至此TCP连接就会结束\n\n### 常用的Linux Shell指令\n\nman,cd,ls,mkdir,rm,ps,grep,vim,top,mv,echo,whichis,$(),|,cat,tail,\n\n### Maven（重要性不高，先往后推）\n\n### Oracle：\n1. 如何搭建，先安装服务端，再安装客户端，按照网上的静默化安装流程进行安装，一些关键点：\n    - 使用单独的oracle用户进行安装，而不是使用root用户安装\n    - 其中可能会出现一些依赖错误，根据提示使用yum安装对应软件包\n2. 使用上oracle特有的东西：\n    - 主键自增，使用序列，每次插入的时候显示调用(使用nextval)：\n    ```\n    --插入数据 \n    insert into test values(seq_on_test.nextval,'Mary',15); \n    insert into test values(seq_on_test.nextval,'Tom',16); \n    ```\n    - 序列，是oracle提供的一个产生唯一数值型值的机制\n    \n    序列的创建方式，\n    ```\n    CREATE SEQUENCE 序列名\n    [INCREMENT BY n]\n    [START WITH n]\n    [{MAXVALUE/ MINVALUE n|NOMAXVALUE}]\n    [{CYCLE|NOCYCLE}]\n    [{CACHE n|NOCACHE}];\n    ```\n    - oracle分页\n    oracle每次结果集都会有ROWNUM来标明每行数据的位置，下面是推荐写法，这种写法不会因为rownum变大而不断变慢\n    `select a.* from ( select t.*,rownum rowno from test t where rownum <= 20 ) a where a.rowno >= 11`\n\n3. oracle索引:\n\n    常用的还是B树索引(是否聚集不太清楚)\n    基数少的时候使用位图索引, 为什么是基数少的时候？ 因为位图索引其实就是为每一行维护一个位图向量，使用1和0来\n    确定这一行这一列的值是否等于某个值，这种机制适合基数少的情况，具体可以看看https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html， 很快就能理解了。位图索引适合静态数据，而不适合索引频繁更新的列，因为它的建立机制是扫描整个表后得到的位图向量，所以当你频繁修改更新列的值，oracle需要对这个位图向量进行多次的更新操作，更新的时候使用行锁定，导致其他oracle操作无法正常进行会被堵塞，最终导致性能不佳\n\n4. oracle存储过程:\n    \n    为什么需要存储过程？\n    存储过程最大的特点是性能优异，毕竟它是预编译过的，\n    存储过程看上去就像编写sql脚本，可以定义状态和行为，同时存储过程可以复用，这样就使得我们可以把业务逻辑从应用层移动到数据库层，并且享受存储过程的性能优势。但是大量的使用存储过程实现业务逻辑，则不利于数据库迁移，毕竟不同的数据库甚至不同的数据库版本，相同的plsql代码都不一定能正常执行。\n    安全性。避免了sql注入，避免了暴露表结构和字段\n    \n    存储过程写法?\n\n5. oracle视图：\n我前一个项目没怎么用视图， 但是视图我觉得还是不错的，它是一种虚表，存储了select语句的结果。如果修改视图的记录会同步影响到基表上，这点自己注意下；删除视图不会影响基表\n\n### Redis\n1. 为什么使用Redis？\n    - 作为缓存中间件，减少数据库压力，提高热点数据的响应速度\n    Redis的读写性能优秀（官网10w）以致于Redis的瓶颈在于网络吞吐而不是本身的读写（每秒4w次读写，跑满100M带宽）\n    - 除了String以为拥有多种数据类型，为开发人员减负\n2. 常见的数据类型：\n    - string，list，set，sorted set，hash\n    我只用过string，用过incr递增\n\n### nginx\n1. 之前项目主要用于反向代理，负载均衡没做，因为内网对应的是单机实例，但是仍然需要nginx做分发，因为有三个后台应用服务器，一台专门做清算的，一台专门为管理平台返回数据的，一台专门为商户服务平台返回数据的\n2. nginx是优秀的http服务器，常用于做反向代理，官网测试可以达到5w并发\n\n多级审核如何实现的？\n简单来说，多级审核是通过审核链信息表，里面记录了审核的分级流程，java程序借助该表信息从而判断下一级推送给谁进行审核。\n\n这个功能属于后期新增的需求，而且要求多个审核模块都要加上这个功能，所以我使用了java的泛型来实现了这个需求，只需要继承相应的多级审核抽象类，就可以轻松的支持多级审核功能(数据库层需要在对应的表中新增3个字段)\n\n在java中定义一个多级审核抽象类，内部定义了多级审核需要调用的公共方法，每次审核的时候加上对多级审核相关字段的检查(当前审核角色，下一个审核角色，审核链id))，需要新增一个审核链表，专门记录审核流程，比如商户审核必须先由支行行长审核再由总行管理员审核才算通过。\n\n### Vue\n1. Vue是使用Object.defineProperty()实现数据变化 -> 视图更新， 给可输入控件添加DOM事件监听来实现视图更新 -> 数据变化，从而整体上达到了双向绑定的效果\n2. Vue使用了虚拟DOM，为什么？\n优点：\n\n`保证性能下限`： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多(每次暴力操作DOM都会引起页面重新渲染)，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；\n`无需手动操作 DOM`： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；\n`跨平台`： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。\n\n缺点:\n\n无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。\n3. 虚拟 DOM 的实现原理主要包括以下 3 部分：\n\n用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；\ndiff 算法 — 比较两棵虚拟 DOM 树的差异；\npach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。\n\n### my youdian\n\n善于沟通，但是不胡乱发言，主动寻找问题关键点，不喜欢拖延。\n\n严于律己，不骄不躁，踏踏实实做事。\n\n善于总结归纳，有自己的博客经常做技术总结。\n\n\n### 对账？\n\n平台流水与第三方支付流水进行比对记录成功流水交易\n\n具体来讲，每天早上10点会向支付宝和微信发起对账文件下载请求，我们通过特约商户编号(1)(当然还有其他各类参数，密钥等)(2)，从其平台拉取对账文件，我方平台记录保存并与平台流水进行比对，主要比对金额和交易状态是否正常。\n\n(1) 黄河银行就是支付宝的特约商户，特约商户编号就是这么来的\n(2) 数字证书，保证来源安全可靠有效\n\n\n### 清算？\n\n交易流水对平后，根据银行的手续费规则， 计算出相应的银行手续费，机构手续费和第三方手续费\n\n(1) 流水较多时，使用分批处理的方式，比如一次处理500条数据，防止内存溢出\n\n### 入账T+1？\n\nT+1代表第二天入账\n\n入账前先要从清算表中获取需要入账的交易流水，然后记录每笔交易转至对应内部户的金额，转至客户账户的金额等等金额，这些金额记录可能存在重复，但是一切都是为了银行人员查看和排查方便。\n\n入账分机构入账和商户入账，分别将机构手续费和商户应得的费调用核心转账接口进行入账\n\n如何确保转账正确性，不会出现资金问题？\n1. 在银行核心有控制，我方平台的账户每天只能入一次账，这是由银行核心提供的技术支持。意思就是说就算我们这里出现重复提交，都不会导致账入两次。\n2. 我方平台借助oracle序列，对程序进行加锁，防止重复入账的发生。（oracle序列是否原子性https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）\n\n## 聊聊SpringBoot项目\n\n### SpringBoot？\n\nSpringBoot是基于Java的一种轻量级应用框架，可以说是Spring的一种扩展，可以快速的构建Java应用程序，比如JavaWeb应用\n\n### Vue\n\nVue是基于JS的一种构建用户界面和单页面应用的MVVM框架，Model–view–viewmodel，相比Jquery，它将页面和数据分离的更透彻，在Jquery时代里我们常常要操作DOM结构，而Vue中我们可以使用Vue的模板语法操作虚拟DOM，将业务逻辑代码和\nDOM操作代码分离，使得开发人员可以将重心偏向于业务逻辑\n\n### 会话管理\n\n服务端和客户端都会保存一段唯一的token，客户端登录成功后由后台生成并对称加密返回数字签名，客户端通过验签后解密数字签名，获取到token并保存至cookie中；随后所有的请求都会携带token，服务器每次都会验证token的有效性。从而保证了会话有效\n\n### boot.js?\n\n是我自定义的一个启动脚本，会存储一些常量到global对象(上下文环境变量)中，方便后续调用。\n\n### VueRouter?\n\n单页面应用的路由控制器，负责根据不同url加载不同的页面内容\n\n### Vuex\n\n一个状态变量的仓库，拥有Vue的内嵌支持，所以相比自己实现的状态变量仓库，使用Vuex存储的状态变量拥有双向绑定的特点\n\n### iView\n\n一个基于Vue的UI框架，我利用它来快速构建出美观的Web界面\n\n### vue-lazyload\n\n一个图片懒加载的nodejs工具包，懒加载可以提高用户体验\n\n### vuescoll\n\n一个方便控制滚轮的nodejs工具包，我利用它来实现下拉自动刷新的功能\n\n\n\n","source":"interview/index.md","raw":"---\ntitle: interview\ndate: 2019-08-22 13:41:21\n---\n\n# 银信科技面试题\n\n## HR提前放出的题目\n\n1. 从项目开始到线上的流程\n\n我就拿我黄河银行收单系统来举例说明, 当时项目一期刚好结束, 我过去接手开发时(已经提前熟悉了一遍项目一期的项目架构,代码以及系统负责的黄河银行业务内容),双方正准备筹划项目二期建设需求,黄河银行那边先给了我们一份项目二期建设的需求书, 随后我和另一名负责pos的app相关开发(c的)的同事(他全程参加了项目一期的开发,但是java那块的负责人在一期结束后离职,他对java后台不太熟悉), 我们两人外加上部门负责的领导, 进行了几次开会, 其中涉及java后台的改动和新功能的开发, 我对需求进行了评测,从现有系统架构以及现有代码出发, 评估了下工时, 并说了一些自己的看法, 领导听取了一些意见, 最后与银行方一起开会把需求定版. 随后就是分模块开发, 二期开发过程中, 公司也多派了几位开发人员,协助完成了整体开发工作. \n\n由于项目还包括ios和app,所以开发期间也少不了和移动端开发人员进行沟通,为他们编写后台接口文档\n\n整体开发的差不多后, 将测试环境部署起来(由于一期构建好了一个完整的测试环境, 我做的只是将新版本导包部署), 银行测试人员开始进行业务测试, 银行技术人员开始查阅源代码以及做压力测试等技术性高的测试. 测试过程中银行方会发现需求业务存在问题(我按照需求做了), 要求我改逻辑. 一开始我由于缺乏行业经验, 同时觉得难度不大,就加班加点帮忙改了. 随后银行方要求改的越来越多, 脱离需求书过多, 我便提出要求银行方重新定制新的需求书, 并发版本备案, 走正式流程, 否则不能进行修改(前提是自己实现的功能和需求已经一致)\n\n最后测试环境测试没问题后, 需要进行项目上线,, 上线前,我先编写了傻瓜式的上线步骤,每一步干什么都要写清楚. 然后召开一次上线评审. 评审没问题后就会上线, 当时上线时间是选择了晚上12点, 我10点左右陪同银行技术人员进入生产区, 然后银行技术人员根据上线步骤文档,一步步操作系统. 关闭系统-部署项目-重启服务-对重要业务进行立即在线测试, 这些全都没问题后便开始了真正的试运行阶段\n\n试运行期间, 我常常跑生产区看日志(有些地方实现确实缺乏经验,包括日志打印这些), 在试运行阶段出现的问题, 会统一在一个时间点打补丁包进行更新(所谓的增量更新)\n\n最终系统稳定后, 可能会继续做一些边缘的开发任务(公司项目组开发人员有限,其实后期就我一个java后台), 比如测试期间的一些页面觉得不好看的进行下一些优化, 银行部分机构撤并后, 系统需要进行下数据修改(写数据变动sql,系统不能停止运行), 符合最新的机构报表情况(因为会影响到资金清算入账,所以很重要)\n\n2. mybatis的$和#\n\n比如 select name from user where ${column} = #{value},jdbcType=VARCHAR}(先暂且不谈sql注入啥的,我只是举个简单例子来说明) 首先它们都会被替换为mapper中传入的参数的具体值, 但是有个区别, #内的参数会被mybatis预处理, 有点类似jdbc的preparedStatement中的?, 就像我这个例子中的描写的一样,最终`value`参数会使用双引号来修饰,使得其在sql中表示为一个字符串. 而${column}它是不会进行预处理,或者说进行转义的, 它会直接将column参数包含的内容替换到这个sql语句中.\n\n3. 数据库的优化? 索引怎么创建?\n\n数据库优化如果指的是查询优化,那么我的个人经验总结如下(根据体系结构从上倒下来讲):\n\n- 作为数据库使用者,还非数据库开发者, 最显而易见的道理就是, 我查的少了速度肯定就快了. 在实际开发中, 我遇到不少抉择, 是再查一遍数据(只需增加少量代码), 还是修改多处java代码把数据重新传进来(需要改动很多地方,从开发者角度出发,产生了极度的抗拒心理). 我认为这也算是一种优化, 我应该恪守DRY原则, 不重复获取数据,并且争取在一次业务逻辑中就获取到所需的数据,不多查也不少查. 真正想去完成到这一点其实很难. 很多时候由于项目周期紧,所以很容易打破这个原则,采用比较暴力的方式去获取.\n\n- 在sql层面上, 最重要的优化思路就是重构查询方式, 但是mysql不是静止不变的东西,所以不同版本,对于sql的重构方式也不经相同, sql解析器和查询优化器的行为不是我能掌控的, 因为我没看过源代码,也不是其开发人员. 幸运的是, 这个优化思路可以说是在长远来看不会变的, 针对不同的情况, 我们可以将我们的sql重构,来达到更快的效果, 比方说现在被大多数人所认同的 用JOIN替代子查询的方式就是一种优化思路. 子查询虽然更容易理解,但是在基准测试上会发现其性能不如JOIN的形式. 其他还有很多sql优化思路,比如切分查询,分解关联查询等等.\n\n- 使用索引, 分表等等\n\n- 理解数据库的内部机制,比如通信协议数据包定义是否还能继续优化,查询优化器怎么运作的, 如何配合他使得我的sql更加高效的运作, 或者说有能力的话对其进行改造,. 这一层次的优化思路对开发人员的要求特别高, 一般来说对于忙碌(菜)的应用开发人员来说是不太可能的. 或者说分配给数据库更多的可用内存空间等等\n\n- 文件引擎层面, 我们的数据最终是需要存到存储器中的, 那么想加速, 提高硬盘IO速度也是很关键的一环, 最快的当然是直接跑在内存中.\n\n- 建立数据库集群，实现读写分离，负载均衡，热备等，简单来说就是多个数据库共同完成一个工作，来减少单数据库的访问压力，从而提高查询速度\n\n\n索引如何创建?\n\nCREATE INDEX indexName ON mytable(username(length));?\n\n4. 数据库的引擎? 以及区别\n\n首先说到数据库的引擎, 一般指的是Mysql的存储引擎, 而不是Oracle. 因为Mysql的体系结构中,从上到下大致分四层, 第一层就是我们应用开发人员一直接触的一层, 就是连接池组件, 第二层可以算是Mysql的控制层,里面包含sql分析,sql优化器,缓存组件等等, 这一层的任务不是查数据,而是处理应用开发人员的各类sql语句,并根据既定的优化方案去制定如何查询数据, 第三层便是Mysql的存储引擎, 由于Mysql制定了存储引擎规范, 所以我们可以自定义存储引擎的行为来得到我们需要的查询效果(本人并没有自定义存储引擎的任何经验),所以世界各地不同地方的编程大牛或者公司都开发了自己的存储引擎, 最著名的应该就是InnoDB, MyISAM以及Memory引擎(拿出来作对比,因为其数据都存在内存中,和别的存储引擎区别明显). 第四层是就是文件引擎了,真正持久化数据的地方.\n\n而Oracle的体系结构没有这个特点,所以没有引擎这种说法, 但是其内部的数据存储机制,换句话来说其实也是一种\"引擎\"\n\nMysql引擎的区别我觉得总结起来有几点核心的技术点:\n\n- 如何存储数据? 是存储在文件硬盘中还是存储在内存中,或者存储在其他存储器上. 比如InnoDB和Memory的区别, Memory的数据都是存储在内存中, 好处显而易见,内存中操作数据的速度是最快的\n\n- 是否支持事务? 我们知道事务的好处是, 万一中间的某个sql执行失败, 就全部失败, 不会影响数据库已有数据. 当我在进行数据迁移的时候, 对事务的距离是最近的, 编写数据迁移脚本的时候, 我个人水平有限, 没法一口气写出毫无错误的代码, 所以使用事务已经是一个必须品了(不过也要注意DDL和DML, 当使用DDL语句,比如CREATE,DROP,ALTER的时候,由于表本身结构要变动,所以变动前会隐式提交事务, 这一点一定要非常注意,我以前在数据迁移的时候遇到过这个问题,导致了严重后果,花费了更多的时间去修复). InnoDB就是支持事务的一个存储引擎, 而MyISAM则不支持事务. 支持与不支持, 我觉得好与坏,一切都要根据实际. 因为事务逻辑, 必将导致InnoDB写更多的代码去实现事务, 这也就会降低InnoDB的执行效率,因为它要处理的事情变多了. 从这一点上也可以很好的解释为什么MyISAM的查询速度通常都比InnoDB表现要好\n\n- 索引类型的区别,换句话说, 它们是如何想办法查数据的,数据的组织方式是怎么样的. InnoDB采用的是主键索引(也就是聚集索引)为主,非聚集索引为辅的模式, 我们可以抽象成, 它把所有数据构建成了一个B+树, 利用B+树的特点, 做到快速定位. 而MyISAM最大的特点也许就是全文索引了,同时它将数据和文件分开存储, 所以采用的是类似非聚集索引的机制(后者能不说则不说,毕竟我自己用的很少)\n\n又比如InnoDB支持外键约束, 而其他常见Mysql的存储引擎不支持\n\n5. 聚集索引和非聚集索引的区别?\n\n简单来说, 在Mysql中存在聚集索引这种说法, 聚集的意思其实就是, InnoDB它将数据和索引放在了一起,抽象成了一颗B+树, 叶节点上存放了所有的行数据, 所以叫聚集. \n\n而非聚集的意思是, 数据和索引它是分开的. 比如InnoDB的普通索引(非主键索引)都是非聚集索引, 这些索引自身构成了一个B+树, 并且叶节点上存的是主键索引对应的值(理解为存的是一个指针,或者说引用). 拿到这个引用后,再去主键索引的那颗B+树上搜索到对应的行\n\n6. 怎么和第三方或APP交互?\n\n- 交互的大前提是, 两台计算机必须可以进行网络互联, 简单来说就是可以进行TCP或者UDP连接(Socket则是这些连接协议的一个抽象层,方便开发人员使用的), 随后在TCP基础上,数据包内容按照HTTP协议规定的格式(目前使用最广的TCP/IP通信协议)进行传输数据. \n\n- 我们的业务数据都是放在http请求的报文体中的, 目前来看json格式是最流行的一种方式, 因为应用层上有很多优秀的解析库支持, 且json数据易读, 方便沟通.\n\n- 最终请求会根据url地址 被转发器代码分配到不同的业务逻辑代码中进行处理,并返回\n\n这样便完成了一次简单的第三方或者APP交互(也可以举支付宝对账文件的例子)\n\n7. 会单元测试吗?\n\n说实话, 我的单元测试的思维只停留下, 比如使用Junit 测试下我的一些我不太确定的函数是否运行正常,输出对不对,会不会报错等等. 或者使用框架的单元测试框架 比如Spirng-test对我刚开发的一个controller方法进行测试.\n\n但是一些普通的 我感觉很自信的地方, 我都不会去写专门的单元测试代码. 毕竟写单元测试代码也是一种时间的开销, 如果原代码出现问题, 那么你还必须同时修改单元测试代码的逻辑. \n\n所以对于这一块, 我仍然存在一定的迷惑, 不知道面试官可以说一点自己的见解\n\n8. 经常使用的集合?\n\nlist有ArrayList,LinkedList, 简单通用性能中肯, 如果插入频繁,量大的话 我会用LinkedList,因为不需要做扩容. 如果读取操作比较多的话,会使用ArrayList, 总而言之要根据不同情况使用.\n\nSet有HashSet,当我不希望有重复数据的时候使用,但是实际用的很少,因为重复数据基本不会出现在java业务层面上; TreeSet, 当我希望进行自动排序的时候会用.\n\nMap有HashMap, 效率高, jdk8后碰撞几率低,真的碰撞了还会用红黑树来降低查询时间复杂度. 如果存在并发操作map的场景的话, 会使用ConcurrentHashMap代替; TreeMap, 当我需要对key做排序的时候使用\n\nCopyOnWriteArrayList 没用过,但是CopyOnWrite是个很不错的编程思想\n\n若需要考虑线程安全, 则都会对应使用相关的线程安全实现类, 或者使用同步转换方法\n\n9. 用到SpringCloud的哪些组件?\n\n没用过SpringCloud\n\n10. 用的什么开发工具?\n\n个人毕业开始就一直用的InteliJ idea, 用它的好处是, 总是能第一时间支持框架的最新功能, 界面风格更喜欢\n\n大学期间用的是Eclipse\n\n代码编辑器一直再用Vscode, 有良好的插件社区, 能当半个IDE使用\n\n11. 有用到定时器吗?\n\n有, 但是不知道您问这个问题具体含义是什么呢? 目前来看我使用定时器并没有踩到过什么坑, 他们都很好的在工作\n\n12. redis主要场景使用?\n\n- 做缓存, 因为全是内存操作,读写性能优异, 且支持过期时间设置\n\n- redis不同于Ehcache Memchache 它有多种存储数据结构,而不是单一的String, redis支持使用存储list,而且可以从前后端进行操作, 可以用于实现消息队列. 又比如有序set, 可以用于实现一些排行榜热度榜功能; \n\n- redis的部分指令是原子性的, `incr`, 这样就可以用于做一些简单的计数器功能, 比如浏览数, 播放量等等\n\n## 面试当天流程记录\n\n发我的面试邮件突然说地址错了,更改地址, 所以我判断这肯定有点猫腻, 有可能存在邮件造假风险\n\n说好的两点钟, 结果居然没有提前,反而是延迟了9分钟才下来..\n\nok, 人下来了, 准备进行第一场社交面试,管他是黑是白, 反正我就是个半斤八两但是愿意干活的人\n\n待会不要紧张, 不要以为面试官有多厉害, 回答好自己知道的就行了, 同时也不要关心自己说的语气啥的, 慢慢说就行了\n\n面试官一开始有两个, 但是面着面着有一个出去了. \n\n面试问的问题还算可以, 但是有些东西我确实没答上来(感觉面试前HR给的题目我回答的都特别棒, 但是没给的题目我就回答的不是特别好了)\n\n我回答的特别不好的有: \n\n1. 知道消息中间件吗, 它有什么作用?\n\n2. 知道axios的底层是什么吗? 我说了ajax, 然后他说是promise. (https://segmentfault.com/a/1190000006708151 + https://www.jianshu.com/p/c09916018f3d)\n\n3. vue里的三个点是什么 ...(主要是写了ES6,结果导致他问了,结果我没复习好,加上本身用到es6的语法就很少)\n    https://forum.vuejs.org/t/vue-form/29440\n\n4. 微服务,分布式,SpringCloud 这三个都问了, 我没接触过,所以都没回答\n\n5. oracle三大范式(https://blog.csdn.net/Daniel_Chen_/article/details/53482663)\n\n6. springboot的properties文件或者yaml文件是怎么读取的(https://blog.csdn.net/jlh912008548/article/details/81437036 + 建议自己读一下源码)\n\n\n最后面试官觉得我数据库这块说的还是蛮好的, 感觉面试官非常和蔼, 让我面试体验很棒, 虽然已经被筛掉, 但是整个面试过程对我来说获益匪浅\n\n\n## SpringBoot是如何读取properties文件或者yaml文件的\n\nSpringBoot启动时, 先创建SpringApplicationContext, SpringApplicationContext在初始化阶段, 会从spring.factorys文件中读取初始化器和监听器, 其中有一个ConfigFileListener, 当Enviromet类准备完毕后. 会调用ConfigFileListener的一个回调方法onApplicationEnvironmentPreparedEvent, 这个方法会去搜索默认位置下的配置文件内容以及profile的内容, 并将他们也加载到Environment中\n\nEnvironment是SpringBoot存储运行时所有配置资源的地方, 后期SpringBoot获取properties文件或者yaml文件的配置,都是从这个类中读取的\n\n## vue的promise\n\nhttps://segmentfault.com/a/1190000006708151 + https://www.jianshu.com/p/c09916018f3d\n\n总结来说: \n当遇到多次回调的时候, js代码会变因不同开发人员的习惯, 写出不同的臃肿代码, 不美观且不宜读, 这种叫做回环金字塔或者回调地域问题. \n\n而promise是es6标准的一部分, 它将异步回调进行的统一, 使得开发人员拥有了统一的编写异步回调的语法, 遵照promise可以让我们的异步编程代码更规范更合理\n\npromise使用了三种状态pending, resolve, reject来统一管理回调执行时期, 同时使用then函数和catch函数分别处理正常回调和异常回调(then函数也可以处理异常,只不过为了更合理,写在catch函数中更好)\n\n# 仍需了解的知识\n\n消息中间件RabbitMQ, springcloud+dubbo, oracle或者mysql的存储过程,函数编写, db2数据库使用\n\nzookeeper, kafka, webservice, lua, nginx, elasticsearch,\n\n\n# 浙江承志信科技有限公司面试流程\n\n面试官题目:\n\n1. 抽象类和接口的区别\n\n抽象类通常作为一种骨架实现，为各自子类实现公共的方法, 包含了公共的基类行为, 减少了代码重复性, 提高了代码可重用\n\n此外(我的个人见解), 抽象类的这种能力, 其实我们也完全可以使用一个非抽象类的父类去实现, 在父类中也可以为各自子类实现公共的方法. 但是这就好比正式与非正式的区别, 当你使用抽象类语法的时候, 其他开发人员可以一目了然的知道, 这个类包含了基类的公共方法, 为我们实现某个接口提供了一个骨架实现. 而如果你写的是一个普通的方法, 你可能还需要写注释去解释类的行为目的.\n\n接口是一种行为约束, 一种规范, 使得声明和实现解耦 , 提高了代码灵活性, 比如jdbc是java官方提出的接口, 随后不同的数据库厂商对其进行了实现, 当想换另一个数据库的时候, 不需要修改大部分代码(因为它们和实现是解耦的), 只需要修改使用的实现类即可\n\n接口类体现了自然界“如果你是……则必须能……”的理念\n\n我认为，抽象类和接口的区别在于使用动机。\n\n使用抽象类是为了代码的复用，是具体开发后会考虑的事情\n而使用接口的动机是为了实现多态性,声明和实现解耦,是具体开发之前做的事情, \n\n接口就像领导分配职位和职位要求, 这样的话, 后续想要替换某个职位的人员, 就找相应职位的其他人员即可(解耦,组件化,多态)\n而抽象类就像一个职位的一个代表, 当领导不知道如何具体讲述一个岗位该干什么的时候, 便挑一个代表出来, 告诉大家这个代表知道所有的基本工作内容, 大家可以学习借鉴(代码复用)以及创新(重写)\n\n\n2. 谈谈你熟悉的设计模式\n\n3. 对Spring的理解, IOC, AOP\n\n# 久久基因\n\n1. 二分查找\n\n2. 实现String的indexOf\n\n3. 伪代码实现生产者/消费者模式\n\n```java\n//生产者消费者伪代码\nProducer p;\nConsumer c;\nLinkedList buffer;\nBoolean door = true;//true = open , flase = close\n\nvoid produceItem(){\n    if(closeDoor()){\n        if(buffer.size >= max){\n            sout(\"is full, i can take a rest now\");\n            openDoor();\n        }else{\n            buffer.add(Item);\n        }\n    }else{\n        sout(\"door is close, i am waiting\"); // sout = System.out.println\n    }\n}\n\nvoid comsumeItem(){\n    if(closeDoor()){\n        if(buffer.size != 0){\n            buffer.remove(Item);\n        }else{\n            sout(\"nothing to do!\");\n        }\n        openDoor();\n    }else{\n        sout(\"door is close, i am waiting\");\n    }\n}\n\nvoid synchronized closeDoor(){\n    if(door){\n        door = false;\n    }\n    return door;\n}\n\nvoid openDoor(){\n    if(!door){\n        door = true;\n    }\n}\n\nmain(){\n    //Thread A\n    while(true){\n        produceItem();\n    }\n\n    //Thread B\n    while(true){\n        comsumeItem();\n    }\n}\n```\n\n\n4. 单点登录\n\n- 什么是单点登录\n\n单点登录(SSO, Single Sign on), SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。\n\n- 为什么要单点登录\n\n针对企业多套不同系统提供统一的登录方式, 提高用户的使用体验. 简单来说就是为了方便, 一把锁可以开同一个公司的多个门, 而不是每次开个门都要换一把锁\n\n- 如何实现单点登录\n\n同域:\n如果你的所有域名地址都是同域的, 比如app1.a.com, app2.a.com, 那么可以使用cookie和session就能够实现单点登录\n在不同的后台server中进行session的共享, 同时将sessionid存至顶级域cookie中, 比如存至a.com中(cookie的存取是按照域来划分的,它无法跨域获取,比如你如果是a.com的系统,是无法获取到baidu.com的cookie的). 这样如果你在app1.a.com中登录, 那么当你在app2.a.com中登录的时候,发现已存在cookie,所以就直接发送这个cookie内容给app2的后台, 而app2的后台从共享session中获取到了由app1存取的session, 于是验证成功,登录完成\n\n不同域:\n如果是不同域, 那么cookie就没法用了,因为cookie是无法跨域访问的, 这时候就必须使用另一种方式, token的方式.\n专门分配一个sso服务用于登录, 比如sso.a.com, 当访问app1.a.com的时候, 会先跳转至sso.a.com进行登录, 要求输入用户名和密码,并返回一个唯一的token, app1拿到这个token后, 发送给后端sso进行验证, 验证无误后, 记录登录状态, 并成功登录. 随后访问app2的时候, 也是一样跳转到sso.a.com进行登录, 但由于之前已经登录过, 所以这次就直接返回token给app2, app2拿到后也进行一次验证, 无误后,直接登陆成功.\n\n\n# 鸿程系统\n\n1. mysql分页\nhttps://zazalu.space/2019/08/28/mysql-pagination-optimization-1/\n\n2. mybatis的statement要素 \n\n比如<select> 我们最常见的属性有:\n\n- id, 唯一的标识符，可以被用来引用这条语句。\n\n- parameterType, 指示传入参数的类型, 我自己最常用的是传入map,  这个参数可以不选, 因为mybais可以通过类型选择器(TypeHandle)进行判断\n\n- resultType 或者 resultMap, resultMap对应自己定义的<resultMap>我觉得适用了大部分情况, 也可以使用resultType, 对应指定相应的pojo类\n\n- flushCache, 如果设置为true, 则会清除一级和二级缓存, 一个在特殊需求下会很好用的设置\n\n- useCache, 设置为false, 则会取消这个statement进行二级缓存, <select>是默认为true的\n\n- timeout, 超时时间\n\n3. vue的生命周期\n\nbeforeCreate 和 created\n在这俩个钩子函数执行的时候，并没有渲染 DOM，所以我们也不能够访问 DOM，一般来说，如果组件在加载的时候需要和后端有交互，放在这俩个钩子函数执行都可以，如果是需要访问 props、data、method 等数据的话，就需要使用 created 钩子函数\n\n在 mounted 钩子函数中可以访问到 DOM\n\n在 destroy 钩子函数中可以做一些定时器销毁工作，了解它们有利于我们在合适的生命周期去做不同的事情。\n\n4. 常用的io类\n\n- 字节流 File(Buffered)Input(Output)Stream\n- 字符流 BufferedWriter和BufferedReader, PrintWriter和PrintReader\n\n看下我写的Java基础.md中的I/O部分\n\n\n# 其他\n\n1. simpleDataFormat 高并发下存在问题\n\n由于SimpleDateFormat不是线程安全的, 导致多个线程使用同一个SimpleDateFormat实例的时候, 会因为状态变量共享导致异常报错\n\n解决方法: 使用ThreadLocal包装,使得每个线程对应一个实例. 但是这样如果线程很多的情况下又会创建太多的SimpleDateFormat实例, 这时候你可以使用DateTimeFormatter, LocalDateTime(jdk8)去代替, 不过线程安全其实也就意味着要做控制,所以我认为性能可能会低于前者\n\n2. 常见的线程安全集合类\n\nVector HashTable\n\nConcurrentXXX, CopyOnWriteXXX\n\n3. 正向和反向代理\n\n正向代理是内网需访问外网，由一个可以访问外网的代理服务器进行代理转发请求\n反向代理是外网需访问内网，外网服务器访问代理服务器，由代理服务器转发请求\n\n# 非技术类问题\n\n1. 为什么离职\n\n- 工作不在浙江,父母不愿意\n- 出差过久\n- 自己原因\n\n2. 为什么那么久没有再工作\n\n- 自己原因\n\n3. 你觉得你的优点 你的核心竞争力是什么\n\n- 处境不容乐观, 但是依旧开朗\n- 前后端,测试,生产全都熟悉,会写数据接口, 会搞整一点系统架构, 有长期单人驻场开发经验, 有很好的沟通能力\n- 深知自己以前的缺点, 不卑不亢, 踏实干事\n\n# 面试自我介绍（浙商银行版）\n\n## 基本信息\n我叫何镓钧，来自浙江绍兴，17年毕业于西安电子科技大学软件学院，今年8月以来就一直就职于赞同科技。\n\n## 聊聊黄河银行项目\n\n（从项目的简单介绍说起）\n我毕业后就一直从事银行相关业务系统的开发，比如我参与过黄河银行其一码付平台二期的开发，一码付平台是福建联迪（我当时就职的公司），为黄河银行提供的一套聚合支付交易平台，所谓的一码是指一个二维码就可以向客户提供各类第三方支付服务，比如支付宝，微信支付，银闪付等等。同时一码付平台还提供了面向行内用户的管理平台和面向商户的商户服务平台。\n\nVersion1.0\n【我当时主要负责的功能模块有，比如行内员工管理，商户管理，机构管理，码牌管理，移动端APP数据接口，以及涉及资金的交易流水对账清算入账功能。 同时我作为驻场开发人员，我还负责部署开发和测试环境，配合银行测试人员测试；负责与银行经理对接项目需求，参与各种与需求相关的会议，并代表公司发表意见；对接银行新核心接口并做联调测试；编写项目相关开发文档等等。】\n\nVersion2.0\n【我主要负责面向行内员工的管理平台开发，比如行内员工管理，商户管理，多级审核以及资金的对账清算入账功能；同时也作为驻场开发人员负责对接银行测试人员和负责与银行核心接口进行联调测试等。】\n\n我觉得从我的经历来看，我对自己的沟通能力，协调能力以及严谨的软件开发能力有一定的信心，我非常希望可以为浙商银行贡献自己的一份力，并努力实现自己的自我价值！谢谢\n\n----如果时间来得及继续讲下面的----\n\n（主要是为了体现我自己对于业务学习能力，以及十分看重业务的态度）\n先拿商户管理为例，它听上去感觉很简单， 但其实在商户开立的过程中，需要涉及第三方支付的商户开立，银行本身的内部账户开立，商户银行账户查询验证，同时还要提供多级审核(授权)机制，每个功能的完成都必须对业务有非常清醒的认知。 类推到我们柜面系统开发上来看，柜面系统涉及的业务量也是非常多的，只有熟悉了业务的程序员才能开发出银行需要的优秀交易，才能胜任并满足项目的长期发展。而我毕业后就一直从事银行开发工作，虽说之前的属于边缘子系统，不太涉及银行核心业务，但是对银行业务的学习能力充满信心。\n\n行内员工管理主要任务是新增行内员工以及修改行内员工的基本信息和职级，\n\n\n（目的是表现我开发上的严谨性）\n再说下交易流水的对账清算入账功能，\n\n对账：通过定时任务，每天10点都会根据第三方支付特有的银行商户号从第三方支付那里获取对账文件，内含第三方交易流水记录，根据银行交易流水号来一一比对对账文件内的交易流水和平台交易流水的交易状态，交易金额，手续费是否一致。若都一致则标记为对账成功否则失败。\n\n清算：将对账成功的交易流水，根据银行需求里提出的手续费规则（银行手续费，机构手续费，第三方手续费，是否手续费返还，是否手续费优惠等），计算每笔交易的手续费，并记录入表，并标记为已清算\n\n入账：根据日期取出已清算的交易流水，按照规定转账路线，调用核心入账接口（比如先转入内部账再转到商户账），完成对商户T+1的打款\n\n差错处理这一块也要讲。对账的差错处理，由人工审核，无误后重新进行对账清算流程。\n\n全部采用了Java的BigDecimal完成了所有涉及金额的操作，并且按照int类型存储至单位分，保证了资金计算无误\n\n### 如何与银行核心系统互通互调的？\nhttp，具体来说借助http工具类(当时公司内部对socket的封装类)，根据接口文档的规定，发送http报文，并接受返回报文，根据返回报文头携带的核心状态码，展开后续的操作\n\n说到HTTP, 这里就涉及了TCP连接的概念(HTTP的实现不是非使用TCP传输协议不可, 但是一般都是使用TCP, 从默认端口80就可以知道这点). TCP是一种可靠的字节流服务. 为了规范连接以及统一分层, 我们都使用Socket来进行TCP连接. TCP是全双工的, 字节数据可以双向传输. TCP属于\n\nTCP是如何保证可靠的?\n`数据完整性校验机制`,`分组丢失重传机制`,`滑动窗口提高信道吞吐量`\n\nTCP连接最常问的两个东西:\n三次握手(用于建立连接)和四次挥手(用于拆除连接)\n\nTCP三次握手:\n1. 客户端发送SYN包(SYN=1,seq=x),进入SYN SEND状态\n2. 服务端接收到SYN包, 向客户端回复SYNACK包(SYN=1,ACK=1,seq=y,ack_seq=x+1),从LISTEN状态进入SYN RCVD状态\n3. 客户端接收到SYNACK包后, 向服务端回复ACK包(SYN=1,seq=x,ack_seq=y+1), 客户端进入ESTABLISHED状态.服务端接收到这个ACK包后也进入ESTABLISHED状态,.至此, 双方连接建立完毕\n\nTCP四次挥手:\n1. 客户端发送FIN段, 要求断开连接, 状态进入到FIN_WAIT_1, 这个状态下客户端不会再发送新的数据包\n2. 服务端应答这个FIN段, 并返回一个ACK段, 状态进入到CLOSE_WAIT, 这个状态下的意思是服务端会继续发送剩余未发送的数据包, 但是不会再接收新的数据包.客户端接收到ACK段后, 状态进入到FIN_WAIT_2\n3. 服务端发送完剩余数据包后, 会向客户端也发送一个FIN段,状态进入到LAST_ACK, 这个状态的命名含义是服务端只接受客户端最后一次的ACK段.\n4. 客户端接收到服务端的FIN包后,返回ACK段, 状态进入到TIME_WAIT, 等待2MSL后进入CLOSED状态. 服务端接收到最后的ACK包后进入到CLOSED状态.至此TCP连接就会结束\n\n### 常用的Linux Shell指令\n\nman,cd,ls,mkdir,rm,ps,grep,vim,top,mv,echo,whichis,$(),|,cat,tail,\n\n### Maven（重要性不高，先往后推）\n\n### Oracle：\n1. 如何搭建，先安装服务端，再安装客户端，按照网上的静默化安装流程进行安装，一些关键点：\n    - 使用单独的oracle用户进行安装，而不是使用root用户安装\n    - 其中可能会出现一些依赖错误，根据提示使用yum安装对应软件包\n2. 使用上oracle特有的东西：\n    - 主键自增，使用序列，每次插入的时候显示调用(使用nextval)：\n    ```\n    --插入数据 \n    insert into test values(seq_on_test.nextval,'Mary',15); \n    insert into test values(seq_on_test.nextval,'Tom',16); \n    ```\n    - 序列，是oracle提供的一个产生唯一数值型值的机制\n    \n    序列的创建方式，\n    ```\n    CREATE SEQUENCE 序列名\n    [INCREMENT BY n]\n    [START WITH n]\n    [{MAXVALUE/ MINVALUE n|NOMAXVALUE}]\n    [{CYCLE|NOCYCLE}]\n    [{CACHE n|NOCACHE}];\n    ```\n    - oracle分页\n    oracle每次结果集都会有ROWNUM来标明每行数据的位置，下面是推荐写法，这种写法不会因为rownum变大而不断变慢\n    `select a.* from ( select t.*,rownum rowno from test t where rownum <= 20 ) a where a.rowno >= 11`\n\n3. oracle索引:\n\n    常用的还是B树索引(是否聚集不太清楚)\n    基数少的时候使用位图索引, 为什么是基数少的时候？ 因为位图索引其实就是为每一行维护一个位图向量，使用1和0来\n    确定这一行这一列的值是否等于某个值，这种机制适合基数少的情况，具体可以看看https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html， 很快就能理解了。位图索引适合静态数据，而不适合索引频繁更新的列，因为它的建立机制是扫描整个表后得到的位图向量，所以当你频繁修改更新列的值，oracle需要对这个位图向量进行多次的更新操作，更新的时候使用行锁定，导致其他oracle操作无法正常进行会被堵塞，最终导致性能不佳\n\n4. oracle存储过程:\n    \n    为什么需要存储过程？\n    存储过程最大的特点是性能优异，毕竟它是预编译过的，\n    存储过程看上去就像编写sql脚本，可以定义状态和行为，同时存储过程可以复用，这样就使得我们可以把业务逻辑从应用层移动到数据库层，并且享受存储过程的性能优势。但是大量的使用存储过程实现业务逻辑，则不利于数据库迁移，毕竟不同的数据库甚至不同的数据库版本，相同的plsql代码都不一定能正常执行。\n    安全性。避免了sql注入，避免了暴露表结构和字段\n    \n    存储过程写法?\n\n5. oracle视图：\n我前一个项目没怎么用视图， 但是视图我觉得还是不错的，它是一种虚表，存储了select语句的结果。如果修改视图的记录会同步影响到基表上，这点自己注意下；删除视图不会影响基表\n\n### Redis\n1. 为什么使用Redis？\n    - 作为缓存中间件，减少数据库压力，提高热点数据的响应速度\n    Redis的读写性能优秀（官网10w）以致于Redis的瓶颈在于网络吞吐而不是本身的读写（每秒4w次读写，跑满100M带宽）\n    - 除了String以为拥有多种数据类型，为开发人员减负\n2. 常见的数据类型：\n    - string，list，set，sorted set，hash\n    我只用过string，用过incr递增\n\n### nginx\n1. 之前项目主要用于反向代理，负载均衡没做，因为内网对应的是单机实例，但是仍然需要nginx做分发，因为有三个后台应用服务器，一台专门做清算的，一台专门为管理平台返回数据的，一台专门为商户服务平台返回数据的\n2. nginx是优秀的http服务器，常用于做反向代理，官网测试可以达到5w并发\n\n多级审核如何实现的？\n简单来说，多级审核是通过审核链信息表，里面记录了审核的分级流程，java程序借助该表信息从而判断下一级推送给谁进行审核。\n\n这个功能属于后期新增的需求，而且要求多个审核模块都要加上这个功能，所以我使用了java的泛型来实现了这个需求，只需要继承相应的多级审核抽象类，就可以轻松的支持多级审核功能(数据库层需要在对应的表中新增3个字段)\n\n在java中定义一个多级审核抽象类，内部定义了多级审核需要调用的公共方法，每次审核的时候加上对多级审核相关字段的检查(当前审核角色，下一个审核角色，审核链id))，需要新增一个审核链表，专门记录审核流程，比如商户审核必须先由支行行长审核再由总行管理员审核才算通过。\n\n### Vue\n1. Vue是使用Object.defineProperty()实现数据变化 -> 视图更新， 给可输入控件添加DOM事件监听来实现视图更新 -> 数据变化，从而整体上达到了双向绑定的效果\n2. Vue使用了虚拟DOM，为什么？\n优点：\n\n`保证性能下限`： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多(每次暴力操作DOM都会引起页面重新渲染)，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；\n`无需手动操作 DOM`： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；\n`跨平台`： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。\n\n缺点:\n\n无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。\n3. 虚拟 DOM 的实现原理主要包括以下 3 部分：\n\n用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；\ndiff 算法 — 比较两棵虚拟 DOM 树的差异；\npach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。\n\n### my youdian\n\n善于沟通，但是不胡乱发言，主动寻找问题关键点，不喜欢拖延。\n\n严于律己，不骄不躁，踏踏实实做事。\n\n善于总结归纳，有自己的博客经常做技术总结。\n\n\n### 对账？\n\n平台流水与第三方支付流水进行比对记录成功流水交易\n\n具体来讲，每天早上10点会向支付宝和微信发起对账文件下载请求，我们通过特约商户编号(1)(当然还有其他各类参数，密钥等)(2)，从其平台拉取对账文件，我方平台记录保存并与平台流水进行比对，主要比对金额和交易状态是否正常。\n\n(1) 黄河银行就是支付宝的特约商户，特约商户编号就是这么来的\n(2) 数字证书，保证来源安全可靠有效\n\n\n### 清算？\n\n交易流水对平后，根据银行的手续费规则， 计算出相应的银行手续费，机构手续费和第三方手续费\n\n(1) 流水较多时，使用分批处理的方式，比如一次处理500条数据，防止内存溢出\n\n### 入账T+1？\n\nT+1代表第二天入账\n\n入账前先要从清算表中获取需要入账的交易流水，然后记录每笔交易转至对应内部户的金额，转至客户账户的金额等等金额，这些金额记录可能存在重复，但是一切都是为了银行人员查看和排查方便。\n\n入账分机构入账和商户入账，分别将机构手续费和商户应得的费调用核心转账接口进行入账\n\n如何确保转账正确性，不会出现资金问题？\n1. 在银行核心有控制，我方平台的账户每天只能入一次账，这是由银行核心提供的技术支持。意思就是说就算我们这里出现重复提交，都不会导致账入两次。\n2. 我方平台借助oracle序列，对程序进行加锁，防止重复入账的发生。（oracle序列是否原子性https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）\n\n## 聊聊SpringBoot项目\n\n### SpringBoot？\n\nSpringBoot是基于Java的一种轻量级应用框架，可以说是Spring的一种扩展，可以快速的构建Java应用程序，比如JavaWeb应用\n\n### Vue\n\nVue是基于JS的一种构建用户界面和单页面应用的MVVM框架，Model–view–viewmodel，相比Jquery，它将页面和数据分离的更透彻，在Jquery时代里我们常常要操作DOM结构，而Vue中我们可以使用Vue的模板语法操作虚拟DOM，将业务逻辑代码和\nDOM操作代码分离，使得开发人员可以将重心偏向于业务逻辑\n\n### 会话管理\n\n服务端和客户端都会保存一段唯一的token，客户端登录成功后由后台生成并对称加密返回数字签名，客户端通过验签后解密数字签名，获取到token并保存至cookie中；随后所有的请求都会携带token，服务器每次都会验证token的有效性。从而保证了会话有效\n\n### boot.js?\n\n是我自定义的一个启动脚本，会存储一些常量到global对象(上下文环境变量)中，方便后续调用。\n\n### VueRouter?\n\n单页面应用的路由控制器，负责根据不同url加载不同的页面内容\n\n### Vuex\n\n一个状态变量的仓库，拥有Vue的内嵌支持，所以相比自己实现的状态变量仓库，使用Vuex存储的状态变量拥有双向绑定的特点\n\n### iView\n\n一个基于Vue的UI框架，我利用它来快速构建出美观的Web界面\n\n### vue-lazyload\n\n一个图片懒加载的nodejs工具包，懒加载可以提高用户体验\n\n### vuescoll\n\n一个方便控制滚轮的nodejs工具包，我利用它来实现下拉自动刷新的功能\n\n\n\n","updated":"2019-10-19T13:01:10.568Z","path":"interview/index.html","comments":1,"layout":"page","_id":"ck20gna15005fm6ela69pn15g","content":"<h1 id=\"银信科技面试题\"><a href=\"#银信科技面试题\" class=\"headerlink\" title=\"银信科技面试题\"></a>银信科技面试题</h1><h2 id=\"HR提前放出的题目\"><a href=\"#HR提前放出的题目\" class=\"headerlink\" title=\"HR提前放出的题目\"></a>HR提前放出的题目</h2><ol>\n<li>从项目开始到线上的流程</li>\n</ol>\n<p>我就拿我黄河银行收单系统来举例说明, 当时项目一期刚好结束, 我过去接手开发时(已经提前熟悉了一遍项目一期的项目架构,代码以及系统负责的黄河银行业务内容),双方正准备筹划项目二期建设需求,黄河银行那边先给了我们一份项目二期建设的需求书, 随后我和另一名负责pos的app相关开发(c的)的同事(他全程参加了项目一期的开发,但是java那块的负责人在一期结束后离职,他对java后台不太熟悉), 我们两人外加上部门负责的领导, 进行了几次开会, 其中涉及java后台的改动和新功能的开发, 我对需求进行了评测,从现有系统架构以及现有代码出发, 评估了下工时, 并说了一些自己的看法, 领导听取了一些意见, 最后与银行方一起开会把需求定版. 随后就是分模块开发, 二期开发过程中, 公司也多派了几位开发人员,协助完成了整体开发工作. </p>\n<p>由于项目还包括ios和app,所以开发期间也少不了和移动端开发人员进行沟通,为他们编写后台接口文档</p>\n<p>整体开发的差不多后, 将测试环境部署起来(由于一期构建好了一个完整的测试环境, 我做的只是将新版本导包部署), 银行测试人员开始进行业务测试, 银行技术人员开始查阅源代码以及做压力测试等技术性高的测试. 测试过程中银行方会发现需求业务存在问题(我按照需求做了), 要求我改逻辑. 一开始我由于缺乏行业经验, 同时觉得难度不大,就加班加点帮忙改了. 随后银行方要求改的越来越多, 脱离需求书过多, 我便提出要求银行方重新定制新的需求书, 并发版本备案, 走正式流程, 否则不能进行修改(前提是自己实现的功能和需求已经一致)</p>\n<p>最后测试环境测试没问题后, 需要进行项目上线,, 上线前,我先编写了傻瓜式的上线步骤,每一步干什么都要写清楚. 然后召开一次上线评审. 评审没问题后就会上线, 当时上线时间是选择了晚上12点, 我10点左右陪同银行技术人员进入生产区, 然后银行技术人员根据上线步骤文档,一步步操作系统. 关闭系统-部署项目-重启服务-对重要业务进行立即在线测试, 这些全都没问题后便开始了真正的试运行阶段</p>\n<p>试运行期间, 我常常跑生产区看日志(有些地方实现确实缺乏经验,包括日志打印这些), 在试运行阶段出现的问题, 会统一在一个时间点打补丁包进行更新(所谓的增量更新)</p>\n<p>最终系统稳定后, 可能会继续做一些边缘的开发任务(公司项目组开发人员有限,其实后期就我一个java后台), 比如测试期间的一些页面觉得不好看的进行下一些优化, 银行部分机构撤并后, 系统需要进行下数据修改(写数据变动sql,系统不能停止运行), 符合最新的机构报表情况(因为会影响到资金清算入账,所以很重要)</p>\n<ol start=\"2\">\n<li>mybatis的$和#</li>\n</ol>\n<p>比如 select name from user where ${column} = #{value},jdbcType=VARCHAR}(先暂且不谈sql注入啥的,我只是举个简单例子来说明) 首先它们都会被替换为mapper中传入的参数的具体值, 但是有个区别, #内的参数会被mybatis预处理, 有点类似jdbc的preparedStatement中的?, 就像我这个例子中的描写的一样,最终<code>value</code>参数会使用双引号来修饰,使得其在sql中表示为一个字符串. 而${column}它是不会进行预处理,或者说进行转义的, 它会直接将column参数包含的内容替换到这个sql语句中.</p>\n<ol start=\"3\">\n<li>数据库的优化? 索引怎么创建?</li>\n</ol>\n<p>数据库优化如果指的是查询优化,那么我的个人经验总结如下(根据体系结构从上倒下来讲):</p>\n<ul>\n<li><p>作为数据库使用者,还非数据库开发者, 最显而易见的道理就是, 我查的少了速度肯定就快了. 在实际开发中, 我遇到不少抉择, 是再查一遍数据(只需增加少量代码), 还是修改多处java代码把数据重新传进来(需要改动很多地方,从开发者角度出发,产生了极度的抗拒心理). 我认为这也算是一种优化, 我应该恪守DRY原则, 不重复获取数据,并且争取在一次业务逻辑中就获取到所需的数据,不多查也不少查. 真正想去完成到这一点其实很难. 很多时候由于项目周期紧,所以很容易打破这个原则,采用比较暴力的方式去获取.</p>\n</li>\n<li><p>在sql层面上, 最重要的优化思路就是重构查询方式, 但是mysql不是静止不变的东西,所以不同版本,对于sql的重构方式也不经相同, sql解析器和查询优化器的行为不是我能掌控的, 因为我没看过源代码,也不是其开发人员. 幸运的是, 这个优化思路可以说是在长远来看不会变的, 针对不同的情况, 我们可以将我们的sql重构,来达到更快的效果, 比方说现在被大多数人所认同的 用JOIN替代子查询的方式就是一种优化思路. 子查询虽然更容易理解,但是在基准测试上会发现其性能不如JOIN的形式. 其他还有很多sql优化思路,比如切分查询,分解关联查询等等.</p>\n</li>\n<li><p>使用索引, 分表等等</p>\n</li>\n<li><p>理解数据库的内部机制,比如通信协议数据包定义是否还能继续优化,查询优化器怎么运作的, 如何配合他使得我的sql更加高效的运作, 或者说有能力的话对其进行改造,. 这一层次的优化思路对开发人员的要求特别高, 一般来说对于忙碌(菜)的应用开发人员来说是不太可能的. 或者说分配给数据库更多的可用内存空间等等</p>\n</li>\n<li><p>文件引擎层面, 我们的数据最终是需要存到存储器中的, 那么想加速, 提高硬盘IO速度也是很关键的一环, 最快的当然是直接跑在内存中.</p>\n</li>\n<li><p>建立数据库集群，实现读写分离，负载均衡，热备等，简单来说就是多个数据库共同完成一个工作，来减少单数据库的访问压力，从而提高查询速度</p>\n</li>\n</ul>\n<p>索引如何创建?</p>\n<p>CREATE INDEX indexName ON mytable(username(length));?</p>\n<ol start=\"4\">\n<li>数据库的引擎? 以及区别</li>\n</ol>\n<p>首先说到数据库的引擎, 一般指的是Mysql的存储引擎, 而不是Oracle. 因为Mysql的体系结构中,从上到下大致分四层, 第一层就是我们应用开发人员一直接触的一层, 就是连接池组件, 第二层可以算是Mysql的控制层,里面包含sql分析,sql优化器,缓存组件等等, 这一层的任务不是查数据,而是处理应用开发人员的各类sql语句,并根据既定的优化方案去制定如何查询数据, 第三层便是Mysql的存储引擎, 由于Mysql制定了存储引擎规范, 所以我们可以自定义存储引擎的行为来得到我们需要的查询效果(本人并没有自定义存储引擎的任何经验),所以世界各地不同地方的编程大牛或者公司都开发了自己的存储引擎, 最著名的应该就是InnoDB, MyISAM以及Memory引擎(拿出来作对比,因为其数据都存在内存中,和别的存储引擎区别明显). 第四层是就是文件引擎了,真正持久化数据的地方.</p>\n<p>而Oracle的体系结构没有这个特点,所以没有引擎这种说法, 但是其内部的数据存储机制,换句话来说其实也是一种”引擎”</p>\n<p>Mysql引擎的区别我觉得总结起来有几点核心的技术点:</p>\n<ul>\n<li><p>如何存储数据? 是存储在文件硬盘中还是存储在内存中,或者存储在其他存储器上. 比如InnoDB和Memory的区别, Memory的数据都是存储在内存中, 好处显而易见,内存中操作数据的速度是最快的</p>\n</li>\n<li><p>是否支持事务? 我们知道事务的好处是, 万一中间的某个sql执行失败, 就全部失败, 不会影响数据库已有数据. 当我在进行数据迁移的时候, 对事务的距离是最近的, 编写数据迁移脚本的时候, 我个人水平有限, 没法一口气写出毫无错误的代码, 所以使用事务已经是一个必须品了(不过也要注意DDL和DML, 当使用DDL语句,比如CREATE,DROP,ALTER的时候,由于表本身结构要变动,所以变动前会隐式提交事务, 这一点一定要非常注意,我以前在数据迁移的时候遇到过这个问题,导致了严重后果,花费了更多的时间去修复). InnoDB就是支持事务的一个存储引擎, 而MyISAM则不支持事务. 支持与不支持, 我觉得好与坏,一切都要根据实际. 因为事务逻辑, 必将导致InnoDB写更多的代码去实现事务, 这也就会降低InnoDB的执行效率,因为它要处理的事情变多了. 从这一点上也可以很好的解释为什么MyISAM的查询速度通常都比InnoDB表现要好</p>\n</li>\n<li><p>索引类型的区别,换句话说, 它们是如何想办法查数据的,数据的组织方式是怎么样的. InnoDB采用的是主键索引(也就是聚集索引)为主,非聚集索引为辅的模式, 我们可以抽象成, 它把所有数据构建成了一个B+树, 利用B+树的特点, 做到快速定位. 而MyISAM最大的特点也许就是全文索引了,同时它将数据和文件分开存储, 所以采用的是类似非聚集索引的机制(后者能不说则不说,毕竟我自己用的很少)</p>\n</li>\n</ul>\n<p>又比如InnoDB支持外键约束, 而其他常见Mysql的存储引擎不支持</p>\n<ol start=\"5\">\n<li>聚集索引和非聚集索引的区别?</li>\n</ol>\n<p>简单来说, 在Mysql中存在聚集索引这种说法, 聚集的意思其实就是, InnoDB它将数据和索引放在了一起,抽象成了一颗B+树, 叶节点上存放了所有的行数据, 所以叫聚集. </p>\n<p>而非聚集的意思是, 数据和索引它是分开的. 比如InnoDB的普通索引(非主键索引)都是非聚集索引, 这些索引自身构成了一个B+树, 并且叶节点上存的是主键索引对应的值(理解为存的是一个指针,或者说引用). 拿到这个引用后,再去主键索引的那颗B+树上搜索到对应的行</p>\n<ol start=\"6\">\n<li>怎么和第三方或APP交互?</li>\n</ol>\n<ul>\n<li><p>交互的大前提是, 两台计算机必须可以进行网络互联, 简单来说就是可以进行TCP或者UDP连接(Socket则是这些连接协议的一个抽象层,方便开发人员使用的), 随后在TCP基础上,数据包内容按照HTTP协议规定的格式(目前使用最广的TCP/IP通信协议)进行传输数据. </p>\n</li>\n<li><p>我们的业务数据都是放在http请求的报文体中的, 目前来看json格式是最流行的一种方式, 因为应用层上有很多优秀的解析库支持, 且json数据易读, 方便沟通.</p>\n</li>\n<li><p>最终请求会根据url地址 被转发器代码分配到不同的业务逻辑代码中进行处理,并返回</p>\n</li>\n</ul>\n<p>这样便完成了一次简单的第三方或者APP交互(也可以举支付宝对账文件的例子)</p>\n<ol start=\"7\">\n<li>会单元测试吗?</li>\n</ol>\n<p>说实话, 我的单元测试的思维只停留下, 比如使用Junit 测试下我的一些我不太确定的函数是否运行正常,输出对不对,会不会报错等等. 或者使用框架的单元测试框架 比如Spirng-test对我刚开发的一个controller方法进行测试.</p>\n<p>但是一些普通的 我感觉很自信的地方, 我都不会去写专门的单元测试代码. 毕竟写单元测试代码也是一种时间的开销, 如果原代码出现问题, 那么你还必须同时修改单元测试代码的逻辑. </p>\n<p>所以对于这一块, 我仍然存在一定的迷惑, 不知道面试官可以说一点自己的见解</p>\n<ol start=\"8\">\n<li>经常使用的集合?</li>\n</ol>\n<p>list有ArrayList,LinkedList, 简单通用性能中肯, 如果插入频繁,量大的话 我会用LinkedList,因为不需要做扩容. 如果读取操作比较多的话,会使用ArrayList, 总而言之要根据不同情况使用.</p>\n<p>Set有HashSet,当我不希望有重复数据的时候使用,但是实际用的很少,因为重复数据基本不会出现在java业务层面上; TreeSet, 当我希望进行自动排序的时候会用.</p>\n<p>Map有HashMap, 效率高, jdk8后碰撞几率低,真的碰撞了还会用红黑树来降低查询时间复杂度. 如果存在并发操作map的场景的话, 会使用ConcurrentHashMap代替; TreeMap, 当我需要对key做排序的时候使用</p>\n<p>CopyOnWriteArrayList 没用过,但是CopyOnWrite是个很不错的编程思想</p>\n<p>若需要考虑线程安全, 则都会对应使用相关的线程安全实现类, 或者使用同步转换方法</p>\n<ol start=\"9\">\n<li>用到SpringCloud的哪些组件?</li>\n</ol>\n<p>没用过SpringCloud</p>\n<ol start=\"10\">\n<li>用的什么开发工具?</li>\n</ol>\n<p>个人毕业开始就一直用的InteliJ idea, 用它的好处是, 总是能第一时间支持框架的最新功能, 界面风格更喜欢</p>\n<p>大学期间用的是Eclipse</p>\n<p>代码编辑器一直再用Vscode, 有良好的插件社区, 能当半个IDE使用</p>\n<ol start=\"11\">\n<li>有用到定时器吗?</li>\n</ol>\n<p>有, 但是不知道您问这个问题具体含义是什么呢? 目前来看我使用定时器并没有踩到过什么坑, 他们都很好的在工作</p>\n<ol start=\"12\">\n<li>redis主要场景使用?</li>\n</ol>\n<ul>\n<li><p>做缓存, 因为全是内存操作,读写性能优异, 且支持过期时间设置</p>\n</li>\n<li><p>redis不同于Ehcache Memchache 它有多种存储数据结构,而不是单一的String, redis支持使用存储list,而且可以从前后端进行操作, 可以用于实现消息队列. 又比如有序set, 可以用于实现一些排行榜热度榜功能; </p>\n</li>\n<li><p>redis的部分指令是原子性的, <code>incr</code>, 这样就可以用于做一些简单的计数器功能, 比如浏览数, 播放量等等</p>\n</li>\n</ul>\n<h2 id=\"面试当天流程记录\"><a href=\"#面试当天流程记录\" class=\"headerlink\" title=\"面试当天流程记录\"></a>面试当天流程记录</h2><p>发我的面试邮件突然说地址错了,更改地址, 所以我判断这肯定有点猫腻, 有可能存在邮件造假风险</p>\n<p>说好的两点钟, 结果居然没有提前,反而是延迟了9分钟才下来..</p>\n<p>ok, 人下来了, 准备进行第一场社交面试,管他是黑是白, 反正我就是个半斤八两但是愿意干活的人</p>\n<p>待会不要紧张, 不要以为面试官有多厉害, 回答好自己知道的就行了, 同时也不要关心自己说的语气啥的, 慢慢说就行了</p>\n<p>面试官一开始有两个, 但是面着面着有一个出去了. </p>\n<p>面试问的问题还算可以, 但是有些东西我确实没答上来(感觉面试前HR给的题目我回答的都特别棒, 但是没给的题目我就回答的不是特别好了)</p>\n<p>我回答的特别不好的有: </p>\n<ol>\n<li><p>知道消息中间件吗, 它有什么作用?</p>\n</li>\n<li><p>知道axios的底层是什么吗? 我说了ajax, 然后他说是promise. (<a href=\"https://segmentfault.com/a/1190000006708151\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006708151</a> + <a href=\"https://www.jianshu.com/p/c09916018f3d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c09916018f3d</a>)</p>\n</li>\n<li><p>vue里的三个点是什么 …(主要是写了ES6,结果导致他问了,结果我没复习好,加上本身用到es6的语法就很少)<br> <a href=\"https://forum.vuejs.org/t/vue-form/29440\" target=\"_blank\" rel=\"noopener\">https://forum.vuejs.org/t/vue-form/29440</a></p>\n</li>\n<li><p>微服务,分布式,SpringCloud 这三个都问了, 我没接触过,所以都没回答</p>\n</li>\n<li><p>oracle三大范式(<a href=\"https://blog.csdn.net/Daniel_Chen_/article/details/53482663\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Daniel_Chen_/article/details/53482663</a>)</p>\n</li>\n<li><p>springboot的properties文件或者yaml文件是怎么读取的(<a href=\"https://blog.csdn.net/jlh912008548/article/details/81437036\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jlh912008548/article/details/81437036</a> + 建议自己读一下源码)</p>\n</li>\n</ol>\n<p>最后面试官觉得我数据库这块说的还是蛮好的, 感觉面试官非常和蔼, 让我面试体验很棒, 虽然已经被筛掉, 但是整个面试过程对我来说获益匪浅</p>\n<h2 id=\"SpringBoot是如何读取properties文件或者yaml文件的\"><a href=\"#SpringBoot是如何读取properties文件或者yaml文件的\" class=\"headerlink\" title=\"SpringBoot是如何读取properties文件或者yaml文件的\"></a>SpringBoot是如何读取properties文件或者yaml文件的</h2><p>SpringBoot启动时, 先创建SpringApplicationContext, SpringApplicationContext在初始化阶段, 会从spring.factorys文件中读取初始化器和监听器, 其中有一个ConfigFileListener, 当Enviromet类准备完毕后. 会调用ConfigFileListener的一个回调方法onApplicationEnvironmentPreparedEvent, 这个方法会去搜索默认位置下的配置文件内容以及profile的内容, 并将他们也加载到Environment中</p>\n<p>Environment是SpringBoot存储运行时所有配置资源的地方, 后期SpringBoot获取properties文件或者yaml文件的配置,都是从这个类中读取的</p>\n<h2 id=\"vue的promise\"><a href=\"#vue的promise\" class=\"headerlink\" title=\"vue的promise\"></a>vue的promise</h2><p><a href=\"https://segmentfault.com/a/1190000006708151\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006708151</a> + <a href=\"https://www.jianshu.com/p/c09916018f3d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c09916018f3d</a></p>\n<p>总结来说:<br>当遇到多次回调的时候, js代码会变因不同开发人员的习惯, 写出不同的臃肿代码, 不美观且不宜读, 这种叫做回环金字塔或者回调地域问题. </p>\n<p>而promise是es6标准的一部分, 它将异步回调进行的统一, 使得开发人员拥有了统一的编写异步回调的语法, 遵照promise可以让我们的异步编程代码更规范更合理</p>\n<p>promise使用了三种状态pending, resolve, reject来统一管理回调执行时期, 同时使用then函数和catch函数分别处理正常回调和异常回调(then函数也可以处理异常,只不过为了更合理,写在catch函数中更好)</p>\n<h1 id=\"仍需了解的知识\"><a href=\"#仍需了解的知识\" class=\"headerlink\" title=\"仍需了解的知识\"></a>仍需了解的知识</h1><p>消息中间件RabbitMQ, springcloud+dubbo, oracle或者mysql的存储过程,函数编写, db2数据库使用</p>\n<p>zookeeper, kafka, webservice, lua, nginx, elasticsearch,</p>\n<h1 id=\"浙江承志信科技有限公司面试流程\"><a href=\"#浙江承志信科技有限公司面试流程\" class=\"headerlink\" title=\"浙江承志信科技有限公司面试流程\"></a>浙江承志信科技有限公司面试流程</h1><p>面试官题目:</p>\n<ol>\n<li>抽象类和接口的区别</li>\n</ol>\n<p>抽象类通常作为一种骨架实现，为各自子类实现公共的方法, 包含了公共的基类行为, 减少了代码重复性, 提高了代码可重用</p>\n<p>此外(我的个人见解), 抽象类的这种能力, 其实我们也完全可以使用一个非抽象类的父类去实现, 在父类中也可以为各自子类实现公共的方法. 但是这就好比正式与非正式的区别, 当你使用抽象类语法的时候, 其他开发人员可以一目了然的知道, 这个类包含了基类的公共方法, 为我们实现某个接口提供了一个骨架实现. 而如果你写的是一个普通的方法, 你可能还需要写注释去解释类的行为目的.</p>\n<p>接口是一种行为约束, 一种规范, 使得声明和实现解耦 , 提高了代码灵活性, 比如jdbc是java官方提出的接口, 随后不同的数据库厂商对其进行了实现, 当想换另一个数据库的时候, 不需要修改大部分代码(因为它们和实现是解耦的), 只需要修改使用的实现类即可</p>\n<p>接口类体现了自然界“如果你是……则必须能……”的理念</p>\n<p>我认为，抽象类和接口的区别在于使用动机。</p>\n<p>使用抽象类是为了代码的复用，是具体开发后会考虑的事情<br>而使用接口的动机是为了实现多态性,声明和实现解耦,是具体开发之前做的事情, </p>\n<p>接口就像领导分配职位和职位要求, 这样的话, 后续想要替换某个职位的人员, 就找相应职位的其他人员即可(解耦,组件化,多态)<br>而抽象类就像一个职位的一个代表, 当领导不知道如何具体讲述一个岗位该干什么的时候, 便挑一个代表出来, 告诉大家这个代表知道所有的基本工作内容, 大家可以学习借鉴(代码复用)以及创新(重写)</p>\n<ol start=\"2\">\n<li><p>谈谈你熟悉的设计模式</p>\n</li>\n<li><p>对Spring的理解, IOC, AOP</p>\n</li>\n</ol>\n<h1 id=\"久久基因\"><a href=\"#久久基因\" class=\"headerlink\" title=\"久久基因\"></a>久久基因</h1><ol>\n<li><p>二分查找</p>\n</li>\n<li><p>实现String的indexOf</p>\n</li>\n<li><p>伪代码实现生产者/消费者模式</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生产者消费者伪代码</span></span><br><span class=\"line\">Producer p;</span><br><span class=\"line\">Consumer c;</span><br><span class=\"line\">LinkedList buffer;</span><br><span class=\"line\">Boolean door = <span class=\"keyword\">true</span>;<span class=\"comment\">//true = open , flase = close</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">produceItem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(closeDoor())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buffer.size &gt;= max)&#123;</span><br><span class=\"line\">            sout(<span class=\"string\">\"is full, i can take a rest now\"</span>);</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            buffer.add(Item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sout(<span class=\"string\">\"door is close, i am waiting\"</span>); <span class=\"comment\">// sout = System.out.println</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">comsumeItem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(closeDoor())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buffer.size != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            buffer.remove(Item);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sout(<span class=\"string\">\"nothing to do!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        openDoor();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sout(<span class=\"string\">\"door is close, i am waiting\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">synchronized</span> <span class=\"title\">closeDoor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(door)&#123;</span><br><span class=\"line\">        door = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> door;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openDoor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!door)&#123;</span><br><span class=\"line\">        door = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Thread A</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        produceItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Thread B</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        comsumeItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>单点登录</li>\n</ol>\n<ul>\n<li>什么是单点登录</li>\n</ul>\n<p>单点登录(SSO, Single Sign on), SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p>\n<ul>\n<li>为什么要单点登录</li>\n</ul>\n<p>针对企业多套不同系统提供统一的登录方式, 提高用户的使用体验. 简单来说就是为了方便, 一把锁可以开同一个公司的多个门, 而不是每次开个门都要换一把锁</p>\n<ul>\n<li>如何实现单点登录</li>\n</ul>\n<p>同域:<br>如果你的所有域名地址都是同域的, 比如app1.a.com, app2.a.com, 那么可以使用cookie和session就能够实现单点登录<br>在不同的后台server中进行session的共享, 同时将sessionid存至顶级域cookie中, 比如存至a.com中(cookie的存取是按照域来划分的,它无法跨域获取,比如你如果是a.com的系统,是无法获取到baidu.com的cookie的). 这样如果你在app1.a.com中登录, 那么当你在app2.a.com中登录的时候,发现已存在cookie,所以就直接发送这个cookie内容给app2的后台, 而app2的后台从共享session中获取到了由app1存取的session, 于是验证成功,登录完成</p>\n<p>不同域:<br>如果是不同域, 那么cookie就没法用了,因为cookie是无法跨域访问的, 这时候就必须使用另一种方式, token的方式.<br>专门分配一个sso服务用于登录, 比如sso.a.com, 当访问app1.a.com的时候, 会先跳转至sso.a.com进行登录, 要求输入用户名和密码,并返回一个唯一的token, app1拿到这个token后, 发送给后端sso进行验证, 验证无误后, 记录登录状态, 并成功登录. 随后访问app2的时候, 也是一样跳转到sso.a.com进行登录, 但由于之前已经登录过, 所以这次就直接返回token给app2, app2拿到后也进行一次验证, 无误后,直接登陆成功.</p>\n<h1 id=\"鸿程系统\"><a href=\"#鸿程系统\" class=\"headerlink\" title=\"鸿程系统\"></a>鸿程系统</h1><ol>\n<li><p>mysql分页<br><a href=\"https://zazalu.space/2019/08/28/mysql-pagination-optimization-1/\">https://zazalu.space/2019/08/28/mysql-pagination-optimization-1/</a></p>\n</li>\n<li><p>mybatis的statement要素 </p>\n</li>\n</ol>\n<p>比如<select> 我们最常见的属性有:</select></p>\n<ul>\n<li><p>id, 唯一的标识符，可以被用来引用这条语句。</p>\n</li>\n<li><p>parameterType, 指示传入参数的类型, 我自己最常用的是传入map,  这个参数可以不选, 因为mybais可以通过类型选择器(TypeHandle)进行判断</p>\n</li>\n<li><p>resultType 或者 resultMap, resultMap对应自己定义的<resultmap>我觉得适用了大部分情况, 也可以使用resultType, 对应指定相应的pojo类</resultmap></p>\n</li>\n<li><p>flushCache, 如果设置为true, 则会清除一级和二级缓存, 一个在特殊需求下会很好用的设置</p>\n</li>\n<li><p>useCache, 设置为false, 则会取消这个statement进行二级缓存, <select>是默认为true的</select></p>\n</li>\n<li><p>timeout, 超时时间</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>vue的生命周期</li>\n</ol>\n<p>beforeCreate 和 created<br>在这俩个钩子函数执行的时候，并没有渲染 DOM，所以我们也不能够访问 DOM，一般来说，如果组件在加载的时候需要和后端有交互，放在这俩个钩子函数执行都可以，如果是需要访问 props、data、method 等数据的话，就需要使用 created 钩子函数</p>\n<p>在 mounted 钩子函数中可以访问到 DOM</p>\n<p>在 destroy 钩子函数中可以做一些定时器销毁工作，了解它们有利于我们在合适的生命周期去做不同的事情。</p>\n<ol start=\"4\">\n<li>常用的io类</li>\n</ol>\n<ul>\n<li>字节流 File(Buffered)Input(Output)Stream</li>\n<li>字符流 BufferedWriter和BufferedReader, PrintWriter和PrintReader</li>\n</ul>\n<p>看下我写的Java基础.md中的I/O部分</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ol>\n<li>simpleDataFormat 高并发下存在问题</li>\n</ol>\n<p>由于SimpleDateFormat不是线程安全的, 导致多个线程使用同一个SimpleDateFormat实例的时候, 会因为状态变量共享导致异常报错</p>\n<p>解决方法: 使用ThreadLocal包装,使得每个线程对应一个实例. 但是这样如果线程很多的情况下又会创建太多的SimpleDateFormat实例, 这时候你可以使用DateTimeFormatter, LocalDateTime(jdk8)去代替, 不过线程安全其实也就意味着要做控制,所以我认为性能可能会低于前者</p>\n<ol start=\"2\">\n<li>常见的线程安全集合类</li>\n</ol>\n<p>Vector HashTable</p>\n<p>ConcurrentXXX, CopyOnWriteXXX</p>\n<ol start=\"3\">\n<li>正向和反向代理</li>\n</ol>\n<p>正向代理是内网需访问外网，由一个可以访问外网的代理服务器进行代理转发请求<br>反向代理是外网需访问内网，外网服务器访问代理服务器，由代理服务器转发请求</p>\n<h1 id=\"非技术类问题\"><a href=\"#非技术类问题\" class=\"headerlink\" title=\"非技术类问题\"></a>非技术类问题</h1><ol>\n<li>为什么离职</li>\n</ol>\n<ul>\n<li>工作不在浙江,父母不愿意</li>\n<li>出差过久</li>\n<li>自己原因</li>\n</ul>\n<ol start=\"2\">\n<li>为什么那么久没有再工作</li>\n</ol>\n<ul>\n<li>自己原因</li>\n</ul>\n<ol start=\"3\">\n<li>你觉得你的优点 你的核心竞争力是什么</li>\n</ol>\n<ul>\n<li>处境不容乐观, 但是依旧开朗</li>\n<li>前后端,测试,生产全都熟悉,会写数据接口, 会搞整一点系统架构, 有长期单人驻场开发经验, 有很好的沟通能力</li>\n<li>深知自己以前的缺点, 不卑不亢, 踏实干事</li>\n</ul>\n<h1 id=\"面试自我介绍（浙商银行版）\"><a href=\"#面试自我介绍（浙商银行版）\" class=\"headerlink\" title=\"面试自我介绍（浙商银行版）\"></a>面试自我介绍（浙商银行版）</h1><h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>我叫何镓钧，来自浙江绍兴，17年毕业于西安电子科技大学软件学院，今年8月以来就一直就职于赞同科技。</p>\n<h2 id=\"聊聊黄河银行项目\"><a href=\"#聊聊黄河银行项目\" class=\"headerlink\" title=\"聊聊黄河银行项目\"></a>聊聊黄河银行项目</h2><p>（从项目的简单介绍说起）<br>我毕业后就一直从事银行相关业务系统的开发，比如我参与过黄河银行其一码付平台二期的开发，一码付平台是福建联迪（我当时就职的公司），为黄河银行提供的一套聚合支付交易平台，所谓的一码是指一个二维码就可以向客户提供各类第三方支付服务，比如支付宝，微信支付，银闪付等等。同时一码付平台还提供了面向行内用户的管理平台和面向商户的商户服务平台。</p>\n<p>Version1.0<br>【我当时主要负责的功能模块有，比如行内员工管理，商户管理，机构管理，码牌管理，移动端APP数据接口，以及涉及资金的交易流水对账清算入账功能。 同时我作为驻场开发人员，我还负责部署开发和测试环境，配合银行测试人员测试；负责与银行经理对接项目需求，参与各种与需求相关的会议，并代表公司发表意见；对接银行新核心接口并做联调测试；编写项目相关开发文档等等。】</p>\n<p>Version2.0<br>【我主要负责面向行内员工的管理平台开发，比如行内员工管理，商户管理，多级审核以及资金的对账清算入账功能；同时也作为驻场开发人员负责对接银行测试人员和负责与银行核心接口进行联调测试等。】</p>\n<p>我觉得从我的经历来看，我对自己的沟通能力，协调能力以及严谨的软件开发能力有一定的信心，我非常希望可以为浙商银行贡献自己的一份力，并努力实现自己的自我价值！谢谢</p>\n<p>—-如果时间来得及继续讲下面的—-</p>\n<p>（主要是为了体现我自己对于业务学习能力，以及十分看重业务的态度）<br>先拿商户管理为例，它听上去感觉很简单， 但其实在商户开立的过程中，需要涉及第三方支付的商户开立，银行本身的内部账户开立，商户银行账户查询验证，同时还要提供多级审核(授权)机制，每个功能的完成都必须对业务有非常清醒的认知。 类推到我们柜面系统开发上来看，柜面系统涉及的业务量也是非常多的，只有熟悉了业务的程序员才能开发出银行需要的优秀交易，才能胜任并满足项目的长期发展。而我毕业后就一直从事银行开发工作，虽说之前的属于边缘子系统，不太涉及银行核心业务，但是对银行业务的学习能力充满信心。</p>\n<p>行内员工管理主要任务是新增行内员工以及修改行内员工的基本信息和职级，</p>\n<p>（目的是表现我开发上的严谨性）<br>再说下交易流水的对账清算入账功能，</p>\n<p>对账：通过定时任务，每天10点都会根据第三方支付特有的银行商户号从第三方支付那里获取对账文件，内含第三方交易流水记录，根据银行交易流水号来一一比对对账文件内的交易流水和平台交易流水的交易状态，交易金额，手续费是否一致。若都一致则标记为对账成功否则失败。</p>\n<p>清算：将对账成功的交易流水，根据银行需求里提出的手续费规则（银行手续费，机构手续费，第三方手续费，是否手续费返还，是否手续费优惠等），计算每笔交易的手续费，并记录入表，并标记为已清算</p>\n<p>入账：根据日期取出已清算的交易流水，按照规定转账路线，调用核心入账接口（比如先转入内部账再转到商户账），完成对商户T+1的打款</p>\n<p>差错处理这一块也要讲。对账的差错处理，由人工审核，无误后重新进行对账清算流程。</p>\n<p>全部采用了Java的BigDecimal完成了所有涉及金额的操作，并且按照int类型存储至单位分，保证了资金计算无误</p>\n<h3 id=\"如何与银行核心系统互通互调的？\"><a href=\"#如何与银行核心系统互通互调的？\" class=\"headerlink\" title=\"如何与银行核心系统互通互调的？\"></a>如何与银行核心系统互通互调的？</h3><p>http，具体来说借助http工具类(当时公司内部对socket的封装类)，根据接口文档的规定，发送http报文，并接受返回报文，根据返回报文头携带的核心状态码，展开后续的操作</p>\n<p>说到HTTP, 这里就涉及了TCP连接的概念(HTTP的实现不是非使用TCP传输协议不可, 但是一般都是使用TCP, 从默认端口80就可以知道这点). TCP是一种可靠的字节流服务. 为了规范连接以及统一分层, 我们都使用Socket来进行TCP连接. TCP是全双工的, 字节数据可以双向传输. TCP属于</p>\n<p>TCP是如何保证可靠的?<br><code>数据完整性校验机制</code>,<code>分组丢失重传机制</code>,<code>滑动窗口提高信道吞吐量</code></p>\n<p>TCP连接最常问的两个东西:<br>三次握手(用于建立连接)和四次挥手(用于拆除连接)</p>\n<p>TCP三次握手:</p>\n<ol>\n<li>客户端发送SYN包(SYN=1,seq=x),进入SYN SEND状态</li>\n<li>服务端接收到SYN包, 向客户端回复SYNACK包(SYN=1,ACK=1,seq=y,ack_seq=x+1),从LISTEN状态进入SYN RCVD状态</li>\n<li>客户端接收到SYNACK包后, 向服务端回复ACK包(SYN=1,seq=x,ack_seq=y+1), 客户端进入ESTABLISHED状态.服务端接收到这个ACK包后也进入ESTABLISHED状态,.至此, 双方连接建立完毕</li>\n</ol>\n<p>TCP四次挥手:</p>\n<ol>\n<li>客户端发送FIN段, 要求断开连接, 状态进入到FIN_WAIT_1, 这个状态下客户端不会再发送新的数据包</li>\n<li>服务端应答这个FIN段, 并返回一个ACK段, 状态进入到CLOSE_WAIT, 这个状态下的意思是服务端会继续发送剩余未发送的数据包, 但是不会再接收新的数据包.客户端接收到ACK段后, 状态进入到FIN_WAIT_2</li>\n<li>服务端发送完剩余数据包后, 会向客户端也发送一个FIN段,状态进入到LAST_ACK, 这个状态的命名含义是服务端只接受客户端最后一次的ACK段.</li>\n<li>客户端接收到服务端的FIN包后,返回ACK段, 状态进入到TIME_WAIT, 等待2MSL后进入CLOSED状态. 服务端接收到最后的ACK包后进入到CLOSED状态.至此TCP连接就会结束</li>\n</ol>\n<h3 id=\"常用的Linux-Shell指令\"><a href=\"#常用的Linux-Shell指令\" class=\"headerlink\" title=\"常用的Linux Shell指令\"></a>常用的Linux Shell指令</h3><p>man,cd,ls,mkdir,rm,ps,grep,vim,top,mv,echo,whichis,$(),|,cat,tail,</p>\n<h3 id=\"Maven（重要性不高，先往后推）\"><a href=\"#Maven（重要性不高，先往后推）\" class=\"headerlink\" title=\"Maven（重要性不高，先往后推）\"></a>Maven（重要性不高，先往后推）</h3><h3 id=\"Oracle：\"><a href=\"#Oracle：\" class=\"headerlink\" title=\"Oracle：\"></a>Oracle：</h3><ol>\n<li>如何搭建，先安装服务端，再安装客户端，按照网上的静默化安装流程进行安装，一些关键点：<ul>\n<li>使用单独的oracle用户进行安装，而不是使用root用户安装</li>\n<li>其中可能会出现一些依赖错误，根据提示使用yum安装对应软件包</li>\n</ul>\n</li>\n<li><p>使用上oracle特有的东西：</p>\n<ul>\n<li><p>主键自增，使用序列，每次插入的时候显示调用(使用nextval)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--插入数据 </span><br><span class=\"line\">insert into test values(seq_on_test.nextval,&apos;Mary&apos;,15); </span><br><span class=\"line\">insert into test values(seq_on_test.nextval,&apos;Tom&apos;,16);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>序列，是oracle提供的一个产生唯一数值型值的机制</p>\n<p>序列的创建方式，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE 序列名</span><br><span class=\"line\">[INCREMENT BY n]</span><br><span class=\"line\">[START WITH n]</span><br><span class=\"line\">[&#123;MAXVALUE/ MINVALUE n|NOMAXVALUE&#125;]</span><br><span class=\"line\">[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">[&#123;CACHE n|NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>oracle分页<br>oracle每次结果集都会有ROWNUM来标明每行数据的位置，下面是推荐写法，这种写法不会因为rownum变大而不断变慢<br><code>select a.* from ( select t.*,rownum rowno from test t where rownum &lt;= 20 ) a where a.rowno &gt;= 11</code></p>\n</li>\n</ul>\n</li>\n<li><p>oracle索引:</p>\n<p> 常用的还是B树索引(是否聚集不太清楚)<br> 基数少的时候使用位图索引, 为什么是基数少的时候？ 因为位图索引其实就是为每一行维护一个位图向量，使用1和0来<br> 确定这一行这一列的值是否等于某个值，这种机制适合基数少的情况，具体可以看看<a href=\"https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html，</a> 很快就能理解了。位图索引适合静态数据，而不适合索引频繁更新的列，因为它的建立机制是扫描整个表后得到的位图向量，所以当你频繁修改更新列的值，oracle需要对这个位图向量进行多次的更新操作，更新的时候使用行锁定，导致其他oracle操作无法正常进行会被堵塞，最终导致性能不佳</p>\n</li>\n<li><p>oracle存储过程:</p>\n<p> 为什么需要存储过程？<br> 存储过程最大的特点是性能优异，毕竟它是预编译过的，<br> 存储过程看上去就像编写sql脚本，可以定义状态和行为，同时存储过程可以复用，这样就使得我们可以把业务逻辑从应用层移动到数据库层，并且享受存储过程的性能优势。但是大量的使用存储过程实现业务逻辑，则不利于数据库迁移，毕竟不同的数据库甚至不同的数据库版本，相同的plsql代码都不一定能正常执行。<br> 安全性。避免了sql注入，避免了暴露表结构和字段</p>\n<p> 存储过程写法?</p>\n</li>\n<li><p>oracle视图：<br>我前一个项目没怎么用视图， 但是视图我觉得还是不错的，它是一种虚表，存储了select语句的结果。如果修改视图的记录会同步影响到基表上，这点自己注意下；删除视图不会影响基表</p>\n</li>\n</ol>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><ol>\n<li>为什么使用Redis？<ul>\n<li>作为缓存中间件，减少数据库压力，提高热点数据的响应速度<br>Redis的读写性能优秀（官网10w）以致于Redis的瓶颈在于网络吞吐而不是本身的读写（每秒4w次读写，跑满100M带宽）</li>\n<li>除了String以为拥有多种数据类型，为开发人员减负</li>\n</ul>\n</li>\n<li>常见的数据类型：<ul>\n<li>string，list，set，sorted set，hash<br>我只用过string，用过incr递增</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ol>\n<li>之前项目主要用于反向代理，负载均衡没做，因为内网对应的是单机实例，但是仍然需要nginx做分发，因为有三个后台应用服务器，一台专门做清算的，一台专门为管理平台返回数据的，一台专门为商户服务平台返回数据的</li>\n<li>nginx是优秀的http服务器，常用于做反向代理，官网测试可以达到5w并发</li>\n</ol>\n<p>多级审核如何实现的？<br>简单来说，多级审核是通过审核链信息表，里面记录了审核的分级流程，java程序借助该表信息从而判断下一级推送给谁进行审核。</p>\n<p>这个功能属于后期新增的需求，而且要求多个审核模块都要加上这个功能，所以我使用了java的泛型来实现了这个需求，只需要继承相应的多级审核抽象类，就可以轻松的支持多级审核功能(数据库层需要在对应的表中新增3个字段)</p>\n<p>在java中定义一个多级审核抽象类，内部定义了多级审核需要调用的公共方法，每次审核的时候加上对多级审核相关字段的检查(当前审核角色，下一个审核角色，审核链id))，需要新增一个审核链表，专门记录审核流程，比如商户审核必须先由支行行长审核再由总行管理员审核才算通过。</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><ol>\n<li>Vue是使用Object.defineProperty()实现数据变化 -&gt; 视图更新， 给可输入控件添加DOM事件监听来实现视图更新 -&gt; 数据变化，从而整体上达到了双向绑定的效果</li>\n<li>Vue使用了虚拟DOM，为什么？<br>优点：</li>\n</ol>\n<p><code>保证性能下限</code>： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多(每次暴力操作DOM都会引起页面重新渲染)，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；<br><code>无需手动操作 DOM</code>： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；<br><code>跨平台</code>： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</p>\n<p>缺点:</p>\n<p>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</p>\n<ol start=\"3\">\n<li>虚拟 DOM 的实现原理主要包括以下 3 部分：</li>\n</ol>\n<p>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；<br>diff 算法 — 比较两棵虚拟 DOM 树的差异；<br>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</p>\n<h3 id=\"my-youdian\"><a href=\"#my-youdian\" class=\"headerlink\" title=\"my youdian\"></a>my youdian</h3><p>善于沟通，但是不胡乱发言，主动寻找问题关键点，不喜欢拖延。</p>\n<p>严于律己，不骄不躁，踏踏实实做事。</p>\n<p>善于总结归纳，有自己的博客经常做技术总结。</p>\n<h3 id=\"对账？\"><a href=\"#对账？\" class=\"headerlink\" title=\"对账？\"></a>对账？</h3><p>平台流水与第三方支付流水进行比对记录成功流水交易</p>\n<p>具体来讲，每天早上10点会向支付宝和微信发起对账文件下载请求，我们通过特约商户编号(1)(当然还有其他各类参数，密钥等)(2)，从其平台拉取对账文件，我方平台记录保存并与平台流水进行比对，主要比对金额和交易状态是否正常。</p>\n<p>(1) 黄河银行就是支付宝的特约商户，特约商户编号就是这么来的<br>(2) 数字证书，保证来源安全可靠有效</p>\n<h3 id=\"清算？\"><a href=\"#清算？\" class=\"headerlink\" title=\"清算？\"></a>清算？</h3><p>交易流水对平后，根据银行的手续费规则， 计算出相应的银行手续费，机构手续费和第三方手续费</p>\n<p>(1) 流水较多时，使用分批处理的方式，比如一次处理500条数据，防止内存溢出</p>\n<h3 id=\"入账T-1？\"><a href=\"#入账T-1？\" class=\"headerlink\" title=\"入账T+1？\"></a>入账T+1？</h3><p>T+1代表第二天入账</p>\n<p>入账前先要从清算表中获取需要入账的交易流水，然后记录每笔交易转至对应内部户的金额，转至客户账户的金额等等金额，这些金额记录可能存在重复，但是一切都是为了银行人员查看和排查方便。</p>\n<p>入账分机构入账和商户入账，分别将机构手续费和商户应得的费调用核心转账接口进行入账</p>\n<p>如何确保转账正确性，不会出现资金问题？</p>\n<ol>\n<li>在银行核心有控制，我方平台的账户每天只能入一次账，这是由银行核心提供的技术支持。意思就是说就算我们这里出现重复提交，都不会导致账入两次。</li>\n<li>我方平台借助oracle序列，对程序进行加锁，防止重复入账的发生。（oracle序列是否原子性<a href=\"https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）</a></li>\n</ol>\n<h2 id=\"聊聊SpringBoot项目\"><a href=\"#聊聊SpringBoot项目\" class=\"headerlink\" title=\"聊聊SpringBoot项目\"></a>聊聊SpringBoot项目</h2><h3 id=\"SpringBoot？\"><a href=\"#SpringBoot？\" class=\"headerlink\" title=\"SpringBoot？\"></a>SpringBoot？</h3><p>SpringBoot是基于Java的一种轻量级应用框架，可以说是Spring的一种扩展，可以快速的构建Java应用程序，比如JavaWeb应用</p>\n<h3 id=\"Vue-1\"><a href=\"#Vue-1\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue是基于JS的一种构建用户界面和单页面应用的MVVM框架，Model–view–viewmodel，相比Jquery，它将页面和数据分离的更透彻，在Jquery时代里我们常常要操作DOM结构，而Vue中我们可以使用Vue的模板语法操作虚拟DOM，将业务逻辑代码和<br>DOM操作代码分离，使得开发人员可以将重心偏向于业务逻辑</p>\n<h3 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h3><p>服务端和客户端都会保存一段唯一的token，客户端登录成功后由后台生成并对称加密返回数字签名，客户端通过验签后解密数字签名，获取到token并保存至cookie中；随后所有的请求都会携带token，服务器每次都会验证token的有效性。从而保证了会话有效</p>\n<h3 id=\"boot-js\"><a href=\"#boot-js\" class=\"headerlink\" title=\"boot.js?\"></a>boot.js?</h3><p>是我自定义的一个启动脚本，会存储一些常量到global对象(上下文环境变量)中，方便后续调用。</p>\n<h3 id=\"VueRouter\"><a href=\"#VueRouter\" class=\"headerlink\" title=\"VueRouter?\"></a>VueRouter?</h3><p>单页面应用的路由控制器，负责根据不同url加载不同的页面内容</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>一个状态变量的仓库，拥有Vue的内嵌支持，所以相比自己实现的状态变量仓库，使用Vuex存储的状态变量拥有双向绑定的特点</p>\n<h3 id=\"iView\"><a href=\"#iView\" class=\"headerlink\" title=\"iView\"></a>iView</h3><p>一个基于Vue的UI框架，我利用它来快速构建出美观的Web界面</p>\n<h3 id=\"vue-lazyload\"><a href=\"#vue-lazyload\" class=\"headerlink\" title=\"vue-lazyload\"></a>vue-lazyload</h3><p>一个图片懒加载的nodejs工具包，懒加载可以提高用户体验</p>\n<h3 id=\"vuescoll\"><a href=\"#vuescoll\" class=\"headerlink\" title=\"vuescoll\"></a>vuescoll</h3><p>一个方便控制滚轮的nodejs工具包，我利用它来实现下拉自动刷新的功能</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"银信科技面试题\"><a href=\"#银信科技面试题\" class=\"headerlink\" title=\"银信科技面试题\"></a>银信科技面试题</h1><h2 id=\"HR提前放出的题目\"><a href=\"#HR提前放出的题目\" class=\"headerlink\" title=\"HR提前放出的题目\"></a>HR提前放出的题目</h2><ol>\n<li>从项目开始到线上的流程</li>\n</ol>\n<p>我就拿我黄河银行收单系统来举例说明, 当时项目一期刚好结束, 我过去接手开发时(已经提前熟悉了一遍项目一期的项目架构,代码以及系统负责的黄河银行业务内容),双方正准备筹划项目二期建设需求,黄河银行那边先给了我们一份项目二期建设的需求书, 随后我和另一名负责pos的app相关开发(c的)的同事(他全程参加了项目一期的开发,但是java那块的负责人在一期结束后离职,他对java后台不太熟悉), 我们两人外加上部门负责的领导, 进行了几次开会, 其中涉及java后台的改动和新功能的开发, 我对需求进行了评测,从现有系统架构以及现有代码出发, 评估了下工时, 并说了一些自己的看法, 领导听取了一些意见, 最后与银行方一起开会把需求定版. 随后就是分模块开发, 二期开发过程中, 公司也多派了几位开发人员,协助完成了整体开发工作. </p>\n<p>由于项目还包括ios和app,所以开发期间也少不了和移动端开发人员进行沟通,为他们编写后台接口文档</p>\n<p>整体开发的差不多后, 将测试环境部署起来(由于一期构建好了一个完整的测试环境, 我做的只是将新版本导包部署), 银行测试人员开始进行业务测试, 银行技术人员开始查阅源代码以及做压力测试等技术性高的测试. 测试过程中银行方会发现需求业务存在问题(我按照需求做了), 要求我改逻辑. 一开始我由于缺乏行业经验, 同时觉得难度不大,就加班加点帮忙改了. 随后银行方要求改的越来越多, 脱离需求书过多, 我便提出要求银行方重新定制新的需求书, 并发版本备案, 走正式流程, 否则不能进行修改(前提是自己实现的功能和需求已经一致)</p>\n<p>最后测试环境测试没问题后, 需要进行项目上线,, 上线前,我先编写了傻瓜式的上线步骤,每一步干什么都要写清楚. 然后召开一次上线评审. 评审没问题后就会上线, 当时上线时间是选择了晚上12点, 我10点左右陪同银行技术人员进入生产区, 然后银行技术人员根据上线步骤文档,一步步操作系统. 关闭系统-部署项目-重启服务-对重要业务进行立即在线测试, 这些全都没问题后便开始了真正的试运行阶段</p>\n<p>试运行期间, 我常常跑生产区看日志(有些地方实现确实缺乏经验,包括日志打印这些), 在试运行阶段出现的问题, 会统一在一个时间点打补丁包进行更新(所谓的增量更新)</p>\n<p>最终系统稳定后, 可能会继续做一些边缘的开发任务(公司项目组开发人员有限,其实后期就我一个java后台), 比如测试期间的一些页面觉得不好看的进行下一些优化, 银行部分机构撤并后, 系统需要进行下数据修改(写数据变动sql,系统不能停止运行), 符合最新的机构报表情况(因为会影响到资金清算入账,所以很重要)</p>\n<ol start=\"2\">\n<li>mybatis的$和#</li>\n</ol>\n<p>比如 select name from user where ${column} = #{value},jdbcType=VARCHAR}(先暂且不谈sql注入啥的,我只是举个简单例子来说明) 首先它们都会被替换为mapper中传入的参数的具体值, 但是有个区别, #内的参数会被mybatis预处理, 有点类似jdbc的preparedStatement中的?, 就像我这个例子中的描写的一样,最终<code>value</code>参数会使用双引号来修饰,使得其在sql中表示为一个字符串. 而${column}它是不会进行预处理,或者说进行转义的, 它会直接将column参数包含的内容替换到这个sql语句中.</p>\n<ol start=\"3\">\n<li>数据库的优化? 索引怎么创建?</li>\n</ol>\n<p>数据库优化如果指的是查询优化,那么我的个人经验总结如下(根据体系结构从上倒下来讲):</p>\n<ul>\n<li><p>作为数据库使用者,还非数据库开发者, 最显而易见的道理就是, 我查的少了速度肯定就快了. 在实际开发中, 我遇到不少抉择, 是再查一遍数据(只需增加少量代码), 还是修改多处java代码把数据重新传进来(需要改动很多地方,从开发者角度出发,产生了极度的抗拒心理). 我认为这也算是一种优化, 我应该恪守DRY原则, 不重复获取数据,并且争取在一次业务逻辑中就获取到所需的数据,不多查也不少查. 真正想去完成到这一点其实很难. 很多时候由于项目周期紧,所以很容易打破这个原则,采用比较暴力的方式去获取.</p>\n</li>\n<li><p>在sql层面上, 最重要的优化思路就是重构查询方式, 但是mysql不是静止不变的东西,所以不同版本,对于sql的重构方式也不经相同, sql解析器和查询优化器的行为不是我能掌控的, 因为我没看过源代码,也不是其开发人员. 幸运的是, 这个优化思路可以说是在长远来看不会变的, 针对不同的情况, 我们可以将我们的sql重构,来达到更快的效果, 比方说现在被大多数人所认同的 用JOIN替代子查询的方式就是一种优化思路. 子查询虽然更容易理解,但是在基准测试上会发现其性能不如JOIN的形式. 其他还有很多sql优化思路,比如切分查询,分解关联查询等等.</p>\n</li>\n<li><p>使用索引, 分表等等</p>\n</li>\n<li><p>理解数据库的内部机制,比如通信协议数据包定义是否还能继续优化,查询优化器怎么运作的, 如何配合他使得我的sql更加高效的运作, 或者说有能力的话对其进行改造,. 这一层次的优化思路对开发人员的要求特别高, 一般来说对于忙碌(菜)的应用开发人员来说是不太可能的. 或者说分配给数据库更多的可用内存空间等等</p>\n</li>\n<li><p>文件引擎层面, 我们的数据最终是需要存到存储器中的, 那么想加速, 提高硬盘IO速度也是很关键的一环, 最快的当然是直接跑在内存中.</p>\n</li>\n<li><p>建立数据库集群，实现读写分离，负载均衡，热备等，简单来说就是多个数据库共同完成一个工作，来减少单数据库的访问压力，从而提高查询速度</p>\n</li>\n</ul>\n<p>索引如何创建?</p>\n<p>CREATE INDEX indexName ON mytable(username(length));?</p>\n<ol start=\"4\">\n<li>数据库的引擎? 以及区别</li>\n</ol>\n<p>首先说到数据库的引擎, 一般指的是Mysql的存储引擎, 而不是Oracle. 因为Mysql的体系结构中,从上到下大致分四层, 第一层就是我们应用开发人员一直接触的一层, 就是连接池组件, 第二层可以算是Mysql的控制层,里面包含sql分析,sql优化器,缓存组件等等, 这一层的任务不是查数据,而是处理应用开发人员的各类sql语句,并根据既定的优化方案去制定如何查询数据, 第三层便是Mysql的存储引擎, 由于Mysql制定了存储引擎规范, 所以我们可以自定义存储引擎的行为来得到我们需要的查询效果(本人并没有自定义存储引擎的任何经验),所以世界各地不同地方的编程大牛或者公司都开发了自己的存储引擎, 最著名的应该就是InnoDB, MyISAM以及Memory引擎(拿出来作对比,因为其数据都存在内存中,和别的存储引擎区别明显). 第四层是就是文件引擎了,真正持久化数据的地方.</p>\n<p>而Oracle的体系结构没有这个特点,所以没有引擎这种说法, 但是其内部的数据存储机制,换句话来说其实也是一种”引擎”</p>\n<p>Mysql引擎的区别我觉得总结起来有几点核心的技术点:</p>\n<ul>\n<li><p>如何存储数据? 是存储在文件硬盘中还是存储在内存中,或者存储在其他存储器上. 比如InnoDB和Memory的区别, Memory的数据都是存储在内存中, 好处显而易见,内存中操作数据的速度是最快的</p>\n</li>\n<li><p>是否支持事务? 我们知道事务的好处是, 万一中间的某个sql执行失败, 就全部失败, 不会影响数据库已有数据. 当我在进行数据迁移的时候, 对事务的距离是最近的, 编写数据迁移脚本的时候, 我个人水平有限, 没法一口气写出毫无错误的代码, 所以使用事务已经是一个必须品了(不过也要注意DDL和DML, 当使用DDL语句,比如CREATE,DROP,ALTER的时候,由于表本身结构要变动,所以变动前会隐式提交事务, 这一点一定要非常注意,我以前在数据迁移的时候遇到过这个问题,导致了严重后果,花费了更多的时间去修复). InnoDB就是支持事务的一个存储引擎, 而MyISAM则不支持事务. 支持与不支持, 我觉得好与坏,一切都要根据实际. 因为事务逻辑, 必将导致InnoDB写更多的代码去实现事务, 这也就会降低InnoDB的执行效率,因为它要处理的事情变多了. 从这一点上也可以很好的解释为什么MyISAM的查询速度通常都比InnoDB表现要好</p>\n</li>\n<li><p>索引类型的区别,换句话说, 它们是如何想办法查数据的,数据的组织方式是怎么样的. InnoDB采用的是主键索引(也就是聚集索引)为主,非聚集索引为辅的模式, 我们可以抽象成, 它把所有数据构建成了一个B+树, 利用B+树的特点, 做到快速定位. 而MyISAM最大的特点也许就是全文索引了,同时它将数据和文件分开存储, 所以采用的是类似非聚集索引的机制(后者能不说则不说,毕竟我自己用的很少)</p>\n</li>\n</ul>\n<p>又比如InnoDB支持外键约束, 而其他常见Mysql的存储引擎不支持</p>\n<ol start=\"5\">\n<li>聚集索引和非聚集索引的区别?</li>\n</ol>\n<p>简单来说, 在Mysql中存在聚集索引这种说法, 聚集的意思其实就是, InnoDB它将数据和索引放在了一起,抽象成了一颗B+树, 叶节点上存放了所有的行数据, 所以叫聚集. </p>\n<p>而非聚集的意思是, 数据和索引它是分开的. 比如InnoDB的普通索引(非主键索引)都是非聚集索引, 这些索引自身构成了一个B+树, 并且叶节点上存的是主键索引对应的值(理解为存的是一个指针,或者说引用). 拿到这个引用后,再去主键索引的那颗B+树上搜索到对应的行</p>\n<ol start=\"6\">\n<li>怎么和第三方或APP交互?</li>\n</ol>\n<ul>\n<li><p>交互的大前提是, 两台计算机必须可以进行网络互联, 简单来说就是可以进行TCP或者UDP连接(Socket则是这些连接协议的一个抽象层,方便开发人员使用的), 随后在TCP基础上,数据包内容按照HTTP协议规定的格式(目前使用最广的TCP/IP通信协议)进行传输数据. </p>\n</li>\n<li><p>我们的业务数据都是放在http请求的报文体中的, 目前来看json格式是最流行的一种方式, 因为应用层上有很多优秀的解析库支持, 且json数据易读, 方便沟通.</p>\n</li>\n<li><p>最终请求会根据url地址 被转发器代码分配到不同的业务逻辑代码中进行处理,并返回</p>\n</li>\n</ul>\n<p>这样便完成了一次简单的第三方或者APP交互(也可以举支付宝对账文件的例子)</p>\n<ol start=\"7\">\n<li>会单元测试吗?</li>\n</ol>\n<p>说实话, 我的单元测试的思维只停留下, 比如使用Junit 测试下我的一些我不太确定的函数是否运行正常,输出对不对,会不会报错等等. 或者使用框架的单元测试框架 比如Spirng-test对我刚开发的一个controller方法进行测试.</p>\n<p>但是一些普通的 我感觉很自信的地方, 我都不会去写专门的单元测试代码. 毕竟写单元测试代码也是一种时间的开销, 如果原代码出现问题, 那么你还必须同时修改单元测试代码的逻辑. </p>\n<p>所以对于这一块, 我仍然存在一定的迷惑, 不知道面试官可以说一点自己的见解</p>\n<ol start=\"8\">\n<li>经常使用的集合?</li>\n</ol>\n<p>list有ArrayList,LinkedList, 简单通用性能中肯, 如果插入频繁,量大的话 我会用LinkedList,因为不需要做扩容. 如果读取操作比较多的话,会使用ArrayList, 总而言之要根据不同情况使用.</p>\n<p>Set有HashSet,当我不希望有重复数据的时候使用,但是实际用的很少,因为重复数据基本不会出现在java业务层面上; TreeSet, 当我希望进行自动排序的时候会用.</p>\n<p>Map有HashMap, 效率高, jdk8后碰撞几率低,真的碰撞了还会用红黑树来降低查询时间复杂度. 如果存在并发操作map的场景的话, 会使用ConcurrentHashMap代替; TreeMap, 当我需要对key做排序的时候使用</p>\n<p>CopyOnWriteArrayList 没用过,但是CopyOnWrite是个很不错的编程思想</p>\n<p>若需要考虑线程安全, 则都会对应使用相关的线程安全实现类, 或者使用同步转换方法</p>\n<ol start=\"9\">\n<li>用到SpringCloud的哪些组件?</li>\n</ol>\n<p>没用过SpringCloud</p>\n<ol start=\"10\">\n<li>用的什么开发工具?</li>\n</ol>\n<p>个人毕业开始就一直用的InteliJ idea, 用它的好处是, 总是能第一时间支持框架的最新功能, 界面风格更喜欢</p>\n<p>大学期间用的是Eclipse</p>\n<p>代码编辑器一直再用Vscode, 有良好的插件社区, 能当半个IDE使用</p>\n<ol start=\"11\">\n<li>有用到定时器吗?</li>\n</ol>\n<p>有, 但是不知道您问这个问题具体含义是什么呢? 目前来看我使用定时器并没有踩到过什么坑, 他们都很好的在工作</p>\n<ol start=\"12\">\n<li>redis主要场景使用?</li>\n</ol>\n<ul>\n<li><p>做缓存, 因为全是内存操作,读写性能优异, 且支持过期时间设置</p>\n</li>\n<li><p>redis不同于Ehcache Memchache 它有多种存储数据结构,而不是单一的String, redis支持使用存储list,而且可以从前后端进行操作, 可以用于实现消息队列. 又比如有序set, 可以用于实现一些排行榜热度榜功能; </p>\n</li>\n<li><p>redis的部分指令是原子性的, <code>incr</code>, 这样就可以用于做一些简单的计数器功能, 比如浏览数, 播放量等等</p>\n</li>\n</ul>\n<h2 id=\"面试当天流程记录\"><a href=\"#面试当天流程记录\" class=\"headerlink\" title=\"面试当天流程记录\"></a>面试当天流程记录</h2><p>发我的面试邮件突然说地址错了,更改地址, 所以我判断这肯定有点猫腻, 有可能存在邮件造假风险</p>\n<p>说好的两点钟, 结果居然没有提前,反而是延迟了9分钟才下来..</p>\n<p>ok, 人下来了, 准备进行第一场社交面试,管他是黑是白, 反正我就是个半斤八两但是愿意干活的人</p>\n<p>待会不要紧张, 不要以为面试官有多厉害, 回答好自己知道的就行了, 同时也不要关心自己说的语气啥的, 慢慢说就行了</p>\n<p>面试官一开始有两个, 但是面着面着有一个出去了. </p>\n<p>面试问的问题还算可以, 但是有些东西我确实没答上来(感觉面试前HR给的题目我回答的都特别棒, 但是没给的题目我就回答的不是特别好了)</p>\n<p>我回答的特别不好的有: </p>\n<ol>\n<li><p>知道消息中间件吗, 它有什么作用?</p>\n</li>\n<li><p>知道axios的底层是什么吗? 我说了ajax, 然后他说是promise. (<a href=\"https://segmentfault.com/a/1190000006708151\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006708151</a> + <a href=\"https://www.jianshu.com/p/c09916018f3d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c09916018f3d</a>)</p>\n</li>\n<li><p>vue里的三个点是什么 …(主要是写了ES6,结果导致他问了,结果我没复习好,加上本身用到es6的语法就很少)<br> <a href=\"https://forum.vuejs.org/t/vue-form/29440\" target=\"_blank\" rel=\"noopener\">https://forum.vuejs.org/t/vue-form/29440</a></p>\n</li>\n<li><p>微服务,分布式,SpringCloud 这三个都问了, 我没接触过,所以都没回答</p>\n</li>\n<li><p>oracle三大范式(<a href=\"https://blog.csdn.net/Daniel_Chen_/article/details/53482663\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Daniel_Chen_/article/details/53482663</a>)</p>\n</li>\n<li><p>springboot的properties文件或者yaml文件是怎么读取的(<a href=\"https://blog.csdn.net/jlh912008548/article/details/81437036\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jlh912008548/article/details/81437036</a> + 建议自己读一下源码)</p>\n</li>\n</ol>\n<p>最后面试官觉得我数据库这块说的还是蛮好的, 感觉面试官非常和蔼, 让我面试体验很棒, 虽然已经被筛掉, 但是整个面试过程对我来说获益匪浅</p>\n<h2 id=\"SpringBoot是如何读取properties文件或者yaml文件的\"><a href=\"#SpringBoot是如何读取properties文件或者yaml文件的\" class=\"headerlink\" title=\"SpringBoot是如何读取properties文件或者yaml文件的\"></a>SpringBoot是如何读取properties文件或者yaml文件的</h2><p>SpringBoot启动时, 先创建SpringApplicationContext, SpringApplicationContext在初始化阶段, 会从spring.factorys文件中读取初始化器和监听器, 其中有一个ConfigFileListener, 当Enviromet类准备完毕后. 会调用ConfigFileListener的一个回调方法onApplicationEnvironmentPreparedEvent, 这个方法会去搜索默认位置下的配置文件内容以及profile的内容, 并将他们也加载到Environment中</p>\n<p>Environment是SpringBoot存储运行时所有配置资源的地方, 后期SpringBoot获取properties文件或者yaml文件的配置,都是从这个类中读取的</p>\n<h2 id=\"vue的promise\"><a href=\"#vue的promise\" class=\"headerlink\" title=\"vue的promise\"></a>vue的promise</h2><p><a href=\"https://segmentfault.com/a/1190000006708151\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006708151</a> + <a href=\"https://www.jianshu.com/p/c09916018f3d\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c09916018f3d</a></p>\n<p>总结来说:<br>当遇到多次回调的时候, js代码会变因不同开发人员的习惯, 写出不同的臃肿代码, 不美观且不宜读, 这种叫做回环金字塔或者回调地域问题. </p>\n<p>而promise是es6标准的一部分, 它将异步回调进行的统一, 使得开发人员拥有了统一的编写异步回调的语法, 遵照promise可以让我们的异步编程代码更规范更合理</p>\n<p>promise使用了三种状态pending, resolve, reject来统一管理回调执行时期, 同时使用then函数和catch函数分别处理正常回调和异常回调(then函数也可以处理异常,只不过为了更合理,写在catch函数中更好)</p>\n<h1 id=\"仍需了解的知识\"><a href=\"#仍需了解的知识\" class=\"headerlink\" title=\"仍需了解的知识\"></a>仍需了解的知识</h1><p>消息中间件RabbitMQ, springcloud+dubbo, oracle或者mysql的存储过程,函数编写, db2数据库使用</p>\n<p>zookeeper, kafka, webservice, lua, nginx, elasticsearch,</p>\n<h1 id=\"浙江承志信科技有限公司面试流程\"><a href=\"#浙江承志信科技有限公司面试流程\" class=\"headerlink\" title=\"浙江承志信科技有限公司面试流程\"></a>浙江承志信科技有限公司面试流程</h1><p>面试官题目:</p>\n<ol>\n<li>抽象类和接口的区别</li>\n</ol>\n<p>抽象类通常作为一种骨架实现，为各自子类实现公共的方法, 包含了公共的基类行为, 减少了代码重复性, 提高了代码可重用</p>\n<p>此外(我的个人见解), 抽象类的这种能力, 其实我们也完全可以使用一个非抽象类的父类去实现, 在父类中也可以为各自子类实现公共的方法. 但是这就好比正式与非正式的区别, 当你使用抽象类语法的时候, 其他开发人员可以一目了然的知道, 这个类包含了基类的公共方法, 为我们实现某个接口提供了一个骨架实现. 而如果你写的是一个普通的方法, 你可能还需要写注释去解释类的行为目的.</p>\n<p>接口是一种行为约束, 一种规范, 使得声明和实现解耦 , 提高了代码灵活性, 比如jdbc是java官方提出的接口, 随后不同的数据库厂商对其进行了实现, 当想换另一个数据库的时候, 不需要修改大部分代码(因为它们和实现是解耦的), 只需要修改使用的实现类即可</p>\n<p>接口类体现了自然界“如果你是……则必须能……”的理念</p>\n<p>我认为，抽象类和接口的区别在于使用动机。</p>\n<p>使用抽象类是为了代码的复用，是具体开发后会考虑的事情<br>而使用接口的动机是为了实现多态性,声明和实现解耦,是具体开发之前做的事情, </p>\n<p>接口就像领导分配职位和职位要求, 这样的话, 后续想要替换某个职位的人员, 就找相应职位的其他人员即可(解耦,组件化,多态)<br>而抽象类就像一个职位的一个代表, 当领导不知道如何具体讲述一个岗位该干什么的时候, 便挑一个代表出来, 告诉大家这个代表知道所有的基本工作内容, 大家可以学习借鉴(代码复用)以及创新(重写)</p>\n<ol start=\"2\">\n<li><p>谈谈你熟悉的设计模式</p>\n</li>\n<li><p>对Spring的理解, IOC, AOP</p>\n</li>\n</ol>\n<h1 id=\"久久基因\"><a href=\"#久久基因\" class=\"headerlink\" title=\"久久基因\"></a>久久基因</h1><ol>\n<li><p>二分查找</p>\n</li>\n<li><p>实现String的indexOf</p>\n</li>\n<li><p>伪代码实现生产者/消费者模式</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生产者消费者伪代码</span></span><br><span class=\"line\">Producer p;</span><br><span class=\"line\">Consumer c;</span><br><span class=\"line\">LinkedList buffer;</span><br><span class=\"line\">Boolean door = <span class=\"keyword\">true</span>;<span class=\"comment\">//true = open , flase = close</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">produceItem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(closeDoor())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buffer.size &gt;= max)&#123;</span><br><span class=\"line\">            sout(<span class=\"string\">\"is full, i can take a rest now\"</span>);</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            buffer.add(Item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sout(<span class=\"string\">\"door is close, i am waiting\"</span>); <span class=\"comment\">// sout = System.out.println</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">comsumeItem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(closeDoor())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(buffer.size != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            buffer.remove(Item);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            sout(<span class=\"string\">\"nothing to do!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        openDoor();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sout(<span class=\"string\">\"door is close, i am waiting\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">synchronized</span> <span class=\"title\">closeDoor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(door)&#123;</span><br><span class=\"line\">        door = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> door;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openDoor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!door)&#123;</span><br><span class=\"line\">        door = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Thread A</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        produceItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Thread B</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        comsumeItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>单点登录</li>\n</ol>\n<ul>\n<li>什么是单点登录</li>\n</ul>\n<p>单点登录(SSO, Single Sign on), SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p>\n<ul>\n<li>为什么要单点登录</li>\n</ul>\n<p>针对企业多套不同系统提供统一的登录方式, 提高用户的使用体验. 简单来说就是为了方便, 一把锁可以开同一个公司的多个门, 而不是每次开个门都要换一把锁</p>\n<ul>\n<li>如何实现单点登录</li>\n</ul>\n<p>同域:<br>如果你的所有域名地址都是同域的, 比如app1.a.com, app2.a.com, 那么可以使用cookie和session就能够实现单点登录<br>在不同的后台server中进行session的共享, 同时将sessionid存至顶级域cookie中, 比如存至a.com中(cookie的存取是按照域来划分的,它无法跨域获取,比如你如果是a.com的系统,是无法获取到baidu.com的cookie的). 这样如果你在app1.a.com中登录, 那么当你在app2.a.com中登录的时候,发现已存在cookie,所以就直接发送这个cookie内容给app2的后台, 而app2的后台从共享session中获取到了由app1存取的session, 于是验证成功,登录完成</p>\n<p>不同域:<br>如果是不同域, 那么cookie就没法用了,因为cookie是无法跨域访问的, 这时候就必须使用另一种方式, token的方式.<br>专门分配一个sso服务用于登录, 比如sso.a.com, 当访问app1.a.com的时候, 会先跳转至sso.a.com进行登录, 要求输入用户名和密码,并返回一个唯一的token, app1拿到这个token后, 发送给后端sso进行验证, 验证无误后, 记录登录状态, 并成功登录. 随后访问app2的时候, 也是一样跳转到sso.a.com进行登录, 但由于之前已经登录过, 所以这次就直接返回token给app2, app2拿到后也进行一次验证, 无误后,直接登陆成功.</p>\n<h1 id=\"鸿程系统\"><a href=\"#鸿程系统\" class=\"headerlink\" title=\"鸿程系统\"></a>鸿程系统</h1><ol>\n<li><p>mysql分页<br><a href=\"https://zazalu.space/2019/08/28/mysql-pagination-optimization-1/\">https://zazalu.space/2019/08/28/mysql-pagination-optimization-1/</a></p>\n</li>\n<li><p>mybatis的statement要素 </p>\n</li>\n</ol>\n<p>比如<select> 我们最常见的属性有:</select></p>\n<ul>\n<li><p>id, 唯一的标识符，可以被用来引用这条语句。</p>\n</li>\n<li><p>parameterType, 指示传入参数的类型, 我自己最常用的是传入map,  这个参数可以不选, 因为mybais可以通过类型选择器(TypeHandle)进行判断</p>\n</li>\n<li><p>resultType 或者 resultMap, resultMap对应自己定义的<resultmap>我觉得适用了大部分情况, 也可以使用resultType, 对应指定相应的pojo类</resultmap></p>\n</li>\n<li><p>flushCache, 如果设置为true, 则会清除一级和二级缓存, 一个在特殊需求下会很好用的设置</p>\n</li>\n<li><p>useCache, 设置为false, 则会取消这个statement进行二级缓存, <select>是默认为true的</select></p>\n</li>\n<li><p>timeout, 超时时间</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>vue的生命周期</li>\n</ol>\n<p>beforeCreate 和 created<br>在这俩个钩子函数执行的时候，并没有渲染 DOM，所以我们也不能够访问 DOM，一般来说，如果组件在加载的时候需要和后端有交互，放在这俩个钩子函数执行都可以，如果是需要访问 props、data、method 等数据的话，就需要使用 created 钩子函数</p>\n<p>在 mounted 钩子函数中可以访问到 DOM</p>\n<p>在 destroy 钩子函数中可以做一些定时器销毁工作，了解它们有利于我们在合适的生命周期去做不同的事情。</p>\n<ol start=\"4\">\n<li>常用的io类</li>\n</ol>\n<ul>\n<li>字节流 File(Buffered)Input(Output)Stream</li>\n<li>字符流 BufferedWriter和BufferedReader, PrintWriter和PrintReader</li>\n</ul>\n<p>看下我写的Java基础.md中的I/O部分</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ol>\n<li>simpleDataFormat 高并发下存在问题</li>\n</ol>\n<p>由于SimpleDateFormat不是线程安全的, 导致多个线程使用同一个SimpleDateFormat实例的时候, 会因为状态变量共享导致异常报错</p>\n<p>解决方法: 使用ThreadLocal包装,使得每个线程对应一个实例. 但是这样如果线程很多的情况下又会创建太多的SimpleDateFormat实例, 这时候你可以使用DateTimeFormatter, LocalDateTime(jdk8)去代替, 不过线程安全其实也就意味着要做控制,所以我认为性能可能会低于前者</p>\n<ol start=\"2\">\n<li>常见的线程安全集合类</li>\n</ol>\n<p>Vector HashTable</p>\n<p>ConcurrentXXX, CopyOnWriteXXX</p>\n<ol start=\"3\">\n<li>正向和反向代理</li>\n</ol>\n<p>正向代理是内网需访问外网，由一个可以访问外网的代理服务器进行代理转发请求<br>反向代理是外网需访问内网，外网服务器访问代理服务器，由代理服务器转发请求</p>\n<h1 id=\"非技术类问题\"><a href=\"#非技术类问题\" class=\"headerlink\" title=\"非技术类问题\"></a>非技术类问题</h1><ol>\n<li>为什么离职</li>\n</ol>\n<ul>\n<li>工作不在浙江,父母不愿意</li>\n<li>出差过久</li>\n<li>自己原因</li>\n</ul>\n<ol start=\"2\">\n<li>为什么那么久没有再工作</li>\n</ol>\n<ul>\n<li>自己原因</li>\n</ul>\n<ol start=\"3\">\n<li>你觉得你的优点 你的核心竞争力是什么</li>\n</ol>\n<ul>\n<li>处境不容乐观, 但是依旧开朗</li>\n<li>前后端,测试,生产全都熟悉,会写数据接口, 会搞整一点系统架构, 有长期单人驻场开发经验, 有很好的沟通能力</li>\n<li>深知自己以前的缺点, 不卑不亢, 踏实干事</li>\n</ul>\n<h1 id=\"面试自我介绍（浙商银行版）\"><a href=\"#面试自我介绍（浙商银行版）\" class=\"headerlink\" title=\"面试自我介绍（浙商银行版）\"></a>面试自我介绍（浙商银行版）</h1><h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>我叫何镓钧，来自浙江绍兴，17年毕业于西安电子科技大学软件学院，今年8月以来就一直就职于赞同科技。</p>\n<h2 id=\"聊聊黄河银行项目\"><a href=\"#聊聊黄河银行项目\" class=\"headerlink\" title=\"聊聊黄河银行项目\"></a>聊聊黄河银行项目</h2><p>（从项目的简单介绍说起）<br>我毕业后就一直从事银行相关业务系统的开发，比如我参与过黄河银行其一码付平台二期的开发，一码付平台是福建联迪（我当时就职的公司），为黄河银行提供的一套聚合支付交易平台，所谓的一码是指一个二维码就可以向客户提供各类第三方支付服务，比如支付宝，微信支付，银闪付等等。同时一码付平台还提供了面向行内用户的管理平台和面向商户的商户服务平台。</p>\n<p>Version1.0<br>【我当时主要负责的功能模块有，比如行内员工管理，商户管理，机构管理，码牌管理，移动端APP数据接口，以及涉及资金的交易流水对账清算入账功能。 同时我作为驻场开发人员，我还负责部署开发和测试环境，配合银行测试人员测试；负责与银行经理对接项目需求，参与各种与需求相关的会议，并代表公司发表意见；对接银行新核心接口并做联调测试；编写项目相关开发文档等等。】</p>\n<p>Version2.0<br>【我主要负责面向行内员工的管理平台开发，比如行内员工管理，商户管理，多级审核以及资金的对账清算入账功能；同时也作为驻场开发人员负责对接银行测试人员和负责与银行核心接口进行联调测试等。】</p>\n<p>我觉得从我的经历来看，我对自己的沟通能力，协调能力以及严谨的软件开发能力有一定的信心，我非常希望可以为浙商银行贡献自己的一份力，并努力实现自己的自我价值！谢谢</p>\n<p>—-如果时间来得及继续讲下面的—-</p>\n<p>（主要是为了体现我自己对于业务学习能力，以及十分看重业务的态度）<br>先拿商户管理为例，它听上去感觉很简单， 但其实在商户开立的过程中，需要涉及第三方支付的商户开立，银行本身的内部账户开立，商户银行账户查询验证，同时还要提供多级审核(授权)机制，每个功能的完成都必须对业务有非常清醒的认知。 类推到我们柜面系统开发上来看，柜面系统涉及的业务量也是非常多的，只有熟悉了业务的程序员才能开发出银行需要的优秀交易，才能胜任并满足项目的长期发展。而我毕业后就一直从事银行开发工作，虽说之前的属于边缘子系统，不太涉及银行核心业务，但是对银行业务的学习能力充满信心。</p>\n<p>行内员工管理主要任务是新增行内员工以及修改行内员工的基本信息和职级，</p>\n<p>（目的是表现我开发上的严谨性）<br>再说下交易流水的对账清算入账功能，</p>\n<p>对账：通过定时任务，每天10点都会根据第三方支付特有的银行商户号从第三方支付那里获取对账文件，内含第三方交易流水记录，根据银行交易流水号来一一比对对账文件内的交易流水和平台交易流水的交易状态，交易金额，手续费是否一致。若都一致则标记为对账成功否则失败。</p>\n<p>清算：将对账成功的交易流水，根据银行需求里提出的手续费规则（银行手续费，机构手续费，第三方手续费，是否手续费返还，是否手续费优惠等），计算每笔交易的手续费，并记录入表，并标记为已清算</p>\n<p>入账：根据日期取出已清算的交易流水，按照规定转账路线，调用核心入账接口（比如先转入内部账再转到商户账），完成对商户T+1的打款</p>\n<p>差错处理这一块也要讲。对账的差错处理，由人工审核，无误后重新进行对账清算流程。</p>\n<p>全部采用了Java的BigDecimal完成了所有涉及金额的操作，并且按照int类型存储至单位分，保证了资金计算无误</p>\n<h3 id=\"如何与银行核心系统互通互调的？\"><a href=\"#如何与银行核心系统互通互调的？\" class=\"headerlink\" title=\"如何与银行核心系统互通互调的？\"></a>如何与银行核心系统互通互调的？</h3><p>http，具体来说借助http工具类(当时公司内部对socket的封装类)，根据接口文档的规定，发送http报文，并接受返回报文，根据返回报文头携带的核心状态码，展开后续的操作</p>\n<p>说到HTTP, 这里就涉及了TCP连接的概念(HTTP的实现不是非使用TCP传输协议不可, 但是一般都是使用TCP, 从默认端口80就可以知道这点). TCP是一种可靠的字节流服务. 为了规范连接以及统一分层, 我们都使用Socket来进行TCP连接. TCP是全双工的, 字节数据可以双向传输. TCP属于</p>\n<p>TCP是如何保证可靠的?<br><code>数据完整性校验机制</code>,<code>分组丢失重传机制</code>,<code>滑动窗口提高信道吞吐量</code></p>\n<p>TCP连接最常问的两个东西:<br>三次握手(用于建立连接)和四次挥手(用于拆除连接)</p>\n<p>TCP三次握手:</p>\n<ol>\n<li>客户端发送SYN包(SYN=1,seq=x),进入SYN SEND状态</li>\n<li>服务端接收到SYN包, 向客户端回复SYNACK包(SYN=1,ACK=1,seq=y,ack_seq=x+1),从LISTEN状态进入SYN RCVD状态</li>\n<li>客户端接收到SYNACK包后, 向服务端回复ACK包(SYN=1,seq=x,ack_seq=y+1), 客户端进入ESTABLISHED状态.服务端接收到这个ACK包后也进入ESTABLISHED状态,.至此, 双方连接建立完毕</li>\n</ol>\n<p>TCP四次挥手:</p>\n<ol>\n<li>客户端发送FIN段, 要求断开连接, 状态进入到FIN_WAIT_1, 这个状态下客户端不会再发送新的数据包</li>\n<li>服务端应答这个FIN段, 并返回一个ACK段, 状态进入到CLOSE_WAIT, 这个状态下的意思是服务端会继续发送剩余未发送的数据包, 但是不会再接收新的数据包.客户端接收到ACK段后, 状态进入到FIN_WAIT_2</li>\n<li>服务端发送完剩余数据包后, 会向客户端也发送一个FIN段,状态进入到LAST_ACK, 这个状态的命名含义是服务端只接受客户端最后一次的ACK段.</li>\n<li>客户端接收到服务端的FIN包后,返回ACK段, 状态进入到TIME_WAIT, 等待2MSL后进入CLOSED状态. 服务端接收到最后的ACK包后进入到CLOSED状态.至此TCP连接就会结束</li>\n</ol>\n<h3 id=\"常用的Linux-Shell指令\"><a href=\"#常用的Linux-Shell指令\" class=\"headerlink\" title=\"常用的Linux Shell指令\"></a>常用的Linux Shell指令</h3><p>man,cd,ls,mkdir,rm,ps,grep,vim,top,mv,echo,whichis,$(),|,cat,tail,</p>\n<h3 id=\"Maven（重要性不高，先往后推）\"><a href=\"#Maven（重要性不高，先往后推）\" class=\"headerlink\" title=\"Maven（重要性不高，先往后推）\"></a>Maven（重要性不高，先往后推）</h3><h3 id=\"Oracle：\"><a href=\"#Oracle：\" class=\"headerlink\" title=\"Oracle：\"></a>Oracle：</h3><ol>\n<li>如何搭建，先安装服务端，再安装客户端，按照网上的静默化安装流程进行安装，一些关键点：<ul>\n<li>使用单独的oracle用户进行安装，而不是使用root用户安装</li>\n<li>其中可能会出现一些依赖错误，根据提示使用yum安装对应软件包</li>\n</ul>\n</li>\n<li><p>使用上oracle特有的东西：</p>\n<ul>\n<li><p>主键自增，使用序列，每次插入的时候显示调用(使用nextval)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--插入数据 </span><br><span class=\"line\">insert into test values(seq_on_test.nextval,&apos;Mary&apos;,15); </span><br><span class=\"line\">insert into test values(seq_on_test.nextval,&apos;Tom&apos;,16);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>序列，是oracle提供的一个产生唯一数值型值的机制</p>\n<p>序列的创建方式，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE 序列名</span><br><span class=\"line\">[INCREMENT BY n]</span><br><span class=\"line\">[START WITH n]</span><br><span class=\"line\">[&#123;MAXVALUE/ MINVALUE n|NOMAXVALUE&#125;]</span><br><span class=\"line\">[&#123;CYCLE|NOCYCLE&#125;]</span><br><span class=\"line\">[&#123;CACHE n|NOCACHE&#125;];</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>oracle分页<br>oracle每次结果集都会有ROWNUM来标明每行数据的位置，下面是推荐写法，这种写法不会因为rownum变大而不断变慢<br><code>select a.* from ( select t.*,rownum rowno from test t where rownum &lt;= 20 ) a where a.rowno &gt;= 11</code></p>\n</li>\n</ul>\n</li>\n<li><p>oracle索引:</p>\n<p> 常用的还是B树索引(是否聚集不太清楚)<br> 基数少的时候使用位图索引, 为什么是基数少的时候？ 因为位图索引其实就是为每一行维护一个位图向量，使用1和0来<br> 确定这一行这一列的值是否等于某个值，这种机制适合基数少的情况，具体可以看看<a href=\"https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html，\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuning8023/archive/2012/11/18/2776127.html，</a> 很快就能理解了。位图索引适合静态数据，而不适合索引频繁更新的列，因为它的建立机制是扫描整个表后得到的位图向量，所以当你频繁修改更新列的值，oracle需要对这个位图向量进行多次的更新操作，更新的时候使用行锁定，导致其他oracle操作无法正常进行会被堵塞，最终导致性能不佳</p>\n</li>\n<li><p>oracle存储过程:</p>\n<p> 为什么需要存储过程？<br> 存储过程最大的特点是性能优异，毕竟它是预编译过的，<br> 存储过程看上去就像编写sql脚本，可以定义状态和行为，同时存储过程可以复用，这样就使得我们可以把业务逻辑从应用层移动到数据库层，并且享受存储过程的性能优势。但是大量的使用存储过程实现业务逻辑，则不利于数据库迁移，毕竟不同的数据库甚至不同的数据库版本，相同的plsql代码都不一定能正常执行。<br> 安全性。避免了sql注入，避免了暴露表结构和字段</p>\n<p> 存储过程写法?</p>\n</li>\n<li><p>oracle视图：<br>我前一个项目没怎么用视图， 但是视图我觉得还是不错的，它是一种虚表，存储了select语句的结果。如果修改视图的记录会同步影响到基表上，这点自己注意下；删除视图不会影响基表</p>\n</li>\n</ol>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><ol>\n<li>为什么使用Redis？<ul>\n<li>作为缓存中间件，减少数据库压力，提高热点数据的响应速度<br>Redis的读写性能优秀（官网10w）以致于Redis的瓶颈在于网络吞吐而不是本身的读写（每秒4w次读写，跑满100M带宽）</li>\n<li>除了String以为拥有多种数据类型，为开发人员减负</li>\n</ul>\n</li>\n<li>常见的数据类型：<ul>\n<li>string，list，set，sorted set，hash<br>我只用过string，用过incr递增</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h3><ol>\n<li>之前项目主要用于反向代理，负载均衡没做，因为内网对应的是单机实例，但是仍然需要nginx做分发，因为有三个后台应用服务器，一台专门做清算的，一台专门为管理平台返回数据的，一台专门为商户服务平台返回数据的</li>\n<li>nginx是优秀的http服务器，常用于做反向代理，官网测试可以达到5w并发</li>\n</ol>\n<p>多级审核如何实现的？<br>简单来说，多级审核是通过审核链信息表，里面记录了审核的分级流程，java程序借助该表信息从而判断下一级推送给谁进行审核。</p>\n<p>这个功能属于后期新增的需求，而且要求多个审核模块都要加上这个功能，所以我使用了java的泛型来实现了这个需求，只需要继承相应的多级审核抽象类，就可以轻松的支持多级审核功能(数据库层需要在对应的表中新增3个字段)</p>\n<p>在java中定义一个多级审核抽象类，内部定义了多级审核需要调用的公共方法，每次审核的时候加上对多级审核相关字段的检查(当前审核角色，下一个审核角色，审核链id))，需要新增一个审核链表，专门记录审核流程，比如商户审核必须先由支行行长审核再由总行管理员审核才算通过。</p>\n<h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><ol>\n<li>Vue是使用Object.defineProperty()实现数据变化 -&gt; 视图更新， 给可输入控件添加DOM事件监听来实现视图更新 -&gt; 数据变化，从而整体上达到了双向绑定的效果</li>\n<li>Vue使用了虚拟DOM，为什么？<br>优点：</li>\n</ol>\n<p><code>保证性能下限</code>： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多(每次暴力操作DOM都会引起页面重新渲染)，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；<br><code>无需手动操作 DOM</code>： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；<br><code>跨平台</code>： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</p>\n<p>缺点:</p>\n<p>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</p>\n<ol start=\"3\">\n<li>虚拟 DOM 的实现原理主要包括以下 3 部分：</li>\n</ol>\n<p>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；<br>diff 算法 — 比较两棵虚拟 DOM 树的差异；<br>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</p>\n<h3 id=\"my-youdian\"><a href=\"#my-youdian\" class=\"headerlink\" title=\"my youdian\"></a>my youdian</h3><p>善于沟通，但是不胡乱发言，主动寻找问题关键点，不喜欢拖延。</p>\n<p>严于律己，不骄不躁，踏踏实实做事。</p>\n<p>善于总结归纳，有自己的博客经常做技术总结。</p>\n<h3 id=\"对账？\"><a href=\"#对账？\" class=\"headerlink\" title=\"对账？\"></a>对账？</h3><p>平台流水与第三方支付流水进行比对记录成功流水交易</p>\n<p>具体来讲，每天早上10点会向支付宝和微信发起对账文件下载请求，我们通过特约商户编号(1)(当然还有其他各类参数，密钥等)(2)，从其平台拉取对账文件，我方平台记录保存并与平台流水进行比对，主要比对金额和交易状态是否正常。</p>\n<p>(1) 黄河银行就是支付宝的特约商户，特约商户编号就是这么来的<br>(2) 数字证书，保证来源安全可靠有效</p>\n<h3 id=\"清算？\"><a href=\"#清算？\" class=\"headerlink\" title=\"清算？\"></a>清算？</h3><p>交易流水对平后，根据银行的手续费规则， 计算出相应的银行手续费，机构手续费和第三方手续费</p>\n<p>(1) 流水较多时，使用分批处理的方式，比如一次处理500条数据，防止内存溢出</p>\n<h3 id=\"入账T-1？\"><a href=\"#入账T-1？\" class=\"headerlink\" title=\"入账T+1？\"></a>入账T+1？</h3><p>T+1代表第二天入账</p>\n<p>入账前先要从清算表中获取需要入账的交易流水，然后记录每笔交易转至对应内部户的金额，转至客户账户的金额等等金额，这些金额记录可能存在重复，但是一切都是为了银行人员查看和排查方便。</p>\n<p>入账分机构入账和商户入账，分别将机构手续费和商户应得的费调用核心转账接口进行入账</p>\n<p>如何确保转账正确性，不会出现资金问题？</p>\n<ol>\n<li>在银行核心有控制，我方平台的账户每天只能入一次账，这是由银行核心提供的技术支持。意思就是说就算我们这里出现重复提交，都不会导致账入两次。</li>\n<li>我方平台借助oracle序列，对程序进行加锁，防止重复入账的发生。（oracle序列是否原子性<a href=\"https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/12104407/oracle-sequence-transactionality）</a></li>\n</ol>\n<h2 id=\"聊聊SpringBoot项目\"><a href=\"#聊聊SpringBoot项目\" class=\"headerlink\" title=\"聊聊SpringBoot项目\"></a>聊聊SpringBoot项目</h2><h3 id=\"SpringBoot？\"><a href=\"#SpringBoot？\" class=\"headerlink\" title=\"SpringBoot？\"></a>SpringBoot？</h3><p>SpringBoot是基于Java的一种轻量级应用框架，可以说是Spring的一种扩展，可以快速的构建Java应用程序，比如JavaWeb应用</p>\n<h3 id=\"Vue-1\"><a href=\"#Vue-1\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><p>Vue是基于JS的一种构建用户界面和单页面应用的MVVM框架，Model–view–viewmodel，相比Jquery，它将页面和数据分离的更透彻，在Jquery时代里我们常常要操作DOM结构，而Vue中我们可以使用Vue的模板语法操作虚拟DOM，将业务逻辑代码和<br>DOM操作代码分离，使得开发人员可以将重心偏向于业务逻辑</p>\n<h3 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h3><p>服务端和客户端都会保存一段唯一的token，客户端登录成功后由后台生成并对称加密返回数字签名，客户端通过验签后解密数字签名，获取到token并保存至cookie中；随后所有的请求都会携带token，服务器每次都会验证token的有效性。从而保证了会话有效</p>\n<h3 id=\"boot-js\"><a href=\"#boot-js\" class=\"headerlink\" title=\"boot.js?\"></a>boot.js?</h3><p>是我自定义的一个启动脚本，会存储一些常量到global对象(上下文环境变量)中，方便后续调用。</p>\n<h3 id=\"VueRouter\"><a href=\"#VueRouter\" class=\"headerlink\" title=\"VueRouter?\"></a>VueRouter?</h3><p>单页面应用的路由控制器，负责根据不同url加载不同的页面内容</p>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><p>一个状态变量的仓库，拥有Vue的内嵌支持，所以相比自己实现的状态变量仓库，使用Vuex存储的状态变量拥有双向绑定的特点</p>\n<h3 id=\"iView\"><a href=\"#iView\" class=\"headerlink\" title=\"iView\"></a>iView</h3><p>一个基于Vue的UI框架，我利用它来快速构建出美观的Web界面</p>\n<h3 id=\"vue-lazyload\"><a href=\"#vue-lazyload\" class=\"headerlink\" title=\"vue-lazyload\"></a>vue-lazyload</h3><p>一个图片懒加载的nodejs工具包，懒加载可以提高用户体验</p>\n<h3 id=\"vuescoll\"><a href=\"#vuescoll\" class=\"headerlink\" title=\"vuescoll\"></a>vuescoll</h3><p>一个方便控制滚轮的nodejs工具包，我利用它来实现下拉自动刷新的功能</p>\n"}],"Post":[{"title":"2019年国庆","date":"2019-10-02T12:31:06.000Z","_content":"\n## 感觉一团糟的杭州站 :)\n\n又一年国庆, 今年从杭州回家, 来杭州找工作+入职已经快一个月多了, 也差不多适应了杭州的生活. \n\n今天回家, 由于没有抢到高铁票, 只买到了普快火车, 由于我一直没有用抢票软件的习惯, 所以买完后也一直没有改签, 就这么上了.\n\n做了快一小时的地铁后终于来到了杭州站, 也就是杭州火车站. \n\n我放眼望去的总体感觉是, 房子老旧, 应该是用了很久的房子了. 然后我想找入口, 往四周望了几眼, 我很吃惊, 居然没有明显的路标指引, 要知道我当时的位置属于地铁出站口的那种区域, 属于中间地段, 里面充斥了各种实体商店, 五花八门.\n\n我在里面兜了一个圈子才发现, 原来进站口在二楼.\n\n来到二楼, 二楼的结构还算可以接受, 我很快就顺利的找到了进站口. \n\n就当我以为后面的流程就是扫下身份证(自从可以身份证出入后就很少取票了), 就可以进站的时候, 排了好久的队突然告诉我普快必须取票才能进入. ??? 我当时瞬间黑人问号浮现在脸上..\n\n没办法, 那就先去取票吧! 应该很快\n\n好吧, 结果我发现是我错了, 我出来后又开始蒙蔽了, 取票在哪里呢? 一般来说取票机都不会离进站口太远. 所以我就在四周逛了一圈, 然后没找到任何取票机.\n\n最后我跟随者一个比较大流的方向走过去, 转了2个弯, 穿过一条小型商业街, 终于看到了取票口!!!!\n\n还好我提前了几十分钟到杭州站, 不然估计可能要换乘了!\n\n## 周边的同学陆陆续续都传出结婚的消息\n\n毕业两年了, 大家都长大了, 不得不做的事情接踵而至, 比如结婚. \n\n还好我的父母思想比较宽松, 并没有严格要求我尽快结婚, 但是我感觉明年这个时候应该就差不多要结婚了.\n\n说实话, 我觉得结婚压力还是蛮大的, 因为我感觉结婚就意味着要支付一笔额外的巨额费用用于结婚, 看着我自己的积蓄马上就要大出血, 我就感觉有点难受, 一时半会吃不消. 看来接下来的一年要多干点副业, 多赚点钱了... 最近一直在考虑写点工具站, 专门为一部分人使用, 然后看看能不能骗到广告费, 如果真的成功的话, 也是不小的财富(有打折的或者便宜的云机子一定要告诉我啊!)\n\n今年在好好干一年, 看看变化, 准备准备准备, 从找个对象开始吧\n\n## 今年的国庆氛围比以往都热烈呢\n\n不知道是我的错觉还是咋滴, 觉得今年国庆的气氛特别热烈, 各大媒体, 微博, 朋友圈, b站, 知乎等都能看到一篇热爱祖国的新闻. 祖国近几年的发展确实可以说是蓬勃发展, 从我身边的变化来看的话. \n\n但是也觉得存在着很多隐患, 我个人觉得最大的问题还是网络诈骗吧. 最近遇到太多人被网上的骗子骗钱, 而且数额惊人, 被骗几w的都有, 但是真正破案的却看到的不多, 有些小额被骗的, 警察多半不会立案, 只剩下被害者的哀嚎.\n\n在举国同庆的同时, 我们也要反思这些背后的隐患, 各种社会问题的出现, 都是社会稳定发展的蛀虫, 越早解决越好.\n","source":"_posts/2019-Happy-National-Day.md","raw":"---\ntitle: 2019年国庆\ntags: 国庆\ncategories: 生活\ndate: 2019-10-02 20:31:06\n---\n\n## 感觉一团糟的杭州站 :)\n\n又一年国庆, 今年从杭州回家, 来杭州找工作+入职已经快一个月多了, 也差不多适应了杭州的生活. \n\n今天回家, 由于没有抢到高铁票, 只买到了普快火车, 由于我一直没有用抢票软件的习惯, 所以买完后也一直没有改签, 就这么上了.\n\n做了快一小时的地铁后终于来到了杭州站, 也就是杭州火车站. \n\n我放眼望去的总体感觉是, 房子老旧, 应该是用了很久的房子了. 然后我想找入口, 往四周望了几眼, 我很吃惊, 居然没有明显的路标指引, 要知道我当时的位置属于地铁出站口的那种区域, 属于中间地段, 里面充斥了各种实体商店, 五花八门.\n\n我在里面兜了一个圈子才发现, 原来进站口在二楼.\n\n来到二楼, 二楼的结构还算可以接受, 我很快就顺利的找到了进站口. \n\n就当我以为后面的流程就是扫下身份证(自从可以身份证出入后就很少取票了), 就可以进站的时候, 排了好久的队突然告诉我普快必须取票才能进入. ??? 我当时瞬间黑人问号浮现在脸上..\n\n没办法, 那就先去取票吧! 应该很快\n\n好吧, 结果我发现是我错了, 我出来后又开始蒙蔽了, 取票在哪里呢? 一般来说取票机都不会离进站口太远. 所以我就在四周逛了一圈, 然后没找到任何取票机.\n\n最后我跟随者一个比较大流的方向走过去, 转了2个弯, 穿过一条小型商业街, 终于看到了取票口!!!!\n\n还好我提前了几十分钟到杭州站, 不然估计可能要换乘了!\n\n## 周边的同学陆陆续续都传出结婚的消息\n\n毕业两年了, 大家都长大了, 不得不做的事情接踵而至, 比如结婚. \n\n还好我的父母思想比较宽松, 并没有严格要求我尽快结婚, 但是我感觉明年这个时候应该就差不多要结婚了.\n\n说实话, 我觉得结婚压力还是蛮大的, 因为我感觉结婚就意味着要支付一笔额外的巨额费用用于结婚, 看着我自己的积蓄马上就要大出血, 我就感觉有点难受, 一时半会吃不消. 看来接下来的一年要多干点副业, 多赚点钱了... 最近一直在考虑写点工具站, 专门为一部分人使用, 然后看看能不能骗到广告费, 如果真的成功的话, 也是不小的财富(有打折的或者便宜的云机子一定要告诉我啊!)\n\n今年在好好干一年, 看看变化, 准备准备准备, 从找个对象开始吧\n\n## 今年的国庆氛围比以往都热烈呢\n\n不知道是我的错觉还是咋滴, 觉得今年国庆的气氛特别热烈, 各大媒体, 微博, 朋友圈, b站, 知乎等都能看到一篇热爱祖国的新闻. 祖国近几年的发展确实可以说是蓬勃发展, 从我身边的变化来看的话. \n\n但是也觉得存在着很多隐患, 我个人觉得最大的问题还是网络诈骗吧. 最近遇到太多人被网上的骗子骗钱, 而且数额惊人, 被骗几w的都有, 但是真正破案的却看到的不多, 有些小额被骗的, 警察多半不会立案, 只剩下被害者的哀嚎.\n\n在举国同庆的同时, 我们也要反思这些背后的隐患, 各种社会问题的出现, 都是社会稳定发展的蛀虫, 越早解决越好.\n","slug":"2019-Happy-National-Day","published":1,"updated":"2019-10-19T13:01:10.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sk0001m6elgtd4vg9n","content":"<h2 id=\"感觉一团糟的杭州站\"><a href=\"#感觉一团糟的杭州站\" class=\"headerlink\" title=\"感觉一团糟的杭州站 :)\"></a>感觉一团糟的杭州站 :)</h2><p>又一年国庆, 今年从杭州回家, 来杭州找工作+入职已经快一个月多了, 也差不多适应了杭州的生活. </p>\n<p>今天回家, 由于没有抢到高铁票, 只买到了普快火车, 由于我一直没有用抢票软件的习惯, 所以买完后也一直没有改签, 就这么上了.</p>\n<p>做了快一小时的地铁后终于来到了杭州站, 也就是杭州火车站. </p>\n<p>我放眼望去的总体感觉是, 房子老旧, 应该是用了很久的房子了. 然后我想找入口, 往四周望了几眼, 我很吃惊, 居然没有明显的路标指引, 要知道我当时的位置属于地铁出站口的那种区域, 属于中间地段, 里面充斥了各种实体商店, 五花八门.</p>\n<p>我在里面兜了一个圈子才发现, 原来进站口在二楼.</p>\n<p>来到二楼, 二楼的结构还算可以接受, 我很快就顺利的找到了进站口. </p>\n<p>就当我以为后面的流程就是扫下身份证(自从可以身份证出入后就很少取票了), 就可以进站的时候, 排了好久的队突然告诉我普快必须取票才能进入. ??? 我当时瞬间黑人问号浮现在脸上..</p>\n<p>没办法, 那就先去取票吧! 应该很快</p>\n<p>好吧, 结果我发现是我错了, 我出来后又开始蒙蔽了, 取票在哪里呢? 一般来说取票机都不会离进站口太远. 所以我就在四周逛了一圈, 然后没找到任何取票机.</p>\n<p>最后我跟随者一个比较大流的方向走过去, 转了2个弯, 穿过一条小型商业街, 终于看到了取票口!!!!</p>\n<p>还好我提前了几十分钟到杭州站, 不然估计可能要换乘了!</p>\n<h2 id=\"周边的同学陆陆续续都传出结婚的消息\"><a href=\"#周边的同学陆陆续续都传出结婚的消息\" class=\"headerlink\" title=\"周边的同学陆陆续续都传出结婚的消息\"></a>周边的同学陆陆续续都传出结婚的消息</h2><p>毕业两年了, 大家都长大了, 不得不做的事情接踵而至, 比如结婚. </p>\n<p>还好我的父母思想比较宽松, 并没有严格要求我尽快结婚, 但是我感觉明年这个时候应该就差不多要结婚了.</p>\n<p>说实话, 我觉得结婚压力还是蛮大的, 因为我感觉结婚就意味着要支付一笔额外的巨额费用用于结婚, 看着我自己的积蓄马上就要大出血, 我就感觉有点难受, 一时半会吃不消. 看来接下来的一年要多干点副业, 多赚点钱了… 最近一直在考虑写点工具站, 专门为一部分人使用, 然后看看能不能骗到广告费, 如果真的成功的话, 也是不小的财富(有打折的或者便宜的云机子一定要告诉我啊!)</p>\n<p>今年在好好干一年, 看看变化, 准备准备准备, 从找个对象开始吧</p>\n<h2 id=\"今年的国庆氛围比以往都热烈呢\"><a href=\"#今年的国庆氛围比以往都热烈呢\" class=\"headerlink\" title=\"今年的国庆氛围比以往都热烈呢\"></a>今年的国庆氛围比以往都热烈呢</h2><p>不知道是我的错觉还是咋滴, 觉得今年国庆的气氛特别热烈, 各大媒体, 微博, 朋友圈, b站, 知乎等都能看到一篇热爱祖国的新闻. 祖国近几年的发展确实可以说是蓬勃发展, 从我身边的变化来看的话. </p>\n<p>但是也觉得存在着很多隐患, 我个人觉得最大的问题还是网络诈骗吧. 最近遇到太多人被网上的骗子骗钱, 而且数额惊人, 被骗几w的都有, 但是真正破案的却看到的不多, 有些小额被骗的, 警察多半不会立案, 只剩下被害者的哀嚎.</p>\n<p>在举国同庆的同时, 我们也要反思这些背后的隐患, 各种社会问题的出现, 都是社会稳定发展的蛀虫, 越早解决越好.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"感觉一团糟的杭州站\"><a href=\"#感觉一团糟的杭州站\" class=\"headerlink\" title=\"感觉一团糟的杭州站 :)\"></a>感觉一团糟的杭州站 :)</h2><p>又一年国庆, 今年从杭州回家, 来杭州找工作+入职已经快一个月多了, 也差不多适应了杭州的生活. </p>\n<p>今天回家, 由于没有抢到高铁票, 只买到了普快火车, 由于我一直没有用抢票软件的习惯, 所以买完后也一直没有改签, 就这么上了.</p>\n<p>做了快一小时的地铁后终于来到了杭州站, 也就是杭州火车站. </p>\n<p>我放眼望去的总体感觉是, 房子老旧, 应该是用了很久的房子了. 然后我想找入口, 往四周望了几眼, 我很吃惊, 居然没有明显的路标指引, 要知道我当时的位置属于地铁出站口的那种区域, 属于中间地段, 里面充斥了各种实体商店, 五花八门.</p>\n<p>我在里面兜了一个圈子才发现, 原来进站口在二楼.</p>\n<p>来到二楼, 二楼的结构还算可以接受, 我很快就顺利的找到了进站口. </p>\n<p>就当我以为后面的流程就是扫下身份证(自从可以身份证出入后就很少取票了), 就可以进站的时候, 排了好久的队突然告诉我普快必须取票才能进入. ??? 我当时瞬间黑人问号浮现在脸上..</p>\n<p>没办法, 那就先去取票吧! 应该很快</p>\n<p>好吧, 结果我发现是我错了, 我出来后又开始蒙蔽了, 取票在哪里呢? 一般来说取票机都不会离进站口太远. 所以我就在四周逛了一圈, 然后没找到任何取票机.</p>\n<p>最后我跟随者一个比较大流的方向走过去, 转了2个弯, 穿过一条小型商业街, 终于看到了取票口!!!!</p>\n<p>还好我提前了几十分钟到杭州站, 不然估计可能要换乘了!</p>\n<h2 id=\"周边的同学陆陆续续都传出结婚的消息\"><a href=\"#周边的同学陆陆续续都传出结婚的消息\" class=\"headerlink\" title=\"周边的同学陆陆续续都传出结婚的消息\"></a>周边的同学陆陆续续都传出结婚的消息</h2><p>毕业两年了, 大家都长大了, 不得不做的事情接踵而至, 比如结婚. </p>\n<p>还好我的父母思想比较宽松, 并没有严格要求我尽快结婚, 但是我感觉明年这个时候应该就差不多要结婚了.</p>\n<p>说实话, 我觉得结婚压力还是蛮大的, 因为我感觉结婚就意味着要支付一笔额外的巨额费用用于结婚, 看着我自己的积蓄马上就要大出血, 我就感觉有点难受, 一时半会吃不消. 看来接下来的一年要多干点副业, 多赚点钱了… 最近一直在考虑写点工具站, 专门为一部分人使用, 然后看看能不能骗到广告费, 如果真的成功的话, 也是不小的财富(有打折的或者便宜的云机子一定要告诉我啊!)</p>\n<p>今年在好好干一年, 看看变化, 准备准备准备, 从找个对象开始吧</p>\n<h2 id=\"今年的国庆氛围比以往都热烈呢\"><a href=\"#今年的国庆氛围比以往都热烈呢\" class=\"headerlink\" title=\"今年的国庆氛围比以往都热烈呢\"></a>今年的国庆氛围比以往都热烈呢</h2><p>不知道是我的错觉还是咋滴, 觉得今年国庆的气氛特别热烈, 各大媒体, 微博, 朋友圈, b站, 知乎等都能看到一篇热爱祖国的新闻. 祖国近几年的发展确实可以说是蓬勃发展, 从我身边的变化来看的话. </p>\n<p>但是也觉得存在着很多隐患, 我个人觉得最大的问题还是网络诈骗吧. 最近遇到太多人被网上的骗子骗钱, 而且数额惊人, 被骗几w的都有, 但是真正破案的却看到的不多, 有些小额被骗的, 警察多半不会立案, 只剩下被害者的哀嚎.</p>\n<p>在举国同庆的同时, 我们也要反思这些背后的隐患, 各种社会问题的出现, 都是社会稳定发展的蛀虫, 越早解决越好.</p>\n"},{"title":"JAVA堆排序","date":"2019-06-11T06:03:08.000Z","_content":"\n## 堆排序(最大堆为例)\n\n堆排序是利用堆的特性来实现排序，经典的实现方式是采用最大堆（一种完全二叉树），“冒泡”顶端元素实现排序\n\n## 堆排序实现步骤\n\n### 1.将需要排序的数组构建成一个最大堆\n\n由于完全二叉树的位置存在规律，所以完全二叉树可以由一个数组来表示，其左孩子就是2i+1位置，右孩子是2i-1，父节点位置i/2，i为数组索引。最大堆的构建就是利用这一点来实现的。下面我们展示一种将一个无序的数组转换为一个最大堆的实例\n\n**[!]**: 将一个无序的数组转换为最大堆有很多种方法，我这里讲的是其中一种方式也是网上和书上也流行的一种方式，也就是用`下滤`这种操作来一步步的将无序数组转换为最大堆的排序方式。其他方法还有使用`上滤`，具体可以在网上参考二叉堆（优先队列）的实现，本文不会提及太多。\n\n我们拿下面的一个打乱的数组举例\nint arr[] = new int[]{150,80,40,30,10,70,110,100,20,90,60,50,120,140,130}\n\n因为（二叉）最大堆的特性，所以我们可以将其内容用完全二叉树来表示，如下图所示,可以看到数据110的节点是我们最小的可视为一棵树的单位，它在数组的位置正好是length/2 -1也就是arr[6]。\n\n<img src=\"/images/tmpImage/heapSort_1.png\" />\n转换为完全二叉树表示后，就可以通过图解的方式轻松的探讨最大堆是怎么一步步构建出来的。下面我先贴代码，然后在代码的注释中讲解如何构建。\n```java\n    //二叉堆的特性：一个根节点的左孩子在数组中的索引就是2*rootIndex +1，你可以通过观察我前面的图自己来验证这个原理\n    private int leftChild(int rootIndex){\n        return 2 * rootIndex + 1;\n    }\n\n    //二叉堆特性：右孩子=左孩子+1，你可以通过观察我前面的图来验证这个原理\n    private int rightChild(int leftChild){\n        return ++leftChild;\n    }\n\n    //判断是否存在右孩子\n    //二叉堆特性： 验证最后一个左孩子是否是数组最后一个元素，如果不是那说明是有右孩子的\n    private boolean haveRightChild(int leftChild,int arrLength){\n        return leftChild != (arrLength - 1);\n    }\n\n    //下滤，维持最大堆性质的规则方法，请好好阅读并配合图解来理解即可\n    private void percDown(int[] arr,int rootIndex,int length){\n        int child;\n        int temp;\n        \n        for (temp = arr[rootIndex]; leftChild(rootIndex) < length; rootIndex = child) {\n            child = leftChild(rootIndex);\n\n            if(child != length -1){\n                if(arr[child] < arr[child+1]){\n                    ++child;\n                }\n            }\n            //和根节点交换位置完成下滤\n            if(arr[rootIndex] < arr[child]){\n                arr[rootIndex] = arr[child];\n                arr[child] = temp;\n            }\n            //当前根节点树已满足条件无需下滤调整\n            else{\n                break;\n            }\n\n        }\n    }\n\n    //建立最大堆\n    private void buildMaxHeap(int[] arr){\n        //从arr.length/2-1开始，这是最小的根节点，相当于图中110元素数据的位置。\n        for (int i = arr.length/2 - 1; i >=0 ; i--) {\n            percDown(arr,i,arr.length);\n        }\n    }\n\n```\n\n**[!]**: 这种构建方式构建时必须从length/2-1开始，也就是最小的根节点开始。不然会导致下滤不完全，最终得到的不会符合最大堆性质，你可以从图片中模拟这个情况的发生，比如从最顶端开始下滤，随后你会发现就有一部分元素（比如120,130,140这些元素）会被这个构建算法忽视，从而无法实现最大堆\n\n\n### “冒泡”最大堆\n\n利用最大堆的数据结构，每次获取最小元素，转移至一个新数组（空间浪费），或者直接将最小元素转移至数组第一个位置。以此递归最终得到有序数组。\n\n代码如下实现：\n```java\n     //将最大堆的顶端元素移动至数组最后一位，堆最大长度缩小1，循环此操作，变可以得到一个排好序的数组，这就是堆排序\n    private void sortByMaxheap(int[] arr){\n        for (int i = arr.length-1; i > 0; i--) {\n            swap(arr,0,i);//array[0]也就是最大的数，移动到i处，也就是相对的末尾处\n            percDown(arr,0,i);//转换后arr[0]的位置变成了最小元素，其他位置都正常，所以需要对其做一次下滤操作使得最大堆性质不被破坏\n        }\n    }\n\n    private void swap(int[] arr, int i, int j){\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    //调用堆排序\n    public void heapSort(int[] arr){\n        buildMaxHeap(arr);\n        sortByMaxheap(arr);\n    }\n```\n\n## 时间复杂度分析：\n1. 建堆的时间复杂度：O（N）\n2. 选取最大值并排序的时间复杂度是：O（logN）\n所以总体的时间复杂度为O（NlogN）\n\n## 算法稳定性分析：\n不稳定，存在前后置换，所以会有后面的数据被换到前面的可能性","source":"_posts/JAVA堆排序.md","raw":"---\ntitle: JAVA堆排序\ntags: 数据结构\ncategories: IT\ndate: 2019-06-11 14:03:08\n---\n\n## 堆排序(最大堆为例)\n\n堆排序是利用堆的特性来实现排序，经典的实现方式是采用最大堆（一种完全二叉树），“冒泡”顶端元素实现排序\n\n## 堆排序实现步骤\n\n### 1.将需要排序的数组构建成一个最大堆\n\n由于完全二叉树的位置存在规律，所以完全二叉树可以由一个数组来表示，其左孩子就是2i+1位置，右孩子是2i-1，父节点位置i/2，i为数组索引。最大堆的构建就是利用这一点来实现的。下面我们展示一种将一个无序的数组转换为一个最大堆的实例\n\n**[!]**: 将一个无序的数组转换为最大堆有很多种方法，我这里讲的是其中一种方式也是网上和书上也流行的一种方式，也就是用`下滤`这种操作来一步步的将无序数组转换为最大堆的排序方式。其他方法还有使用`上滤`，具体可以在网上参考二叉堆（优先队列）的实现，本文不会提及太多。\n\n我们拿下面的一个打乱的数组举例\nint arr[] = new int[]{150,80,40,30,10,70,110,100,20,90,60,50,120,140,130}\n\n因为（二叉）最大堆的特性，所以我们可以将其内容用完全二叉树来表示，如下图所示,可以看到数据110的节点是我们最小的可视为一棵树的单位，它在数组的位置正好是length/2 -1也就是arr[6]。\n\n<img src=\"/images/tmpImage/heapSort_1.png\" />\n转换为完全二叉树表示后，就可以通过图解的方式轻松的探讨最大堆是怎么一步步构建出来的。下面我先贴代码，然后在代码的注释中讲解如何构建。\n```java\n    //二叉堆的特性：一个根节点的左孩子在数组中的索引就是2*rootIndex +1，你可以通过观察我前面的图自己来验证这个原理\n    private int leftChild(int rootIndex){\n        return 2 * rootIndex + 1;\n    }\n\n    //二叉堆特性：右孩子=左孩子+1，你可以通过观察我前面的图来验证这个原理\n    private int rightChild(int leftChild){\n        return ++leftChild;\n    }\n\n    //判断是否存在右孩子\n    //二叉堆特性： 验证最后一个左孩子是否是数组最后一个元素，如果不是那说明是有右孩子的\n    private boolean haveRightChild(int leftChild,int arrLength){\n        return leftChild != (arrLength - 1);\n    }\n\n    //下滤，维持最大堆性质的规则方法，请好好阅读并配合图解来理解即可\n    private void percDown(int[] arr,int rootIndex,int length){\n        int child;\n        int temp;\n        \n        for (temp = arr[rootIndex]; leftChild(rootIndex) < length; rootIndex = child) {\n            child = leftChild(rootIndex);\n\n            if(child != length -1){\n                if(arr[child] < arr[child+1]){\n                    ++child;\n                }\n            }\n            //和根节点交换位置完成下滤\n            if(arr[rootIndex] < arr[child]){\n                arr[rootIndex] = arr[child];\n                arr[child] = temp;\n            }\n            //当前根节点树已满足条件无需下滤调整\n            else{\n                break;\n            }\n\n        }\n    }\n\n    //建立最大堆\n    private void buildMaxHeap(int[] arr){\n        //从arr.length/2-1开始，这是最小的根节点，相当于图中110元素数据的位置。\n        for (int i = arr.length/2 - 1; i >=0 ; i--) {\n            percDown(arr,i,arr.length);\n        }\n    }\n\n```\n\n**[!]**: 这种构建方式构建时必须从length/2-1开始，也就是最小的根节点开始。不然会导致下滤不完全，最终得到的不会符合最大堆性质，你可以从图片中模拟这个情况的发生，比如从最顶端开始下滤，随后你会发现就有一部分元素（比如120,130,140这些元素）会被这个构建算法忽视，从而无法实现最大堆\n\n\n### “冒泡”最大堆\n\n利用最大堆的数据结构，每次获取最小元素，转移至一个新数组（空间浪费），或者直接将最小元素转移至数组第一个位置。以此递归最终得到有序数组。\n\n代码如下实现：\n```java\n     //将最大堆的顶端元素移动至数组最后一位，堆最大长度缩小1，循环此操作，变可以得到一个排好序的数组，这就是堆排序\n    private void sortByMaxheap(int[] arr){\n        for (int i = arr.length-1; i > 0; i--) {\n            swap(arr,0,i);//array[0]也就是最大的数，移动到i处，也就是相对的末尾处\n            percDown(arr,0,i);//转换后arr[0]的位置变成了最小元素，其他位置都正常，所以需要对其做一次下滤操作使得最大堆性质不被破坏\n        }\n    }\n\n    private void swap(int[] arr, int i, int j){\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    //调用堆排序\n    public void heapSort(int[] arr){\n        buildMaxHeap(arr);\n        sortByMaxheap(arr);\n    }\n```\n\n## 时间复杂度分析：\n1. 建堆的时间复杂度：O（N）\n2. 选取最大值并排序的时间复杂度是：O（logN）\n所以总体的时间复杂度为O（NlogN）\n\n## 算法稳定性分析：\n不稳定，存在前后置换，所以会有后面的数据被换到前面的可能性","slug":"JAVA堆排序","published":1,"updated":"2019-06-11T07:29:44.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sn0003m6eli9s0c7wn","content":"<h2 id=\"堆排序-最大堆为例\"><a href=\"#堆排序-最大堆为例\" class=\"headerlink\" title=\"堆排序(最大堆为例)\"></a>堆排序(最大堆为例)</h2><p>堆排序是利用堆的特性来实现排序，经典的实现方式是采用最大堆（一种完全二叉树），“冒泡”顶端元素实现排序</p>\n<h2 id=\"堆排序实现步骤\"><a href=\"#堆排序实现步骤\" class=\"headerlink\" title=\"堆排序实现步骤\"></a>堆排序实现步骤</h2><h3 id=\"1-将需要排序的数组构建成一个最大堆\"><a href=\"#1-将需要排序的数组构建成一个最大堆\" class=\"headerlink\" title=\"1.将需要排序的数组构建成一个最大堆\"></a>1.将需要排序的数组构建成一个最大堆</h3><p>由于完全二叉树的位置存在规律，所以完全二叉树可以由一个数组来表示，其左孩子就是2i+1位置，右孩子是2i-1，父节点位置i/2，i为数组索引。最大堆的构建就是利用这一点来实现的。下面我们展示一种将一个无序的数组转换为一个最大堆的实例</p>\n<p><strong>[!]</strong>: 将一个无序的数组转换为最大堆有很多种方法，我这里讲的是其中一种方式也是网上和书上也流行的一种方式，也就是用<code>下滤</code>这种操作来一步步的将无序数组转换为最大堆的排序方式。其他方法还有使用<code>上滤</code>，具体可以在网上参考二叉堆（优先队列）的实现，本文不会提及太多。</p>\n<p>我们拿下面的一个打乱的数组举例<br>int arr[] = new int[]{150,80,40,30,10,70,110,100,20,90,60,50,120,140,130}</p>\n<p>因为（二叉）最大堆的特性，所以我们可以将其内容用完全二叉树来表示，如下图所示,可以看到数据110的节点是我们最小的可视为一棵树的单位，它在数组的位置正好是length/2 -1也就是arr[6]。</p>\n<p><img src=\"/images/tmpImage/heapSort_1.png\"><br>转换为完全二叉树表示后，就可以通过图解的方式轻松的探讨最大堆是怎么一步步构建出来的。下面我先贴代码，然后在代码的注释中讲解如何构建。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二叉堆的特性：一个根节点的左孩子在数组中的索引就是2*rootIndex +1，你可以通过观察我前面的图自己来验证这个原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftChild</span><span class=\"params\">(<span class=\"keyword\">int</span> rootIndex)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * rootIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二叉堆特性：右孩子=左孩子+1，你可以通过观察我前面的图来验证这个原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightChild</span><span class=\"params\">(<span class=\"keyword\">int</span> leftChild)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++leftChild;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否存在右孩子</span></span><br><span class=\"line\"><span class=\"comment\">//二叉堆特性： 验证最后一个左孩子是否是数组最后一个元素，如果不是那说明是有右孩子的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">haveRightChild</span><span class=\"params\">(<span class=\"keyword\">int</span> leftChild,<span class=\"keyword\">int</span> arrLength)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftChild != (arrLength - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下滤，维持最大堆性质的规则方法，请好好阅读并配合图解来理解即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">percDown</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> rootIndex,<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = arr[rootIndex]; leftChild(rootIndex) &lt; length; rootIndex = child) &#123;</span><br><span class=\"line\">        child = leftChild(rootIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(child != length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[child] &lt; arr[child+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ++child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//和根节点交换位置完成下滤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[rootIndex] &lt; arr[child])&#123;</span><br><span class=\"line\">            arr[rootIndex] = arr[child];</span><br><span class=\"line\">            arr[child] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前根节点树已满足条件无需下滤调整</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立最大堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从arr.length/2-1开始，这是最小的根节点，相当于图中110元素数据的位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length/<span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;=<span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">        percDown(arr,i,arr.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>[!]</strong>: 这种构建方式构建时必须从length/2-1开始，也就是最小的根节点开始。不然会导致下滤不完全，最终得到的不会符合最大堆性质，你可以从图片中模拟这个情况的发生，比如从最顶端开始下滤，随后你会发现就有一部分元素（比如120,130,140这些元素）会被这个构建算法忽视，从而无法实现最大堆</p>\n<h3 id=\"“冒泡”最大堆\"><a href=\"#“冒泡”最大堆\" class=\"headerlink\" title=\"“冒泡”最大堆\"></a>“冒泡”最大堆</h3><p>利用最大堆的数据结构，每次获取最小元素，转移至一个新数组（空间浪费），或者直接将最小元素转移至数组第一个位置。以此递归最终得到有序数组。</p>\n<p>代码如下实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//将最大堆的顶端元素移动至数组最后一位，堆最大长度缩小1，循环此操作，变可以得到一个排好序的数组，这就是堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortByMaxheap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length-<span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        swap(arr,<span class=\"number\">0</span>,i);<span class=\"comment\">//array[0]也就是最大的数，移动到i处，也就是相对的末尾处</span></span><br><span class=\"line\">        percDown(arr,<span class=\"number\">0</span>,i);<span class=\"comment\">//转换后arr[0]的位置变成了最小元素，其他位置都正常，所以需要对其做一次下滤操作使得最大堆性质不被破坏</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    buildMaxHeap(arr);</span><br><span class=\"line\">    sortByMaxheap(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"时间复杂度分析：\"><a href=\"#时间复杂度分析：\" class=\"headerlink\" title=\"时间复杂度分析：\"></a>时间复杂度分析：</h2><ol>\n<li>建堆的时间复杂度：O（N）</li>\n<li>选取最大值并排序的时间复杂度是：O（logN）<br>所以总体的时间复杂度为O（NlogN）</li>\n</ol>\n<h2 id=\"算法稳定性分析：\"><a href=\"#算法稳定性分析：\" class=\"headerlink\" title=\"算法稳定性分析：\"></a>算法稳定性分析：</h2><p>不稳定，存在前后置换，所以会有后面的数据被换到前面的可能性</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆排序-最大堆为例\"><a href=\"#堆排序-最大堆为例\" class=\"headerlink\" title=\"堆排序(最大堆为例)\"></a>堆排序(最大堆为例)</h2><p>堆排序是利用堆的特性来实现排序，经典的实现方式是采用最大堆（一种完全二叉树），“冒泡”顶端元素实现排序</p>\n<h2 id=\"堆排序实现步骤\"><a href=\"#堆排序实现步骤\" class=\"headerlink\" title=\"堆排序实现步骤\"></a>堆排序实现步骤</h2><h3 id=\"1-将需要排序的数组构建成一个最大堆\"><a href=\"#1-将需要排序的数组构建成一个最大堆\" class=\"headerlink\" title=\"1.将需要排序的数组构建成一个最大堆\"></a>1.将需要排序的数组构建成一个最大堆</h3><p>由于完全二叉树的位置存在规律，所以完全二叉树可以由一个数组来表示，其左孩子就是2i+1位置，右孩子是2i-1，父节点位置i/2，i为数组索引。最大堆的构建就是利用这一点来实现的。下面我们展示一种将一个无序的数组转换为一个最大堆的实例</p>\n<p><strong>[!]</strong>: 将一个无序的数组转换为最大堆有很多种方法，我这里讲的是其中一种方式也是网上和书上也流行的一种方式，也就是用<code>下滤</code>这种操作来一步步的将无序数组转换为最大堆的排序方式。其他方法还有使用<code>上滤</code>，具体可以在网上参考二叉堆（优先队列）的实现，本文不会提及太多。</p>\n<p>我们拿下面的一个打乱的数组举例<br>int arr[] = new int[]{150,80,40,30,10,70,110,100,20,90,60,50,120,140,130}</p>\n<p>因为（二叉）最大堆的特性，所以我们可以将其内容用完全二叉树来表示，如下图所示,可以看到数据110的节点是我们最小的可视为一棵树的单位，它在数组的位置正好是length/2 -1也就是arr[6]。</p>\n<p><img src=\"/images/tmpImage/heapSort_1.png\"><br>转换为完全二叉树表示后，就可以通过图解的方式轻松的探讨最大堆是怎么一步步构建出来的。下面我先贴代码，然后在代码的注释中讲解如何构建。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二叉堆的特性：一个根节点的左孩子在数组中的索引就是2*rootIndex +1，你可以通过观察我前面的图自己来验证这个原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">leftChild</span><span class=\"params\">(<span class=\"keyword\">int</span> rootIndex)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * rootIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二叉堆特性：右孩子=左孩子+1，你可以通过观察我前面的图来验证这个原理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">rightChild</span><span class=\"params\">(<span class=\"keyword\">int</span> leftChild)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ++leftChild;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否存在右孩子</span></span><br><span class=\"line\"><span class=\"comment\">//二叉堆特性： 验证最后一个左孩子是否是数组最后一个元素，如果不是那说明是有右孩子的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">haveRightChild</span><span class=\"params\">(<span class=\"keyword\">int</span> leftChild,<span class=\"keyword\">int</span> arrLength)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftChild != (arrLength - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下滤，维持最大堆性质的规则方法，请好好阅读并配合图解来理解即可</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">percDown</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> rootIndex,<span class=\"keyword\">int</span> length)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = arr[rootIndex]; leftChild(rootIndex) &lt; length; rootIndex = child) &#123;</span><br><span class=\"line\">        child = leftChild(rootIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(child != length -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[child] &lt; arr[child+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                ++child;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//和根节点交换位置完成下滤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[rootIndex] &lt; arr[child])&#123;</span><br><span class=\"line\">            arr[rootIndex] = arr[child];</span><br><span class=\"line\">            arr[child] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前根节点树已满足条件无需下滤调整</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立最大堆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从arr.length/2-1开始，这是最小的根节点，相当于图中110元素数据的位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length/<span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;=<span class=\"number\">0</span> ; i--) &#123;</span><br><span class=\"line\">        percDown(arr,i,arr.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>[!]</strong>: 这种构建方式构建时必须从length/2-1开始，也就是最小的根节点开始。不然会导致下滤不完全，最终得到的不会符合最大堆性质，你可以从图片中模拟这个情况的发生，比如从最顶端开始下滤，随后你会发现就有一部分元素（比如120,130,140这些元素）会被这个构建算法忽视，从而无法实现最大堆</p>\n<h3 id=\"“冒泡”最大堆\"><a href=\"#“冒泡”最大堆\" class=\"headerlink\" title=\"“冒泡”最大堆\"></a>“冒泡”最大堆</h3><p>利用最大堆的数据结构，每次获取最小元素，转移至一个新数组（空间浪费），或者直接将最小元素转移至数组第一个位置。以此递归最终得到有序数组。</p>\n<p>代码如下实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//将最大堆的顶端元素移动至数组最后一位，堆最大长度缩小1，循环此操作，变可以得到一个排好序的数组，这就是堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sortByMaxheap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length-<span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        swap(arr,<span class=\"number\">0</span>,i);<span class=\"comment\">//array[0]也就是最大的数，移动到i处，也就是相对的末尾处</span></span><br><span class=\"line\">        percDown(arr,<span class=\"number\">0</span>,i);<span class=\"comment\">//转换后arr[0]的位置变成了最小元素，其他位置都正常，所以需要对其做一次下滤操作使得最大堆性质不被破坏</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用堆排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    buildMaxHeap(arr);</span><br><span class=\"line\">    sortByMaxheap(arr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"时间复杂度分析：\"><a href=\"#时间复杂度分析：\" class=\"headerlink\" title=\"时间复杂度分析：\"></a>时间复杂度分析：</h2><ol>\n<li>建堆的时间复杂度：O（N）</li>\n<li>选取最大值并排序的时间复杂度是：O（logN）<br>所以总体的时间复杂度为O（NlogN）</li>\n</ol>\n<h2 id=\"算法稳定性分析：\"><a href=\"#算法稳定性分析：\" class=\"headerlink\" title=\"算法稳定性分析：\"></a>算法稳定性分析：</h2><p>不稳定，存在前后置换，所以会有后面的数据被换到前面的可能性</p>\n"},{"title":"2017俺の年终总结","date":"2019-04-24T06:05:56.000Z","_content":"\n终于迎来了学业生涯结束后的第一个春节!非常感谢自己踏在这样美好的人生转折点上,这一年里,我有欢笑也有泪水(虽然我已不记得上一次哭是什么时候了哈哈),这一年里我完成了许多事,也做砸了许多事;这一年里我告别了许多人,我也认识了许多人;这一年里我见识到了许多事,也对社会的很多事感觉失望.2017注定对我而言注定是特殊的,有太多值得我去记录和分享的东西在那里!在这个安静的傍晚时光里,就让我全部一点点的记录下来吧!\n\n## 先从毕设开始说吧\n\n2017年的开头,就先从毕设说起吧.2017年上半年基本都在为毕设忙碌了.身为西电软件学院的一名普通学生,毕设自然而然是要做一个软件作为自己毕业的答卷! 我不是一个非常优秀的学生,成绩也一般般,对软件稍有兴趣但是大学四年也是经常东张西望,真正学到的东西很少,基础知识非常不扎实.所以当时就”抢”到了一个比较简单的毕设题目<code>香水在线购物网站</code> 这几年Web技术一直发展和传播的非常好,学习方便,不牵涉大量后端知识光做一个前端壳子的话,这个题目作为毕设题目真的非常适合<strong>普通学生</strong>呢!(苦笑) \n\n1. 没要求放到互联网上\n2. 不需要考虑后台各类优化\n\n总的来说就是,你不需要考虑很多东西,毕设老师虽然会在你答辩的时候提出各种优化问题,但是其实只要你懂,能说出个一二来,毕设老师是不会在项目代码检查的时候刻意去检查这些东西的,因为他们也明白光靠一个人去做一个在线购物网站,在没有现有代码框架的基础上,基本不可能让一个大四学生在半年内完成(准确来说是4个月左右,除非是大佬!大佬请带带我…),所以整个毕设的过程,基本就会围绕着前端展开!页面做的好看,就像媳妇领进门,后续的优化就会慢慢去磨合,慢慢去优化,毕设老师们也会<strong>放你一马</strong>(最主要的就是答辩的时候你一定要懂得说出来,如何优化!要blabla一大堆!让毕设老师觉得,恩,这小伙子(姑娘,不错)\n\n西电毕设才不会那么随便\n\n虽然前面我自说自话了一大堆所谓的<strong>毕设通关宝典</strong>,但是我还是要为我校说点好话的.西电不是一个985,也可算是一个211学校.不算很好的学校,也不算很差的学校.在我看来,我们西电的学生大部分都是好学生,一个个怀揣着自己的梦想.大学是自由的,如何度过,老师不会来管你,学校规定的那些任务以及要求,只要你不要浪过头,就都可以完成.在我认识的同学里面,有一直玩游戏的,也有一直钻研自己的东西的,也有学霸天天好好上课学习的,当然大部分都是完成正常课程同时业余时间玩自己的业余活动的同学居多的.\n\n但不管怎么样,不同的人也都在大四那年迎来了自己不同的结局.学习好的都找到了薪资更高的工作,奔赴北上广深,为自己的梦想不断前行.不怎么优秀但是为人脚踏实地的同学,也都能找到一份不错的工作;学习不太好,平时不太学习本专业知识的,最后也都会有自己的想法,去走不同的路.\n\n如果说大学前三年在学习知识,那么可以说大四就是在体验一份浓浓的人生咖啡.担任毕设老师中,也有不少非常不错的老师,在毕设期间,用他们的一言一行,传达给我们各种各样的人生技能和专业技能.让我受益匪浅.(<strong>曾老师</strong>就是我特别崇拜的一名毕设老师,当时他担任我的毕设老师,我也特比感谢可以在大学的最后一个阶段,遇到他,遇到这么好的一个老师)\n\n## 手游的那些事\n\n先是感叹国内acg文化的茁壮发展，大概几年前,国内的宅er还要死要活翻墙去玩岛国的<strong>舰队collection</strong>,和自己的老婆相隔一个国度,还经常遇到<strong>猫</strong>危机(舰队collection连接服务器失败会弹出一只猫的画面)\n\n没想到过了不到几年,国内的宅er就有了很多国产老婆可以玩了~\n\n<strong>少女前线</strong>就是一款枪械拟人的游戏,把不同的枪械变化为一个萌萌的妹子,然后宅er可以带着她们前往前线进行战斗,体验到美少女战斗的舒爽快感(反正我们就是喜欢小姐姐!)\n\n虽然我是不太喜欢这类游戏的,因为他们一般都会比较肝,特别耗时间去玩,不过当时由于其游戏性还不错(比舰娘要好玩),游戏剧情设置较合理,也是吸引我玩了一段时间.这款游戏还是在我无聊的时光里带给我了不少欢乐.虽然后来参与工作后,就不怎么玩,不过我也会偶尔去看看这游戏,真心希望官方可以好好的做好这个游戏,给这类游戏一个满意的答卷.而不是三分热度,捞一笔就跑路.\n\n本来以为这个小节我能讲很多,但没想到真正写的时候,缺没有什么值得讲的东西.\n\n1. 我才不会讲我曾借助按键精灵写了一个按键脚本,在电脑上无限刷5-4.\n2. 我才不会讲我曾因为剧情发展到关键时候,发帖说了”AR-15请千万不要出事”这些话语.\n3. 我才不会讲半夜睡不着,是各个枪娘陪伴着我度过不眠之夜.\n\n好吧,要说的真的不多呢,这小节就到此为止吧! 祝愿少女前线可以在2018年能红红火火.\n\n## 就业\n\n过了毕设那段时光后,便马不停蹄的前往了自己的工作单位进行相关工作.\n\n真正觉得自己还不够努力,但却有点无可奈何\n\n当时校招的时候,由于害怕一线城市的就业压力大,所以选择了二线城市的一个公司工作.\n虽然工资在同行里不算很高,不过公司提供吃住方面都很不错,所以我很快就适应了工作岗位.\n\n一开始,我参与了公司的尝试性项目,这个项目主要是新人试水项目,简单来说就是看看你这人的能力怎么样.因为面试的过程中,有太多的包装,根本不知道招进来的人到底有多少能耐.所以我们公司都会有这类尝试性项目,专门丢给新人做,然后综合评估新人的代码能力,处理能力,团队沟通能力.\n\n幸运的是,我的工作表现貌似非常不错,那段时间生活就只有工作和休息,放弃了自己爱玩的游戏,放弃了自己爱看的动漫,全身心的投入到工作中去.\n\n程序员加班是难免的,更简单的说,21世纪加班都是不可难免的.初创公司就不说了,很多大公司应该也用经常加班加点干活.个人认为加班加点有部分是项目本身有问题,有部分也是自己的问题.一般来说,如果你很优秀,你完全可以写出非常易扩展和维护的代码,而降低自己返工的次数和时间.有时候需求是不明确的,这种时候就需要有一定的开发经验,去提前预见到一些需求,并且提前完成它.如果能做到这样的话,我想加班加点也一定会减少的.\n\n工作虽然重要,但是生活还是要继续\n\n在经过一段时间的拼命工作后,我也开始慢慢放慢自己的节奏,我更喜欢每天可以有时间去学习学习新技术,看看一些编程书籍,一些写的不错的博客,来提升自己的眼界.\n\n因为很多时候,我们的工作范围时很小的,这对自我的提升可以说是很小的.所以经常去看看别的技术,可以起到润滑剂的作用,让自己保持一定的鲜度,也会让自己工作更顺心.\n\n## 对2018的祈祷\n\n来年我希望自己可以做到更多的事情\n\n1. 遇到自己喜欢的老婆\n2. 对自己要求高点,少玩游戏,多读书!\n3. 工作要更加勤勤恳恳,认真对待!\n4. 如果允许的话,想着可以找个杭州的工作!\n5. 希望爸爸妈妈老去的更慢些!而自己要强大的更快些!\n\n\n\n\n\n\n\n\n","source":"_posts/2017俺の年终总结.md","raw":"---\ntitle: 2017俺の年终总结\ntags: 随笔\ncategories: 生活\ndate: 2019-04-24 14:05:56\n---\n\n终于迎来了学业生涯结束后的第一个春节!非常感谢自己踏在这样美好的人生转折点上,这一年里,我有欢笑也有泪水(虽然我已不记得上一次哭是什么时候了哈哈),这一年里我完成了许多事,也做砸了许多事;这一年里我告别了许多人,我也认识了许多人;这一年里我见识到了许多事,也对社会的很多事感觉失望.2017注定对我而言注定是特殊的,有太多值得我去记录和分享的东西在那里!在这个安静的傍晚时光里,就让我全部一点点的记录下来吧!\n\n## 先从毕设开始说吧\n\n2017年的开头,就先从毕设说起吧.2017年上半年基本都在为毕设忙碌了.身为西电软件学院的一名普通学生,毕设自然而然是要做一个软件作为自己毕业的答卷! 我不是一个非常优秀的学生,成绩也一般般,对软件稍有兴趣但是大学四年也是经常东张西望,真正学到的东西很少,基础知识非常不扎实.所以当时就”抢”到了一个比较简单的毕设题目<code>香水在线购物网站</code> 这几年Web技术一直发展和传播的非常好,学习方便,不牵涉大量后端知识光做一个前端壳子的话,这个题目作为毕设题目真的非常适合<strong>普通学生</strong>呢!(苦笑) \n\n1. 没要求放到互联网上\n2. 不需要考虑后台各类优化\n\n总的来说就是,你不需要考虑很多东西,毕设老师虽然会在你答辩的时候提出各种优化问题,但是其实只要你懂,能说出个一二来,毕设老师是不会在项目代码检查的时候刻意去检查这些东西的,因为他们也明白光靠一个人去做一个在线购物网站,在没有现有代码框架的基础上,基本不可能让一个大四学生在半年内完成(准确来说是4个月左右,除非是大佬!大佬请带带我…),所以整个毕设的过程,基本就会围绕着前端展开!页面做的好看,就像媳妇领进门,后续的优化就会慢慢去磨合,慢慢去优化,毕设老师们也会<strong>放你一马</strong>(最主要的就是答辩的时候你一定要懂得说出来,如何优化!要blabla一大堆!让毕设老师觉得,恩,这小伙子(姑娘,不错)\n\n西电毕设才不会那么随便\n\n虽然前面我自说自话了一大堆所谓的<strong>毕设通关宝典</strong>,但是我还是要为我校说点好话的.西电不是一个985,也可算是一个211学校.不算很好的学校,也不算很差的学校.在我看来,我们西电的学生大部分都是好学生,一个个怀揣着自己的梦想.大学是自由的,如何度过,老师不会来管你,学校规定的那些任务以及要求,只要你不要浪过头,就都可以完成.在我认识的同学里面,有一直玩游戏的,也有一直钻研自己的东西的,也有学霸天天好好上课学习的,当然大部分都是完成正常课程同时业余时间玩自己的业余活动的同学居多的.\n\n但不管怎么样,不同的人也都在大四那年迎来了自己不同的结局.学习好的都找到了薪资更高的工作,奔赴北上广深,为自己的梦想不断前行.不怎么优秀但是为人脚踏实地的同学,也都能找到一份不错的工作;学习不太好,平时不太学习本专业知识的,最后也都会有自己的想法,去走不同的路.\n\n如果说大学前三年在学习知识,那么可以说大四就是在体验一份浓浓的人生咖啡.担任毕设老师中,也有不少非常不错的老师,在毕设期间,用他们的一言一行,传达给我们各种各样的人生技能和专业技能.让我受益匪浅.(<strong>曾老师</strong>就是我特别崇拜的一名毕设老师,当时他担任我的毕设老师,我也特比感谢可以在大学的最后一个阶段,遇到他,遇到这么好的一个老师)\n\n## 手游的那些事\n\n先是感叹国内acg文化的茁壮发展，大概几年前,国内的宅er还要死要活翻墙去玩岛国的<strong>舰队collection</strong>,和自己的老婆相隔一个国度,还经常遇到<strong>猫</strong>危机(舰队collection连接服务器失败会弹出一只猫的画面)\n\n没想到过了不到几年,国内的宅er就有了很多国产老婆可以玩了~\n\n<strong>少女前线</strong>就是一款枪械拟人的游戏,把不同的枪械变化为一个萌萌的妹子,然后宅er可以带着她们前往前线进行战斗,体验到美少女战斗的舒爽快感(反正我们就是喜欢小姐姐!)\n\n虽然我是不太喜欢这类游戏的,因为他们一般都会比较肝,特别耗时间去玩,不过当时由于其游戏性还不错(比舰娘要好玩),游戏剧情设置较合理,也是吸引我玩了一段时间.这款游戏还是在我无聊的时光里带给我了不少欢乐.虽然后来参与工作后,就不怎么玩,不过我也会偶尔去看看这游戏,真心希望官方可以好好的做好这个游戏,给这类游戏一个满意的答卷.而不是三分热度,捞一笔就跑路.\n\n本来以为这个小节我能讲很多,但没想到真正写的时候,缺没有什么值得讲的东西.\n\n1. 我才不会讲我曾借助按键精灵写了一个按键脚本,在电脑上无限刷5-4.\n2. 我才不会讲我曾因为剧情发展到关键时候,发帖说了”AR-15请千万不要出事”这些话语.\n3. 我才不会讲半夜睡不着,是各个枪娘陪伴着我度过不眠之夜.\n\n好吧,要说的真的不多呢,这小节就到此为止吧! 祝愿少女前线可以在2018年能红红火火.\n\n## 就业\n\n过了毕设那段时光后,便马不停蹄的前往了自己的工作单位进行相关工作.\n\n真正觉得自己还不够努力,但却有点无可奈何\n\n当时校招的时候,由于害怕一线城市的就业压力大,所以选择了二线城市的一个公司工作.\n虽然工资在同行里不算很高,不过公司提供吃住方面都很不错,所以我很快就适应了工作岗位.\n\n一开始,我参与了公司的尝试性项目,这个项目主要是新人试水项目,简单来说就是看看你这人的能力怎么样.因为面试的过程中,有太多的包装,根本不知道招进来的人到底有多少能耐.所以我们公司都会有这类尝试性项目,专门丢给新人做,然后综合评估新人的代码能力,处理能力,团队沟通能力.\n\n幸运的是,我的工作表现貌似非常不错,那段时间生活就只有工作和休息,放弃了自己爱玩的游戏,放弃了自己爱看的动漫,全身心的投入到工作中去.\n\n程序员加班是难免的,更简单的说,21世纪加班都是不可难免的.初创公司就不说了,很多大公司应该也用经常加班加点干活.个人认为加班加点有部分是项目本身有问题,有部分也是自己的问题.一般来说,如果你很优秀,你完全可以写出非常易扩展和维护的代码,而降低自己返工的次数和时间.有时候需求是不明确的,这种时候就需要有一定的开发经验,去提前预见到一些需求,并且提前完成它.如果能做到这样的话,我想加班加点也一定会减少的.\n\n工作虽然重要,但是生活还是要继续\n\n在经过一段时间的拼命工作后,我也开始慢慢放慢自己的节奏,我更喜欢每天可以有时间去学习学习新技术,看看一些编程书籍,一些写的不错的博客,来提升自己的眼界.\n\n因为很多时候,我们的工作范围时很小的,这对自我的提升可以说是很小的.所以经常去看看别的技术,可以起到润滑剂的作用,让自己保持一定的鲜度,也会让自己工作更顺心.\n\n## 对2018的祈祷\n\n来年我希望自己可以做到更多的事情\n\n1. 遇到自己喜欢的老婆\n2. 对自己要求高点,少玩游戏,多读书!\n3. 工作要更加勤勤恳恳,认真对待!\n4. 如果允许的话,想着可以找个杭州的工作!\n5. 希望爸爸妈妈老去的更慢些!而自己要强大的更快些!\n\n\n\n\n\n\n\n\n","slug":"2017俺の年终总结","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sr0007m6eldueam1qr","content":"<p>终于迎来了学业生涯结束后的第一个春节!非常感谢自己踏在这样美好的人生转折点上,这一年里,我有欢笑也有泪水(虽然我已不记得上一次哭是什么时候了哈哈),这一年里我完成了许多事,也做砸了许多事;这一年里我告别了许多人,我也认识了许多人;这一年里我见识到了许多事,也对社会的很多事感觉失望.2017注定对我而言注定是特殊的,有太多值得我去记录和分享的东西在那里!在这个安静的傍晚时光里,就让我全部一点点的记录下来吧!</p>\n<h2 id=\"先从毕设开始说吧\"><a href=\"#先从毕设开始说吧\" class=\"headerlink\" title=\"先从毕设开始说吧\"></a>先从毕设开始说吧</h2><p>2017年的开头,就先从毕设说起吧.2017年上半年基本都在为毕设忙碌了.身为西电软件学院的一名普通学生,毕设自然而然是要做一个软件作为自己毕业的答卷! 我不是一个非常优秀的学生,成绩也一般般,对软件稍有兴趣但是大学四年也是经常东张西望,真正学到的东西很少,基础知识非常不扎实.所以当时就”抢”到了一个比较简单的毕设题目<code>香水在线购物网站</code> 这几年Web技术一直发展和传播的非常好,学习方便,不牵涉大量后端知识光做一个前端壳子的话,这个题目作为毕设题目真的非常适合<strong>普通学生</strong>呢!(苦笑) </p>\n<ol>\n<li>没要求放到互联网上</li>\n<li>不需要考虑后台各类优化</li>\n</ol>\n<p>总的来说就是,你不需要考虑很多东西,毕设老师虽然会在你答辩的时候提出各种优化问题,但是其实只要你懂,能说出个一二来,毕设老师是不会在项目代码检查的时候刻意去检查这些东西的,因为他们也明白光靠一个人去做一个在线购物网站,在没有现有代码框架的基础上,基本不可能让一个大四学生在半年内完成(准确来说是4个月左右,除非是大佬!大佬请带带我…),所以整个毕设的过程,基本就会围绕着前端展开!页面做的好看,就像媳妇领进门,后续的优化就会慢慢去磨合,慢慢去优化,毕设老师们也会<strong>放你一马</strong>(最主要的就是答辩的时候你一定要懂得说出来,如何优化!要blabla一大堆!让毕设老师觉得,恩,这小伙子(姑娘,不错)</p>\n<p>西电毕设才不会那么随便</p>\n<p>虽然前面我自说自话了一大堆所谓的<strong>毕设通关宝典</strong>,但是我还是要为我校说点好话的.西电不是一个985,也可算是一个211学校.不算很好的学校,也不算很差的学校.在我看来,我们西电的学生大部分都是好学生,一个个怀揣着自己的梦想.大学是自由的,如何度过,老师不会来管你,学校规定的那些任务以及要求,只要你不要浪过头,就都可以完成.在我认识的同学里面,有一直玩游戏的,也有一直钻研自己的东西的,也有学霸天天好好上课学习的,当然大部分都是完成正常课程同时业余时间玩自己的业余活动的同学居多的.</p>\n<p>但不管怎么样,不同的人也都在大四那年迎来了自己不同的结局.学习好的都找到了薪资更高的工作,奔赴北上广深,为自己的梦想不断前行.不怎么优秀但是为人脚踏实地的同学,也都能找到一份不错的工作;学习不太好,平时不太学习本专业知识的,最后也都会有自己的想法,去走不同的路.</p>\n<p>如果说大学前三年在学习知识,那么可以说大四就是在体验一份浓浓的人生咖啡.担任毕设老师中,也有不少非常不错的老师,在毕设期间,用他们的一言一行,传达给我们各种各样的人生技能和专业技能.让我受益匪浅.(<strong>曾老师</strong>就是我特别崇拜的一名毕设老师,当时他担任我的毕设老师,我也特比感谢可以在大学的最后一个阶段,遇到他,遇到这么好的一个老师)</p>\n<h2 id=\"手游的那些事\"><a href=\"#手游的那些事\" class=\"headerlink\" title=\"手游的那些事\"></a>手游的那些事</h2><p>先是感叹国内acg文化的茁壮发展，大概几年前,国内的宅er还要死要活翻墙去玩岛国的<strong>舰队collection</strong>,和自己的老婆相隔一个国度,还经常遇到<strong>猫</strong>危机(舰队collection连接服务器失败会弹出一只猫的画面)</p>\n<p>没想到过了不到几年,国内的宅er就有了很多国产老婆可以玩了~</p>\n<p><strong>少女前线</strong>就是一款枪械拟人的游戏,把不同的枪械变化为一个萌萌的妹子,然后宅er可以带着她们前往前线进行战斗,体验到美少女战斗的舒爽快感(反正我们就是喜欢小姐姐!)</p>\n<p>虽然我是不太喜欢这类游戏的,因为他们一般都会比较肝,特别耗时间去玩,不过当时由于其游戏性还不错(比舰娘要好玩),游戏剧情设置较合理,也是吸引我玩了一段时间.这款游戏还是在我无聊的时光里带给我了不少欢乐.虽然后来参与工作后,就不怎么玩,不过我也会偶尔去看看这游戏,真心希望官方可以好好的做好这个游戏,给这类游戏一个满意的答卷.而不是三分热度,捞一笔就跑路.</p>\n<p>本来以为这个小节我能讲很多,但没想到真正写的时候,缺没有什么值得讲的东西.</p>\n<ol>\n<li>我才不会讲我曾借助按键精灵写了一个按键脚本,在电脑上无限刷5-4.</li>\n<li>我才不会讲我曾因为剧情发展到关键时候,发帖说了”AR-15请千万不要出事”这些话语.</li>\n<li>我才不会讲半夜睡不着,是各个枪娘陪伴着我度过不眠之夜.</li>\n</ol>\n<p>好吧,要说的真的不多呢,这小节就到此为止吧! 祝愿少女前线可以在2018年能红红火火.</p>\n<h2 id=\"就业\"><a href=\"#就业\" class=\"headerlink\" title=\"就业\"></a>就业</h2><p>过了毕设那段时光后,便马不停蹄的前往了自己的工作单位进行相关工作.</p>\n<p>真正觉得自己还不够努力,但却有点无可奈何</p>\n<p>当时校招的时候,由于害怕一线城市的就业压力大,所以选择了二线城市的一个公司工作.<br>虽然工资在同行里不算很高,不过公司提供吃住方面都很不错,所以我很快就适应了工作岗位.</p>\n<p>一开始,我参与了公司的尝试性项目,这个项目主要是新人试水项目,简单来说就是看看你这人的能力怎么样.因为面试的过程中,有太多的包装,根本不知道招进来的人到底有多少能耐.所以我们公司都会有这类尝试性项目,专门丢给新人做,然后综合评估新人的代码能力,处理能力,团队沟通能力.</p>\n<p>幸运的是,我的工作表现貌似非常不错,那段时间生活就只有工作和休息,放弃了自己爱玩的游戏,放弃了自己爱看的动漫,全身心的投入到工作中去.</p>\n<p>程序员加班是难免的,更简单的说,21世纪加班都是不可难免的.初创公司就不说了,很多大公司应该也用经常加班加点干活.个人认为加班加点有部分是项目本身有问题,有部分也是自己的问题.一般来说,如果你很优秀,你完全可以写出非常易扩展和维护的代码,而降低自己返工的次数和时间.有时候需求是不明确的,这种时候就需要有一定的开发经验,去提前预见到一些需求,并且提前完成它.如果能做到这样的话,我想加班加点也一定会减少的.</p>\n<p>工作虽然重要,但是生活还是要继续</p>\n<p>在经过一段时间的拼命工作后,我也开始慢慢放慢自己的节奏,我更喜欢每天可以有时间去学习学习新技术,看看一些编程书籍,一些写的不错的博客,来提升自己的眼界.</p>\n<p>因为很多时候,我们的工作范围时很小的,这对自我的提升可以说是很小的.所以经常去看看别的技术,可以起到润滑剂的作用,让自己保持一定的鲜度,也会让自己工作更顺心.</p>\n<h2 id=\"对2018的祈祷\"><a href=\"#对2018的祈祷\" class=\"headerlink\" title=\"对2018的祈祷\"></a>对2018的祈祷</h2><p>来年我希望自己可以做到更多的事情</p>\n<ol>\n<li>遇到自己喜欢的老婆</li>\n<li>对自己要求高点,少玩游戏,多读书!</li>\n<li>工作要更加勤勤恳恳,认真对待!</li>\n<li>如果允许的话,想着可以找个杭州的工作!</li>\n<li>希望爸爸妈妈老去的更慢些!而自己要强大的更快些!</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>终于迎来了学业生涯结束后的第一个春节!非常感谢自己踏在这样美好的人生转折点上,这一年里,我有欢笑也有泪水(虽然我已不记得上一次哭是什么时候了哈哈),这一年里我完成了许多事,也做砸了许多事;这一年里我告别了许多人,我也认识了许多人;这一年里我见识到了许多事,也对社会的很多事感觉失望.2017注定对我而言注定是特殊的,有太多值得我去记录和分享的东西在那里!在这个安静的傍晚时光里,就让我全部一点点的记录下来吧!</p>\n<h2 id=\"先从毕设开始说吧\"><a href=\"#先从毕设开始说吧\" class=\"headerlink\" title=\"先从毕设开始说吧\"></a>先从毕设开始说吧</h2><p>2017年的开头,就先从毕设说起吧.2017年上半年基本都在为毕设忙碌了.身为西电软件学院的一名普通学生,毕设自然而然是要做一个软件作为自己毕业的答卷! 我不是一个非常优秀的学生,成绩也一般般,对软件稍有兴趣但是大学四年也是经常东张西望,真正学到的东西很少,基础知识非常不扎实.所以当时就”抢”到了一个比较简单的毕设题目<code>香水在线购物网站</code> 这几年Web技术一直发展和传播的非常好,学习方便,不牵涉大量后端知识光做一个前端壳子的话,这个题目作为毕设题目真的非常适合<strong>普通学生</strong>呢!(苦笑) </p>\n<ol>\n<li>没要求放到互联网上</li>\n<li>不需要考虑后台各类优化</li>\n</ol>\n<p>总的来说就是,你不需要考虑很多东西,毕设老师虽然会在你答辩的时候提出各种优化问题,但是其实只要你懂,能说出个一二来,毕设老师是不会在项目代码检查的时候刻意去检查这些东西的,因为他们也明白光靠一个人去做一个在线购物网站,在没有现有代码框架的基础上,基本不可能让一个大四学生在半年内完成(准确来说是4个月左右,除非是大佬!大佬请带带我…),所以整个毕设的过程,基本就会围绕着前端展开!页面做的好看,就像媳妇领进门,后续的优化就会慢慢去磨合,慢慢去优化,毕设老师们也会<strong>放你一马</strong>(最主要的就是答辩的时候你一定要懂得说出来,如何优化!要blabla一大堆!让毕设老师觉得,恩,这小伙子(姑娘,不错)</p>\n<p>西电毕设才不会那么随便</p>\n<p>虽然前面我自说自话了一大堆所谓的<strong>毕设通关宝典</strong>,但是我还是要为我校说点好话的.西电不是一个985,也可算是一个211学校.不算很好的学校,也不算很差的学校.在我看来,我们西电的学生大部分都是好学生,一个个怀揣着自己的梦想.大学是自由的,如何度过,老师不会来管你,学校规定的那些任务以及要求,只要你不要浪过头,就都可以完成.在我认识的同学里面,有一直玩游戏的,也有一直钻研自己的东西的,也有学霸天天好好上课学习的,当然大部分都是完成正常课程同时业余时间玩自己的业余活动的同学居多的.</p>\n<p>但不管怎么样,不同的人也都在大四那年迎来了自己不同的结局.学习好的都找到了薪资更高的工作,奔赴北上广深,为自己的梦想不断前行.不怎么优秀但是为人脚踏实地的同学,也都能找到一份不错的工作;学习不太好,平时不太学习本专业知识的,最后也都会有自己的想法,去走不同的路.</p>\n<p>如果说大学前三年在学习知识,那么可以说大四就是在体验一份浓浓的人生咖啡.担任毕设老师中,也有不少非常不错的老师,在毕设期间,用他们的一言一行,传达给我们各种各样的人生技能和专业技能.让我受益匪浅.(<strong>曾老师</strong>就是我特别崇拜的一名毕设老师,当时他担任我的毕设老师,我也特比感谢可以在大学的最后一个阶段,遇到他,遇到这么好的一个老师)</p>\n<h2 id=\"手游的那些事\"><a href=\"#手游的那些事\" class=\"headerlink\" title=\"手游的那些事\"></a>手游的那些事</h2><p>先是感叹国内acg文化的茁壮发展，大概几年前,国内的宅er还要死要活翻墙去玩岛国的<strong>舰队collection</strong>,和自己的老婆相隔一个国度,还经常遇到<strong>猫</strong>危机(舰队collection连接服务器失败会弹出一只猫的画面)</p>\n<p>没想到过了不到几年,国内的宅er就有了很多国产老婆可以玩了~</p>\n<p><strong>少女前线</strong>就是一款枪械拟人的游戏,把不同的枪械变化为一个萌萌的妹子,然后宅er可以带着她们前往前线进行战斗,体验到美少女战斗的舒爽快感(反正我们就是喜欢小姐姐!)</p>\n<p>虽然我是不太喜欢这类游戏的,因为他们一般都会比较肝,特别耗时间去玩,不过当时由于其游戏性还不错(比舰娘要好玩),游戏剧情设置较合理,也是吸引我玩了一段时间.这款游戏还是在我无聊的时光里带给我了不少欢乐.虽然后来参与工作后,就不怎么玩,不过我也会偶尔去看看这游戏,真心希望官方可以好好的做好这个游戏,给这类游戏一个满意的答卷.而不是三分热度,捞一笔就跑路.</p>\n<p>本来以为这个小节我能讲很多,但没想到真正写的时候,缺没有什么值得讲的东西.</p>\n<ol>\n<li>我才不会讲我曾借助按键精灵写了一个按键脚本,在电脑上无限刷5-4.</li>\n<li>我才不会讲我曾因为剧情发展到关键时候,发帖说了”AR-15请千万不要出事”这些话语.</li>\n<li>我才不会讲半夜睡不着,是各个枪娘陪伴着我度过不眠之夜.</li>\n</ol>\n<p>好吧,要说的真的不多呢,这小节就到此为止吧! 祝愿少女前线可以在2018年能红红火火.</p>\n<h2 id=\"就业\"><a href=\"#就业\" class=\"headerlink\" title=\"就业\"></a>就业</h2><p>过了毕设那段时光后,便马不停蹄的前往了自己的工作单位进行相关工作.</p>\n<p>真正觉得自己还不够努力,但却有点无可奈何</p>\n<p>当时校招的时候,由于害怕一线城市的就业压力大,所以选择了二线城市的一个公司工作.<br>虽然工资在同行里不算很高,不过公司提供吃住方面都很不错,所以我很快就适应了工作岗位.</p>\n<p>一开始,我参与了公司的尝试性项目,这个项目主要是新人试水项目,简单来说就是看看你这人的能力怎么样.因为面试的过程中,有太多的包装,根本不知道招进来的人到底有多少能耐.所以我们公司都会有这类尝试性项目,专门丢给新人做,然后综合评估新人的代码能力,处理能力,团队沟通能力.</p>\n<p>幸运的是,我的工作表现貌似非常不错,那段时间生活就只有工作和休息,放弃了自己爱玩的游戏,放弃了自己爱看的动漫,全身心的投入到工作中去.</p>\n<p>程序员加班是难免的,更简单的说,21世纪加班都是不可难免的.初创公司就不说了,很多大公司应该也用经常加班加点干活.个人认为加班加点有部分是项目本身有问题,有部分也是自己的问题.一般来说,如果你很优秀,你完全可以写出非常易扩展和维护的代码,而降低自己返工的次数和时间.有时候需求是不明确的,这种时候就需要有一定的开发经验,去提前预见到一些需求,并且提前完成它.如果能做到这样的话,我想加班加点也一定会减少的.</p>\n<p>工作虽然重要,但是生活还是要继续</p>\n<p>在经过一段时间的拼命工作后,我也开始慢慢放慢自己的节奏,我更喜欢每天可以有时间去学习学习新技术,看看一些编程书籍,一些写的不错的博客,来提升自己的眼界.</p>\n<p>因为很多时候,我们的工作范围时很小的,这对自我的提升可以说是很小的.所以经常去看看别的技术,可以起到润滑剂的作用,让自己保持一定的鲜度,也会让自己工作更顺心.</p>\n<h2 id=\"对2018的祈祷\"><a href=\"#对2018的祈祷\" class=\"headerlink\" title=\"对2018的祈祷\"></a>对2018的祈祷</h2><p>来年我希望自己可以做到更多的事情</p>\n<ol>\n<li>遇到自己喜欢的老婆</li>\n<li>对自己要求高点,少玩游戏,多读书!</li>\n<li>工作要更加勤勤恳恳,认真对待!</li>\n<li>如果允许的话,想着可以找个杭州的工作!</li>\n<li>希望爸爸妈妈老去的更慢些!而自己要强大的更快些!</li>\n</ol>\n"},{"title":"2019我的个人电脑机械硬盘问题引发的故事","date":"2019-04-24T12:41:47.000Z","_content":"\n最近一直用着的MBP，突然机械硬盘出现问题，导致部分数据丢失，其中就包括了我的博客源文件。最早开发我自己博客的时候，写了一大堆自定义css和js文件，且当时没有良好的打包备份思想，导致今天让自己跳进坑里。\n\nhexo博客源文件丢失后，唯一能找回的数据只剩下github上，每次deploy的时候上传的那些文件。\n\n但是那些是模版技术在本地执行后生成好的完整的html文件，打开一看，自然里面排版异常难看，想把自己的数据找回着实不易。\n\n最后自己干脆把网页显示后上的文字通通复制到本地，然后在本地重新初始化了hexo相关配置，经过了几个小时的奋斗，总算把自己的博客内容失而复得。虽然那些看上去好玩的css和js不见了，但是现在想来，那些东西都是没有啥参考意义的乱码罢了，故舍弃之。转而从新选择了一个风格简单的主题作为今后的blog主打风格。同时也转移了live2d看伴娘的模块（觉得唯一值得保护的一个模块）。\n\n因为不想再吃源代码丢失的苦痛，这次使用了备份分支，专门将本地源文件也上传至github，今后就可以放心了\n\n差不多就这些,后续可能会针对hexo博客备份专门写一篇操作文档进行记录\n","source":"_posts/2019我的个人电脑机械硬盘问题引发的故事.md","raw":"---\ntitle: 2019我的个人电脑机械硬盘问题引发的故事\ncategories: IT\ndate: 2019-04-24 20:41:47\n---\n\n最近一直用着的MBP，突然机械硬盘出现问题，导致部分数据丢失，其中就包括了我的博客源文件。最早开发我自己博客的时候，写了一大堆自定义css和js文件，且当时没有良好的打包备份思想，导致今天让自己跳进坑里。\n\nhexo博客源文件丢失后，唯一能找回的数据只剩下github上，每次deploy的时候上传的那些文件。\n\n但是那些是模版技术在本地执行后生成好的完整的html文件，打开一看，自然里面排版异常难看，想把自己的数据找回着实不易。\n\n最后自己干脆把网页显示后上的文字通通复制到本地，然后在本地重新初始化了hexo相关配置，经过了几个小时的奋斗，总算把自己的博客内容失而复得。虽然那些看上去好玩的css和js不见了，但是现在想来，那些东西都是没有啥参考意义的乱码罢了，故舍弃之。转而从新选择了一个风格简单的主题作为今后的blog主打风格。同时也转移了live2d看伴娘的模块（觉得唯一值得保护的一个模块）。\n\n因为不想再吃源代码丢失的苦痛，这次使用了备份分支，专门将本地源文件也上传至github，今后就可以放心了\n\n差不多就这些,后续可能会针对hexo博客备份专门写一篇操作文档进行记录\n","slug":"2019我的个人电脑机械硬盘问题引发的故事","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9ss0009m6elbczqm8sg","content":"<p>最近一直用着的MBP，突然机械硬盘出现问题，导致部分数据丢失，其中就包括了我的博客源文件。最早开发我自己博客的时候，写了一大堆自定义css和js文件，且当时没有良好的打包备份思想，导致今天让自己跳进坑里。</p>\n<p>hexo博客源文件丢失后，唯一能找回的数据只剩下github上，每次deploy的时候上传的那些文件。</p>\n<p>但是那些是模版技术在本地执行后生成好的完整的html文件，打开一看，自然里面排版异常难看，想把自己的数据找回着实不易。</p>\n<p>最后自己干脆把网页显示后上的文字通通复制到本地，然后在本地重新初始化了hexo相关配置，经过了几个小时的奋斗，总算把自己的博客内容失而复得。虽然那些看上去好玩的css和js不见了，但是现在想来，那些东西都是没有啥参考意义的乱码罢了，故舍弃之。转而从新选择了一个风格简单的主题作为今后的blog主打风格。同时也转移了live2d看伴娘的模块（觉得唯一值得保护的一个模块）。</p>\n<p>因为不想再吃源代码丢失的苦痛，这次使用了备份分支，专门将本地源文件也上传至github，今后就可以放心了</p>\n<p>差不多就这些,后续可能会针对hexo博客备份专门写一篇操作文档进行记录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近一直用着的MBP，突然机械硬盘出现问题，导致部分数据丢失，其中就包括了我的博客源文件。最早开发我自己博客的时候，写了一大堆自定义css和js文件，且当时没有良好的打包备份思想，导致今天让自己跳进坑里。</p>\n<p>hexo博客源文件丢失后，唯一能找回的数据只剩下github上，每次deploy的时候上传的那些文件。</p>\n<p>但是那些是模版技术在本地执行后生成好的完整的html文件，打开一看，自然里面排版异常难看，想把自己的数据找回着实不易。</p>\n<p>最后自己干脆把网页显示后上的文字通通复制到本地，然后在本地重新初始化了hexo相关配置，经过了几个小时的奋斗，总算把自己的博客内容失而复得。虽然那些看上去好玩的css和js不见了，但是现在想来，那些东西都是没有啥参考意义的乱码罢了，故舍弃之。转而从新选择了一个风格简单的主题作为今后的blog主打风格。同时也转移了live2d看伴娘的模块（觉得唯一值得保护的一个模块）。</p>\n<p>因为不想再吃源代码丢失的苦痛，这次使用了备份分支，专门将本地源文件也上传至github，今后就可以放心了</p>\n<p>差不多就这些,后续可能会针对hexo博客备份专门写一篇操作文档进行记录</p>\n"},{"title":"前后端分离之跨域问题以及curl在web测试上的应用","date":"2019-06-30T08:26:15.000Z","_content":"\n前后端分离已经不稀奇了，今天我就稍微讲一下前后端分离后在数据对接上容易出现的跨域问题。\n\n# 问题何时发生\n\n发起一次http请求的时候，若源域名和目标域名(或者ip和端口不一致)不同，则目前大多数服务器都会拒绝响应此http请求。\n\n你会遇到类似如下的http报错\n\n```\nAccess to XMLHttpRequest at ....\nNo 'Access-Control-Allow-Origin' header is present on the requested resource\n```\n\n因为这种请求属于跨域请求，在web服务器的通用实现方式上，默认的它们被设置为拒绝跨域请求。\n\n# 2 通常解决方法\n\n于是我们第一时间想到的是开启跨域请求。\n\n先不提开启跨域请求的风险（在javaweb的Model框架中，一般可以使用contants+javaconfig来控制测试环境和生产环境的跨域的开启和关闭）\n\n开启跨域请求是双向的，首先在请求头中我们必须使用相关header去表示本次请求为跨域请求，其次是服务端开启跨域访问，最重要的一个header域是`Access-Control-Allow-Origin`\n\n最暴力的做法：`'Access-Control-Allow-Origin'： '*'`\n这样你的服务器就可以支持所有域名的跨域访问，接受一切\n\n不过一般我们肯定不希望服务器暴露太多，所以可以根据自己的情况适当调整\n\n此外，请求端(通常使我们的ajax调用端)，也需要带上跨域的相关header来供后端验证\n\n# 3 当被拒绝跨域的时候\n\n很多人可能都没留意到一个细节，所有POST的跨域请求，如果服务器不支持跨域，那么你的POST请求可能没有发出去就死在了摇篮里。\n\n因为在HTTP请求规范中，POST请求之前先发送的是OPTIONS请求，用于做一些验证操作\n\nOPTIONS请求被服务端拒绝跨域，POST请求就根本没必要发送了。\n\n# 4 使用curl做简单的http测试\n\ncurl是一个文件下载工具，但是我更喜欢把它当做一个功能全面的http工具\n\n我们可以通过curl来做一些简单的http测试\n\n这里我简单的举个例子:\n```shell\ncurl -XPOST -v -d '{ \"test\": \"abc123\" }' -H \"Content-type: application/json\" http://localhost:8080/MyBelfast/crew/login\n```\n\n可以测试`http://localhost:8080/MyBelfast/crew/login`是否支持接受json数据\n\n# 5 尾\n\n本文提到的跨域问题会常常会在前后端开发阶段中出现，生产上是比较少的。在开发阶段，前端和后端的测试服务器往往被部署在不同的端口，这就会使得两者的http连接是跨域的\n\n有关跨域访问的事情还远远不止本文所讲的这一些，只不过本文的问题是最容易出现的问题，也是最低级的问题\n\n参考：\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors\n","source":"_posts/CORS-question-and-curl-use-in-web-test.md","raw":"---\ntitle: 前后端分离之跨域问题以及curl在web测试上的应用\ntags: 跨域访问\ncategories: IT\ndate: 2019-06-30 16:26:15\n---\n\n前后端分离已经不稀奇了，今天我就稍微讲一下前后端分离后在数据对接上容易出现的跨域问题。\n\n# 问题何时发生\n\n发起一次http请求的时候，若源域名和目标域名(或者ip和端口不一致)不同，则目前大多数服务器都会拒绝响应此http请求。\n\n你会遇到类似如下的http报错\n\n```\nAccess to XMLHttpRequest at ....\nNo 'Access-Control-Allow-Origin' header is present on the requested resource\n```\n\n因为这种请求属于跨域请求，在web服务器的通用实现方式上，默认的它们被设置为拒绝跨域请求。\n\n# 2 通常解决方法\n\n于是我们第一时间想到的是开启跨域请求。\n\n先不提开启跨域请求的风险（在javaweb的Model框架中，一般可以使用contants+javaconfig来控制测试环境和生产环境的跨域的开启和关闭）\n\n开启跨域请求是双向的，首先在请求头中我们必须使用相关header去表示本次请求为跨域请求，其次是服务端开启跨域访问，最重要的一个header域是`Access-Control-Allow-Origin`\n\n最暴力的做法：`'Access-Control-Allow-Origin'： '*'`\n这样你的服务器就可以支持所有域名的跨域访问，接受一切\n\n不过一般我们肯定不希望服务器暴露太多，所以可以根据自己的情况适当调整\n\n此外，请求端(通常使我们的ajax调用端)，也需要带上跨域的相关header来供后端验证\n\n# 3 当被拒绝跨域的时候\n\n很多人可能都没留意到一个细节，所有POST的跨域请求，如果服务器不支持跨域，那么你的POST请求可能没有发出去就死在了摇篮里。\n\n因为在HTTP请求规范中，POST请求之前先发送的是OPTIONS请求，用于做一些验证操作\n\nOPTIONS请求被服务端拒绝跨域，POST请求就根本没必要发送了。\n\n# 4 使用curl做简单的http测试\n\ncurl是一个文件下载工具，但是我更喜欢把它当做一个功能全面的http工具\n\n我们可以通过curl来做一些简单的http测试\n\n这里我简单的举个例子:\n```shell\ncurl -XPOST -v -d '{ \"test\": \"abc123\" }' -H \"Content-type: application/json\" http://localhost:8080/MyBelfast/crew/login\n```\n\n可以测试`http://localhost:8080/MyBelfast/crew/login`是否支持接受json数据\n\n# 5 尾\n\n本文提到的跨域问题会常常会在前后端开发阶段中出现，生产上是比较少的。在开发阶段，前端和后端的测试服务器往往被部署在不同的端口，这就会使得两者的http连接是跨域的\n\n有关跨域访问的事情还远远不止本文所讲的这一些，只不过本文的问题是最容易出现的问题，也是最低级的问题\n\n参考：\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors\n","slug":"CORS-question-and-curl-use-in-web-test","published":1,"updated":"2019-06-30T09:02:36.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9su000bm6el5fhuugvz","content":"<p>前后端分离已经不稀奇了，今天我就稍微讲一下前后端分离后在数据对接上容易出现的跨域问题。</p>\n<h1 id=\"问题何时发生\"><a href=\"#问题何时发生\" class=\"headerlink\" title=\"问题何时发生\"></a>问题何时发生</h1><p>发起一次http请求的时候，若源域名和目标域名(或者ip和端口不一致)不同，则目前大多数服务器都会拒绝响应此http请求。</p>\n<p>你会遇到类似如下的http报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at ....</span><br><span class=\"line\">No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource</span><br></pre></td></tr></table></figure>\n<p>因为这种请求属于跨域请求，在web服务器的通用实现方式上，默认的它们被设置为拒绝跨域请求。</p>\n<h1 id=\"2-通常解决方法\"><a href=\"#2-通常解决方法\" class=\"headerlink\" title=\"2 通常解决方法\"></a>2 通常解决方法</h1><p>于是我们第一时间想到的是开启跨域请求。</p>\n<p>先不提开启跨域请求的风险（在javaweb的Model框架中，一般可以使用contants+javaconfig来控制测试环境和生产环境的跨域的开启和关闭）</p>\n<p>开启跨域请求是双向的，首先在请求头中我们必须使用相关header去表示本次请求为跨域请求，其次是服务端开启跨域访问，最重要的一个header域是<code>Access-Control-Allow-Origin</code></p>\n<p>最暴力的做法：<code>&#39;Access-Control-Allow-Origin&#39;： &#39;*&#39;</code><br>这样你的服务器就可以支持所有域名的跨域访问，接受一切</p>\n<p>不过一般我们肯定不希望服务器暴露太多，所以可以根据自己的情况适当调整</p>\n<p>此外，请求端(通常使我们的ajax调用端)，也需要带上跨域的相关header来供后端验证</p>\n<h1 id=\"3-当被拒绝跨域的时候\"><a href=\"#3-当被拒绝跨域的时候\" class=\"headerlink\" title=\"3 当被拒绝跨域的时候\"></a>3 当被拒绝跨域的时候</h1><p>很多人可能都没留意到一个细节，所有POST的跨域请求，如果服务器不支持跨域，那么你的POST请求可能没有发出去就死在了摇篮里。</p>\n<p>因为在HTTP请求规范中，POST请求之前先发送的是OPTIONS请求，用于做一些验证操作</p>\n<p>OPTIONS请求被服务端拒绝跨域，POST请求就根本没必要发送了。</p>\n<h1 id=\"4-使用curl做简单的http测试\"><a href=\"#4-使用curl做简单的http测试\" class=\"headerlink\" title=\"4 使用curl做简单的http测试\"></a>4 使用curl做简单的http测试</h1><p>curl是一个文件下载工具，但是我更喜欢把它当做一个功能全面的http工具</p>\n<p>我们可以通过curl来做一些简单的http测试</p>\n<p>这里我简单的举个例子:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST -v -d '&#123; \"test\": \"abc123\" &#125;' -H \"Content-type: application/json\" http://localhost:8080/MyBelfast/crew/login</span><br></pre></td></tr></table></figure></p>\n<p>可以测试<code>http://localhost:8080/MyBelfast/crew/login</code>是否支持接受json数据</p>\n<h1 id=\"5-尾\"><a href=\"#5-尾\" class=\"headerlink\" title=\"5 尾\"></a>5 尾</h1><p>本文提到的跨域问题会常常会在前后端开发阶段中出现，生产上是比较少的。在开发阶段，前端和后端的测试服务器往往被部署在不同的端口，这就会使得两者的http连接是跨域的</p>\n<p>有关跨域访问的事情还远远不止本文所讲的这一些，只不过本文的问题是最容易出现的问题，也是最低级的问题</p>\n<p>参考：<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前后端分离已经不稀奇了，今天我就稍微讲一下前后端分离后在数据对接上容易出现的跨域问题。</p>\n<h1 id=\"问题何时发生\"><a href=\"#问题何时发生\" class=\"headerlink\" title=\"问题何时发生\"></a>问题何时发生</h1><p>发起一次http请求的时候，若源域名和目标域名(或者ip和端口不一致)不同，则目前大多数服务器都会拒绝响应此http请求。</p>\n<p>你会遇到类似如下的http报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access to XMLHttpRequest at ....</span><br><span class=\"line\">No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource</span><br></pre></td></tr></table></figure>\n<p>因为这种请求属于跨域请求，在web服务器的通用实现方式上，默认的它们被设置为拒绝跨域请求。</p>\n<h1 id=\"2-通常解决方法\"><a href=\"#2-通常解决方法\" class=\"headerlink\" title=\"2 通常解决方法\"></a>2 通常解决方法</h1><p>于是我们第一时间想到的是开启跨域请求。</p>\n<p>先不提开启跨域请求的风险（在javaweb的Model框架中，一般可以使用contants+javaconfig来控制测试环境和生产环境的跨域的开启和关闭）</p>\n<p>开启跨域请求是双向的，首先在请求头中我们必须使用相关header去表示本次请求为跨域请求，其次是服务端开启跨域访问，最重要的一个header域是<code>Access-Control-Allow-Origin</code></p>\n<p>最暴力的做法：<code>&#39;Access-Control-Allow-Origin&#39;： &#39;*&#39;</code><br>这样你的服务器就可以支持所有域名的跨域访问，接受一切</p>\n<p>不过一般我们肯定不希望服务器暴露太多，所以可以根据自己的情况适当调整</p>\n<p>此外，请求端(通常使我们的ajax调用端)，也需要带上跨域的相关header来供后端验证</p>\n<h1 id=\"3-当被拒绝跨域的时候\"><a href=\"#3-当被拒绝跨域的时候\" class=\"headerlink\" title=\"3 当被拒绝跨域的时候\"></a>3 当被拒绝跨域的时候</h1><p>很多人可能都没留意到一个细节，所有POST的跨域请求，如果服务器不支持跨域，那么你的POST请求可能没有发出去就死在了摇篮里。</p>\n<p>因为在HTTP请求规范中，POST请求之前先发送的是OPTIONS请求，用于做一些验证操作</p>\n<p>OPTIONS请求被服务端拒绝跨域，POST请求就根本没必要发送了。</p>\n<h1 id=\"4-使用curl做简单的http测试\"><a href=\"#4-使用curl做简单的http测试\" class=\"headerlink\" title=\"4 使用curl做简单的http测试\"></a>4 使用curl做简单的http测试</h1><p>curl是一个文件下载工具，但是我更喜欢把它当做一个功能全面的http工具</p>\n<p>我们可以通过curl来做一些简单的http测试</p>\n<p>这里我简单的举个例子:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -XPOST -v -d '&#123; \"test\": \"abc123\" &#125;' -H \"Content-type: application/json\" http://localhost:8080/MyBelfast/crew/login</span><br></pre></td></tr></table></figure></p>\n<p>可以测试<code>http://localhost:8080/MyBelfast/crew/login</code>是否支持接受json数据</p>\n<h1 id=\"5-尾\"><a href=\"#5-尾\" class=\"headerlink\" title=\"5 尾\"></a>5 尾</h1><p>本文提到的跨域问题会常常会在前后端开发阶段中出现，生产上是比较少的。在开发阶段，前端和后端的测试服务器往往被部署在不同的端口，这就会使得两者的http连接是跨域的</p>\n<p>有关跨域访问的事情还远远不止本文所讲的这一些，只不过本文的问题是最容易出现的问题，也是最低级的问题</p>\n<p>参考：<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-cors</a></p>\n"},{"title":"Java乱码问题之URLEncoder和URLDecoder","date":"2019-06-24T04:56:25.000Z","_content":"\n# 导言\n\n关于编码，我曾经写过了2篇文章。在我个人运用来看，前两篇分享的知识已经足以去理解所有编码问题发生的根源问题。\n\n那么为什么我今天又写了这篇文章呢？\n\n接触过Web项目的同学，肯定对URLEncoder和URLDecoder，我们常常用这两个类来处理部分遇到的问题。\n\n在早些时候，我个人还没理解透这块知识的时候，我以为下面的2句java表达式的背后机制是差不多的\n\n```java\n//1\nString encodeUrl = URLEncoder.encode(url,\"utf-8\");\nString decoderUrl = URLDecoder.decode(encodeUrl,\"utf-8\");\n//2\nnew String(s.getBytes(\"gbk\"),\"utf-8\")\n\n```\n后来，我分享了 [我编码的第二篇文章](https://zazalu.space/2019/06/15/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%80%E8%AF%AD%E9%81%93%E7%A0%B4-GBK-UTF%E7%AD%89%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81/) \n后我懂得了Stirng的那个表达式是做了如下的转换逻辑：\nUnicode String  ->  根据传入的编码规则将Unicode转换为了Bytes[]  ->  使用utf-8的编码规则去将Bytes[]变成Unicode字符\n\n总的来说String的这种方式是字符到字节再到字符的转换，其内部的Unicode字符的内容是会根据你的编码规则使用是否正确会改变的，使用的不当，结果还是乱码XS\n\n但是在URLEncoder和URLDecoder的应用领域，它们干的事情和我对“编码”的一般理解是有区别的，下面我来细讲\n\n# URLEncoder和URLDecoder\n\n>我更愿意说URLEncoder和URLDecoder做的事情叫“字符转换”而不是“编码”，其内部包含了“编码”的操作，但不仅仅只有“编码”操作\n\n**我们先拿URLEncoder说事**\n\n假设你收到一个URL数据如下\n`String url = 'http://localhost:8080/examples/servlets/servlet/镓钧?author=镓钧'`\n\n但是带中文的URL在不同的程序解析下容易出现乱码问题最终导致数据丢失，所以为了不出现此类问题，URL规范使用utf-8（实际上不同地方规范不同，只不过现如今我们更推荐只使用utf-8）将这些中文字符转换为16进制表示的字符\n如下所以：\n\n`Stirng encodeUrl = 'http://localhost:8080/examples/servlets/servlet/%E9%95%93%E9%92%A7?author=%E9%95%93%E9%92%A7'`\n\n这个过程有2个要点：\n1. `镓钧`二字变成了`%E9%95%93%E9%92%A7`，说明String的内容有目的的被URLEncoder转换为了其他字符\n2. `%E9%95%93%E9%92%A7`中将百分号去掉，其实就是`E995 93E9 92A7`这是`镓钧`的UTF-8的16进制表示形式\n\n所以URLEncoder做的事情按顺序可以归类为下面2点：\n1. 使用类似`s.getBytes(\"utf-8\")`的机制，将`镓钧`这个Unicode字符使用utf8解码成Bytes[]，\n2. 将Bytes[]按照每16位为单位，提升为了char[ ]，并且开头会附加上`%`，最后把这些char字符组装为新的Stirng返回\n\n就这样其实URLEncoder把你的中文字符变成了英文字符！\n\n**有关URLDecoder在有了前面的介绍后就更好解释了**\n\nurl在送达目的地后被解码，使用URLDecoder解码，因为URLDecoder它懂得规则，所以它会把这一串URL字符中的16位进制数据去挨个匹配utf-8的码表，找到对应的字符，最后达到得到了想要的数据\n\n# 尾\n\n总结：URLEncoder和URLDecoder的encode方法内部包含了我们一般说的编码操作，但是实际上这个方法本身可以算是使用了String的编码API来执行的一个上层程序。我们自己也可以实现一个简单的URLEnocder。所以我以前认为的URLEncoder本身也是一种编解码API的思想是错误的！ 故特写此文进行纠正\n\n","source":"_posts/JavaEncoded3.md","raw":"---\ntitle: Java乱码问题之URLEncoder和URLDecoder\ntags: 编码\ncategories: IT\ndate: 2019-06-24 12:56:25\n---\n\n# 导言\n\n关于编码，我曾经写过了2篇文章。在我个人运用来看，前两篇分享的知识已经足以去理解所有编码问题发生的根源问题。\n\n那么为什么我今天又写了这篇文章呢？\n\n接触过Web项目的同学，肯定对URLEncoder和URLDecoder，我们常常用这两个类来处理部分遇到的问题。\n\n在早些时候，我个人还没理解透这块知识的时候，我以为下面的2句java表达式的背后机制是差不多的\n\n```java\n//1\nString encodeUrl = URLEncoder.encode(url,\"utf-8\");\nString decoderUrl = URLDecoder.decode(encodeUrl,\"utf-8\");\n//2\nnew String(s.getBytes(\"gbk\"),\"utf-8\")\n\n```\n后来，我分享了 [我编码的第二篇文章](https://zazalu.space/2019/06/15/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%80%E8%AF%AD%E9%81%93%E7%A0%B4-GBK-UTF%E7%AD%89%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81/) \n后我懂得了Stirng的那个表达式是做了如下的转换逻辑：\nUnicode String  ->  根据传入的编码规则将Unicode转换为了Bytes[]  ->  使用utf-8的编码规则去将Bytes[]变成Unicode字符\n\n总的来说String的这种方式是字符到字节再到字符的转换，其内部的Unicode字符的内容是会根据你的编码规则使用是否正确会改变的，使用的不当，结果还是乱码XS\n\n但是在URLEncoder和URLDecoder的应用领域，它们干的事情和我对“编码”的一般理解是有区别的，下面我来细讲\n\n# URLEncoder和URLDecoder\n\n>我更愿意说URLEncoder和URLDecoder做的事情叫“字符转换”而不是“编码”，其内部包含了“编码”的操作，但不仅仅只有“编码”操作\n\n**我们先拿URLEncoder说事**\n\n假设你收到一个URL数据如下\n`String url = 'http://localhost:8080/examples/servlets/servlet/镓钧?author=镓钧'`\n\n但是带中文的URL在不同的程序解析下容易出现乱码问题最终导致数据丢失，所以为了不出现此类问题，URL规范使用utf-8（实际上不同地方规范不同，只不过现如今我们更推荐只使用utf-8）将这些中文字符转换为16进制表示的字符\n如下所以：\n\n`Stirng encodeUrl = 'http://localhost:8080/examples/servlets/servlet/%E9%95%93%E9%92%A7?author=%E9%95%93%E9%92%A7'`\n\n这个过程有2个要点：\n1. `镓钧`二字变成了`%E9%95%93%E9%92%A7`，说明String的内容有目的的被URLEncoder转换为了其他字符\n2. `%E9%95%93%E9%92%A7`中将百分号去掉，其实就是`E995 93E9 92A7`这是`镓钧`的UTF-8的16进制表示形式\n\n所以URLEncoder做的事情按顺序可以归类为下面2点：\n1. 使用类似`s.getBytes(\"utf-8\")`的机制，将`镓钧`这个Unicode字符使用utf8解码成Bytes[]，\n2. 将Bytes[]按照每16位为单位，提升为了char[ ]，并且开头会附加上`%`，最后把这些char字符组装为新的Stirng返回\n\n就这样其实URLEncoder把你的中文字符变成了英文字符！\n\n**有关URLDecoder在有了前面的介绍后就更好解释了**\n\nurl在送达目的地后被解码，使用URLDecoder解码，因为URLDecoder它懂得规则，所以它会把这一串URL字符中的16位进制数据去挨个匹配utf-8的码表，找到对应的字符，最后达到得到了想要的数据\n\n# 尾\n\n总结：URLEncoder和URLDecoder的encode方法内部包含了我们一般说的编码操作，但是实际上这个方法本身可以算是使用了String的编码API来执行的一个上层程序。我们自己也可以实现一个简单的URLEnocder。所以我以前认为的URLEncoder本身也是一种编解码API的思想是错误的！ 故特写此文进行纠正\n\n","slug":"JavaEncoded3","published":1,"updated":"2019-06-24T05:27:18.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sw000gm6elntzmjdkl","content":"<h1 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h1><p>关于编码，我曾经写过了2篇文章。在我个人运用来看，前两篇分享的知识已经足以去理解所有编码问题发生的根源问题。</p>\n<p>那么为什么我今天又写了这篇文章呢？</p>\n<p>接触过Web项目的同学，肯定对URLEncoder和URLDecoder，我们常常用这两个类来处理部分遇到的问题。</p>\n<p>在早些时候，我个人还没理解透这块知识的时候，我以为下面的2句java表达式的背后机制是差不多的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">String encodeUrl = URLEncoder.encode(url,<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">String decoderUrl = URLDecoder.decode(encodeUrl,<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"gbk\"</span>),<span class=\"string\">\"utf-8\"</span>)</span><br></pre></td></tr></table></figure>\n<p>后来，我分享了 <a href=\"https://zazalu.space/2019/06/15/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%80%E8%AF%AD%E9%81%93%E7%A0%B4-GBK-UTF%E7%AD%89%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81/\">我编码的第二篇文章</a><br>后我懂得了Stirng的那个表达式是做了如下的转换逻辑：<br>Unicode String  -&gt;  根据传入的编码规则将Unicode转换为了Bytes[]  -&gt;  使用utf-8的编码规则去将Bytes[]变成Unicode字符</p>\n<p>总的来说String的这种方式是字符到字节再到字符的转换，其内部的Unicode字符的内容是会根据你的编码规则使用是否正确会改变的，使用的不当，结果还是乱码XS</p>\n<p>但是在URLEncoder和URLDecoder的应用领域，它们干的事情和我对“编码”的一般理解是有区别的，下面我来细讲</p>\n<h1 id=\"URLEncoder和URLDecoder\"><a href=\"#URLEncoder和URLDecoder\" class=\"headerlink\" title=\"URLEncoder和URLDecoder\"></a>URLEncoder和URLDecoder</h1><blockquote>\n<p>我更愿意说URLEncoder和URLDecoder做的事情叫“字符转换”而不是“编码”，其内部包含了“编码”的操作，但不仅仅只有“编码”操作</p>\n</blockquote>\n<p><strong>我们先拿URLEncoder说事</strong></p>\n<p>假设你收到一个URL数据如下<br><code>String url = &#39;http://localhost:8080/examples/servlets/servlet/镓钧?author=镓钧&#39;</code></p>\n<p>但是带中文的URL在不同的程序解析下容易出现乱码问题最终导致数据丢失，所以为了不出现此类问题，URL规范使用utf-8（实际上不同地方规范不同，只不过现如今我们更推荐只使用utf-8）将这些中文字符转换为16进制表示的字符<br>如下所以：</p>\n<p><code>Stirng encodeUrl = &#39;http://localhost:8080/examples/servlets/servlet/%E9%95%93%E9%92%A7?author=%E9%95%93%E9%92%A7&#39;</code></p>\n<p>这个过程有2个要点：</p>\n<ol>\n<li><code>镓钧</code>二字变成了<code>%E9%95%93%E9%92%A7</code>，说明String的内容有目的的被URLEncoder转换为了其他字符</li>\n<li><code>%E9%95%93%E9%92%A7</code>中将百分号去掉，其实就是<code>E995 93E9 92A7</code>这是<code>镓钧</code>的UTF-8的16进制表示形式</li>\n</ol>\n<p>所以URLEncoder做的事情按顺序可以归类为下面2点：</p>\n<ol>\n<li>使用类似<code>s.getBytes(&quot;utf-8&quot;)</code>的机制，将<code>镓钧</code>这个Unicode字符使用utf8解码成Bytes[]，</li>\n<li>将Bytes[]按照每16位为单位，提升为了char[ ]，并且开头会附加上<code>%</code>，最后把这些char字符组装为新的Stirng返回</li>\n</ol>\n<p>就这样其实URLEncoder把你的中文字符变成了英文字符！</p>\n<p><strong>有关URLDecoder在有了前面的介绍后就更好解释了</strong></p>\n<p>url在送达目的地后被解码，使用URLDecoder解码，因为URLDecoder它懂得规则，所以它会把这一串URL字符中的16位进制数据去挨个匹配utf-8的码表，找到对应的字符，最后达到得到了想要的数据</p>\n<h1 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h1><p>总结：URLEncoder和URLDecoder的encode方法内部包含了我们一般说的编码操作，但是实际上这个方法本身可以算是使用了String的编码API来执行的一个上层程序。我们自己也可以实现一个简单的URLEnocder。所以我以前认为的URLEncoder本身也是一种编解码API的思想是错误的！ 故特写此文进行纠正</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h1><p>关于编码，我曾经写过了2篇文章。在我个人运用来看，前两篇分享的知识已经足以去理解所有编码问题发生的根源问题。</p>\n<p>那么为什么我今天又写了这篇文章呢？</p>\n<p>接触过Web项目的同学，肯定对URLEncoder和URLDecoder，我们常常用这两个类来处理部分遇到的问题。</p>\n<p>在早些时候，我个人还没理解透这块知识的时候，我以为下面的2句java表达式的背后机制是差不多的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">String encodeUrl = URLEncoder.encode(url,<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">String decoderUrl = URLDecoder.decode(encodeUrl,<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"gbk\"</span>),<span class=\"string\">\"utf-8\"</span>)</span><br></pre></td></tr></table></figure>\n<p>后来，我分享了 <a href=\"https://zazalu.space/2019/06/15/Java%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%80%E8%AF%AD%E9%81%93%E7%A0%B4-GBK-UTF%E7%AD%89%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81/\">我编码的第二篇文章</a><br>后我懂得了Stirng的那个表达式是做了如下的转换逻辑：<br>Unicode String  -&gt;  根据传入的编码规则将Unicode转换为了Bytes[]  -&gt;  使用utf-8的编码规则去将Bytes[]变成Unicode字符</p>\n<p>总的来说String的这种方式是字符到字节再到字符的转换，其内部的Unicode字符的内容是会根据你的编码规则使用是否正确会改变的，使用的不当，结果还是乱码XS</p>\n<p>但是在URLEncoder和URLDecoder的应用领域，它们干的事情和我对“编码”的一般理解是有区别的，下面我来细讲</p>\n<h1 id=\"URLEncoder和URLDecoder\"><a href=\"#URLEncoder和URLDecoder\" class=\"headerlink\" title=\"URLEncoder和URLDecoder\"></a>URLEncoder和URLDecoder</h1><blockquote>\n<p>我更愿意说URLEncoder和URLDecoder做的事情叫“字符转换”而不是“编码”，其内部包含了“编码”的操作，但不仅仅只有“编码”操作</p>\n</blockquote>\n<p><strong>我们先拿URLEncoder说事</strong></p>\n<p>假设你收到一个URL数据如下<br><code>String url = &#39;http://localhost:8080/examples/servlets/servlet/镓钧?author=镓钧&#39;</code></p>\n<p>但是带中文的URL在不同的程序解析下容易出现乱码问题最终导致数据丢失，所以为了不出现此类问题，URL规范使用utf-8（实际上不同地方规范不同，只不过现如今我们更推荐只使用utf-8）将这些中文字符转换为16进制表示的字符<br>如下所以：</p>\n<p><code>Stirng encodeUrl = &#39;http://localhost:8080/examples/servlets/servlet/%E9%95%93%E9%92%A7?author=%E9%95%93%E9%92%A7&#39;</code></p>\n<p>这个过程有2个要点：</p>\n<ol>\n<li><code>镓钧</code>二字变成了<code>%E9%95%93%E9%92%A7</code>，说明String的内容有目的的被URLEncoder转换为了其他字符</li>\n<li><code>%E9%95%93%E9%92%A7</code>中将百分号去掉，其实就是<code>E995 93E9 92A7</code>这是<code>镓钧</code>的UTF-8的16进制表示形式</li>\n</ol>\n<p>所以URLEncoder做的事情按顺序可以归类为下面2点：</p>\n<ol>\n<li>使用类似<code>s.getBytes(&quot;utf-8&quot;)</code>的机制，将<code>镓钧</code>这个Unicode字符使用utf8解码成Bytes[]，</li>\n<li>将Bytes[]按照每16位为单位，提升为了char[ ]，并且开头会附加上<code>%</code>，最后把这些char字符组装为新的Stirng返回</li>\n</ol>\n<p>就这样其实URLEncoder把你的中文字符变成了英文字符！</p>\n<p><strong>有关URLDecoder在有了前面的介绍后就更好解释了</strong></p>\n<p>url在送达目的地后被解码，使用URLDecoder解码，因为URLDecoder它懂得规则，所以它会把这一串URL字符中的16位进制数据去挨个匹配utf-8的码表，找到对应的字符，最后达到得到了想要的数据</p>\n<h1 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h1><p>总结：URLEncoder和URLDecoder的encode方法内部包含了我们一般说的编码操作，但是实际上这个方法本身可以算是使用了String的编码API来执行的一个上层程序。我们自己也可以实现一个简单的URLEnocder。所以我以前认为的URLEncoder本身也是一种编解码API的思想是错误的！ 故特写此文进行纠正</p>\n"},{"title":"又是一年父亲节","date":"2019-06-16T01:59:00.000Z","_content":"\n# 1 前言\n\n又是一年父亲节，正好是周日，挤点时间写一些心里话吧\n\n首先，还是先祝老爸父亲节快乐，感谢您一路以来的支持与厚爱，祝老爸身体健康，好事成双\n\n# 2 \n\n在我很小的时候，我觉得老爸很可怕，动不动就打人，所以那时候我最喜欢妈妈（笑），以前总是去义乌玩不仅仅是因为可以玩电脑，其实说白了还是小时候真的更加的粘妈妈。我记得很清楚，我初中住校的第一天，我特别想回家，那时候一个人在被窝里哭了很久，那晚上也几乎没睡着，脑子想的也几乎都是妈妈（笑）\n\n后来到了高中，自我认知能力提高了些，我开始第一次觉得老爸没有以前可怕了。那会每周的上下学开车接送，给我们制造了不少沟通的时间，我经常不停的抛出话题然后一路聊到学校门口。\n\n后来，老爸开始创业了，做了很多时髦的行当，想赚更多的钱。我也不知道我当时是从谁那里听到的消息，但是很神奇的事，老爸在前线的各种消息总能准时的入到我的耳朵里。不管是好消息还是坏消息。但是我总是带着非常害怕的心理在观望着，那段时间就是非常的后怕，总感觉老爸在冒很大的风险。潜移默化的，我也受到了一定的影响，我觉得我也应该加点油，刚好那会正直高三，我想这也许就是一种天意。\n\n由于小时候基本是和奶奶一起过日子，我被很好的保护着长大，小时候就一直感觉自己是最厉害的，最强的，是最聪明的人。然后等我一点点的独立后我渐渐发现了自己是真的很普通。不过好笑的是，让我切身感受到这一点的居然是我断断续续持续了几年的恋爱经历（不是班长！），老爸可能不知道，其实我高一没开学多久，就和一个女孩子好上了，是个看上去非常文静的人。我从小就比较开朗，所以一开始是根本对她没有任何兴趣的。但是毕竟是前后座，交流还是挺多的。当我发现她居然和我一样也喜欢Animation Comic的时候，我简直就像找到了知音那样，心里活奔乱跳。年轻的我觉得这一定是上天开眼，赐予我一个如此完美的同好，我们两个经常聊那些东西到很晚。\n\n不过好景也不长，高三毕业后，我们都各自选择了自身发展，互相也发生了一定的争吵，最后我们报考了不同的大学，我去了陕西她去了上海。我以为我们就此无缘，在我脑子里差不多忘掉那段时光之后，到了大二，命运的时钟又开始敲响。我在一个Animation Comic的同好网站上，我居然又遇到了她。由于时隔很久了，所以我们一开始就像遇到老朋友一样，互相分享自己最近的经历。可惜的是，有交流就有纠纷，那时不懂事的我，再次和她发生了较大的争吵。在那以后，我开始彻底死了心，这段故事也总算告一段落。\n\n之后，我就常常思考这个事情，开始觉得是自己的自我意识太过于旺盛，是自己的不成熟（虽然现在也不成熟）导致了这个后果。在那以后，我也变了比较多，首先是我不喜欢发什么朋友圈消息，开始喜欢做一个透明人，其次是我对女人失去了一定的恋爱兴趣，现在就觉得有钱娶老婆才是正途。\n\n感觉自己在这个话题上说的多了点（笑），不过希望老爸对我有更多的了解可能也是写这篇文章的初衷之一\n\n# 3 \n\n在以前父亲节，我总是考虑这一年我又可以回报老爸什么，当然这个想法是一直没变的，总有一天我觉得我一定可以达到财务自由，然后尽情的用“金钱”的力量来回报老爸老妈，现在也天天在被这种目标催动着，行动着。只不过自己不是那么厉害，不是那么强，不是最聪明的人，现在的一切都有点让我感觉不尽如意，但唯有努力，才能让我感觉良心过得去。\n\n今年父亲节，不知道为什么。我开始考虑自己了，我心里也开始产生了想过父亲节的想法，现在在我看来，这个也许才是一种成长。我也想做一个好父亲，我一路走来，根据自己的成长经验，感觉已经有非常多的话想讲给自己的孩子听了。为了达到这个目的，我觉得自己的首要目标还是稳定就业，然后赚大钱，有些这些我感觉什么都会好起来。\n\n>报喜不报忧\n\n工作后，整天从早到晚，真的不能说是一种‘喜’。我心里仔细算了算，我后续可以给你们报的‘喜’，应该大致是这些：\n1. 把工作地点切到杭州\n2. 创业成功（现在已经开始有想创业的想法，真的觉得上班是不行的，有这个想法完全是被钱驱动的，我想更多的钱，那可以让我办更多的事）\n3. 结婚（等完成1或者2后才会考虑）\n4. 生子（完成3后，顺其自然会发生的事情）\n\n所以能报的‘喜’确实越来越少，也越来越精髓。我已经不可能一点点好事情就找你们分享了，这也许可以算是给老妈一个简单的答复吧，老妈最近开始觉得我有点’阴落落‘的。那是因为我感觉有些话已经不适合现在交流了。\n\n在接下来的日子是，是我人生的启程，我只希望你们可以默默的关注我，而不是援助我，因为我想看看一个人究竟可以走多远，必要的时候我肯定会伸出援手，所以也请老爸老妈不要担心。对我来说，现在最大的愿望就是可以看你们开心的养老。我也知道这些都握在我自己的手中。\n\n最后，真心的祝福老妈老爸身体健康！好事成双！谢谢你们\n\n# 4 附录\n\n这是儿子的个人博客，我在上面有时候会写点生活博文（大部分写的是工作相关的），你们可以常来看看，24小时不停为你们服务^_^\n本文章后续我会进行加密，这样就可以安全的说一点家事，不怕被别人看见了（笑）\n评论系统的话我只对国外IP开放，所以你们没办法留言（哭）\n\n儿子致上！\n\n","source":"_posts/ToFather.md","raw":"---\ntitle: 又是一年父亲节\ntags: 随笔\ncategories: 生活\ndate: 2019-06-16 09:59:00\n---\n\n# 1 前言\n\n又是一年父亲节，正好是周日，挤点时间写一些心里话吧\n\n首先，还是先祝老爸父亲节快乐，感谢您一路以来的支持与厚爱，祝老爸身体健康，好事成双\n\n# 2 \n\n在我很小的时候，我觉得老爸很可怕，动不动就打人，所以那时候我最喜欢妈妈（笑），以前总是去义乌玩不仅仅是因为可以玩电脑，其实说白了还是小时候真的更加的粘妈妈。我记得很清楚，我初中住校的第一天，我特别想回家，那时候一个人在被窝里哭了很久，那晚上也几乎没睡着，脑子想的也几乎都是妈妈（笑）\n\n后来到了高中，自我认知能力提高了些，我开始第一次觉得老爸没有以前可怕了。那会每周的上下学开车接送，给我们制造了不少沟通的时间，我经常不停的抛出话题然后一路聊到学校门口。\n\n后来，老爸开始创业了，做了很多时髦的行当，想赚更多的钱。我也不知道我当时是从谁那里听到的消息，但是很神奇的事，老爸在前线的各种消息总能准时的入到我的耳朵里。不管是好消息还是坏消息。但是我总是带着非常害怕的心理在观望着，那段时间就是非常的后怕，总感觉老爸在冒很大的风险。潜移默化的，我也受到了一定的影响，我觉得我也应该加点油，刚好那会正直高三，我想这也许就是一种天意。\n\n由于小时候基本是和奶奶一起过日子，我被很好的保护着长大，小时候就一直感觉自己是最厉害的，最强的，是最聪明的人。然后等我一点点的独立后我渐渐发现了自己是真的很普通。不过好笑的是，让我切身感受到这一点的居然是我断断续续持续了几年的恋爱经历（不是班长！），老爸可能不知道，其实我高一没开学多久，就和一个女孩子好上了，是个看上去非常文静的人。我从小就比较开朗，所以一开始是根本对她没有任何兴趣的。但是毕竟是前后座，交流还是挺多的。当我发现她居然和我一样也喜欢Animation Comic的时候，我简直就像找到了知音那样，心里活奔乱跳。年轻的我觉得这一定是上天开眼，赐予我一个如此完美的同好，我们两个经常聊那些东西到很晚。\n\n不过好景也不长，高三毕业后，我们都各自选择了自身发展，互相也发生了一定的争吵，最后我们报考了不同的大学，我去了陕西她去了上海。我以为我们就此无缘，在我脑子里差不多忘掉那段时光之后，到了大二，命运的时钟又开始敲响。我在一个Animation Comic的同好网站上，我居然又遇到了她。由于时隔很久了，所以我们一开始就像遇到老朋友一样，互相分享自己最近的经历。可惜的是，有交流就有纠纷，那时不懂事的我，再次和她发生了较大的争吵。在那以后，我开始彻底死了心，这段故事也总算告一段落。\n\n之后，我就常常思考这个事情，开始觉得是自己的自我意识太过于旺盛，是自己的不成熟（虽然现在也不成熟）导致了这个后果。在那以后，我也变了比较多，首先是我不喜欢发什么朋友圈消息，开始喜欢做一个透明人，其次是我对女人失去了一定的恋爱兴趣，现在就觉得有钱娶老婆才是正途。\n\n感觉自己在这个话题上说的多了点（笑），不过希望老爸对我有更多的了解可能也是写这篇文章的初衷之一\n\n# 3 \n\n在以前父亲节，我总是考虑这一年我又可以回报老爸什么，当然这个想法是一直没变的，总有一天我觉得我一定可以达到财务自由，然后尽情的用“金钱”的力量来回报老爸老妈，现在也天天在被这种目标催动着，行动着。只不过自己不是那么厉害，不是那么强，不是最聪明的人，现在的一切都有点让我感觉不尽如意，但唯有努力，才能让我感觉良心过得去。\n\n今年父亲节，不知道为什么。我开始考虑自己了，我心里也开始产生了想过父亲节的想法，现在在我看来，这个也许才是一种成长。我也想做一个好父亲，我一路走来，根据自己的成长经验，感觉已经有非常多的话想讲给自己的孩子听了。为了达到这个目的，我觉得自己的首要目标还是稳定就业，然后赚大钱，有些这些我感觉什么都会好起来。\n\n>报喜不报忧\n\n工作后，整天从早到晚，真的不能说是一种‘喜’。我心里仔细算了算，我后续可以给你们报的‘喜’，应该大致是这些：\n1. 把工作地点切到杭州\n2. 创业成功（现在已经开始有想创业的想法，真的觉得上班是不行的，有这个想法完全是被钱驱动的，我想更多的钱，那可以让我办更多的事）\n3. 结婚（等完成1或者2后才会考虑）\n4. 生子（完成3后，顺其自然会发生的事情）\n\n所以能报的‘喜’确实越来越少，也越来越精髓。我已经不可能一点点好事情就找你们分享了，这也许可以算是给老妈一个简单的答复吧，老妈最近开始觉得我有点’阴落落‘的。那是因为我感觉有些话已经不适合现在交流了。\n\n在接下来的日子是，是我人生的启程，我只希望你们可以默默的关注我，而不是援助我，因为我想看看一个人究竟可以走多远，必要的时候我肯定会伸出援手，所以也请老爸老妈不要担心。对我来说，现在最大的愿望就是可以看你们开心的养老。我也知道这些都握在我自己的手中。\n\n最后，真心的祝福老妈老爸身体健康！好事成双！谢谢你们\n\n# 4 附录\n\n这是儿子的个人博客，我在上面有时候会写点生活博文（大部分写的是工作相关的），你们可以常来看看，24小时不停为你们服务^_^\n本文章后续我会进行加密，这样就可以安全的说一点家事，不怕被别人看见了（笑）\n评论系统的话我只对国外IP开放，所以你们没办法留言（哭）\n\n儿子致上！\n\n","slug":"ToFather","published":1,"updated":"2019-06-16T04:05:44.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sx000hm6el4123fhmo","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>又是一年父亲节，正好是周日，挤点时间写一些心里话吧</p>\n<p>首先，还是先祝老爸父亲节快乐，感谢您一路以来的支持与厚爱，祝老爸身体健康，好事成双</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>在我很小的时候，我觉得老爸很可怕，动不动就打人，所以那时候我最喜欢妈妈（笑），以前总是去义乌玩不仅仅是因为可以玩电脑，其实说白了还是小时候真的更加的粘妈妈。我记得很清楚，我初中住校的第一天，我特别想回家，那时候一个人在被窝里哭了很久，那晚上也几乎没睡着，脑子想的也几乎都是妈妈（笑）</p>\n<p>后来到了高中，自我认知能力提高了些，我开始第一次觉得老爸没有以前可怕了。那会每周的上下学开车接送，给我们制造了不少沟通的时间，我经常不停的抛出话题然后一路聊到学校门口。</p>\n<p>后来，老爸开始创业了，做了很多时髦的行当，想赚更多的钱。我也不知道我当时是从谁那里听到的消息，但是很神奇的事，老爸在前线的各种消息总能准时的入到我的耳朵里。不管是好消息还是坏消息。但是我总是带着非常害怕的心理在观望着，那段时间就是非常的后怕，总感觉老爸在冒很大的风险。潜移默化的，我也受到了一定的影响，我觉得我也应该加点油，刚好那会正直高三，我想这也许就是一种天意。</p>\n<p>由于小时候基本是和奶奶一起过日子，我被很好的保护着长大，小时候就一直感觉自己是最厉害的，最强的，是最聪明的人。然后等我一点点的独立后我渐渐发现了自己是真的很普通。不过好笑的是，让我切身感受到这一点的居然是我断断续续持续了几年的恋爱经历（不是班长！），老爸可能不知道，其实我高一没开学多久，就和一个女孩子好上了，是个看上去非常文静的人。我从小就比较开朗，所以一开始是根本对她没有任何兴趣的。但是毕竟是前后座，交流还是挺多的。当我发现她居然和我一样也喜欢Animation Comic的时候，我简直就像找到了知音那样，心里活奔乱跳。年轻的我觉得这一定是上天开眼，赐予我一个如此完美的同好，我们两个经常聊那些东西到很晚。</p>\n<p>不过好景也不长，高三毕业后，我们都各自选择了自身发展，互相也发生了一定的争吵，最后我们报考了不同的大学，我去了陕西她去了上海。我以为我们就此无缘，在我脑子里差不多忘掉那段时光之后，到了大二，命运的时钟又开始敲响。我在一个Animation Comic的同好网站上，我居然又遇到了她。由于时隔很久了，所以我们一开始就像遇到老朋友一样，互相分享自己最近的经历。可惜的是，有交流就有纠纷，那时不懂事的我，再次和她发生了较大的争吵。在那以后，我开始彻底死了心，这段故事也总算告一段落。</p>\n<p>之后，我就常常思考这个事情，开始觉得是自己的自我意识太过于旺盛，是自己的不成熟（虽然现在也不成熟）导致了这个后果。在那以后，我也变了比较多，首先是我不喜欢发什么朋友圈消息，开始喜欢做一个透明人，其次是我对女人失去了一定的恋爱兴趣，现在就觉得有钱娶老婆才是正途。</p>\n<p>感觉自己在这个话题上说的多了点（笑），不过希望老爸对我有更多的了解可能也是写这篇文章的初衷之一</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>在以前父亲节，我总是考虑这一年我又可以回报老爸什么，当然这个想法是一直没变的，总有一天我觉得我一定可以达到财务自由，然后尽情的用“金钱”的力量来回报老爸老妈，现在也天天在被这种目标催动着，行动着。只不过自己不是那么厉害，不是那么强，不是最聪明的人，现在的一切都有点让我感觉不尽如意，但唯有努力，才能让我感觉良心过得去。</p>\n<p>今年父亲节，不知道为什么。我开始考虑自己了，我心里也开始产生了想过父亲节的想法，现在在我看来，这个也许才是一种成长。我也想做一个好父亲，我一路走来，根据自己的成长经验，感觉已经有非常多的话想讲给自己的孩子听了。为了达到这个目的，我觉得自己的首要目标还是稳定就业，然后赚大钱，有些这些我感觉什么都会好起来。</p>\n<blockquote>\n<p>报喜不报忧</p>\n</blockquote>\n<p>工作后，整天从早到晚，真的不能说是一种‘喜’。我心里仔细算了算，我后续可以给你们报的‘喜’，应该大致是这些：</p>\n<ol>\n<li>把工作地点切到杭州</li>\n<li>创业成功（现在已经开始有想创业的想法，真的觉得上班是不行的，有这个想法完全是被钱驱动的，我想更多的钱，那可以让我办更多的事）</li>\n<li>结婚（等完成1或者2后才会考虑）</li>\n<li>生子（完成3后，顺其自然会发生的事情）</li>\n</ol>\n<p>所以能报的‘喜’确实越来越少，也越来越精髓。我已经不可能一点点好事情就找你们分享了，这也许可以算是给老妈一个简单的答复吧，老妈最近开始觉得我有点’阴落落‘的。那是因为我感觉有些话已经不适合现在交流了。</p>\n<p>在接下来的日子是，是我人生的启程，我只希望你们可以默默的关注我，而不是援助我，因为我想看看一个人究竟可以走多远，必要的时候我肯定会伸出援手，所以也请老爸老妈不要担心。对我来说，现在最大的愿望就是可以看你们开心的养老。我也知道这些都握在我自己的手中。</p>\n<p>最后，真心的祝福老妈老爸身体健康！好事成双！谢谢你们</p>\n<h1 id=\"4-附录\"><a href=\"#4-附录\" class=\"headerlink\" title=\"4 附录\"></a>4 附录</h1><p>这是儿子的个人博客，我在上面有时候会写点生活博文（大部分写的是工作相关的），你们可以常来看看，24小时不停为你们服务^_^<br>本文章后续我会进行加密，这样就可以安全的说一点家事，不怕被别人看见了（笑）<br>评论系统的话我只对国外IP开放，所以你们没办法留言（哭）</p>\n<p>儿子致上！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>又是一年父亲节，正好是周日，挤点时间写一些心里话吧</p>\n<p>首先，还是先祝老爸父亲节快乐，感谢您一路以来的支持与厚爱，祝老爸身体健康，好事成双</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>在我很小的时候，我觉得老爸很可怕，动不动就打人，所以那时候我最喜欢妈妈（笑），以前总是去义乌玩不仅仅是因为可以玩电脑，其实说白了还是小时候真的更加的粘妈妈。我记得很清楚，我初中住校的第一天，我特别想回家，那时候一个人在被窝里哭了很久，那晚上也几乎没睡着，脑子想的也几乎都是妈妈（笑）</p>\n<p>后来到了高中，自我认知能力提高了些，我开始第一次觉得老爸没有以前可怕了。那会每周的上下学开车接送，给我们制造了不少沟通的时间，我经常不停的抛出话题然后一路聊到学校门口。</p>\n<p>后来，老爸开始创业了，做了很多时髦的行当，想赚更多的钱。我也不知道我当时是从谁那里听到的消息，但是很神奇的事，老爸在前线的各种消息总能准时的入到我的耳朵里。不管是好消息还是坏消息。但是我总是带着非常害怕的心理在观望着，那段时间就是非常的后怕，总感觉老爸在冒很大的风险。潜移默化的，我也受到了一定的影响，我觉得我也应该加点油，刚好那会正直高三，我想这也许就是一种天意。</p>\n<p>由于小时候基本是和奶奶一起过日子，我被很好的保护着长大，小时候就一直感觉自己是最厉害的，最强的，是最聪明的人。然后等我一点点的独立后我渐渐发现了自己是真的很普通。不过好笑的是，让我切身感受到这一点的居然是我断断续续持续了几年的恋爱经历（不是班长！），老爸可能不知道，其实我高一没开学多久，就和一个女孩子好上了，是个看上去非常文静的人。我从小就比较开朗，所以一开始是根本对她没有任何兴趣的。但是毕竟是前后座，交流还是挺多的。当我发现她居然和我一样也喜欢Animation Comic的时候，我简直就像找到了知音那样，心里活奔乱跳。年轻的我觉得这一定是上天开眼，赐予我一个如此完美的同好，我们两个经常聊那些东西到很晚。</p>\n<p>不过好景也不长，高三毕业后，我们都各自选择了自身发展，互相也发生了一定的争吵，最后我们报考了不同的大学，我去了陕西她去了上海。我以为我们就此无缘，在我脑子里差不多忘掉那段时光之后，到了大二，命运的时钟又开始敲响。我在一个Animation Comic的同好网站上，我居然又遇到了她。由于时隔很久了，所以我们一开始就像遇到老朋友一样，互相分享自己最近的经历。可惜的是，有交流就有纠纷，那时不懂事的我，再次和她发生了较大的争吵。在那以后，我开始彻底死了心，这段故事也总算告一段落。</p>\n<p>之后，我就常常思考这个事情，开始觉得是自己的自我意识太过于旺盛，是自己的不成熟（虽然现在也不成熟）导致了这个后果。在那以后，我也变了比较多，首先是我不喜欢发什么朋友圈消息，开始喜欢做一个透明人，其次是我对女人失去了一定的恋爱兴趣，现在就觉得有钱娶老婆才是正途。</p>\n<p>感觉自己在这个话题上说的多了点（笑），不过希望老爸对我有更多的了解可能也是写这篇文章的初衷之一</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>在以前父亲节，我总是考虑这一年我又可以回报老爸什么，当然这个想法是一直没变的，总有一天我觉得我一定可以达到财务自由，然后尽情的用“金钱”的力量来回报老爸老妈，现在也天天在被这种目标催动着，行动着。只不过自己不是那么厉害，不是那么强，不是最聪明的人，现在的一切都有点让我感觉不尽如意，但唯有努力，才能让我感觉良心过得去。</p>\n<p>今年父亲节，不知道为什么。我开始考虑自己了，我心里也开始产生了想过父亲节的想法，现在在我看来，这个也许才是一种成长。我也想做一个好父亲，我一路走来，根据自己的成长经验，感觉已经有非常多的话想讲给自己的孩子听了。为了达到这个目的，我觉得自己的首要目标还是稳定就业，然后赚大钱，有些这些我感觉什么都会好起来。</p>\n<blockquote>\n<p>报喜不报忧</p>\n</blockquote>\n<p>工作后，整天从早到晚，真的不能说是一种‘喜’。我心里仔细算了算，我后续可以给你们报的‘喜’，应该大致是这些：</p>\n<ol>\n<li>把工作地点切到杭州</li>\n<li>创业成功（现在已经开始有想创业的想法，真的觉得上班是不行的，有这个想法完全是被钱驱动的，我想更多的钱，那可以让我办更多的事）</li>\n<li>结婚（等完成1或者2后才会考虑）</li>\n<li>生子（完成3后，顺其自然会发生的事情）</li>\n</ol>\n<p>所以能报的‘喜’确实越来越少，也越来越精髓。我已经不可能一点点好事情就找你们分享了，这也许可以算是给老妈一个简单的答复吧，老妈最近开始觉得我有点’阴落落‘的。那是因为我感觉有些话已经不适合现在交流了。</p>\n<p>在接下来的日子是，是我人生的启程，我只希望你们可以默默的关注我，而不是援助我，因为我想看看一个人究竟可以走多远，必要的时候我肯定会伸出援手，所以也请老爸老妈不要担心。对我来说，现在最大的愿望就是可以看你们开心的养老。我也知道这些都握在我自己的手中。</p>\n<p>最后，真心的祝福老妈老爸身体健康！好事成双！谢谢你们</p>\n<h1 id=\"4-附录\"><a href=\"#4-附录\" class=\"headerlink\" title=\"4 附录\"></a>4 附录</h1><p>这是儿子的个人博客，我在上面有时候会写点生活博文（大部分写的是工作相关的），你们可以常来看看，24小时不停为你们服务^_^<br>本文章后续我会进行加密，这样就可以安全的说一点家事，不怕被别人看见了（笑）<br>评论系统的话我只对国外IP开放，所以你们没办法留言（哭）</p>\n<p>儿子致上！</p>\n"},{"title":"git push大文件报错解决","date":"2019-06-08T04:21:27.000Z","_content":"\n# 错误描述\n\ngit push无法上传超过100MB的文件（50MB会警告），错误log如下(部分敏感信息做了隐藏)\n```s\nCounting objects: 4, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 123.34 MiB | 1.83 MiB/s, done.\nTotal 4 (delta 0), reused 0 (delta 0)\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\nremote: error: Trace: 19e4cebc572e034bbb9c98400b094323\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: ***.pdf is 127.70 MB; this exceeds GitHub's file size limit of 100.00 MB\nTo https://github.com/***/***.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'https://github.com/***/***.git'\n```\n\n# 解决方法\n\n1. 使用git log查看所有的提交节点commit_id,我的如下\n```s\ncommit be7dafc20357142ff529f6d397a8452d4084a84b (HEAD -> master)\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Sat Jun 8 12:14:28 2019 +0800\n\n    test大文件提交push失败回滚\n\ncommit 59083eafa73f4a1c36d31eb7dad1385017b92339 (origin/master)\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Sat Jun 8 12:12:14 2019 +0800\n\n    update\n\ncommit 2c7793bacdd323cf4c0f91eefd8950980c402602\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Thu Jun 6 16:37:41 2019 +0800\n\n    update\n\n# ...其余信息省略\n```\n\n2. 筛选你想要的回退到的commit节点，比如我回退到59083eafa73f4a1c36d31eb7dad1385017b92339\n\n3. 使用`git reset <commit_id>`进行回退。注意不要使用`git reset HEAD <commit_id>`这会导致你的工作区也回退到相应的节点，这样的话你会发现刚写的东西就没了（可以补救，也就是在使用reset回退到最新的commit节点）\n\n4. 使用`git status`你会发现一切都重新从你修改本地文件之后，add之前开始了\n","source":"_posts/git-push大文件报错解决.md","raw":"---\ntitle: git push大文件报错解决\ntags: Bugs\ncategories: IT\ndate: 2019-06-08 12:21:27\n---\n\n# 错误描述\n\ngit push无法上传超过100MB的文件（50MB会警告），错误log如下(部分敏感信息做了隐藏)\n```s\nCounting objects: 4, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (4/4), 123.34 MiB | 1.83 MiB/s, done.\nTotal 4 (delta 0), reused 0 (delta 0)\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\nremote: error: Trace: 19e4cebc572e034bbb9c98400b094323\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: ***.pdf is 127.70 MB; this exceeds GitHub's file size limit of 100.00 MB\nTo https://github.com/***/***.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'https://github.com/***/***.git'\n```\n\n# 解决方法\n\n1. 使用git log查看所有的提交节点commit_id,我的如下\n```s\ncommit be7dafc20357142ff529f6d397a8452d4084a84b (HEAD -> master)\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Sat Jun 8 12:14:28 2019 +0800\n\n    test大文件提交push失败回滚\n\ncommit 59083eafa73f4a1c36d31eb7dad1385017b92339 (origin/master)\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Sat Jun 8 12:12:14 2019 +0800\n\n    update\n\ncommit 2c7793bacdd323cf4c0f91eefd8950980c402602\nAuthor: zazaluMonster <hejiajun1432@gmail.com>\nDate:   Thu Jun 6 16:37:41 2019 +0800\n\n    update\n\n# ...其余信息省略\n```\n\n2. 筛选你想要的回退到的commit节点，比如我回退到59083eafa73f4a1c36d31eb7dad1385017b92339\n\n3. 使用`git reset <commit_id>`进行回退。注意不要使用`git reset HEAD <commit_id>`这会导致你的工作区也回退到相应的节点，这样的话你会发现刚写的东西就没了（可以补救，也就是在使用reset回退到最新的commit节点）\n\n4. 使用`git status`你会发现一切都重新从你修改本地文件之后，add之前开始了\n","slug":"git-push大文件报错解决","published":1,"updated":"2019-06-08T04:35:57.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9sz000lm6elpoy7t5kq","content":"<h1 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h1><p>git push无法上传超过100MB的文件（50MB会警告），错误log如下(部分敏感信息做了隐藏)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counting objects: 4, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (4/4), 123.34 MiB | 1.83 MiB/s, done.</span><br><span class=\"line\">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br><span class=\"line\">remote: error: Trace: 19e4cebc572e034bbb9c98400b094323</span><br><span class=\"line\">remote: error: See http://git.io/iEPt8g for more information.</span><br><span class=\"line\">remote: error: ***.pdf is 127.70 MB; this exceeds GitHub&apos;s file size limit of 100.00 MB</span><br><span class=\"line\">To https://github.com/***/***.git</span><br><span class=\"line\"> ! [remote rejected] master -&gt; master (pre-receive hook declined)</span><br><span class=\"line\">error: failed to push some refs to &apos;https://github.com/***/***.git&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li><p>使用git log查看所有的提交节点commit_id,我的如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit be7dafc20357142ff529f6d397a8452d4084a84b (HEAD -&gt; master)</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Sat Jun 8 12:14:28 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test大文件提交push失败回滚</span><br><span class=\"line\"></span><br><span class=\"line\">commit 59083eafa73f4a1c36d31eb7dad1385017b92339 (origin/master)</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Sat Jun 8 12:12:14 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2c7793bacdd323cf4c0f91eefd8950980c402602</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Jun 6 16:37:41 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update</span><br><span class=\"line\"></span><br><span class=\"line\"># ...其余信息省略</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>筛选你想要的回退到的commit节点，比如我回退到59083eafa73f4a1c36d31eb7dad1385017b92339</p>\n</li>\n<li><p>使用<code>git reset &lt;commit_id&gt;</code>进行回退。注意不要使用<code>git reset HEAD &lt;commit_id&gt;</code>这会导致你的工作区也回退到相应的节点，这样的话你会发现刚写的东西就没了（可以补救，也就是在使用reset回退到最新的commit节点）</p>\n</li>\n<li><p>使用<code>git status</code>你会发现一切都重新从你修改本地文件之后，add之前开始了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h1><p>git push无法上传超过100MB的文件（50MB会警告），错误log如下(部分敏感信息做了隐藏)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Counting objects: 4, done.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (4/4), 123.34 MiB | 1.83 MiB/s, done.</span><br><span class=\"line\">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.</span><br><span class=\"line\">remote: error: Trace: 19e4cebc572e034bbb9c98400b094323</span><br><span class=\"line\">remote: error: See http://git.io/iEPt8g for more information.</span><br><span class=\"line\">remote: error: ***.pdf is 127.70 MB; this exceeds GitHub&apos;s file size limit of 100.00 MB</span><br><span class=\"line\">To https://github.com/***/***.git</span><br><span class=\"line\"> ! [remote rejected] master -&gt; master (pre-receive hook declined)</span><br><span class=\"line\">error: failed to push some refs to &apos;https://github.com/***/***.git&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><ol>\n<li><p>使用git log查看所有的提交节点commit_id,我的如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit be7dafc20357142ff529f6d397a8452d4084a84b (HEAD -&gt; master)</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Sat Jun 8 12:14:28 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    test大文件提交push失败回滚</span><br><span class=\"line\"></span><br><span class=\"line\">commit 59083eafa73f4a1c36d31eb7dad1385017b92339 (origin/master)</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Sat Jun 8 12:12:14 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update</span><br><span class=\"line\"></span><br><span class=\"line\">commit 2c7793bacdd323cf4c0f91eefd8950980c402602</span><br><span class=\"line\">Author: zazaluMonster &lt;hejiajun1432@gmail.com&gt;</span><br><span class=\"line\">Date:   Thu Jun 6 16:37:41 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    update</span><br><span class=\"line\"></span><br><span class=\"line\"># ...其余信息省略</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>筛选你想要的回退到的commit节点，比如我回退到59083eafa73f4a1c36d31eb7dad1385017b92339</p>\n</li>\n<li><p>使用<code>git reset &lt;commit_id&gt;</code>进行回退。注意不要使用<code>git reset HEAD &lt;commit_id&gt;</code>这会导致你的工作区也回退到相应的节点，这样的话你会发现刚写的东西就没了（可以补救，也就是在使用reset回退到最新的commit节点）</p>\n</li>\n<li><p>使用<code>git status</code>你会发现一切都重新从你修改本地文件之后，add之前开始了</p>\n</li>\n</ol>\n"},{"title":"Gitalk初始化评论自动生成","date":"2019-09-24T07:01:10.000Z","_content":"\n# 1\n\n切换到Gitalk后，存在一个问题，就是issue需要我人工干预去创建，没法自动。 \n\n所以这时候就需要借助Github API的力量，编写一个脚本自动创建文章对应的issue。\n\n我想这种需求应该有人比我早需要，所以搜索了下，确实由人用nodejs写了一个脚本实现了，勉强能用，我也在上面稍微改动了下符合我自己的情况，下面贴个原文地址：\nhttps://daihaoxin.github.io/post/322747ae.html\n\n\n# 2\n\n不过原文遗漏了一个配置点， 就是要把站点_config.yml中url属性配置成自己域名，默认的http://yoursite.com\n\n会导致生成的sitemap.xml中的都是这个域名开头的，导致生成的所有issue都是不匹配的。\n\n# 3\n\n还有一个问题是，label不能超过50个字符，所以要md5下\n\n# 4 最终代码\n\ncomment.js\n\n```js\nconst request = require(\"request\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst url = require(\"url\");\nconst xmlParser = require(\"xml-parser\");\nconst YAML = require(\"yamljs\");\nconst cheerio = require(\"cheerio\");\nconst md5 = require(\"md5\");\n// 根据自己的情况进行配置\nconst config = {\n    username: \"zazaluMonster\", // GitHub 用户名\n    token: \"d234d6a7234f3b547975f59c81adc879353189ac\",  // GitHub Token\n    repo: \"zazaluMonster.github.io\",  // 存放 issues的git仓库\n    // sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理\n    sitemapUrl: path.resolve(__dirname, \"./public/sitemap.xml\"),\n    kind: \"Gitalk\",  // \"Gitalk\" or \"Gitment\"，\n    baseUrl: \"https://zazalu.space/\"\n};\nlet issuesUrl = `https://api.github.com/repos/${config.username}/${config.repo}/issues?access_token=${config.token}`;\n\nlet requestGetOpt = {\n    url: `${issuesUrl}&page=1&per_page=1000`,\n    json: true,\n    headers: {\n        \"User-Agent\": \"github-user\"\n    }\n};\nlet requestPostOpt = {\n    ...requestGetOpt,\n    url:issuesUrl,\n    method: \"POST\",\n    form: \"\"\n};\n\nconsole.log(\"开始初始化评论...\");\n\n(async function() {\n    console.log(\"开始检索链接，请稍等...\");\n    \n    try {\n        let websiteConfig = YAML.parse(fs.readFileSync(path.resolve(__dirname, \"./_config.yml\"), \"utf8\"));\n        \n        let urls = sitemapXmlReader(config.sitemapUrl);\n        console.log(`共检索到${urls.length}个链接`);\n        \n        console.log(\"开始获取已经初始化的issues:\");\n        let issues = await send(requestGetOpt);\n        console.log(`已经存在${issues.length}个issues`);\n        \n        let notInitIssueLinks = urls.filter((link) => {\n            return !issues.find((item) => {\n                link = removeProtocol(link);\n                return item.body.includes(link);\n            });\n        });\n        if (notInitIssueLinks.length > 0) {\n            console.log(`本次有${notInitIssueLinks.length}个链接需要初始化issue：`);\n            console.log(notInitIssueLinks);\n            console.log(\"开始提交初始化请求, 大约需要40秒...\");\n            /**\n             * 部署好网站后，直接执行start，新增文章并不会生成评论\n             * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤\n             */\n            setTimeout(async ()=>{\n                let initRet = await notInitIssueLinks.map(async (item) => {\n                    let html = await send({ ...requestGetOpt, url: item });\n                    let title = cheerio.load(html)(\"title\").text();\n                    let pathLabel = url.parse(item).path;\n                    pathLabel = md5(config.baseUrl + pathLabel);//中文过长所以要md5\n                    let body = `${item}<br><br>${websiteConfig.description}`;\n                    let form = JSON.stringify({ body, labels: [config.kind, pathLabel], title });\n                    return send({ ...requestPostOpt, form });\n                });\n                console.log(`已完成${initRet.length}个！`);\n                console.log(\"可以愉快的发表评论了！\");\n            },40000);\n        } else {\n            console.log(\"本次发布无新增页面，无需初始化issue!!\");\n        }\n    } catch (e) {\n        console.log(`初始化issue出错，错误如下：`);\n        console.log(e);\n    } finally {\n    \n    }\n})();\n\nfunction sitemapXmlReader(file) {\n    let data = fs.readFileSync(file, \"utf8\");\n    let sitemap = xmlParser(data);\n    return sitemap.root.children.map(function (url) {\n        let loc = url.children.filter(function (item) {\n            return item.name === \"loc\";\n        })[0];\n        return loc.content;\n    });\n}\n\nfunction removeProtocol(url) {\n    return url.substr(url.indexOf(\":\"));\n}\n\nfunction send(options) {\n    return new Promise(function (resolve, reject) {\n        request(options, function (error, response, body) {\n            if (!error) {\n                resolve(body);\n            } else {\n                reject(error);\n            }\n        });\n    });\n}\n\n```\n\n# 5 操作步骤\n\n每次`hexo d`后执行`node ./comment.js`即可,不过不要觉得他们的执行顺序由强约束，其实你可以随时执行`node ./comment.js`，两者没有必要关联，只不过每次你hexo d后，肯定会新增的文章需要生成评论，所以调用一次\n\n# 6 后续发生的问题总结\n\n当执行node ./comment.js出现如下问题时, \n```shell\ninternal/modules/cjs/loader.js:638\n    throw err;\n    ^\n\nError: Cannot find module './options'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:562:25)\n    at Module.require (internal/modules/cjs/loader.js:692:17)\n    at require (internal/modules/cjs/helpers.js:25:18)\n    at Object.<anonymous> (/home/zazalu/blog/zazaluMonster.github.io/node_modules/cheerio/lib/cheerio.js:6:22)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n\n```\n\n直接删除整个`node_modules`文件夹,重新执行`npm install`解决,我猜测是node模块构建问题\n---\n\n如果切换环境调用github api, token需要重新生成, 请注意\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/gitalk-issue-automatic-create.md","raw":"---\ntitle: Gitalk初始化评论自动生成\ntags: Gitalk\ncategories: IT\ndate: 2019-09-24 15:01:10\n---\n\n# 1\n\n切换到Gitalk后，存在一个问题，就是issue需要我人工干预去创建，没法自动。 \n\n所以这时候就需要借助Github API的力量，编写一个脚本自动创建文章对应的issue。\n\n我想这种需求应该有人比我早需要，所以搜索了下，确实由人用nodejs写了一个脚本实现了，勉强能用，我也在上面稍微改动了下符合我自己的情况，下面贴个原文地址：\nhttps://daihaoxin.github.io/post/322747ae.html\n\n\n# 2\n\n不过原文遗漏了一个配置点， 就是要把站点_config.yml中url属性配置成自己域名，默认的http://yoursite.com\n\n会导致生成的sitemap.xml中的都是这个域名开头的，导致生成的所有issue都是不匹配的。\n\n# 3\n\n还有一个问题是，label不能超过50个字符，所以要md5下\n\n# 4 最终代码\n\ncomment.js\n\n```js\nconst request = require(\"request\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst url = require(\"url\");\nconst xmlParser = require(\"xml-parser\");\nconst YAML = require(\"yamljs\");\nconst cheerio = require(\"cheerio\");\nconst md5 = require(\"md5\");\n// 根据自己的情况进行配置\nconst config = {\n    username: \"zazaluMonster\", // GitHub 用户名\n    token: \"d234d6a7234f3b547975f59c81adc879353189ac\",  // GitHub Token\n    repo: \"zazaluMonster.github.io\",  // 存放 issues的git仓库\n    // sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理\n    sitemapUrl: path.resolve(__dirname, \"./public/sitemap.xml\"),\n    kind: \"Gitalk\",  // \"Gitalk\" or \"Gitment\"，\n    baseUrl: \"https://zazalu.space/\"\n};\nlet issuesUrl = `https://api.github.com/repos/${config.username}/${config.repo}/issues?access_token=${config.token}`;\n\nlet requestGetOpt = {\n    url: `${issuesUrl}&page=1&per_page=1000`,\n    json: true,\n    headers: {\n        \"User-Agent\": \"github-user\"\n    }\n};\nlet requestPostOpt = {\n    ...requestGetOpt,\n    url:issuesUrl,\n    method: \"POST\",\n    form: \"\"\n};\n\nconsole.log(\"开始初始化评论...\");\n\n(async function() {\n    console.log(\"开始检索链接，请稍等...\");\n    \n    try {\n        let websiteConfig = YAML.parse(fs.readFileSync(path.resolve(__dirname, \"./_config.yml\"), \"utf8\"));\n        \n        let urls = sitemapXmlReader(config.sitemapUrl);\n        console.log(`共检索到${urls.length}个链接`);\n        \n        console.log(\"开始获取已经初始化的issues:\");\n        let issues = await send(requestGetOpt);\n        console.log(`已经存在${issues.length}个issues`);\n        \n        let notInitIssueLinks = urls.filter((link) => {\n            return !issues.find((item) => {\n                link = removeProtocol(link);\n                return item.body.includes(link);\n            });\n        });\n        if (notInitIssueLinks.length > 0) {\n            console.log(`本次有${notInitIssueLinks.length}个链接需要初始化issue：`);\n            console.log(notInitIssueLinks);\n            console.log(\"开始提交初始化请求, 大约需要40秒...\");\n            /**\n             * 部署好网站后，直接执行start，新增文章并不会生成评论\n             * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤\n             */\n            setTimeout(async ()=>{\n                let initRet = await notInitIssueLinks.map(async (item) => {\n                    let html = await send({ ...requestGetOpt, url: item });\n                    let title = cheerio.load(html)(\"title\").text();\n                    let pathLabel = url.parse(item).path;\n                    pathLabel = md5(config.baseUrl + pathLabel);//中文过长所以要md5\n                    let body = `${item}<br><br>${websiteConfig.description}`;\n                    let form = JSON.stringify({ body, labels: [config.kind, pathLabel], title });\n                    return send({ ...requestPostOpt, form });\n                });\n                console.log(`已完成${initRet.length}个！`);\n                console.log(\"可以愉快的发表评论了！\");\n            },40000);\n        } else {\n            console.log(\"本次发布无新增页面，无需初始化issue!!\");\n        }\n    } catch (e) {\n        console.log(`初始化issue出错，错误如下：`);\n        console.log(e);\n    } finally {\n    \n    }\n})();\n\nfunction sitemapXmlReader(file) {\n    let data = fs.readFileSync(file, \"utf8\");\n    let sitemap = xmlParser(data);\n    return sitemap.root.children.map(function (url) {\n        let loc = url.children.filter(function (item) {\n            return item.name === \"loc\";\n        })[0];\n        return loc.content;\n    });\n}\n\nfunction removeProtocol(url) {\n    return url.substr(url.indexOf(\":\"));\n}\n\nfunction send(options) {\n    return new Promise(function (resolve, reject) {\n        request(options, function (error, response, body) {\n            if (!error) {\n                resolve(body);\n            } else {\n                reject(error);\n            }\n        });\n    });\n}\n\n```\n\n# 5 操作步骤\n\n每次`hexo d`后执行`node ./comment.js`即可,不过不要觉得他们的执行顺序由强约束，其实你可以随时执行`node ./comment.js`，两者没有必要关联，只不过每次你hexo d后，肯定会新增的文章需要生成评论，所以调用一次\n\n# 6 后续发生的问题总结\n\n当执行node ./comment.js出现如下问题时, \n```shell\ninternal/modules/cjs/loader.js:638\n    throw err;\n    ^\n\nError: Cannot find module './options'\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:562:25)\n    at Module.require (internal/modules/cjs/loader.js:692:17)\n    at require (internal/modules/cjs/helpers.js:25:18)\n    at Object.<anonymous> (/home/zazalu/blog/zazaluMonster.github.io/node_modules/cheerio/lib/cheerio.js:6:22)\n    at Module._compile (internal/modules/cjs/loader.js:778:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)\n    at Module.load (internal/modules/cjs/loader.js:653:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:585:3)\n\n```\n\n直接删除整个`node_modules`文件夹,重新执行`npm install`解决,我猜测是node模块构建问题\n---\n\n如果切换环境调用github api, token需要重新生成, 请注意\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"gitalk-issue-automatic-create","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t0000nm6eldthgevlh","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>切换到Gitalk后，存在一个问题，就是issue需要我人工干预去创建，没法自动。 </p>\n<p>所以这时候就需要借助Github API的力量，编写一个脚本自动创建文章对应的issue。</p>\n<p>我想这种需求应该有人比我早需要，所以搜索了下，确实由人用nodejs写了一个脚本实现了，勉强能用，我也在上面稍微改动了下符合我自己的情况，下面贴个原文地址：<br><a href=\"https://daihaoxin.github.io/post/322747ae.html\" target=\"_blank\" rel=\"noopener\">https://daihaoxin.github.io/post/322747ae.html</a></p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>不过原文遗漏了一个配置点， 就是要把站点_config.yml中url属性配置成自己域名，默认的<a href=\"http://yoursite.com\" target=\"_blank\" rel=\"noopener\">http://yoursite.com</a></p>\n<p>会导致生成的sitemap.xml中的都是这个域名开头的，导致生成的所有issue都是不匹配的。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>还有一个问题是，label不能超过50个字符，所以要md5下</p>\n<h1 id=\"4-最终代码\"><a href=\"#4-最终代码\" class=\"headerlink\" title=\"4 最终代码\"></a>4 最终代码</h1><p>comment.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> xmlParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"xml-parser\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> YAML = <span class=\"built_in\">require</span>(<span class=\"string\">\"yamljs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">\"cheerio\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"md5\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 根据自己的情况进行配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">\"zazaluMonster\"</span>, <span class=\"comment\">// GitHub 用户名</span></span><br><span class=\"line\">    token: <span class=\"string\">\"d234d6a7234f3b547975f59c81adc879353189ac\"</span>,  <span class=\"comment\">// GitHub Token</span></span><br><span class=\"line\">    repo: <span class=\"string\">\"zazaluMonster.github.io\"</span>,  <span class=\"comment\">// 存放 issues的git仓库</span></span><br><span class=\"line\">    <span class=\"comment\">// sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理</span></span><br><span class=\"line\">    sitemapUrl: path.resolve(__dirname, <span class=\"string\">\"./public/sitemap.xml\"</span>),</span><br><span class=\"line\">    kind: <span class=\"string\">\"Gitalk\"</span>,  <span class=\"comment\">// \"Gitalk\" or \"Gitment\"，</span></span><br><span class=\"line\">    baseUrl: <span class=\"string\">\"https://zazalu.space/\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> issuesUrl = <span class=\"string\">`https://api.github.com/repos/<span class=\"subst\">$&#123;config.username&#125;</span>/<span class=\"subst\">$&#123;config.repo&#125;</span>/issues?access_token=<span class=\"subst\">$&#123;config.token&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> requestGetOpt = &#123;</span><br><span class=\"line\">    url: <span class=\"string\">`<span class=\"subst\">$&#123;issuesUrl&#125;</span>&amp;page=1&amp;per_page=1000`</span>,</span><br><span class=\"line\">    json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"github-user\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestPostOpt = &#123;</span><br><span class=\"line\">    ...requestGetOpt,</span><br><span class=\"line\">    url:issuesUrl,</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    form: <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始初始化评论...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始检索链接，请稍等...\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> websiteConfig = YAML.parse(fs.readFileSync(path.resolve(__dirname, <span class=\"string\">\"./_config.yml\"</span>), <span class=\"string\">\"utf8\"</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> urls = sitemapXmlReader(config.sitemapUrl);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`共检索到<span class=\"subst\">$&#123;urls.length&#125;</span>个链接`</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始获取已经初始化的issues:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> issues = <span class=\"keyword\">await</span> send(requestGetOpt);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`已经存在<span class=\"subst\">$&#123;issues.length&#125;</span>个issues`</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> notInitIssueLinks = urls.filter(<span class=\"function\">(<span class=\"params\">link</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !issues.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                link = removeProtocol(link);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item.body.includes(link);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notInitIssueLinks.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`本次有<span class=\"subst\">$&#123;notInitIssueLinks.length&#125;</span>个链接需要初始化issue：`</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(notInitIssueLinks);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始提交初始化请求, 大约需要40秒...\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 部署好网站后，直接执行start，新增文章并不会生成评论</span></span><br><span class=\"line\"><span class=\"comment\">             * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            setTimeout(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> initRet = <span class=\"keyword\">await</span> notInitIssueLinks.map(<span class=\"keyword\">async</span> (item) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> send(&#123; ...requestGetOpt, <span class=\"attr\">url</span>: item &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> title = cheerio.load(html)(<span class=\"string\">\"title\"</span>).text();</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> pathLabel = url.parse(item).path;</span><br><span class=\"line\">                    pathLabel = md5(config.baseUrl + pathLabel);<span class=\"comment\">//中文过长所以要md5</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> body = <span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>&lt;br&gt;&lt;br&gt;<span class=\"subst\">$&#123;websiteConfig.description&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> form = <span class=\"built_in\">JSON</span>.stringify(&#123; body, <span class=\"attr\">labels</span>: [config.kind, pathLabel], title &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> send(&#123; ...requestPostOpt, form &#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`已完成<span class=\"subst\">$&#123;initRet.length&#125;</span>个！`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以愉快的发表评论了！\"</span>);</span><br><span class=\"line\">            &#125;,<span class=\"number\">40000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"本次发布无新增页面，无需初始化issue!!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`初始化issue出错，错误如下：`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sitemapXmlReader</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = fs.readFileSync(file, <span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sitemap = xmlParser(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sitemap.root.children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> loc = url.children.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.name === <span class=\"string\">\"loc\"</span>;</span><br><span class=\"line\">        &#125;)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loc.content;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeProtocol</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.substr(url.indexOf(<span class=\"string\">\":\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!error) &#123;</span><br><span class=\"line\">                resolve(body);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-操作步骤\"><a href=\"#5-操作步骤\" class=\"headerlink\" title=\"5 操作步骤\"></a>5 操作步骤</h1><p>每次<code>hexo d</code>后执行<code>node ./comment.js</code>即可,不过不要觉得他们的执行顺序由强约束，其实你可以随时执行<code>node ./comment.js</code>，两者没有必要关联，只不过每次你hexo d后，肯定会新增的文章需要生成评论，所以调用一次</p>\n<h1 id=\"6-后续发生的问题总结\"><a href=\"#6-后续发生的问题总结\" class=\"headerlink\" title=\"6 后续发生的问题总结\"></a>6 后续发生的问题总结</h1><p>当执行node ./comment.js出现如下问题时,<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">internal/modules/cjs/loader.js:638</span><br><span class=\"line\">    throw err;</span><br><span class=\"line\">    ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: Cannot find module './options'</span><br><span class=\"line\">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)</span><br><span class=\"line\">    at Function.Module._load (internal/modules/cjs/loader.js:562:25)</span><br><span class=\"line\">    at Module.require (internal/modules/cjs/loader.js:692:17)</span><br><span class=\"line\">    at require (internal/modules/cjs/helpers.js:25:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/home/zazalu/blog/zazaluMonster.github.io/node_modules/cheerio/lib/cheerio.js:6:22)</span><br><span class=\"line\">    at Module._compile (internal/modules/cjs/loader.js:778:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)</span><br><span class=\"line\">    at Module.load (internal/modules/cjs/loader.js:653:32)</span><br><span class=\"line\">    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)</span><br><span class=\"line\">    at Function.Module._load (internal/modules/cjs/loader.js:585:3)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"直接删除整个node-modules文件夹-重新执行npm-install解决-我猜测是node模块构建问题\"><a href=\"#直接删除整个node-modules文件夹-重新执行npm-install解决-我猜测是node模块构建问题\" class=\"headerlink\" title=\"直接删除整个node_modules文件夹,重新执行npm install解决,我猜测是node模块构建问题\"></a>直接删除整个<code>node_modules</code>文件夹,重新执行<code>npm install</code>解决,我猜测是node模块构建问题</h2><p>如果切换环境调用github api, token需要重新生成, 请注意</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>切换到Gitalk后，存在一个问题，就是issue需要我人工干预去创建，没法自动。 </p>\n<p>所以这时候就需要借助Github API的力量，编写一个脚本自动创建文章对应的issue。</p>\n<p>我想这种需求应该有人比我早需要，所以搜索了下，确实由人用nodejs写了一个脚本实现了，勉强能用，我也在上面稍微改动了下符合我自己的情况，下面贴个原文地址：<br><a href=\"https://daihaoxin.github.io/post/322747ae.html\" target=\"_blank\" rel=\"noopener\">https://daihaoxin.github.io/post/322747ae.html</a></p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>不过原文遗漏了一个配置点， 就是要把站点_config.yml中url属性配置成自己域名，默认的<a href=\"http://yoursite.com\" target=\"_blank\" rel=\"noopener\">http://yoursite.com</a></p>\n<p>会导致生成的sitemap.xml中的都是这个域名开头的，导致生成的所有issue都是不匹配的。</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>还有一个问题是，label不能超过50个字符，所以要md5下</p>\n<h1 id=\"4-最终代码\"><a href=\"#4-最终代码\" class=\"headerlink\" title=\"4 最终代码\"></a>4 最终代码</h1><p>comment.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> xmlParser = <span class=\"built_in\">require</span>(<span class=\"string\">\"xml-parser\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> YAML = <span class=\"built_in\">require</span>(<span class=\"string\">\"yamljs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">\"cheerio\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"md5\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 根据自己的情况进行配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    username: <span class=\"string\">\"zazaluMonster\"</span>, <span class=\"comment\">// GitHub 用户名</span></span><br><span class=\"line\">    token: <span class=\"string\">\"d234d6a7234f3b547975f59c81adc879353189ac\"</span>,  <span class=\"comment\">// GitHub Token</span></span><br><span class=\"line\">    repo: <span class=\"string\">\"zazaluMonster.github.io\"</span>,  <span class=\"comment\">// 存放 issues的git仓库</span></span><br><span class=\"line\">    <span class=\"comment\">// sitemap.xml的路径，commit.js放置在根目录下，无需修改，其他情况自行处理</span></span><br><span class=\"line\">    sitemapUrl: path.resolve(__dirname, <span class=\"string\">\"./public/sitemap.xml\"</span>),</span><br><span class=\"line\">    kind: <span class=\"string\">\"Gitalk\"</span>,  <span class=\"comment\">// \"Gitalk\" or \"Gitment\"，</span></span><br><span class=\"line\">    baseUrl: <span class=\"string\">\"https://zazalu.space/\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> issuesUrl = <span class=\"string\">`https://api.github.com/repos/<span class=\"subst\">$&#123;config.username&#125;</span>/<span class=\"subst\">$&#123;config.repo&#125;</span>/issues?access_token=<span class=\"subst\">$&#123;config.token&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> requestGetOpt = &#123;</span><br><span class=\"line\">    url: <span class=\"string\">`<span class=\"subst\">$&#123;issuesUrl&#125;</span>&amp;page=1&amp;per_page=1000`</span>,</span><br><span class=\"line\">    json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"User-Agent\"</span>: <span class=\"string\">\"github-user\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> requestPostOpt = &#123;</span><br><span class=\"line\">    ...requestGetOpt,</span><br><span class=\"line\">    url:issuesUrl,</span><br><span class=\"line\">    method: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">    form: <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始初始化评论...\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始检索链接，请稍等...\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> websiteConfig = YAML.parse(fs.readFileSync(path.resolve(__dirname, <span class=\"string\">\"./_config.yml\"</span>), <span class=\"string\">\"utf8\"</span>));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> urls = sitemapXmlReader(config.sitemapUrl);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`共检索到<span class=\"subst\">$&#123;urls.length&#125;</span>个链接`</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始获取已经初始化的issues:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> issues = <span class=\"keyword\">await</span> send(requestGetOpt);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`已经存在<span class=\"subst\">$&#123;issues.length&#125;</span>个issues`</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">let</span> notInitIssueLinks = urls.filter(<span class=\"function\">(<span class=\"params\">link</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !issues.find(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                link = removeProtocol(link);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> item.body.includes(link);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notInitIssueLinks.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`本次有<span class=\"subst\">$&#123;notInitIssueLinks.length&#125;</span>个链接需要初始化issue：`</span>);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(notInitIssueLinks);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开始提交初始化请求, 大约需要40秒...\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 部署好网站后，直接执行start，新增文章并不会生成评论</span></span><br><span class=\"line\"><span class=\"comment\">             * 经测试，最少需要等待40秒，才可以正确生成， 怀疑跟github的api有关系，没有找到实锤</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            setTimeout(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> initRet = <span class=\"keyword\">await</span> notInitIssueLinks.map(<span class=\"keyword\">async</span> (item) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> html = <span class=\"keyword\">await</span> send(&#123; ...requestGetOpt, <span class=\"attr\">url</span>: item &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> title = cheerio.load(html)(<span class=\"string\">\"title\"</span>).text();</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> pathLabel = url.parse(item).path;</span><br><span class=\"line\">                    pathLabel = md5(config.baseUrl + pathLabel);<span class=\"comment\">//中文过长所以要md5</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> body = <span class=\"string\">`<span class=\"subst\">$&#123;item&#125;</span>&lt;br&gt;&lt;br&gt;<span class=\"subst\">$&#123;websiteConfig.description&#125;</span>`</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> form = <span class=\"built_in\">JSON</span>.stringify(&#123; body, <span class=\"attr\">labels</span>: [config.kind, pathLabel], title &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> send(&#123; ...requestPostOpt, form &#125;);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`已完成<span class=\"subst\">$&#123;initRet.length&#125;</span>个！`</span>);</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以愉快的发表评论了！\"</span>);</span><br><span class=\"line\">            &#125;,<span class=\"number\">40000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"本次发布无新增页面，无需初始化issue!!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`初始化issue出错，错误如下：`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sitemapXmlReader</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = fs.readFileSync(file, <span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sitemap = xmlParser(data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sitemap.root.children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> loc = url.children.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.name === <span class=\"string\">\"loc\"</span>;</span><br><span class=\"line\">        &#125;)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loc.content;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeProtocol</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url.substr(url.indexOf(<span class=\"string\">\":\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        request(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!error) &#123;</span><br><span class=\"line\">                resolve(body);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                reject(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-操作步骤\"><a href=\"#5-操作步骤\" class=\"headerlink\" title=\"5 操作步骤\"></a>5 操作步骤</h1><p>每次<code>hexo d</code>后执行<code>node ./comment.js</code>即可,不过不要觉得他们的执行顺序由强约束，其实你可以随时执行<code>node ./comment.js</code>，两者没有必要关联，只不过每次你hexo d后，肯定会新增的文章需要生成评论，所以调用一次</p>\n<h1 id=\"6-后续发生的问题总结\"><a href=\"#6-后续发生的问题总结\" class=\"headerlink\" title=\"6 后续发生的问题总结\"></a>6 后续发生的问题总结</h1><p>当执行node ./comment.js出现如下问题时,<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">internal/modules/cjs/loader.js:638</span><br><span class=\"line\">    throw err;</span><br><span class=\"line\">    ^</span><br><span class=\"line\"></span><br><span class=\"line\">Error: Cannot find module './options'</span><br><span class=\"line\">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)</span><br><span class=\"line\">    at Function.Module._load (internal/modules/cjs/loader.js:562:25)</span><br><span class=\"line\">    at Module.require (internal/modules/cjs/loader.js:692:17)</span><br><span class=\"line\">    at require (internal/modules/cjs/helpers.js:25:18)</span><br><span class=\"line\">    at Object.&lt;anonymous&gt; (/home/zazalu/blog/zazaluMonster.github.io/node_modules/cheerio/lib/cheerio.js:6:22)</span><br><span class=\"line\">    at Module._compile (internal/modules/cjs/loader.js:778:30)</span><br><span class=\"line\">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)</span><br><span class=\"line\">    at Module.load (internal/modules/cjs/loader.js:653:32)</span><br><span class=\"line\">    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)</span><br><span class=\"line\">    at Function.Module._load (internal/modules/cjs/loader.js:585:3)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"直接删除整个node-modules文件夹-重新执行npm-install解决-我猜测是node模块构建问题\"><a href=\"#直接删除整个node-modules文件夹-重新执行npm-install解决-我猜测是node模块构建问题\" class=\"headerlink\" title=\"直接删除整个node_modules文件夹,重新执行npm install解决,我猜测是node模块构建问题\"></a>直接删除整个<code>node_modules</code>文件夹,重新执行<code>npm install</code>解决,我猜测是node模块构建问题</h2><p>如果切换环境调用github api, token需要重新生成, 请注意</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"我是个经常笑的人,但我不是一个经常开心的人","date":"2019-09-04T13:54:44.000Z","_content":"\n本文是我不成熟的偏见, 毫无营养, 建议别看\n\n# 文化社会正在慢慢形成稳固\n\n唯一值得肯定的是, 中国人的表面素质在稳定上升的, 这多半和九年义务教育脱不了关系\n\n现在中国社会的青年整体基本都已经是有文化的人了\n\n就算是没文化的人, 也会被慢慢同化, 受到大部分有文化人的影响, 也会慢慢的表现出文化人的样子, 文质彬彬, 说话礼貌\n\n中国社会正在稳步的往高素质社会发展\n\n# 猪社会正在慢慢渗透\n\n唯一值得担心的是, 九年义务教育导致社会上的所有平凡人, 会活的像同一个板子里印出来的一样的生活, 所有处事习惯, 经历几乎相似, 说的难听一点就是, 大家都活的像个猪, 被国家精心安排好了所有的路程.\n\n# 自媒体, 社交网络导致的[评论信息爆炸]\n\n由于大家都用得上手机, 用得上网的当下, 导致了如今[评论信息爆炸]的现象, 成为了舆论的核心地\n\n表面看上去体现了言语自由权, 但是当下我却感觉过于自由而常常觉得需要进行政府管理\n","source":"_posts/always-smail-but-not-always-happy.md","raw":"---\ntitle: 我是个经常笑的人,但我不是一个经常开心的人\ntags: 随笔\ncategories: 生活\ndate: 2019-09-04 21:54:44\n---\n\n本文是我不成熟的偏见, 毫无营养, 建议别看\n\n# 文化社会正在慢慢形成稳固\n\n唯一值得肯定的是, 中国人的表面素质在稳定上升的, 这多半和九年义务教育脱不了关系\n\n现在中国社会的青年整体基本都已经是有文化的人了\n\n就算是没文化的人, 也会被慢慢同化, 受到大部分有文化人的影响, 也会慢慢的表现出文化人的样子, 文质彬彬, 说话礼貌\n\n中国社会正在稳步的往高素质社会发展\n\n# 猪社会正在慢慢渗透\n\n唯一值得担心的是, 九年义务教育导致社会上的所有平凡人, 会活的像同一个板子里印出来的一样的生活, 所有处事习惯, 经历几乎相似, 说的难听一点就是, 大家都活的像个猪, 被国家精心安排好了所有的路程.\n\n# 自媒体, 社交网络导致的[评论信息爆炸]\n\n由于大家都用得上手机, 用得上网的当下, 导致了如今[评论信息爆炸]的现象, 成为了舆论的核心地\n\n表面看上去体现了言语自由权, 但是当下我却感觉过于自由而常常觉得需要进行政府管理\n","slug":"always-smail-but-not-always-happy","published":1,"updated":"2019-09-04T14:26:01.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t2000rm6elzhqo1a95","content":"<p>本文是我不成熟的偏见, 毫无营养, 建议别看</p>\n<h1 id=\"文化社会正在慢慢形成稳固\"><a href=\"#文化社会正在慢慢形成稳固\" class=\"headerlink\" title=\"文化社会正在慢慢形成稳固\"></a>文化社会正在慢慢形成稳固</h1><p>唯一值得肯定的是, 中国人的表面素质在稳定上升的, 这多半和九年义务教育脱不了关系</p>\n<p>现在中国社会的青年整体基本都已经是有文化的人了</p>\n<p>就算是没文化的人, 也会被慢慢同化, 受到大部分有文化人的影响, 也会慢慢的表现出文化人的样子, 文质彬彬, 说话礼貌</p>\n<p>中国社会正在稳步的往高素质社会发展</p>\n<h1 id=\"猪社会正在慢慢渗透\"><a href=\"#猪社会正在慢慢渗透\" class=\"headerlink\" title=\"猪社会正在慢慢渗透\"></a>猪社会正在慢慢渗透</h1><p>唯一值得担心的是, 九年义务教育导致社会上的所有平凡人, 会活的像同一个板子里印出来的一样的生活, 所有处事习惯, 经历几乎相似, 说的难听一点就是, 大家都活的像个猪, 被国家精心安排好了所有的路程.</p>\n<h1 id=\"自媒体-社交网络导致的-评论信息爆炸\"><a href=\"#自媒体-社交网络导致的-评论信息爆炸\" class=\"headerlink\" title=\"自媒体, 社交网络导致的[评论信息爆炸]\"></a>自媒体, 社交网络导致的[评论信息爆炸]</h1><p>由于大家都用得上手机, 用得上网的当下, 导致了如今[评论信息爆炸]的现象, 成为了舆论的核心地</p>\n<p>表面看上去体现了言语自由权, 但是当下我却感觉过于自由而常常觉得需要进行政府管理</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文是我不成熟的偏见, 毫无营养, 建议别看</p>\n<h1 id=\"文化社会正在慢慢形成稳固\"><a href=\"#文化社会正在慢慢形成稳固\" class=\"headerlink\" title=\"文化社会正在慢慢形成稳固\"></a>文化社会正在慢慢形成稳固</h1><p>唯一值得肯定的是, 中国人的表面素质在稳定上升的, 这多半和九年义务教育脱不了关系</p>\n<p>现在中国社会的青年整体基本都已经是有文化的人了</p>\n<p>就算是没文化的人, 也会被慢慢同化, 受到大部分有文化人的影响, 也会慢慢的表现出文化人的样子, 文质彬彬, 说话礼貌</p>\n<p>中国社会正在稳步的往高素质社会发展</p>\n<h1 id=\"猪社会正在慢慢渗透\"><a href=\"#猪社会正在慢慢渗透\" class=\"headerlink\" title=\"猪社会正在慢慢渗透\"></a>猪社会正在慢慢渗透</h1><p>唯一值得担心的是, 九年义务教育导致社会上的所有平凡人, 会活的像同一个板子里印出来的一样的生活, 所有处事习惯, 经历几乎相似, 说的难听一点就是, 大家都活的像个猪, 被国家精心安排好了所有的路程.</p>\n<h1 id=\"自媒体-社交网络导致的-评论信息爆炸\"><a href=\"#自媒体-社交网络导致的-评论信息爆炸\" class=\"headerlink\" title=\"自媒体, 社交网络导致的[评论信息爆炸]\"></a>自媒体, 社交网络导致的[评论信息爆炸]</h1><p>由于大家都用得上手机, 用得上网的当下, 导致了如今[评论信息爆炸]的现象, 成为了舆论的核心地</p>\n<p>表面看上去体现了言语自由权, 但是当下我却感觉过于自由而常常觉得需要进行政府管理</p>\n"},{"title":"数据库中的时区转换","date":"2019-07-12T09:53:10.000Z","_content":"\n# 1\n\n在我接触过的项目中，存储时间基本都是使用变长字符串按照`yyyyMMdd`等类似格式存储的，而不是使用`datatime`或者`timestamp`这些数据库提供的时间类型进行存储\n\n这样使用有好有坏，根据项目情况选择使用。\n\n# 2\n我长期维护的项目都是采用前者，也就是存储字符串`yyyyMMdd`。\n\n所以最近遇到一个用了`timestamp`存储创建时间的情况，在我自己电脑的测试环境下进行单元测试的时候，我发现每次我存储的时间都会存在10多个小时的时差。 当时由于几乎没遇到过这种情况，所以我没想到原理上出了什么问题。后来才得知是`timestamp`会做时区转换。\n\n# 为什么要做时区转换？\n\n因为人家存的是一个时间戳(long)，显示的时候为了好看点，就按照默认时区做了转换。如果默认时区和你所在时区不一致，转换就出问题，导致每次都有时差\n\n# 怎么纠正这种坑\n\n很简单，修改数据库的默认时区即可。网上攻略很多，不谈了。我们要知道原理是因为时区的即可。\n\n\n","source":"_posts/database-timestamp-timezone-notice.md","raw":"---\ntitle: 数据库中的时区转换\ntags: 时区\ncategories: 计算机\ndate: 2019-07-12 17:53:10\n---\n\n# 1\n\n在我接触过的项目中，存储时间基本都是使用变长字符串按照`yyyyMMdd`等类似格式存储的，而不是使用`datatime`或者`timestamp`这些数据库提供的时间类型进行存储\n\n这样使用有好有坏，根据项目情况选择使用。\n\n# 2\n我长期维护的项目都是采用前者，也就是存储字符串`yyyyMMdd`。\n\n所以最近遇到一个用了`timestamp`存储创建时间的情况，在我自己电脑的测试环境下进行单元测试的时候，我发现每次我存储的时间都会存在10多个小时的时差。 当时由于几乎没遇到过这种情况，所以我没想到原理上出了什么问题。后来才得知是`timestamp`会做时区转换。\n\n# 为什么要做时区转换？\n\n因为人家存的是一个时间戳(long)，显示的时候为了好看点，就按照默认时区做了转换。如果默认时区和你所在时区不一致，转换就出问题，导致每次都有时差\n\n# 怎么纠正这种坑\n\n很简单，修改数据库的默认时区即可。网上攻略很多，不谈了。我们要知道原理是因为时区的即可。\n\n\n","slug":"database-timestamp-timezone-notice","published":1,"updated":"2019-07-12T10:05:23.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t3000um6eln2yp788m","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>在我接触过的项目中，存储时间基本都是使用变长字符串按照<code>yyyyMMdd</code>等类似格式存储的，而不是使用<code>datatime</code>或者<code>timestamp</code>这些数据库提供的时间类型进行存储</p>\n<p>这样使用有好有坏，根据项目情况选择使用。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>我长期维护的项目都是采用前者，也就是存储字符串<code>yyyyMMdd</code>。</p>\n<p>所以最近遇到一个用了<code>timestamp</code>存储创建时间的情况，在我自己电脑的测试环境下进行单元测试的时候，我发现每次我存储的时间都会存在10多个小时的时差。 当时由于几乎没遇到过这种情况，所以我没想到原理上出了什么问题。后来才得知是<code>timestamp</code>会做时区转换。</p>\n<h1 id=\"为什么要做时区转换？\"><a href=\"#为什么要做时区转换？\" class=\"headerlink\" title=\"为什么要做时区转换？\"></a>为什么要做时区转换？</h1><p>因为人家存的是一个时间戳(long)，显示的时候为了好看点，就按照默认时区做了转换。如果默认时区和你所在时区不一致，转换就出问题，导致每次都有时差</p>\n<h1 id=\"怎么纠正这种坑\"><a href=\"#怎么纠正这种坑\" class=\"headerlink\" title=\"怎么纠正这种坑\"></a>怎么纠正这种坑</h1><p>很简单，修改数据库的默认时区即可。网上攻略很多，不谈了。我们要知道原理是因为时区的即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>在我接触过的项目中，存储时间基本都是使用变长字符串按照<code>yyyyMMdd</code>等类似格式存储的，而不是使用<code>datatime</code>或者<code>timestamp</code>这些数据库提供的时间类型进行存储</p>\n<p>这样使用有好有坏，根据项目情况选择使用。</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>我长期维护的项目都是采用前者，也就是存储字符串<code>yyyyMMdd</code>。</p>\n<p>所以最近遇到一个用了<code>timestamp</code>存储创建时间的情况，在我自己电脑的测试环境下进行单元测试的时候，我发现每次我存储的时间都会存在10多个小时的时差。 当时由于几乎没遇到过这种情况，所以我没想到原理上出了什么问题。后来才得知是<code>timestamp</code>会做时区转换。</p>\n<h1 id=\"为什么要做时区转换？\"><a href=\"#为什么要做时区转换？\" class=\"headerlink\" title=\"为什么要做时区转换？\"></a>为什么要做时区转换？</h1><p>因为人家存的是一个时间戳(long)，显示的时候为了好看点，就按照默认时区做了转换。如果默认时区和你所在时区不一致，转换就出问题，导致每次都有时差</p>\n<h1 id=\"怎么纠正这种坑\"><a href=\"#怎么纠正这种坑\" class=\"headerlink\" title=\"怎么纠正这种坑\"></a>怎么纠正这种坑</h1><p>很简单，修改数据库的默认时区即可。网上攻略很多，不谈了。我们要知道原理是因为时区的即可。</p>\n"},{"title":"hexo博客“安全”备份浅谈","date":"2019-05-02T08:58:31.000Z","_content":"\n前几天我写了一些自己的hexo博客备份与多环境同时使用的文章，里头记录了自己如何对自己的hexo博客进行备份的。但是我并不是一开始就喜欢备份这玩意，因为毕竟只是一个小小的博客，我个人没有意识到需要进行备份。但是后来自己换了个人电脑后，才亲身感受到备份的重要性，随后我就开始专门弄了一套完整的备份方案，该方案大部分学习借鉴了网上的大部分说法，然后实战过程中结合了自己的一些习惯，免去了一些我觉得暂时不太必要的操作，最终现在这套备份方案已经在成功的运行。最显著的成效就是你现在看到的这篇文章就是在我ubuntu电脑上写的，而前几天的文章是在macpro上写的文章！ 两者切换非常轻松便利解放双手。\n\n但是昨晚睡觉后我就开始思考这个备份的安全性。\n\n## 1\n\n由于我的hexo本地数据目前全部备份在一个公有的git库，扔在github上，所以对外来说，我的hexo博客整体都在上面，如果有人要整体copy，那也是一个fork和clone的事情。想到这里后我突然有一点点毛骨悚然，又有点觉得自己过于多虑。毛骨悚然是因为感受到了开源的可怕，会用的人一拿走你的所有代码，就可以完完全全copy你的博客所有内容。过于多虑是因为，我的博客没人看，目前来说考虑这个问题是杞人忧天。\n\n## 2\n\n所以今天我就只是浅谈下，粗略写一下如何“安全”备份hexo博客个人数据\n\n我的选择其实很狭窄，在我目前的可知知识看来，我有一般以下几点\n1. 个人硬盘存储\n2. 保存到github的private git库\n3. 使用云盘存储\n\n从灵活性来说，最好的就是切换到github的private git库，况且现在一个人的私有库已经不收费了，真的没有什么理由不用它\n\n但是有个问题是，在hexo博客的搭建教程里，所有库都是公有库，hexo是利用了github pages中的User pages来展示内容。那么如果转成private库，是否可以正常使用这个github pages的功能呢？我从github help上找到了一些答案，\n\n>GitHub Pages sites are always publicly accessible when published, even if their repository is private, \n\n然后我就信了这句英文，事实上他确实没错！\n\n但是当我把我的repo转成private后，我发现我的github pages自动关闭了，然后我选择重新开启，发现弹出付款页面。\n\n后来才得知如果私有库也要同时使用github pages的话，是从Github Free转到了Github Pro，而后者是要付钱的。 \n\n## 3\n\n从第2点可知，想白嫖走github这一条路是不行的，所以我后续要去看看有没有其他好用的git库给我用用！此文章后续会做更新","source":"_posts/hexo博客备份浅谈.md","raw":"---\ntitle: hexo博客“安全”备份浅谈\ntags: hexo\ncategories: IT\ndate: 2019-05-02 16:58:31\n---\n\n前几天我写了一些自己的hexo博客备份与多环境同时使用的文章，里头记录了自己如何对自己的hexo博客进行备份的。但是我并不是一开始就喜欢备份这玩意，因为毕竟只是一个小小的博客，我个人没有意识到需要进行备份。但是后来自己换了个人电脑后，才亲身感受到备份的重要性，随后我就开始专门弄了一套完整的备份方案，该方案大部分学习借鉴了网上的大部分说法，然后实战过程中结合了自己的一些习惯，免去了一些我觉得暂时不太必要的操作，最终现在这套备份方案已经在成功的运行。最显著的成效就是你现在看到的这篇文章就是在我ubuntu电脑上写的，而前几天的文章是在macpro上写的文章！ 两者切换非常轻松便利解放双手。\n\n但是昨晚睡觉后我就开始思考这个备份的安全性。\n\n## 1\n\n由于我的hexo本地数据目前全部备份在一个公有的git库，扔在github上，所以对外来说，我的hexo博客整体都在上面，如果有人要整体copy，那也是一个fork和clone的事情。想到这里后我突然有一点点毛骨悚然，又有点觉得自己过于多虑。毛骨悚然是因为感受到了开源的可怕，会用的人一拿走你的所有代码，就可以完完全全copy你的博客所有内容。过于多虑是因为，我的博客没人看，目前来说考虑这个问题是杞人忧天。\n\n## 2\n\n所以今天我就只是浅谈下，粗略写一下如何“安全”备份hexo博客个人数据\n\n我的选择其实很狭窄，在我目前的可知知识看来，我有一般以下几点\n1. 个人硬盘存储\n2. 保存到github的private git库\n3. 使用云盘存储\n\n从灵活性来说，最好的就是切换到github的private git库，况且现在一个人的私有库已经不收费了，真的没有什么理由不用它\n\n但是有个问题是，在hexo博客的搭建教程里，所有库都是公有库，hexo是利用了github pages中的User pages来展示内容。那么如果转成private库，是否可以正常使用这个github pages的功能呢？我从github help上找到了一些答案，\n\n>GitHub Pages sites are always publicly accessible when published, even if their repository is private, \n\n然后我就信了这句英文，事实上他确实没错！\n\n但是当我把我的repo转成private后，我发现我的github pages自动关闭了，然后我选择重新开启，发现弹出付款页面。\n\n后来才得知如果私有库也要同时使用github pages的话，是从Github Free转到了Github Pro，而后者是要付钱的。 \n\n## 3\n\n从第2点可知，想白嫖走github这一条路是不行的，所以我后续要去看看有没有其他好用的git库给我用用！此文章后续会做更新","slug":"hexo博客备份浅谈","published":1,"updated":"2019-05-03T01:51:15.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t4000zm6el67c2zftr","content":"<p>前几天我写了一些自己的hexo博客备份与多环境同时使用的文章，里头记录了自己如何对自己的hexo博客进行备份的。但是我并不是一开始就喜欢备份这玩意，因为毕竟只是一个小小的博客，我个人没有意识到需要进行备份。但是后来自己换了个人电脑后，才亲身感受到备份的重要性，随后我就开始专门弄了一套完整的备份方案，该方案大部分学习借鉴了网上的大部分说法，然后实战过程中结合了自己的一些习惯，免去了一些我觉得暂时不太必要的操作，最终现在这套备份方案已经在成功的运行。最显著的成效就是你现在看到的这篇文章就是在我ubuntu电脑上写的，而前几天的文章是在macpro上写的文章！ 两者切换非常轻松便利解放双手。</p>\n<p>但是昨晚睡觉后我就开始思考这个备份的安全性。</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>由于我的hexo本地数据目前全部备份在一个公有的git库，扔在github上，所以对外来说，我的hexo博客整体都在上面，如果有人要整体copy，那也是一个fork和clone的事情。想到这里后我突然有一点点毛骨悚然，又有点觉得自己过于多虑。毛骨悚然是因为感受到了开源的可怕，会用的人一拿走你的所有代码，就可以完完全全copy你的博客所有内容。过于多虑是因为，我的博客没人看，目前来说考虑这个问题是杞人忧天。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>所以今天我就只是浅谈下，粗略写一下如何“安全”备份hexo博客个人数据</p>\n<p>我的选择其实很狭窄，在我目前的可知知识看来，我有一般以下几点</p>\n<ol>\n<li>个人硬盘存储</li>\n<li>保存到github的private git库</li>\n<li>使用云盘存储</li>\n</ol>\n<p>从灵活性来说，最好的就是切换到github的private git库，况且现在一个人的私有库已经不收费了，真的没有什么理由不用它</p>\n<p>但是有个问题是，在hexo博客的搭建教程里，所有库都是公有库，hexo是利用了github pages中的User pages来展示内容。那么如果转成private库，是否可以正常使用这个github pages的功能呢？我从github help上找到了一些答案，</p>\n<blockquote>\n<p>GitHub Pages sites are always publicly accessible when published, even if their repository is private, </p>\n</blockquote>\n<p>然后我就信了这句英文，事实上他确实没错！</p>\n<p>但是当我把我的repo转成private后，我发现我的github pages自动关闭了，然后我选择重新开启，发现弹出付款页面。</p>\n<p>后来才得知如果私有库也要同时使用github pages的话，是从Github Free转到了Github Pro，而后者是要付钱的。 </p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>从第2点可知，想白嫖走github这一条路是不行的，所以我后续要去看看有没有其他好用的git库给我用用！此文章后续会做更新</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天我写了一些自己的hexo博客备份与多环境同时使用的文章，里头记录了自己如何对自己的hexo博客进行备份的。但是我并不是一开始就喜欢备份这玩意，因为毕竟只是一个小小的博客，我个人没有意识到需要进行备份。但是后来自己换了个人电脑后，才亲身感受到备份的重要性，随后我就开始专门弄了一套完整的备份方案，该方案大部分学习借鉴了网上的大部分说法，然后实战过程中结合了自己的一些习惯，免去了一些我觉得暂时不太必要的操作，最终现在这套备份方案已经在成功的运行。最显著的成效就是你现在看到的这篇文章就是在我ubuntu电脑上写的，而前几天的文章是在macpro上写的文章！ 两者切换非常轻松便利解放双手。</p>\n<p>但是昨晚睡觉后我就开始思考这个备份的安全性。</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>由于我的hexo本地数据目前全部备份在一个公有的git库，扔在github上，所以对外来说，我的hexo博客整体都在上面，如果有人要整体copy，那也是一个fork和clone的事情。想到这里后我突然有一点点毛骨悚然，又有点觉得自己过于多虑。毛骨悚然是因为感受到了开源的可怕，会用的人一拿走你的所有代码，就可以完完全全copy你的博客所有内容。过于多虑是因为，我的博客没人看，目前来说考虑这个问题是杞人忧天。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>所以今天我就只是浅谈下，粗略写一下如何“安全”备份hexo博客个人数据</p>\n<p>我的选择其实很狭窄，在我目前的可知知识看来，我有一般以下几点</p>\n<ol>\n<li>个人硬盘存储</li>\n<li>保存到github的private git库</li>\n<li>使用云盘存储</li>\n</ol>\n<p>从灵活性来说，最好的就是切换到github的private git库，况且现在一个人的私有库已经不收费了，真的没有什么理由不用它</p>\n<p>但是有个问题是，在hexo博客的搭建教程里，所有库都是公有库，hexo是利用了github pages中的User pages来展示内容。那么如果转成private库，是否可以正常使用这个github pages的功能呢？我从github help上找到了一些答案，</p>\n<blockquote>\n<p>GitHub Pages sites are always publicly accessible when published, even if their repository is private, </p>\n</blockquote>\n<p>然后我就信了这句英文，事实上他确实没错！</p>\n<p>但是当我把我的repo转成private后，我发现我的github pages自动关闭了，然后我选择重新开启，发现弹出付款页面。</p>\n<p>后来才得知如果私有库也要同时使用github pages的话，是从Github Free转到了Github Pro，而后者是要付钱的。 </p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>从第2点可知，想白嫖走github这一条路是不行的，所以我后续要去看看有没有其他好用的git库给我用用！此文章后续会做更新</p>\n"},{"title":"hexo next主题自定义css格式切换","date":"2019-04-24T06:15:52.000Z","_content":"\n当我每次想要进行自己的hexo next博客的外观变更的时候,每次都需要去修改配置文件,会非常的麻烦,而且容易忘记.所以自己稍微研究了下,做了一些bat批处理文件,用于控制博客的页面外观(css)的自动转换.比如新年的时候,就切换到新年的配置文件.\n\n本文档主要就是简单记录下,防止自己未来忘记了,强烈建议其他阅读者不要读此文档，大概率你看不懂写的什么东西\n\n>适用版本\nhexo版本：3.3.9\nnexT版本: 5.0.0\n可能最新的版本不符合本文档的描述，若你使用的是别的主题，使用举一反三的思考方式，其实也是类似的\n\n## hexo-nexT主题自定义css配置文件\n\nnexT主题自定义css配置文件路径: `themes\\next\\source\\css\\_custom\\custom.styl`\n\n修改custom.styl中文件内容 重新部署hexo后即可看到修改后的css效果.\n\n## 创建css格式切换临时文件夹\n\n在themes\\next\\source\\css\\_custom下 可以自行创建一个css格式切换文件夹\n\n比如我创建的就是\n`themes\\next\\source\\css\\_custom\\themes`\n\n目前我在其中放置了两个版本的css配置文件\n\n`custom_new_year.styl`\n`custom_normal.styl`\n分别对应新年版本css配置文件和普通版本的css配置文件\n\n## 创建bat批处理文件\n\n使用批处理文件 其功能是可以将custom_*.styl文件移动到`themes\\next\\source\\css\\_custom`\n下并且重命名为custoom.styl即可\n这个批处理文件就是将css切换为新年模式的一个很简单的bat脚本.\n\n\n\n\n","source":"_posts/hexo-next主题自定义css格式切换.md","raw":"---\ntitle: hexo next主题自定义css格式切换\ntags: hexo\ncategories: IT\ndate: 2019-04-24 14:15:52\n---\n\n当我每次想要进行自己的hexo next博客的外观变更的时候,每次都需要去修改配置文件,会非常的麻烦,而且容易忘记.所以自己稍微研究了下,做了一些bat批处理文件,用于控制博客的页面外观(css)的自动转换.比如新年的时候,就切换到新年的配置文件.\n\n本文档主要就是简单记录下,防止自己未来忘记了,强烈建议其他阅读者不要读此文档，大概率你看不懂写的什么东西\n\n>适用版本\nhexo版本：3.3.9\nnexT版本: 5.0.0\n可能最新的版本不符合本文档的描述，若你使用的是别的主题，使用举一反三的思考方式，其实也是类似的\n\n## hexo-nexT主题自定义css配置文件\n\nnexT主题自定义css配置文件路径: `themes\\next\\source\\css\\_custom\\custom.styl`\n\n修改custom.styl中文件内容 重新部署hexo后即可看到修改后的css效果.\n\n## 创建css格式切换临时文件夹\n\n在themes\\next\\source\\css\\_custom下 可以自行创建一个css格式切换文件夹\n\n比如我创建的就是\n`themes\\next\\source\\css\\_custom\\themes`\n\n目前我在其中放置了两个版本的css配置文件\n\n`custom_new_year.styl`\n`custom_normal.styl`\n分别对应新年版本css配置文件和普通版本的css配置文件\n\n## 创建bat批处理文件\n\n使用批处理文件 其功能是可以将custom_*.styl文件移动到`themes\\next\\source\\css\\_custom`\n下并且重命名为custoom.styl即可\n这个批处理文件就是将css切换为新年模式的一个很简单的bat脚本.\n\n\n\n\n","slug":"hexo-next主题自定义css格式切换","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t50012m6elm8hv3km4","content":"<p>当我每次想要进行自己的hexo next博客的外观变更的时候,每次都需要去修改配置文件,会非常的麻烦,而且容易忘记.所以自己稍微研究了下,做了一些bat批处理文件,用于控制博客的页面外观(css)的自动转换.比如新年的时候,就切换到新年的配置文件.</p>\n<p>本文档主要就是简单记录下,防止自己未来忘记了,强烈建议其他阅读者不要读此文档，大概率你看不懂写的什么东西</p>\n<blockquote>\n<p>适用版本<br>hexo版本：3.3.9<br>nexT版本: 5.0.0<br>可能最新的版本不符合本文档的描述，若你使用的是别的主题，使用举一反三的思考方式，其实也是类似的</p>\n</blockquote>\n<h2 id=\"hexo-nexT主题自定义css配置文件\"><a href=\"#hexo-nexT主题自定义css配置文件\" class=\"headerlink\" title=\"hexo-nexT主题自定义css配置文件\"></a>hexo-nexT主题自定义css配置文件</h2><p>nexT主题自定义css配置文件路径: <code>themes\\next\\source\\css\\_custom\\custom.styl</code></p>\n<p>修改custom.styl中文件内容 重新部署hexo后即可看到修改后的css效果.</p>\n<h2 id=\"创建css格式切换临时文件夹\"><a href=\"#创建css格式切换临时文件夹\" class=\"headerlink\" title=\"创建css格式切换临时文件夹\"></a>创建css格式切换临时文件夹</h2><p>在themes\\next\\source\\css_custom下 可以自行创建一个css格式切换文件夹</p>\n<p>比如我创建的就是<br><code>themes\\next\\source\\css\\_custom\\themes</code></p>\n<p>目前我在其中放置了两个版本的css配置文件</p>\n<p><code>custom_new_year.styl</code><br><code>custom_normal.styl</code><br>分别对应新年版本css配置文件和普通版本的css配置文件</p>\n<h2 id=\"创建bat批处理文件\"><a href=\"#创建bat批处理文件\" class=\"headerlink\" title=\"创建bat批处理文件\"></a>创建bat批处理文件</h2><p>使用批处理文件 其功能是可以将custom_*.styl文件移动到<code>themes\\next\\source\\css\\_custom</code><br>下并且重命名为custoom.styl即可<br>这个批处理文件就是将css切换为新年模式的一个很简单的bat脚本.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当我每次想要进行自己的hexo next博客的外观变更的时候,每次都需要去修改配置文件,会非常的麻烦,而且容易忘记.所以自己稍微研究了下,做了一些bat批处理文件,用于控制博客的页面外观(css)的自动转换.比如新年的时候,就切换到新年的配置文件.</p>\n<p>本文档主要就是简单记录下,防止自己未来忘记了,强烈建议其他阅读者不要读此文档，大概率你看不懂写的什么东西</p>\n<blockquote>\n<p>适用版本<br>hexo版本：3.3.9<br>nexT版本: 5.0.0<br>可能最新的版本不符合本文档的描述，若你使用的是别的主题，使用举一反三的思考方式，其实也是类似的</p>\n</blockquote>\n<h2 id=\"hexo-nexT主题自定义css配置文件\"><a href=\"#hexo-nexT主题自定义css配置文件\" class=\"headerlink\" title=\"hexo-nexT主题自定义css配置文件\"></a>hexo-nexT主题自定义css配置文件</h2><p>nexT主题自定义css配置文件路径: <code>themes\\next\\source\\css\\_custom\\custom.styl</code></p>\n<p>修改custom.styl中文件内容 重新部署hexo后即可看到修改后的css效果.</p>\n<h2 id=\"创建css格式切换临时文件夹\"><a href=\"#创建css格式切换临时文件夹\" class=\"headerlink\" title=\"创建css格式切换临时文件夹\"></a>创建css格式切换临时文件夹</h2><p>在themes\\next\\source\\css_custom下 可以自行创建一个css格式切换文件夹</p>\n<p>比如我创建的就是<br><code>themes\\next\\source\\css\\_custom\\themes</code></p>\n<p>目前我在其中放置了两个版本的css配置文件</p>\n<p><code>custom_new_year.styl</code><br><code>custom_normal.styl</code><br>分别对应新年版本css配置文件和普通版本的css配置文件</p>\n<h2 id=\"创建bat批处理文件\"><a href=\"#创建bat批处理文件\" class=\"headerlink\" title=\"创建bat批处理文件\"></a>创建bat批处理文件</h2><p>使用批处理文件 其功能是可以将custom_*.styl文件移动到<code>themes\\next\\source\\css\\_custom</code><br>下并且重命名为custoom.styl即可<br>这个批处理文件就是将css切换为新年模式的一个很简单的bat脚本.</p>\n"},{"title":"hexo备份之路","date":"2019-04-25T03:21:26.000Z","_content":"\n\b\b\b前阵子，我的hexo博客丢失源文件，吃了没有备份的源文件的苦头，所以现在我的hexo博客已经加上了备份机制，使其更加健壮了，本文将记录如何方便的进行hexo备份\n\n适用hexo版本 4.x\n查阅此文档前，您必须保证您已经阅读完毕hexo的官方文档，并且已经实际操作过，不然阅读以下的文字会让你理解上有点困难\n\n## hexo备份步骤\n\n1. 在一个新的文件夹(A文件夹)内使用git去clone你的github上的远程hexo库(yourgitname.github.io)，完成后A文件夹内会出现一个clone后的git库文件夹(yourgitname.github.io),点击进入后，里面是hexo用于生成网页的文件结构，而非hexo本地源文件。\n\n2. 打开浏览器，进入自己的github，为自己的远程hexo库建立一个分支，最好名为hexo，并将其设为默认分支（方便我们后续提交）。随后我们需要在这个分支内创建一个.gitignore文件。因为新版本hexo在执行`hexo init`等一系列建站脚本后，会在本地已经为你创建了一个.gitignore文件了，其文件内容就是我们想要的，将其内容复制到刚刚我们新创建的.gitignore文件内并上传至hexo分支即可（如何创建分支自行百度）\n\n3. hexo分支准备完成后，我们就可以在我们cmd界面使用`git checkout  hexo`将分支切到hexo分支，然后将我们的hexo源文件复制到这里，复制完成后将这些文件一并上传至远程hexo分支即可。到此就完成了hexo备份。现在我们就可以在本地的hexo分支环境下直接写新文章，写完后上传hexo分支，最后使用`hexo d`，让hexo脚本自动将生成后的文件上传至master分支。最后github上的hexo库的2个分支就完美的呈现它们的价值了，hexo分支内可以看到我们的本地源文件，master分支上就保存着`hexo d`对应的那些文件用于直接排版我们的网页\n\n4. 以防万一，我们最好在本地也对我们的源文件进行归档备份\n\n## 后续每次写完新文章后需要执行的shell指令\n\n1. git add <newfile>\n2. git commit -m \"备份\"\n3. git push origin hexo\n4. hexo g\n5. hexo d\n\n## 加入gitee后的新增操作指令 2019.9.24\n\n我目前把自己的博客在gitee pages上也弄了一份，目的是为了借助下gitee在国内访问比较快的优点。\n\n所以现在要额外备份gitee的版本\n\n如果是新的机子,按顺序做如下操作即可\n\n1. 安装git和hexo\n2. git init  +  git remote add origin 'github repo url' + git remote add gitee 'gitee repo url'\n3. git pull origin hexo 把hexo文件全部拉取过来\n\n到这里为止我估计环境就ok了，那么每次写完新文章如果想顺便做备份的话，其shell指令就如下:\n\n1. git add <newfile>\n2. git commit -m \"backup\"\n3. - git push origin hexo\n   - git push gitee hexo\n4. hexo g\n5. hexo d\n6. node ./comment.js #用于自动化初始化gitalk的issue，不一定每次都要执行","source":"_posts/hexo备份之路.md","raw":"---\ntitle: hexo备份之路\ntags: hexo\ncategories: IT\ndate: 2019-04-25 11:21:26\n---\n\n\b\b\b前阵子，我的hexo博客丢失源文件，吃了没有备份的源文件的苦头，所以现在我的hexo博客已经加上了备份机制，使其更加健壮了，本文将记录如何方便的进行hexo备份\n\n适用hexo版本 4.x\n查阅此文档前，您必须保证您已经阅读完毕hexo的官方文档，并且已经实际操作过，不然阅读以下的文字会让你理解上有点困难\n\n## hexo备份步骤\n\n1. 在一个新的文件夹(A文件夹)内使用git去clone你的github上的远程hexo库(yourgitname.github.io)，完成后A文件夹内会出现一个clone后的git库文件夹(yourgitname.github.io),点击进入后，里面是hexo用于生成网页的文件结构，而非hexo本地源文件。\n\n2. 打开浏览器，进入自己的github，为自己的远程hexo库建立一个分支，最好名为hexo，并将其设为默认分支（方便我们后续提交）。随后我们需要在这个分支内创建一个.gitignore文件。因为新版本hexo在执行`hexo init`等一系列建站脚本后，会在本地已经为你创建了一个.gitignore文件了，其文件内容就是我们想要的，将其内容复制到刚刚我们新创建的.gitignore文件内并上传至hexo分支即可（如何创建分支自行百度）\n\n3. hexo分支准备完成后，我们就可以在我们cmd界面使用`git checkout  hexo`将分支切到hexo分支，然后将我们的hexo源文件复制到这里，复制完成后将这些文件一并上传至远程hexo分支即可。到此就完成了hexo备份。现在我们就可以在本地的hexo分支环境下直接写新文章，写完后上传hexo分支，最后使用`hexo d`，让hexo脚本自动将生成后的文件上传至master分支。最后github上的hexo库的2个分支就完美的呈现它们的价值了，hexo分支内可以看到我们的本地源文件，master分支上就保存着`hexo d`对应的那些文件用于直接排版我们的网页\n\n4. 以防万一，我们最好在本地也对我们的源文件进行归档备份\n\n## 后续每次写完新文章后需要执行的shell指令\n\n1. git add <newfile>\n2. git commit -m \"备份\"\n3. git push origin hexo\n4. hexo g\n5. hexo d\n\n## 加入gitee后的新增操作指令 2019.9.24\n\n我目前把自己的博客在gitee pages上也弄了一份，目的是为了借助下gitee在国内访问比较快的优点。\n\n所以现在要额外备份gitee的版本\n\n如果是新的机子,按顺序做如下操作即可\n\n1. 安装git和hexo\n2. git init  +  git remote add origin 'github repo url' + git remote add gitee 'gitee repo url'\n3. git pull origin hexo 把hexo文件全部拉取过来\n\n到这里为止我估计环境就ok了，那么每次写完新文章如果想顺便做备份的话，其shell指令就如下:\n\n1. git add <newfile>\n2. git commit -m \"backup\"\n3. - git push origin hexo\n   - git push gitee hexo\n4. hexo g\n5. hexo d\n6. node ./comment.js #用于自动化初始化gitalk的issue，不一定每次都要执行","slug":"hexo备份之路","published":1,"updated":"2019-09-25T03:25:21.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t60015m6ele7jo34j6","content":"<p>\b\b\b前阵子，我的hexo博客丢失源文件，吃了没有备份的源文件的苦头，所以现在我的hexo博客已经加上了备份机制，使其更加健壮了，本文将记录如何方便的进行hexo备份</p>\n<p>适用hexo版本 4.x<br>查阅此文档前，您必须保证您已经阅读完毕hexo的官方文档，并且已经实际操作过，不然阅读以下的文字会让你理解上有点困难</p>\n<h2 id=\"hexo备份步骤\"><a href=\"#hexo备份步骤\" class=\"headerlink\" title=\"hexo备份步骤\"></a>hexo备份步骤</h2><ol>\n<li><p>在一个新的文件夹(A文件夹)内使用git去clone你的github上的远程hexo库(yourgitname.github.io)，完成后A文件夹内会出现一个clone后的git库文件夹(yourgitname.github.io),点击进入后，里面是hexo用于生成网页的文件结构，而非hexo本地源文件。</p>\n</li>\n<li><p>打开浏览器，进入自己的github，为自己的远程hexo库建立一个分支，最好名为hexo，并将其设为默认分支（方便我们后续提交）。随后我们需要在这个分支内创建一个.gitignore文件。因为新版本hexo在执行<code>hexo init</code>等一系列建站脚本后，会在本地已经为你创建了一个.gitignore文件了，其文件内容就是我们想要的，将其内容复制到刚刚我们新创建的.gitignore文件内并上传至hexo分支即可（如何创建分支自行百度）</p>\n</li>\n<li><p>hexo分支准备完成后，我们就可以在我们cmd界面使用<code>git checkout  hexo</code>将分支切到hexo分支，然后将我们的hexo源文件复制到这里，复制完成后将这些文件一并上传至远程hexo分支即可。到此就完成了hexo备份。现在我们就可以在本地的hexo分支环境下直接写新文章，写完后上传hexo分支，最后使用<code>hexo d</code>，让hexo脚本自动将生成后的文件上传至master分支。最后github上的hexo库的2个分支就完美的呈现它们的价值了，hexo分支内可以看到我们的本地源文件，master分支上就保存着<code>hexo d</code>对应的那些文件用于直接排版我们的网页</p>\n</li>\n<li><p>以防万一，我们最好在本地也对我们的源文件进行归档备份</p>\n</li>\n</ol>\n<h2 id=\"后续每次写完新文章后需要执行的shell指令\"><a href=\"#后续每次写完新文章后需要执行的shell指令\" class=\"headerlink\" title=\"后续每次写完新文章后需要执行的shell指令\"></a>后续每次写完新文章后需要执行的shell指令</h2><ol>\n<li>git add <newfile></newfile></li>\n<li>git commit -m “备份”</li>\n<li>git push origin hexo</li>\n<li>hexo g</li>\n<li>hexo d</li>\n</ol>\n<h2 id=\"加入gitee后的新增操作指令-2019-9-24\"><a href=\"#加入gitee后的新增操作指令-2019-9-24\" class=\"headerlink\" title=\"加入gitee后的新增操作指令 2019.9.24\"></a>加入gitee后的新增操作指令 2019.9.24</h2><p>我目前把自己的博客在gitee pages上也弄了一份，目的是为了借助下gitee在国内访问比较快的优点。</p>\n<p>所以现在要额外备份gitee的版本</p>\n<p>如果是新的机子,按顺序做如下操作即可</p>\n<ol>\n<li>安装git和hexo</li>\n<li>git init  +  git remote add origin ‘github repo url’ + git remote add gitee ‘gitee repo url’</li>\n<li>git pull origin hexo 把hexo文件全部拉取过来</li>\n</ol>\n<p>到这里为止我估计环境就ok了，那么每次写完新文章如果想顺便做备份的话，其shell指令就如下:</p>\n<ol>\n<li>git add <newfile></newfile></li>\n<li>git commit -m “backup”</li>\n<li><ul>\n<li>git push origin hexo</li>\n<li>git push gitee hexo</li>\n</ul>\n</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>node ./comment.js #用于自动化初始化gitalk的issue，不一定每次都要执行</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>\b\b\b前阵子，我的hexo博客丢失源文件，吃了没有备份的源文件的苦头，所以现在我的hexo博客已经加上了备份机制，使其更加健壮了，本文将记录如何方便的进行hexo备份</p>\n<p>适用hexo版本 4.x<br>查阅此文档前，您必须保证您已经阅读完毕hexo的官方文档，并且已经实际操作过，不然阅读以下的文字会让你理解上有点困难</p>\n<h2 id=\"hexo备份步骤\"><a href=\"#hexo备份步骤\" class=\"headerlink\" title=\"hexo备份步骤\"></a>hexo备份步骤</h2><ol>\n<li><p>在一个新的文件夹(A文件夹)内使用git去clone你的github上的远程hexo库(yourgitname.github.io)，完成后A文件夹内会出现一个clone后的git库文件夹(yourgitname.github.io),点击进入后，里面是hexo用于生成网页的文件结构，而非hexo本地源文件。</p>\n</li>\n<li><p>打开浏览器，进入自己的github，为自己的远程hexo库建立一个分支，最好名为hexo，并将其设为默认分支（方便我们后续提交）。随后我们需要在这个分支内创建一个.gitignore文件。因为新版本hexo在执行<code>hexo init</code>等一系列建站脚本后，会在本地已经为你创建了一个.gitignore文件了，其文件内容就是我们想要的，将其内容复制到刚刚我们新创建的.gitignore文件内并上传至hexo分支即可（如何创建分支自行百度）</p>\n</li>\n<li><p>hexo分支准备完成后，我们就可以在我们cmd界面使用<code>git checkout  hexo</code>将分支切到hexo分支，然后将我们的hexo源文件复制到这里，复制完成后将这些文件一并上传至远程hexo分支即可。到此就完成了hexo备份。现在我们就可以在本地的hexo分支环境下直接写新文章，写完后上传hexo分支，最后使用<code>hexo d</code>，让hexo脚本自动将生成后的文件上传至master分支。最后github上的hexo库的2个分支就完美的呈现它们的价值了，hexo分支内可以看到我们的本地源文件，master分支上就保存着<code>hexo d</code>对应的那些文件用于直接排版我们的网页</p>\n</li>\n<li><p>以防万一，我们最好在本地也对我们的源文件进行归档备份</p>\n</li>\n</ol>\n<h2 id=\"后续每次写完新文章后需要执行的shell指令\"><a href=\"#后续每次写完新文章后需要执行的shell指令\" class=\"headerlink\" title=\"后续每次写完新文章后需要执行的shell指令\"></a>后续每次写完新文章后需要执行的shell指令</h2><ol>\n<li>git add <newfile></newfile></li>\n<li>git commit -m “备份”</li>\n<li>git push origin hexo</li>\n<li>hexo g</li>\n<li>hexo d</li>\n</ol>\n<h2 id=\"加入gitee后的新增操作指令-2019-9-24\"><a href=\"#加入gitee后的新增操作指令-2019-9-24\" class=\"headerlink\" title=\"加入gitee后的新增操作指令 2019.9.24\"></a>加入gitee后的新增操作指令 2019.9.24</h2><p>我目前把自己的博客在gitee pages上也弄了一份，目的是为了借助下gitee在国内访问比较快的优点。</p>\n<p>所以现在要额外备份gitee的版本</p>\n<p>如果是新的机子,按顺序做如下操作即可</p>\n<ol>\n<li>安装git和hexo</li>\n<li>git init  +  git remote add origin ‘github repo url’ + git remote add gitee ‘gitee repo url’</li>\n<li>git pull origin hexo 把hexo文件全部拉取过来</li>\n</ol>\n<p>到这里为止我估计环境就ok了，那么每次写完新文章如果想顺便做备份的话，其shell指令就如下:</p>\n<ol>\n<li>git add <newfile></newfile></li>\n<li>git commit -m “backup”</li>\n<li><ul>\n<li>git push origin hexo</li>\n<li>git push gitee hexo</li>\n</ul>\n</li>\n<li>hexo g</li>\n<li>hexo d</li>\n<li>node ./comment.js #用于自动化初始化gitalk的issue，不一定每次都要执行</li>\n</ol>\n"},{"title":"在SpringBoot中使用运行时参数注入到多例Bean中的一个简单解决方案","date":"2019-07-26T13:56:12.000Z","_content":"\n# 场景说明\n\n在某些情况下，我希望我的Bean是多例的(大部分正常情况下Bean单例足矣)，因为这个Bean有一个状态变量，每次我希望它在new的时候可以初始化为不同的值，这个值取自运行时。\n\n# 问题\n\n直接采用set的方式？ 不可行，由于IOC容器高度管理化，想在Spring框架下做如此open的操作是不行的，因为你能操作的只是代理类罢了。\n\n# 解决方案\n\n0. 为你的Bean创建一个带参构造器(用于赋予运行时参数)\n\n```java\npublic Bean(String args1, String args2) {\n    this.field1 = args1;\n    this.field2 = args2;\n}\n```\n\n1. 在你的控制器层获取IOC容器(调用非默认注入方法的途径)\n\n```java\n@Autowired\nApplicationContext applicationContext;\n```\n\n\n2. [借助BeanFactory的getBean(String name,Object... args)](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-java.lang.Object...-)\n\n\n```java\napplicationContext\n    .getBean(\"bean\",\n    args1,\n    args2));\n```\n# 支持版本\n\nSpring 4+\n\n# 吐槽\n\nSpring对于这一块的支持代码不够优雅，或者说有更好的方式，只不过我没发现？\n","source":"_posts/hot-to-use-runtime-param-to-init-a-prototype-bean-in-spring.md","raw":"---\ntitle: 在SpringBoot中使用运行时参数注入到多例Bean中的一个简单解决方案\ntags: Bugs\ncategories: 计算机\ndate: 2019-07-26 21:56:12\n---\n\n# 场景说明\n\n在某些情况下，我希望我的Bean是多例的(大部分正常情况下Bean单例足矣)，因为这个Bean有一个状态变量，每次我希望它在new的时候可以初始化为不同的值，这个值取自运行时。\n\n# 问题\n\n直接采用set的方式？ 不可行，由于IOC容器高度管理化，想在Spring框架下做如此open的操作是不行的，因为你能操作的只是代理类罢了。\n\n# 解决方案\n\n0. 为你的Bean创建一个带参构造器(用于赋予运行时参数)\n\n```java\npublic Bean(String args1, String args2) {\n    this.field1 = args1;\n    this.field2 = args2;\n}\n```\n\n1. 在你的控制器层获取IOC容器(调用非默认注入方法的途径)\n\n```java\n@Autowired\nApplicationContext applicationContext;\n```\n\n\n2. [借助BeanFactory的getBean(String name,Object... args)](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-java.lang.Object...-)\n\n\n```java\napplicationContext\n    .getBean(\"bean\",\n    args1,\n    args2));\n```\n# 支持版本\n\nSpring 4+\n\n# 吐槽\n\nSpring对于这一块的支持代码不够优雅，或者说有更好的方式，只不过我没发现？\n","slug":"hot-to-use-runtime-param-to-init-a-prototype-bean-in-spring","published":1,"updated":"2019-07-26T14:13:05.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t70019m6elyq8kqs38","content":"<h1 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h1><p>在某些情况下，我希望我的Bean是多例的(大部分正常情况下Bean单例足矣)，因为这个Bean有一个状态变量，每次我希望它在new的时候可以初始化为不同的值，这个值取自运行时。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>直接采用set的方式？ 不可行，由于IOC容器高度管理化，想在Spring框架下做如此open的操作是不行的，因为你能操作的只是代理类罢了。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ol start=\"0\">\n<li>为你的Bean创建一个带参构造器(用于赋予运行时参数)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bean</span><span class=\"params\">(String args1, String args2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.field1 = args1;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.field2 = args2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在你的控制器层获取IOC容器(调用非默认注入方法的途径)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext applicationContext;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-java.lang.Object...-\" target=\"_blank\" rel=\"noopener\">借助BeanFactory的getBean(String name,Object… args)</a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationContext</span><br><span class=\"line\">    .getBean(<span class=\"string\">\"bean\"</span>,</span><br><span class=\"line\">    args1,</span><br><span class=\"line\">    args2));</span><br></pre></td></tr></table></figure>\n<h1 id=\"支持版本\"><a href=\"#支持版本\" class=\"headerlink\" title=\"支持版本\"></a>支持版本</h1><p>Spring 4+</p>\n<h1 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h1><p>Spring对于这一块的支持代码不够优雅，或者说有更好的方式，只不过我没发现？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h1><p>在某些情况下，我希望我的Bean是多例的(大部分正常情况下Bean单例足矣)，因为这个Bean有一个状态变量，每次我希望它在new的时候可以初始化为不同的值，这个值取自运行时。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>直接采用set的方式？ 不可行，由于IOC容器高度管理化，想在Spring框架下做如此open的操作是不行的，因为你能操作的只是代理类罢了。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ol start=\"0\">\n<li>为你的Bean创建一个带参构造器(用于赋予运行时参数)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bean</span><span class=\"params\">(String args1, String args2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.field1 = args1;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.field2 = args2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在你的控制器层获取IOC容器(调用非默认注入方法的途径)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">ApplicationContext applicationContext;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html#getBean-java.lang.String-java.lang.Object...-\" target=\"_blank\" rel=\"noopener\">借助BeanFactory的getBean(String name,Object… args)</a></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationContext</span><br><span class=\"line\">    .getBean(<span class=\"string\">\"bean\"</span>,</span><br><span class=\"line\">    args1,</span><br><span class=\"line\">    args2));</span><br></pre></td></tr></table></figure>\n<h1 id=\"支持版本\"><a href=\"#支持版本\" class=\"headerlink\" title=\"支持版本\"></a>支持版本</h1><p>Spring 4+</p>\n<h1 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h1><p>Spring对于这一块的支持代码不够优雅，或者说有更好的方式，只不过我没发现？</p>\n"},{"title":"面对涉及金额计算的需求,我该如何应对(二)","date":"2019-09-27T03:29:32.000Z","_content":"\n## 前言\n\n上一章 [面对涉及金额计算的需求,我该如何应对(一)? ](https://zazalu.space/2019/09/25/java-amount-calculation/)\n\n我主要讲了Java层面如何做到高精度的计算\n\n本章我们继续探讨数据库(mysql为例)中如何正确保存我们的金额\n\n其实我们的目的很简单, 一是存储到数据库中的数据必须是能保证精度的数据类型, 而在mysql中能够保证精度的有`DECIMAL`或者`NUMBER`, 两者是一致的没有区别, 都是用字符串存储. 或者使用`INT`,`BIGINT`等, 这两个虽然是二进制存储, 但是因为不含小数, 所以不会出现精度问题, 缺点是还需要额外维护`scale`, 如果是国内, 直接除以100的做法也是常见; 二是保证可扩展性以及保证空间不要浪费, 这个其实是非常灵活的一种需求, 需要我们对自己项目所用到的情况有非常深的理解, 最后才能确定使用多少空间去存储.\n\n事前声明: 本文只是阐述我个人的想法, 是本人通过各类网上查阅别人的解决方案后总结的成果, 并不是我自己的亲身使用经验, 所以请阅读者带有自己的思考, 多问为什么.\n\n## 第一种方式 - 使用DECIMAL存储金额\n\n网上讨论什么数据类型去存储金额做了非常多的讨论, 但是绝大部分的答案都会指向使用`DECIMAL`, 这是个非常有力的答案, 因为Mysql官方都建议我们使用`DECIMAL`来存储需要精度计算的数字数据. Mysql官方的原文如下:\n\n>The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data.\n\n原文地址: https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html\n\n使用DECIMAL存储金额是一种比较通用的形式, 因为很多成熟的数据库, 都使用这个关键字来作为高精度计算数据类型的名称, 它的存在本身就是为了提供准确的精度计算服务. 由于底层由字符串存储, 和`float`,`double`这种近似值数据类型有本质上的区别, 因为浮点数类型底层由二进制存储, 它无法正确显示0.1, 只能存储其近似值, 这个知识点我们在第一章也明确的进行了说明.\n\n### 如何使用DECIMAL?\n\n就算我们懂得了`DECIMAL`来存储金额这件事, 我们还需要面对第二个问题, 那就是如何确定一个比较好的DECIMAL精度. \n\n`DECIMAL`有两个输入参数, 一个是精度precision, 还有一个是小数位数scale, 比如我们定义`decimal(19,2)`, 在mysql(后续内容全部已mysql为准)中它代表了19为的长度, 小数位只有2位的十进制数字. 需要注意的是这个19代表总长度,它包含了小数点.\n\n一般来说precision我们可以定义为19就可以完全满足大部分金额的需求, 比如`decimal(19,2)`, 那么它支持的最大数额是9999999999999999.99, 这个数额差不多是9999千亿元, 注意我的单位是千亿. 如果还不够你可以加大大小 , 不过需要注意decimal最大长度是65(出自mysql官网,The maximum number of digits for DECIMAL is 65)\n\nscale的长度定义是更加要注意的事情, 目前来看很多人喜欢定义2位小数! 但是我们作为程序员要身怀全球化开发的大志, 稍微了解下其他国家的币种, 你会发现2位是不够的, 为了减少后期需求变动导致2位不足的情况, 其实可以使用4位小数, 比如Bahraini, Jordanian, or Kuwaiti Dinars都是在使用常常有3位小数的币种的国家.\n\n### Mybatis中获取写法\n\n说完了精度和小数位数的设定, 最后我们还要了解下从mysql数据库读取到java, 这个过程该如何处理, 由于国内Java常见的orm框架是mybatis, 我在这里就不聊jpa或者hibernate或者其他orm框架了, 这里只说明mybatis如何正确读取. \n\n在mybatis中, 读取decimal类型数据有一种万能的写法, 就是`jdbcType=NUMERIC`. 如果你觉得这样看不出数据类型具体是啥, 那么你可以这样写`jdbcType=DECIMAL`, 然后java类型使用`java.math.BigDecimal`接收即可!\n\n##　第二种方式 - 使用INT或者BIGINT存储无标度值的金额\n\n另一种常见的方式是使用2个字段分别存储金额(类似BIgDecimal的底层原理), 一个字段使用`INT`或者`BIGINT`存储无标度值的金额, 比如18.134, 保存为18134, 这里提出`BIGINT`代替`INT`是因为可能部分场景`INT`不够你用, 而`BIGINT`基本不用担心(可以看看[这篇文章](https://segmentfault.com/a/1190000005124246)对这些数据类型重新回顾下).然后使用另一个字段,比如scale保存为3, 这样我们从数据库取出来后,就可以知道是18.134了. 这些操作在精度上是不存在问题的, 所以也是一种可行方案.\n\n比较值得一提的是,如果只是针对RMB, 你甚至可以不需要保存scale, 默认在程序中做除以100的操作就行了, 也就是针对到分即可.\n\n到此为止, 网上最流行的方案就是这两种形式, 接下来我们来探讨下到底哪种更好\n\n## INT vs DECIMAL\n\n现在我们开始讨论这两种方式到底哪种更优秀\n\n从空间上来说, INT是胜利的, 因为DECIMAL所需的空间很大\n\n从性能上来说, 这是一个没法很好定夺的问题, 因为我一直坚持要比对性能, 必须结合实际情况做对应的基准测试, 才能得到自己的结论, 所以这里我就卖个关子, 不回答性能问题.\n\n从开发复杂度来说, 我认为是DECIMAL简单, 因为直接封装到BigDecimal类中可以直接使用, 而INT还需要做除法操作来移动小数点位置.\n\n\n## 在JS层面如何展示\n\n最后再来说说JS吧, 在页面上我坚持是只传String过去即可, 这样对于前端工程师来说, 他们不用担心显示出现精度问题, 因为是String的格式. 此外JS做精度计算最好移动到后台处理, 是在巴不得以, 可以使用别人的计算库比如math.js做处理, 减少我们自己编写出现精度问题的几率!\n\n由于我个人偏后端, 所以前端展示这块不是很熟悉, 就不多扯了.\n\n本系列到此结束\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/java-amount-calculation-2.md","raw":"---\ntitle: 面对涉及金额计算的需求,我该如何应对(二)\ntags: Java高精度计算\ncategories: IT\ndate: 2019-09-27 11:29:32\n---\n\n## 前言\n\n上一章 [面对涉及金额计算的需求,我该如何应对(一)? ](https://zazalu.space/2019/09/25/java-amount-calculation/)\n\n我主要讲了Java层面如何做到高精度的计算\n\n本章我们继续探讨数据库(mysql为例)中如何正确保存我们的金额\n\n其实我们的目的很简单, 一是存储到数据库中的数据必须是能保证精度的数据类型, 而在mysql中能够保证精度的有`DECIMAL`或者`NUMBER`, 两者是一致的没有区别, 都是用字符串存储. 或者使用`INT`,`BIGINT`等, 这两个虽然是二进制存储, 但是因为不含小数, 所以不会出现精度问题, 缺点是还需要额外维护`scale`, 如果是国内, 直接除以100的做法也是常见; 二是保证可扩展性以及保证空间不要浪费, 这个其实是非常灵活的一种需求, 需要我们对自己项目所用到的情况有非常深的理解, 最后才能确定使用多少空间去存储.\n\n事前声明: 本文只是阐述我个人的想法, 是本人通过各类网上查阅别人的解决方案后总结的成果, 并不是我自己的亲身使用经验, 所以请阅读者带有自己的思考, 多问为什么.\n\n## 第一种方式 - 使用DECIMAL存储金额\n\n网上讨论什么数据类型去存储金额做了非常多的讨论, 但是绝大部分的答案都会指向使用`DECIMAL`, 这是个非常有力的答案, 因为Mysql官方都建议我们使用`DECIMAL`来存储需要精度计算的数字数据. Mysql官方的原文如下:\n\n>The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data.\n\n原文地址: https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html\n\n使用DECIMAL存储金额是一种比较通用的形式, 因为很多成熟的数据库, 都使用这个关键字来作为高精度计算数据类型的名称, 它的存在本身就是为了提供准确的精度计算服务. 由于底层由字符串存储, 和`float`,`double`这种近似值数据类型有本质上的区别, 因为浮点数类型底层由二进制存储, 它无法正确显示0.1, 只能存储其近似值, 这个知识点我们在第一章也明确的进行了说明.\n\n### 如何使用DECIMAL?\n\n就算我们懂得了`DECIMAL`来存储金额这件事, 我们还需要面对第二个问题, 那就是如何确定一个比较好的DECIMAL精度. \n\n`DECIMAL`有两个输入参数, 一个是精度precision, 还有一个是小数位数scale, 比如我们定义`decimal(19,2)`, 在mysql(后续内容全部已mysql为准)中它代表了19为的长度, 小数位只有2位的十进制数字. 需要注意的是这个19代表总长度,它包含了小数点.\n\n一般来说precision我们可以定义为19就可以完全满足大部分金额的需求, 比如`decimal(19,2)`, 那么它支持的最大数额是9999999999999999.99, 这个数额差不多是9999千亿元, 注意我的单位是千亿. 如果还不够你可以加大大小 , 不过需要注意decimal最大长度是65(出自mysql官网,The maximum number of digits for DECIMAL is 65)\n\nscale的长度定义是更加要注意的事情, 目前来看很多人喜欢定义2位小数! 但是我们作为程序员要身怀全球化开发的大志, 稍微了解下其他国家的币种, 你会发现2位是不够的, 为了减少后期需求变动导致2位不足的情况, 其实可以使用4位小数, 比如Bahraini, Jordanian, or Kuwaiti Dinars都是在使用常常有3位小数的币种的国家.\n\n### Mybatis中获取写法\n\n说完了精度和小数位数的设定, 最后我们还要了解下从mysql数据库读取到java, 这个过程该如何处理, 由于国内Java常见的orm框架是mybatis, 我在这里就不聊jpa或者hibernate或者其他orm框架了, 这里只说明mybatis如何正确读取. \n\n在mybatis中, 读取decimal类型数据有一种万能的写法, 就是`jdbcType=NUMERIC`. 如果你觉得这样看不出数据类型具体是啥, 那么你可以这样写`jdbcType=DECIMAL`, 然后java类型使用`java.math.BigDecimal`接收即可!\n\n##　第二种方式 - 使用INT或者BIGINT存储无标度值的金额\n\n另一种常见的方式是使用2个字段分别存储金额(类似BIgDecimal的底层原理), 一个字段使用`INT`或者`BIGINT`存储无标度值的金额, 比如18.134, 保存为18134, 这里提出`BIGINT`代替`INT`是因为可能部分场景`INT`不够你用, 而`BIGINT`基本不用担心(可以看看[这篇文章](https://segmentfault.com/a/1190000005124246)对这些数据类型重新回顾下).然后使用另一个字段,比如scale保存为3, 这样我们从数据库取出来后,就可以知道是18.134了. 这些操作在精度上是不存在问题的, 所以也是一种可行方案.\n\n比较值得一提的是,如果只是针对RMB, 你甚至可以不需要保存scale, 默认在程序中做除以100的操作就行了, 也就是针对到分即可.\n\n到此为止, 网上最流行的方案就是这两种形式, 接下来我们来探讨下到底哪种更好\n\n## INT vs DECIMAL\n\n现在我们开始讨论这两种方式到底哪种更优秀\n\n从空间上来说, INT是胜利的, 因为DECIMAL所需的空间很大\n\n从性能上来说, 这是一个没法很好定夺的问题, 因为我一直坚持要比对性能, 必须结合实际情况做对应的基准测试, 才能得到自己的结论, 所以这里我就卖个关子, 不回答性能问题.\n\n从开发复杂度来说, 我认为是DECIMAL简单, 因为直接封装到BigDecimal类中可以直接使用, 而INT还需要做除法操作来移动小数点位置.\n\n\n## 在JS层面如何展示\n\n最后再来说说JS吧, 在页面上我坚持是只传String过去即可, 这样对于前端工程师来说, 他们不用担心显示出现精度问题, 因为是String的格式. 此外JS做精度计算最好移动到后台处理, 是在巴不得以, 可以使用别人的计算库比如math.js做处理, 减少我们自己编写出现精度问题的几率!\n\n由于我个人偏后端, 所以前端展示这块不是很熟悉, 就不多扯了.\n\n本系列到此结束\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"java-amount-calculation-2","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9t8001bm6eldr5s6l4j","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一章 <a href=\"https://zazalu.space/2019/09/25/java-amount-calculation/\">面对涉及金额计算的需求,我该如何应对(一)? </a></p>\n<p>我主要讲了Java层面如何做到高精度的计算</p>\n<p>本章我们继续探讨数据库(mysql为例)中如何正确保存我们的金额</p>\n<p>其实我们的目的很简单, 一是存储到数据库中的数据必须是能保证精度的数据类型, 而在mysql中能够保证精度的有<code>DECIMAL</code>或者<code>NUMBER</code>, 两者是一致的没有区别, 都是用字符串存储. 或者使用<code>INT</code>,<code>BIGINT</code>等, 这两个虽然是二进制存储, 但是因为不含小数, 所以不会出现精度问题, 缺点是还需要额外维护<code>scale</code>, 如果是国内, 直接除以100的做法也是常见; 二是保证可扩展性以及保证空间不要浪费, 这个其实是非常灵活的一种需求, 需要我们对自己项目所用到的情况有非常深的理解, 最后才能确定使用多少空间去存储.</p>\n<p>事前声明: 本文只是阐述我个人的想法, 是本人通过各类网上查阅别人的解决方案后总结的成果, 并不是我自己的亲身使用经验, 所以请阅读者带有自己的思考, 多问为什么.</p>\n<h2 id=\"第一种方式-使用DECIMAL存储金额\"><a href=\"#第一种方式-使用DECIMAL存储金额\" class=\"headerlink\" title=\"第一种方式 - 使用DECIMAL存储金额\"></a>第一种方式 - 使用DECIMAL存储金额</h2><p>网上讨论什么数据类型去存储金额做了非常多的讨论, 但是绝大部分的答案都会指向使用<code>DECIMAL</code>, 这是个非常有力的答案, 因为Mysql官方都建议我们使用<code>DECIMAL</code>来存储需要精度计算的数字数据. Mysql官方的原文如下:</p>\n<blockquote>\n<p>The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data.</p>\n</blockquote>\n<p>原文地址: <a href=\"https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html</a></p>\n<p>使用DECIMAL存储金额是一种比较通用的形式, 因为很多成熟的数据库, 都使用这个关键字来作为高精度计算数据类型的名称, 它的存在本身就是为了提供准确的精度计算服务. 由于底层由字符串存储, 和<code>float</code>,<code>double</code>这种近似值数据类型有本质上的区别, 因为浮点数类型底层由二进制存储, 它无法正确显示0.1, 只能存储其近似值, 这个知识点我们在第一章也明确的进行了说明.</p>\n<h3 id=\"如何使用DECIMAL\"><a href=\"#如何使用DECIMAL\" class=\"headerlink\" title=\"如何使用DECIMAL?\"></a>如何使用DECIMAL?</h3><p>就算我们懂得了<code>DECIMAL</code>来存储金额这件事, 我们还需要面对第二个问题, 那就是如何确定一个比较好的DECIMAL精度. </p>\n<p><code>DECIMAL</code>有两个输入参数, 一个是精度precision, 还有一个是小数位数scale, 比如我们定义<code>decimal(19,2)</code>, 在mysql(后续内容全部已mysql为准)中它代表了19为的长度, 小数位只有2位的十进制数字. 需要注意的是这个19代表总长度,它包含了小数点.</p>\n<p>一般来说precision我们可以定义为19就可以完全满足大部分金额的需求, 比如<code>decimal(19,2)</code>, 那么它支持的最大数额是9999999999999999.99, 这个数额差不多是9999千亿元, 注意我的单位是千亿. 如果还不够你可以加大大小 , 不过需要注意decimal最大长度是65(出自mysql官网,The maximum number of digits for DECIMAL is 65)</p>\n<p>scale的长度定义是更加要注意的事情, 目前来看很多人喜欢定义2位小数! 但是我们作为程序员要身怀全球化开发的大志, 稍微了解下其他国家的币种, 你会发现2位是不够的, 为了减少后期需求变动导致2位不足的情况, 其实可以使用4位小数, 比如Bahraini, Jordanian, or Kuwaiti Dinars都是在使用常常有3位小数的币种的国家.</p>\n<h3 id=\"Mybatis中获取写法\"><a href=\"#Mybatis中获取写法\" class=\"headerlink\" title=\"Mybatis中获取写法\"></a>Mybatis中获取写法</h3><p>说完了精度和小数位数的设定, 最后我们还要了解下从mysql数据库读取到java, 这个过程该如何处理, 由于国内Java常见的orm框架是mybatis, 我在这里就不聊jpa或者hibernate或者其他orm框架了, 这里只说明mybatis如何正确读取. </p>\n<p>在mybatis中, 读取decimal类型数据有一种万能的写法, 就是<code>jdbcType=NUMERIC</code>. 如果你觉得这样看不出数据类型具体是啥, 那么你可以这样写<code>jdbcType=DECIMAL</code>, 然后java类型使用<code>java.math.BigDecimal</code>接收即可!</p>\n<p>##　第二种方式 - 使用INT或者BIGINT存储无标度值的金额</p>\n<p>另一种常见的方式是使用2个字段分别存储金额(类似BIgDecimal的底层原理), 一个字段使用<code>INT</code>或者<code>BIGINT</code>存储无标度值的金额, 比如18.134, 保存为18134, 这里提出<code>BIGINT</code>代替<code>INT</code>是因为可能部分场景<code>INT</code>不够你用, 而<code>BIGINT</code>基本不用担心(可以看看<a href=\"https://segmentfault.com/a/1190000005124246\" target=\"_blank\" rel=\"noopener\">这篇文章</a>对这些数据类型重新回顾下).然后使用另一个字段,比如scale保存为3, 这样我们从数据库取出来后,就可以知道是18.134了. 这些操作在精度上是不存在问题的, 所以也是一种可行方案.</p>\n<p>比较值得一提的是,如果只是针对RMB, 你甚至可以不需要保存scale, 默认在程序中做除以100的操作就行了, 也就是针对到分即可.</p>\n<p>到此为止, 网上最流行的方案就是这两种形式, 接下来我们来探讨下到底哪种更好</p>\n<h2 id=\"INT-vs-DECIMAL\"><a href=\"#INT-vs-DECIMAL\" class=\"headerlink\" title=\"INT vs DECIMAL\"></a>INT vs DECIMAL</h2><p>现在我们开始讨论这两种方式到底哪种更优秀</p>\n<p>从空间上来说, INT是胜利的, 因为DECIMAL所需的空间很大</p>\n<p>从性能上来说, 这是一个没法很好定夺的问题, 因为我一直坚持要比对性能, 必须结合实际情况做对应的基准测试, 才能得到自己的结论, 所以这里我就卖个关子, 不回答性能问题.</p>\n<p>从开发复杂度来说, 我认为是DECIMAL简单, 因为直接封装到BigDecimal类中可以直接使用, 而INT还需要做除法操作来移动小数点位置.</p>\n<h2 id=\"在JS层面如何展示\"><a href=\"#在JS层面如何展示\" class=\"headerlink\" title=\"在JS层面如何展示\"></a>在JS层面如何展示</h2><p>最后再来说说JS吧, 在页面上我坚持是只传String过去即可, 这样对于前端工程师来说, 他们不用担心显示出现精度问题, 因为是String的格式. 此外JS做精度计算最好移动到后台处理, 是在巴不得以, 可以使用别人的计算库比如math.js做处理, 减少我们自己编写出现精度问题的几率!</p>\n<p>由于我个人偏后端, 所以前端展示这块不是很熟悉, 就不多扯了.</p>\n<p>本系列到此结束</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一章 <a href=\"https://zazalu.space/2019/09/25/java-amount-calculation/\">面对涉及金额计算的需求,我该如何应对(一)? </a></p>\n<p>我主要讲了Java层面如何做到高精度的计算</p>\n<p>本章我们继续探讨数据库(mysql为例)中如何正确保存我们的金额</p>\n<p>其实我们的目的很简单, 一是存储到数据库中的数据必须是能保证精度的数据类型, 而在mysql中能够保证精度的有<code>DECIMAL</code>或者<code>NUMBER</code>, 两者是一致的没有区别, 都是用字符串存储. 或者使用<code>INT</code>,<code>BIGINT</code>等, 这两个虽然是二进制存储, 但是因为不含小数, 所以不会出现精度问题, 缺点是还需要额外维护<code>scale</code>, 如果是国内, 直接除以100的做法也是常见; 二是保证可扩展性以及保证空间不要浪费, 这个其实是非常灵活的一种需求, 需要我们对自己项目所用到的情况有非常深的理解, 最后才能确定使用多少空间去存储.</p>\n<p>事前声明: 本文只是阐述我个人的想法, 是本人通过各类网上查阅别人的解决方案后总结的成果, 并不是我自己的亲身使用经验, 所以请阅读者带有自己的思考, 多问为什么.</p>\n<h2 id=\"第一种方式-使用DECIMAL存储金额\"><a href=\"#第一种方式-使用DECIMAL存储金额\" class=\"headerlink\" title=\"第一种方式 - 使用DECIMAL存储金额\"></a>第一种方式 - 使用DECIMAL存储金额</h2><p>网上讨论什么数据类型去存储金额做了非常多的讨论, 但是绝大部分的答案都会指向使用<code>DECIMAL</code>, 这是个非常有力的答案, 因为Mysql官方都建议我们使用<code>DECIMAL</code>来存储需要精度计算的数字数据. Mysql官方的原文如下:</p>\n<blockquote>\n<p>The DECIMAL and NUMERIC types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data.</p>\n</blockquote>\n<p>原文地址: <a href=\"https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/fixed-point-types.html</a></p>\n<p>使用DECIMAL存储金额是一种比较通用的形式, 因为很多成熟的数据库, 都使用这个关键字来作为高精度计算数据类型的名称, 它的存在本身就是为了提供准确的精度计算服务. 由于底层由字符串存储, 和<code>float</code>,<code>double</code>这种近似值数据类型有本质上的区别, 因为浮点数类型底层由二进制存储, 它无法正确显示0.1, 只能存储其近似值, 这个知识点我们在第一章也明确的进行了说明.</p>\n<h3 id=\"如何使用DECIMAL\"><a href=\"#如何使用DECIMAL\" class=\"headerlink\" title=\"如何使用DECIMAL?\"></a>如何使用DECIMAL?</h3><p>就算我们懂得了<code>DECIMAL</code>来存储金额这件事, 我们还需要面对第二个问题, 那就是如何确定一个比较好的DECIMAL精度. </p>\n<p><code>DECIMAL</code>有两个输入参数, 一个是精度precision, 还有一个是小数位数scale, 比如我们定义<code>decimal(19,2)</code>, 在mysql(后续内容全部已mysql为准)中它代表了19为的长度, 小数位只有2位的十进制数字. 需要注意的是这个19代表总长度,它包含了小数点.</p>\n<p>一般来说precision我们可以定义为19就可以完全满足大部分金额的需求, 比如<code>decimal(19,2)</code>, 那么它支持的最大数额是9999999999999999.99, 这个数额差不多是9999千亿元, 注意我的单位是千亿. 如果还不够你可以加大大小 , 不过需要注意decimal最大长度是65(出自mysql官网,The maximum number of digits for DECIMAL is 65)</p>\n<p>scale的长度定义是更加要注意的事情, 目前来看很多人喜欢定义2位小数! 但是我们作为程序员要身怀全球化开发的大志, 稍微了解下其他国家的币种, 你会发现2位是不够的, 为了减少后期需求变动导致2位不足的情况, 其实可以使用4位小数, 比如Bahraini, Jordanian, or Kuwaiti Dinars都是在使用常常有3位小数的币种的国家.</p>\n<h3 id=\"Mybatis中获取写法\"><a href=\"#Mybatis中获取写法\" class=\"headerlink\" title=\"Mybatis中获取写法\"></a>Mybatis中获取写法</h3><p>说完了精度和小数位数的设定, 最后我们还要了解下从mysql数据库读取到java, 这个过程该如何处理, 由于国内Java常见的orm框架是mybatis, 我在这里就不聊jpa或者hibernate或者其他orm框架了, 这里只说明mybatis如何正确读取. </p>\n<p>在mybatis中, 读取decimal类型数据有一种万能的写法, 就是<code>jdbcType=NUMERIC</code>. 如果你觉得这样看不出数据类型具体是啥, 那么你可以这样写<code>jdbcType=DECIMAL</code>, 然后java类型使用<code>java.math.BigDecimal</code>接收即可!</p>\n<p>##　第二种方式 - 使用INT或者BIGINT存储无标度值的金额</p>\n<p>另一种常见的方式是使用2个字段分别存储金额(类似BIgDecimal的底层原理), 一个字段使用<code>INT</code>或者<code>BIGINT</code>存储无标度值的金额, 比如18.134, 保存为18134, 这里提出<code>BIGINT</code>代替<code>INT</code>是因为可能部分场景<code>INT</code>不够你用, 而<code>BIGINT</code>基本不用担心(可以看看<a href=\"https://segmentfault.com/a/1190000005124246\" target=\"_blank\" rel=\"noopener\">这篇文章</a>对这些数据类型重新回顾下).然后使用另一个字段,比如scale保存为3, 这样我们从数据库取出来后,就可以知道是18.134了. 这些操作在精度上是不存在问题的, 所以也是一种可行方案.</p>\n<p>比较值得一提的是,如果只是针对RMB, 你甚至可以不需要保存scale, 默认在程序中做除以100的操作就行了, 也就是针对到分即可.</p>\n<p>到此为止, 网上最流行的方案就是这两种形式, 接下来我们来探讨下到底哪种更好</p>\n<h2 id=\"INT-vs-DECIMAL\"><a href=\"#INT-vs-DECIMAL\" class=\"headerlink\" title=\"INT vs DECIMAL\"></a>INT vs DECIMAL</h2><p>现在我们开始讨论这两种方式到底哪种更优秀</p>\n<p>从空间上来说, INT是胜利的, 因为DECIMAL所需的空间很大</p>\n<p>从性能上来说, 这是一个没法很好定夺的问题, 因为我一直坚持要比对性能, 必须结合实际情况做对应的基准测试, 才能得到自己的结论, 所以这里我就卖个关子, 不回答性能问题.</p>\n<p>从开发复杂度来说, 我认为是DECIMAL简单, 因为直接封装到BigDecimal类中可以直接使用, 而INT还需要做除法操作来移动小数点位置.</p>\n<h2 id=\"在JS层面如何展示\"><a href=\"#在JS层面如何展示\" class=\"headerlink\" title=\"在JS层面如何展示\"></a>在JS层面如何展示</h2><p>最后再来说说JS吧, 在页面上我坚持是只传String过去即可, 这样对于前端工程师来说, 他们不用担心显示出现精度问题, 因为是String的格式. 此外JS做精度计算最好移动到后台处理, 是在巴不得以, 可以使用别人的计算库比如math.js做处理, 减少我们自己编写出现精度问题的几率!</p>\n<p>由于我个人偏后端, 所以前端展示这块不是很熟悉, 就不多扯了.</p>\n<p>本系列到此结束</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"函数式编程范式初探-Java-第二天","date":"2019-10-21T11:52:49.000Z","_content":"\n## 前言\n\n昨天, 我花了一点时间, 从各种函数式编程的教学资料和各类函数式编程相关的出版书籍中吸取精华, 编写了[函数式编程范式初探-第一天](https://zazalu.space/2019/10/20/learn-FP/)\n\n很幸运, 今天没有加班, 所以今天早点回家编写第二篇有关函数式编程的文章!\n\n第二章的内容主要是围绕Java8的函数式编程的相关语法\n- Lambda\n- FunctionalInterface(函数式接口)\n- MethodReferences(方法引用)\n- Closure(闭包)\n\n以上就是本章的主要内容, 同样的, 本文的内容为个人总结, 不保证全部正确.\n\n## Lambda\n\nLambda表达式提供了一种简洁的方式去表示单方法接口(只有一个方法的接口)的实现函数\n\nThey provide a clear and concise way to represent one method interface using an expression. \n\n### 从我们熟悉的Runnable接口说起\n\nRunnable接口是我们进行多线程编程的一个常用接口, 并且它是一个`单方法接口`, 只有一个run方法\n\n我相信大家或多或少的写过如下的Runnable代码\n\n```java\nRunnable r = new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"hello\");\n    }\n};\n```\n\n在这几行代码里, 有多处代码其实在每次编写类似功能的时候, 都是必须带上的, 比如 `@Override`, `public void run()`, 甚至`new Runnable`\n\n这些重复代码, 在以前的java项目代码中是随处可见的, java的coder们也已经早已习惯了这种语法(包括我)\n\n不过作为开发人员来说, 要有一颗, 从不做重复劳作的心.\n\n在这里 `@Override`, `public void run()`, 甚至`new Runnable`是重复的, 我们就可以使用Lambda表达式来去除这种重复性, 请看下面的代码\n\n```java\nRunnable r = () -> System.out.println(\"hello\");\n```\n可以看到, 使用Lambda表达式, 我们将代码缩减到了一行, 并且每一个字符都有它的意义, 我们没有做任何重复劳作 , fantastic!\n\n当然Lambda表达式的存在除了能够去除重复性代码外, 还有一个比较有趣的说法\n\nLambda表达式的起源是`λ演算`, 而λ演算中, 就用常常用到一个类似`->`符号, 所以Lambda表达式使用了这个符号, 下面是Lambda表达式写法的一个简单总结图\n\n<img src=\"/images/tmpImage/lambda.png\">\n\nLambda的语法非常简单, 我会在下面展示各类Lambda表达式写法, 你要做的只是多看, 多看, 就会记住了\n\n### Lambda表达式的魔法\n\n刚刚我们看到了Runnable的实现代码通过Lambda表达式改写后, 代码非常精简, 那么其中到底发生了什么魔法呢? \n\n可以肯定的是, 上面的例子中, `() -> System.out.println(\"hello\")`的写法替代了整个匿名实现类的写法\n\n但是Java并不是简单的通过语法控制来使得这种写法不会报错, Java通过引入一种叫`FunctionalInterface(函数式接口)`的模式, 来支持Lambda表达式的语法\n\n前面我说的`单方法接口`, 其实就是`函数式接口`, 接下来为了统一, 我就都用函数式接口来说明\n\n### 函数式接口\n\n函数式接口的概念很简单, 就是一个单方法的接口实例, 比如Runnable, 就是一个典型的函数式接口\n\njava的设计者还专门提供了一个注释类来标注函数式接口, `@FunctionalInterface`, 我们打开Runnable的实现代码就能发现它:\n\n```java\n//↓↓↓ 对函数式接口的特殊标注\n@FunctionalInterface\npublic interface Runnable {\n    /**\n     * When an object implementing interface <code>Runnable</code> is used\n     * to create a thread, starting the thread causes the object's\n     * <code>run</code> method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method <code>run</code> is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     */\n    public abstract void run();\n}\n```\n\n不仅如此, java设计者还给我们提供了一个叫`java.util.function`的包, 这个包中内置了大量的函数式接口, 如果我要在这里全部介绍它们, 就或许有点费时费力, 不过幸运的是, 有人对其进行了一定的总结, 我先把它贴出来, 大家可以看看就好, 不需要自己去记, 需要的时候检索下即可\n\n<img src=\"/images/tmpImage/FunctionInterface_1.png\">\n<img src=\"/images/tmpImage/FunctionInterface_2.png\">\n\n想必看到这一堆东西, 大家已经开始头疼了, FP是为了简洁而生的, 怎么感觉还是一大堆设定呢? \n\n先别急, 因为我上面只是列类似API的东西, 所以肯定一次性列的比较全\n\n事实上, 我们平时用的时候, 就只用到里面的其中一种, 而且常用的就那么几个.\n\n我们拿Function<T,R>举例, 下面是它的实现(源自jdk8, 为了节省篇幅, 我去掉了注释):\n\n```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n    R apply(T t);\n\n    //default关键字是jdk8的新关键字, 被它修饰的方法可以不需要实现类进行实现\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (V v) -> apply(before.apply(v));\n    }\n\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> after.apply(apply(t));\n    }\n\n    //静态方法\n    static <T> Function<T, T> identity() {\n        return t -> t;\n    }\n}\n```\n\n也许你开始产生疑问, 不是说函数式接口是单方法接口吗, 这个Function怎么拥有那么多方法.\n\n其实函数式接口只要求只有一个强制要求实现的方法就行了, 在这里唯一一个强制实现类必须实现的方法是`apply`方法\n\n接下来说说我们怎么直接利用这个Function<T, R>函数式接口\n\n通过研究方法签名, 我们知道了apply方法接收一个泛型T, 返回另一个泛型R, 所以我们可以写出如下这样的代码去直接用它\n\n```java\nFunction function = a -> \"Hello, \" + a;  //a -> \"Hello, \" + a这个Lambda表达式就是apply方法的实现\nSystem.out.println(function.apply(\"zazlau\")); //打印Hello, zazlau\n```\n\n在这里我们使用Lambda表达式结合函数式接口, 做了一次简单的配合, 写出了一个非常小巧的程序\n\n而如果按照原本的写法, 我们需要写下面这样的代码: \n```java\n//我们需要先自己定义一个接口\ninterface MyFunction<T, R> {\n    R myApply(T t);\n}\n\n//然后使用匿名内部类进行实现\n MyFunction function = new MyFunction() {\n    @Override\n    public Object myApply(Object o) {\n        return \"Hello, \" + o;\n    }\n};\nSystem.out.println(function.myApply(\"zazlau\")); //打印Hello, zazlau\n```\n\n我的天呐! 人生短暂, 我选择函数式编程....\n\n函数式接口的内容就暂时介绍到这里, 对于学习来说, 已经足够了, 但是`java.util.function`包中还有许多东西可以拿出来聊聊, 我会以后的文章中继续完善它.\n\n### 自定义函数式接口\n\n自定义函数式接口非常的简单, 其实我们刚刚已经不知不觉完成了, 我们把上面MyFunction接口稍微加点点缀\n\n```java\n@FunctionalInterface\ninterface MyFunction<T, R> {\n    R myApply(T t);\n}\n```\n\n大功告成! 这就是自定义函数式接口, 真没什么好说的!\n\n为什么要有自定义函数式接口? 那肯定是因为`java.util.function`包提供给你的不够用造成的!\n\n### Lambda表达式例子\n\n通过前面的学习, 我们已经掌握了不少Lambda表达式的语法, 不过也还有一些需要我们学习的, 下面列出的代码中全部进行了列出\n\n```java\n// [1] h, 代表入参, 名字可以随意取, 这里省略了括号, \n// h + \" No Parens!\"是返回内容, 注意这里省略了return, 实际上是{return h + \" No Parens!\"}\nh -> h + \" No Parens!\"; \n\n// [2]和第一点的区别是这里括号没有省略\n(h) -> h + \" More details\"; \n\n// [3]无入参的情况\n() -> \"Short info\";\n\n// [4]两个入参的情况, 必须加括号\n(h, n) -> h + n;\n\n// [5]当方法体有多行的时候, 则必须加上花括号, 不能省略了.\nh -> {\n    int i = 1;\n    i++;\n    return h + \" No Parens!\";\n}\n\n// [6]当你不想省略return的时候, 也必须加上花括号\nh -> {return h + \" No Parens!\";}\n```\n\n### Lambda表达式的递归\n\n其实正常来说Lambda表达式是不能递归的, 因为Lambda表达式没有函数名, 但是java是个神奇的语言:), 请看下面例子:\n```java\ninterface IntCall {\n  int call(int arg);\n}\n\npublic class RecursiveFactorial {\n  static IntCall fact;\n  public static void main(String[] args) {\n    fact = n -> n == 0 ? 1 : n * fact.call(n - 1); //递归!\n    for(int i = 0; i <= 10; i++)\n      System.out.println(fact.call(i));\n  }\n}\n```\n\n好吧! 上面的写法确实通过定义一个域fact, 给我们的Lambda表达式间接的附上了一个名称! \n\n我自己试了下, 要写递归代码, 则必须按照上面这样写, 十分苛刻! fact必须是static的!\n\n**[注意]**: 大家还可以关注下尾递归这玩意.\n\n## 总结\n\n这一章, 我仔细说明了Java的函数式编程中的Lambda和FunctionalInterface, 由于时间不早了, 明天要加班, 后天继续来填坑!\n","source":"_posts/learn-FP-2.md","raw":"---\ntitle: 函数式编程范式初探-Java-第二天\ntags: FunctionalProgramming\ncategories: IT\ndate: 2019-10-21 19:52:49\n---\n\n## 前言\n\n昨天, 我花了一点时间, 从各种函数式编程的教学资料和各类函数式编程相关的出版书籍中吸取精华, 编写了[函数式编程范式初探-第一天](https://zazalu.space/2019/10/20/learn-FP/)\n\n很幸运, 今天没有加班, 所以今天早点回家编写第二篇有关函数式编程的文章!\n\n第二章的内容主要是围绕Java8的函数式编程的相关语法\n- Lambda\n- FunctionalInterface(函数式接口)\n- MethodReferences(方法引用)\n- Closure(闭包)\n\n以上就是本章的主要内容, 同样的, 本文的内容为个人总结, 不保证全部正确.\n\n## Lambda\n\nLambda表达式提供了一种简洁的方式去表示单方法接口(只有一个方法的接口)的实现函数\n\nThey provide a clear and concise way to represent one method interface using an expression. \n\n### 从我们熟悉的Runnable接口说起\n\nRunnable接口是我们进行多线程编程的一个常用接口, 并且它是一个`单方法接口`, 只有一个run方法\n\n我相信大家或多或少的写过如下的Runnable代码\n\n```java\nRunnable r = new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"hello\");\n    }\n};\n```\n\n在这几行代码里, 有多处代码其实在每次编写类似功能的时候, 都是必须带上的, 比如 `@Override`, `public void run()`, 甚至`new Runnable`\n\n这些重复代码, 在以前的java项目代码中是随处可见的, java的coder们也已经早已习惯了这种语法(包括我)\n\n不过作为开发人员来说, 要有一颗, 从不做重复劳作的心.\n\n在这里 `@Override`, `public void run()`, 甚至`new Runnable`是重复的, 我们就可以使用Lambda表达式来去除这种重复性, 请看下面的代码\n\n```java\nRunnable r = () -> System.out.println(\"hello\");\n```\n可以看到, 使用Lambda表达式, 我们将代码缩减到了一行, 并且每一个字符都有它的意义, 我们没有做任何重复劳作 , fantastic!\n\n当然Lambda表达式的存在除了能够去除重复性代码外, 还有一个比较有趣的说法\n\nLambda表达式的起源是`λ演算`, 而λ演算中, 就用常常用到一个类似`->`符号, 所以Lambda表达式使用了这个符号, 下面是Lambda表达式写法的一个简单总结图\n\n<img src=\"/images/tmpImage/lambda.png\">\n\nLambda的语法非常简单, 我会在下面展示各类Lambda表达式写法, 你要做的只是多看, 多看, 就会记住了\n\n### Lambda表达式的魔法\n\n刚刚我们看到了Runnable的实现代码通过Lambda表达式改写后, 代码非常精简, 那么其中到底发生了什么魔法呢? \n\n可以肯定的是, 上面的例子中, `() -> System.out.println(\"hello\")`的写法替代了整个匿名实现类的写法\n\n但是Java并不是简单的通过语法控制来使得这种写法不会报错, Java通过引入一种叫`FunctionalInterface(函数式接口)`的模式, 来支持Lambda表达式的语法\n\n前面我说的`单方法接口`, 其实就是`函数式接口`, 接下来为了统一, 我就都用函数式接口来说明\n\n### 函数式接口\n\n函数式接口的概念很简单, 就是一个单方法的接口实例, 比如Runnable, 就是一个典型的函数式接口\n\njava的设计者还专门提供了一个注释类来标注函数式接口, `@FunctionalInterface`, 我们打开Runnable的实现代码就能发现它:\n\n```java\n//↓↓↓ 对函数式接口的特殊标注\n@FunctionalInterface\npublic interface Runnable {\n    /**\n     * When an object implementing interface <code>Runnable</code> is used\n     * to create a thread, starting the thread causes the object's\n     * <code>run</code> method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method <code>run</code> is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     */\n    public abstract void run();\n}\n```\n\n不仅如此, java设计者还给我们提供了一个叫`java.util.function`的包, 这个包中内置了大量的函数式接口, 如果我要在这里全部介绍它们, 就或许有点费时费力, 不过幸运的是, 有人对其进行了一定的总结, 我先把它贴出来, 大家可以看看就好, 不需要自己去记, 需要的时候检索下即可\n\n<img src=\"/images/tmpImage/FunctionInterface_1.png\">\n<img src=\"/images/tmpImage/FunctionInterface_2.png\">\n\n想必看到这一堆东西, 大家已经开始头疼了, FP是为了简洁而生的, 怎么感觉还是一大堆设定呢? \n\n先别急, 因为我上面只是列类似API的东西, 所以肯定一次性列的比较全\n\n事实上, 我们平时用的时候, 就只用到里面的其中一种, 而且常用的就那么几个.\n\n我们拿Function<T,R>举例, 下面是它的实现(源自jdk8, 为了节省篇幅, 我去掉了注释):\n\n```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n    R apply(T t);\n\n    //default关键字是jdk8的新关键字, 被它修饰的方法可以不需要实现类进行实现\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (V v) -> apply(before.apply(v));\n    }\n\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> after.apply(apply(t));\n    }\n\n    //静态方法\n    static <T> Function<T, T> identity() {\n        return t -> t;\n    }\n}\n```\n\n也许你开始产生疑问, 不是说函数式接口是单方法接口吗, 这个Function怎么拥有那么多方法.\n\n其实函数式接口只要求只有一个强制要求实现的方法就行了, 在这里唯一一个强制实现类必须实现的方法是`apply`方法\n\n接下来说说我们怎么直接利用这个Function<T, R>函数式接口\n\n通过研究方法签名, 我们知道了apply方法接收一个泛型T, 返回另一个泛型R, 所以我们可以写出如下这样的代码去直接用它\n\n```java\nFunction function = a -> \"Hello, \" + a;  //a -> \"Hello, \" + a这个Lambda表达式就是apply方法的实现\nSystem.out.println(function.apply(\"zazlau\")); //打印Hello, zazlau\n```\n\n在这里我们使用Lambda表达式结合函数式接口, 做了一次简单的配合, 写出了一个非常小巧的程序\n\n而如果按照原本的写法, 我们需要写下面这样的代码: \n```java\n//我们需要先自己定义一个接口\ninterface MyFunction<T, R> {\n    R myApply(T t);\n}\n\n//然后使用匿名内部类进行实现\n MyFunction function = new MyFunction() {\n    @Override\n    public Object myApply(Object o) {\n        return \"Hello, \" + o;\n    }\n};\nSystem.out.println(function.myApply(\"zazlau\")); //打印Hello, zazlau\n```\n\n我的天呐! 人生短暂, 我选择函数式编程....\n\n函数式接口的内容就暂时介绍到这里, 对于学习来说, 已经足够了, 但是`java.util.function`包中还有许多东西可以拿出来聊聊, 我会以后的文章中继续完善它.\n\n### 自定义函数式接口\n\n自定义函数式接口非常的简单, 其实我们刚刚已经不知不觉完成了, 我们把上面MyFunction接口稍微加点点缀\n\n```java\n@FunctionalInterface\ninterface MyFunction<T, R> {\n    R myApply(T t);\n}\n```\n\n大功告成! 这就是自定义函数式接口, 真没什么好说的!\n\n为什么要有自定义函数式接口? 那肯定是因为`java.util.function`包提供给你的不够用造成的!\n\n### Lambda表达式例子\n\n通过前面的学习, 我们已经掌握了不少Lambda表达式的语法, 不过也还有一些需要我们学习的, 下面列出的代码中全部进行了列出\n\n```java\n// [1] h, 代表入参, 名字可以随意取, 这里省略了括号, \n// h + \" No Parens!\"是返回内容, 注意这里省略了return, 实际上是{return h + \" No Parens!\"}\nh -> h + \" No Parens!\"; \n\n// [2]和第一点的区别是这里括号没有省略\n(h) -> h + \" More details\"; \n\n// [3]无入参的情况\n() -> \"Short info\";\n\n// [4]两个入参的情况, 必须加括号\n(h, n) -> h + n;\n\n// [5]当方法体有多行的时候, 则必须加上花括号, 不能省略了.\nh -> {\n    int i = 1;\n    i++;\n    return h + \" No Parens!\";\n}\n\n// [6]当你不想省略return的时候, 也必须加上花括号\nh -> {return h + \" No Parens!\";}\n```\n\n### Lambda表达式的递归\n\n其实正常来说Lambda表达式是不能递归的, 因为Lambda表达式没有函数名, 但是java是个神奇的语言:), 请看下面例子:\n```java\ninterface IntCall {\n  int call(int arg);\n}\n\npublic class RecursiveFactorial {\n  static IntCall fact;\n  public static void main(String[] args) {\n    fact = n -> n == 0 ? 1 : n * fact.call(n - 1); //递归!\n    for(int i = 0; i <= 10; i++)\n      System.out.println(fact.call(i));\n  }\n}\n```\n\n好吧! 上面的写法确实通过定义一个域fact, 给我们的Lambda表达式间接的附上了一个名称! \n\n我自己试了下, 要写递归代码, 则必须按照上面这样写, 十分苛刻! fact必须是static的!\n\n**[注意]**: 大家还可以关注下尾递归这玩意.\n\n## 总结\n\n这一章, 我仔细说明了Java的函数式编程中的Lambda和FunctionalInterface, 由于时间不早了, 明天要加班, 后天继续来填坑!\n","slug":"learn-FP-2","published":1,"updated":"2019-10-21T13:50:15.302Z","_id":"ck20gn9t9001fm6el9ic7y1zm","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>昨天, 我花了一点时间, 从各种函数式编程的教学资料和各类函数式编程相关的出版书籍中吸取精华, 编写了<a href=\"https://zazalu.space/2019/10/20/learn-FP/\">函数式编程范式初探-第一天</a></p>\n<p>很幸运, 今天没有加班, 所以今天早点回家编写第二篇有关函数式编程的文章!</p>\n<p>第二章的内容主要是围绕Java8的函数式编程的相关语法</p>\n<ul>\n<li>Lambda</li>\n<li>FunctionalInterface(函数式接口)</li>\n<li>MethodReferences(方法引用)</li>\n<li>Closure(闭包)</li>\n</ul>\n<p>以上就是本章的主要内容, 同样的, 本文的内容为个人总结, 不保证全部正确.</p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Lambda表达式提供了一种简洁的方式去表示单方法接口(只有一个方法的接口)的实现函数</p>\n<p>They provide a clear and concise way to represent one method interface using an expression. </p>\n<h3 id=\"从我们熟悉的Runnable接口说起\"><a href=\"#从我们熟悉的Runnable接口说起\" class=\"headerlink\" title=\"从我们熟悉的Runnable接口说起\"></a>从我们熟悉的Runnable接口说起</h3><p>Runnable接口是我们进行多线程编程的一个常用接口, 并且它是一个<code>单方法接口</code>, 只有一个run方法</p>\n<p>我相信大家或多或少的写过如下的Runnable代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在这几行代码里, 有多处代码其实在每次编写类似功能的时候, 都是必须带上的, 比如 <code>@Override</code>, <code>public void run()</code>, 甚至<code>new Runnable</code></p>\n<p>这些重复代码, 在以前的java项目代码中是随处可见的, java的coder们也已经早已习惯了这种语法(包括我)</p>\n<p>不过作为开发人员来说, 要有一颗, 从不做重复劳作的心.</p>\n<p>在这里 <code>@Override</code>, <code>public void run()</code>, 甚至<code>new Runnable</code>是重复的, 我们就可以使用Lambda表达式来去除这种重复性, 请看下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = () -&gt; System.out.println(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n<p>可以看到, 使用Lambda表达式, 我们将代码缩减到了一行, 并且每一个字符都有它的意义, 我们没有做任何重复劳作 , fantastic!</p>\n<p>当然Lambda表达式的存在除了能够去除重复性代码外, 还有一个比较有趣的说法</p>\n<p>Lambda表达式的起源是<code>λ演算</code>, 而λ演算中, 就用常常用到一个类似<code>-&gt;</code>符号, 所以Lambda表达式使用了这个符号, 下面是Lambda表达式写法的一个简单总结图</p>\n<p><img src=\"/images/tmpImage/lambda.png\"></p>\n<p>Lambda的语法非常简单, 我会在下面展示各类Lambda表达式写法, 你要做的只是多看, 多看, 就会记住了</p>\n<h3 id=\"Lambda表达式的魔法\"><a href=\"#Lambda表达式的魔法\" class=\"headerlink\" title=\"Lambda表达式的魔法\"></a>Lambda表达式的魔法</h3><p>刚刚我们看到了Runnable的实现代码通过Lambda表达式改写后, 代码非常精简, 那么其中到底发生了什么魔法呢? </p>\n<p>可以肯定的是, 上面的例子中, <code>() -&gt; System.out.println(&quot;hello&quot;)</code>的写法替代了整个匿名实现类的写法</p>\n<p>但是Java并不是简单的通过语法控制来使得这种写法不会报错, Java通过引入一种叫<code>FunctionalInterface(函数式接口)</code>的模式, 来支持Lambda表达式的语法</p>\n<p>前面我说的<code>单方法接口</code>, 其实就是<code>函数式接口</code>, 接下来为了统一, 我就都用函数式接口来说明</p>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>函数式接口的概念很简单, 就是一个单方法的接口实例, 比如Runnable, 就是一个典型的函数式接口</p>\n<p>java的设计者还专门提供了一个注释类来标注函数式接口, <code>@FunctionalInterface</code>, 我们打开Runnable的实现代码就能发现它:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓ 对函数式接口的特殊标注</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class=\"line\"><span class=\"comment\">     * to create a thread, starting the thread causes the object's</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class=\"line\"><span class=\"comment\">     * take any action whatsoever.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span>     java.lang.Thread#run()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此, java设计者还给我们提供了一个叫<code>java.util.function</code>的包, 这个包中内置了大量的函数式接口, 如果我要在这里全部介绍它们, 就或许有点费时费力, 不过幸运的是, 有人对其进行了一定的总结, 我先把它贴出来, 大家可以看看就好, 不需要自己去记, 需要的时候检索下即可</p>\n<p><img src=\"/images/tmpImage/FunctionInterface_1.png\"><br><img src=\"/images/tmpImage/FunctionInterface_2.png\"></p>\n<p>想必看到这一堆东西, 大家已经开始头疼了, FP是为了简洁而生的, 怎么感觉还是一大堆设定呢? </p>\n<p>先别急, 因为我上面只是列类似API的东西, 所以肯定一次性列的比较全</p>\n<p>事实上, 我们平时用的时候, 就只用到里面的其中一种, 而且常用的就那么几个.</p>\n<p>我们拿Function&lt;T,R&gt;举例, 下面是它的实现(源自jdk8, 为了节省篇幅, 我去掉了注释):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//default关键字是jdk8的新关键字, 被它修饰的方法可以不需要实现类进行实现</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;V, R&gt; <span class=\"title\">compose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;T, V&gt; <span class=\"title\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Function&lt;T, T&gt; <span class=\"title\">identity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也许你开始产生疑问, 不是说函数式接口是单方法接口吗, 这个Function怎么拥有那么多方法.</p>\n<p>其实函数式接口只要求只有一个强制要求实现的方法就行了, 在这里唯一一个强制实现类必须实现的方法是<code>apply</code>方法</p>\n<p>接下来说说我们怎么直接利用这个Function&lt;T, R&gt;函数式接口</p>\n<p>通过研究方法签名, 我们知道了apply方法接收一个泛型T, 返回另一个泛型R, 所以我们可以写出如下这样的代码去直接用它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function function = a -&gt; <span class=\"string\">\"Hello, \"</span> + a;  <span class=\"comment\">//a -&gt; \"Hello, \" + a这个Lambda表达式就是apply方法的实现</span></span><br><span class=\"line\">System.out.println(function.apply(<span class=\"string\">\"zazlau\"</span>)); <span class=\"comment\">//打印Hello, zazlau</span></span><br></pre></td></tr></table></figure>\n<p>在这里我们使用Lambda表达式结合函数式接口, 做了一次简单的配合, 写出了一个非常小巧的程序</p>\n<p>而如果按照原本的写法, 我们需要写下面这样的代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们需要先自己定义一个接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">myApply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后使用匿名内部类进行实现</span></span><br><span class=\"line\"> MyFunction function = <span class=\"keyword\">new</span> MyFunction() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">myApply</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(function.myApply(<span class=\"string\">\"zazlau\"</span>)); <span class=\"comment\">//打印Hello, zazlau</span></span><br></pre></td></tr></table></figure></p>\n<p>我的天呐! 人生短暂, 我选择函数式编程….</p>\n<p>函数式接口的内容就暂时介绍到这里, 对于学习来说, 已经足够了, 但是<code>java.util.function</code>包中还有许多东西可以拿出来聊聊, 我会以后的文章中继续完善它.</p>\n<h3 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h3><p>自定义函数式接口非常的简单, 其实我们刚刚已经不知不觉完成了, 我们把上面MyFunction接口稍微加点点缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">myApply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成! 这就是自定义函数式接口, 真没什么好说的!</p>\n<p>为什么要有自定义函数式接口? 那肯定是因为<code>java.util.function</code>包提供给你的不够用造成的!</p>\n<h3 id=\"Lambda表达式例子\"><a href=\"#Lambda表达式例子\" class=\"headerlink\" title=\"Lambda表达式例子\"></a>Lambda表达式例子</h3><p>通过前面的学习, 我们已经掌握了不少Lambda表达式的语法, 不过也还有一些需要我们学习的, 下面列出的代码中全部进行了列出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1] h, 代表入参, 名字可以随意取, 这里省略了括号, </span></span><br><span class=\"line\"><span class=\"comment\">// h + \" No Parens!\"是返回内容, 注意这里省略了return, 实际上是&#123;return h + \" No Parens!\"&#125;</span></span><br><span class=\"line\">h -&gt; h + <span class=\"string\">\" No Parens!\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [2]和第一点的区别是这里括号没有省略</span></span><br><span class=\"line\">(h) -&gt; h + <span class=\"string\">\" More details\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [3]无入参的情况</span></span><br><span class=\"line\">() -&gt; <span class=\"string\">\"Short info\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [4]两个入参的情况, 必须加括号</span></span><br><span class=\"line\">(h, n) -&gt; h + n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [5]当方法体有多行的时候, 则必须加上花括号, 不能省略了.</span></span><br><span class=\"line\">h -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h + <span class=\"string\">\" No Parens!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [6]当你不想省略return的时候, 也必须加上花括号</span></span><br><span class=\"line\">h -&gt; &#123;<span class=\"keyword\">return</span> h + <span class=\"string\">\" No Parens!\"</span>;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lambda表达式的递归\"><a href=\"#Lambda表达式的递归\" class=\"headerlink\" title=\"Lambda表达式的递归\"></a>Lambda表达式的递归</h3><p>其实正常来说Lambda表达式是不能递归的, 因为Lambda表达式没有函数名, 但是java是个神奇的语言:), 请看下面例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IntCall</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">call</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveFactorial</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> IntCall fact;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    fact = n -&gt; n == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : n * fact.call(n - <span class=\"number\">1</span>); <span class=\"comment\">//递归!</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">      System.out.println(fact.call(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好吧! 上面的写法确实通过定义一个域fact, 给我们的Lambda表达式间接的附上了一个名称! </p>\n<p>我自己试了下, 要写递归代码, 则必须按照上面这样写, 十分苛刻! fact必须是static的!</p>\n<p><strong>[注意]</strong>: 大家还可以关注下尾递归这玩意.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一章, 我仔细说明了Java的函数式编程中的Lambda和FunctionalInterface, 由于时间不早了, 明天要加班, 后天继续来填坑!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>昨天, 我花了一点时间, 从各种函数式编程的教学资料和各类函数式编程相关的出版书籍中吸取精华, 编写了<a href=\"https://zazalu.space/2019/10/20/learn-FP/\">函数式编程范式初探-第一天</a></p>\n<p>很幸运, 今天没有加班, 所以今天早点回家编写第二篇有关函数式编程的文章!</p>\n<p>第二章的内容主要是围绕Java8的函数式编程的相关语法</p>\n<ul>\n<li>Lambda</li>\n<li>FunctionalInterface(函数式接口)</li>\n<li>MethodReferences(方法引用)</li>\n<li>Closure(闭包)</li>\n</ul>\n<p>以上就是本章的主要内容, 同样的, 本文的内容为个人总结, 不保证全部正确.</p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Lambda表达式提供了一种简洁的方式去表示单方法接口(只有一个方法的接口)的实现函数</p>\n<p>They provide a clear and concise way to represent one method interface using an expression. </p>\n<h3 id=\"从我们熟悉的Runnable接口说起\"><a href=\"#从我们熟悉的Runnable接口说起\" class=\"headerlink\" title=\"从我们熟悉的Runnable接口说起\"></a>从我们熟悉的Runnable接口说起</h3><p>Runnable接口是我们进行多线程编程的一个常用接口, 并且它是一个<code>单方法接口</code>, 只有一个run方法</p>\n<p>我相信大家或多或少的写过如下的Runnable代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在这几行代码里, 有多处代码其实在每次编写类似功能的时候, 都是必须带上的, 比如 <code>@Override</code>, <code>public void run()</code>, 甚至<code>new Runnable</code></p>\n<p>这些重复代码, 在以前的java项目代码中是随处可见的, java的coder们也已经早已习惯了这种语法(包括我)</p>\n<p>不过作为开发人员来说, 要有一颗, 从不做重复劳作的心.</p>\n<p>在这里 <code>@Override</code>, <code>public void run()</code>, 甚至<code>new Runnable</code>是重复的, 我们就可以使用Lambda表达式来去除这种重复性, 请看下面的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Runnable r = () -&gt; System.out.println(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n<p>可以看到, 使用Lambda表达式, 我们将代码缩减到了一行, 并且每一个字符都有它的意义, 我们没有做任何重复劳作 , fantastic!</p>\n<p>当然Lambda表达式的存在除了能够去除重复性代码外, 还有一个比较有趣的说法</p>\n<p>Lambda表达式的起源是<code>λ演算</code>, 而λ演算中, 就用常常用到一个类似<code>-&gt;</code>符号, 所以Lambda表达式使用了这个符号, 下面是Lambda表达式写法的一个简单总结图</p>\n<p><img src=\"/images/tmpImage/lambda.png\"></p>\n<p>Lambda的语法非常简单, 我会在下面展示各类Lambda表达式写法, 你要做的只是多看, 多看, 就会记住了</p>\n<h3 id=\"Lambda表达式的魔法\"><a href=\"#Lambda表达式的魔法\" class=\"headerlink\" title=\"Lambda表达式的魔法\"></a>Lambda表达式的魔法</h3><p>刚刚我们看到了Runnable的实现代码通过Lambda表达式改写后, 代码非常精简, 那么其中到底发生了什么魔法呢? </p>\n<p>可以肯定的是, 上面的例子中, <code>() -&gt; System.out.println(&quot;hello&quot;)</code>的写法替代了整个匿名实现类的写法</p>\n<p>但是Java并不是简单的通过语法控制来使得这种写法不会报错, Java通过引入一种叫<code>FunctionalInterface(函数式接口)</code>的模式, 来支持Lambda表达式的语法</p>\n<p>前面我说的<code>单方法接口</code>, 其实就是<code>函数式接口</code>, 接下来为了统一, 我就都用函数式接口来说明</p>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><p>函数式接口的概念很简单, 就是一个单方法的接口实例, 比如Runnable, 就是一个典型的函数式接口</p>\n<p>java的设计者还专门提供了一个注释类来标注函数式接口, <code>@FunctionalInterface</code>, 我们打开Runnable的实现代码就能发现它:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//↓↓↓ 对函数式接口的特殊标注</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class=\"line\"><span class=\"comment\">     * to create a thread, starting the thread causes the object's</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class=\"line\"><span class=\"comment\">     * take any action whatsoever.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span>     java.lang.Thread#run()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不仅如此, java设计者还给我们提供了一个叫<code>java.util.function</code>的包, 这个包中内置了大量的函数式接口, 如果我要在这里全部介绍它们, 就或许有点费时费力, 不过幸运的是, 有人对其进行了一定的总结, 我先把它贴出来, 大家可以看看就好, 不需要自己去记, 需要的时候检索下即可</p>\n<p><img src=\"/images/tmpImage/FunctionInterface_1.png\"><br><img src=\"/images/tmpImage/FunctionInterface_2.png\"></p>\n<p>想必看到这一堆东西, 大家已经开始头疼了, FP是为了简洁而生的, 怎么感觉还是一大堆设定呢? </p>\n<p>先别急, 因为我上面只是列类似API的东西, 所以肯定一次性列的比较全</p>\n<p>事实上, 我们平时用的时候, 就只用到里面的其中一种, 而且常用的就那么几个.</p>\n<p>我们拿Function&lt;T,R&gt;举例, 下面是它的实现(源自jdk8, 为了节省篇幅, 我去掉了注释):</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//default关键字是jdk8的新关键字, 被它修饰的方法可以不需要实现类进行实现</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;V, R&gt; <span class=\"title\">compose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;T, V&gt; <span class=\"title\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Function&lt;T, T&gt; <span class=\"title\">identity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也许你开始产生疑问, 不是说函数式接口是单方法接口吗, 这个Function怎么拥有那么多方法.</p>\n<p>其实函数式接口只要求只有一个强制要求实现的方法就行了, 在这里唯一一个强制实现类必须实现的方法是<code>apply</code>方法</p>\n<p>接下来说说我们怎么直接利用这个Function&lt;T, R&gt;函数式接口</p>\n<p>通过研究方法签名, 我们知道了apply方法接收一个泛型T, 返回另一个泛型R, 所以我们可以写出如下这样的代码去直接用它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function function = a -&gt; <span class=\"string\">\"Hello, \"</span> + a;  <span class=\"comment\">//a -&gt; \"Hello, \" + a这个Lambda表达式就是apply方法的实现</span></span><br><span class=\"line\">System.out.println(function.apply(<span class=\"string\">\"zazlau\"</span>)); <span class=\"comment\">//打印Hello, zazlau</span></span><br></pre></td></tr></table></figure>\n<p>在这里我们使用Lambda表达式结合函数式接口, 做了一次简单的配合, 写出了一个非常小巧的程序</p>\n<p>而如果按照原本的写法, 我们需要写下面这样的代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我们需要先自己定义一个接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">myApply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后使用匿名内部类进行实现</span></span><br><span class=\"line\"> MyFunction function = <span class=\"keyword\">new</span> MyFunction() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">myApply</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, \"</span> + o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">System.out.println(function.myApply(<span class=\"string\">\"zazlau\"</span>)); <span class=\"comment\">//打印Hello, zazlau</span></span><br></pre></td></tr></table></figure></p>\n<p>我的天呐! 人生短暂, 我选择函数式编程….</p>\n<p>函数式接口的内容就暂时介绍到这里, 对于学习来说, 已经足够了, 但是<code>java.util.function</code>包中还有许多东西可以拿出来聊聊, 我会以后的文章中继续完善它.</p>\n<h3 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h3><p>自定义函数式接口非常的简单, 其实我们刚刚已经不知不觉完成了, 我们把上面MyFunction接口稍微加点点缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyFunction</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">myApply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大功告成! 这就是自定义函数式接口, 真没什么好说的!</p>\n<p>为什么要有自定义函数式接口? 那肯定是因为<code>java.util.function</code>包提供给你的不够用造成的!</p>\n<h3 id=\"Lambda表达式例子\"><a href=\"#Lambda表达式例子\" class=\"headerlink\" title=\"Lambda表达式例子\"></a>Lambda表达式例子</h3><p>通过前面的学习, 我们已经掌握了不少Lambda表达式的语法, 不过也还有一些需要我们学习的, 下面列出的代码中全部进行了列出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// [1] h, 代表入参, 名字可以随意取, 这里省略了括号, </span></span><br><span class=\"line\"><span class=\"comment\">// h + \" No Parens!\"是返回内容, 注意这里省略了return, 实际上是&#123;return h + \" No Parens!\"&#125;</span></span><br><span class=\"line\">h -&gt; h + <span class=\"string\">\" No Parens!\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [2]和第一点的区别是这里括号没有省略</span></span><br><span class=\"line\">(h) -&gt; h + <span class=\"string\">\" More details\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [3]无入参的情况</span></span><br><span class=\"line\">() -&gt; <span class=\"string\">\"Short info\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [4]两个入参的情况, 必须加括号</span></span><br><span class=\"line\">(h, n) -&gt; h + n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [5]当方法体有多行的时候, 则必须加上花括号, 不能省略了.</span></span><br><span class=\"line\">h -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h + <span class=\"string\">\" No Parens!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [6]当你不想省略return的时候, 也必须加上花括号</span></span><br><span class=\"line\">h -&gt; &#123;<span class=\"keyword\">return</span> h + <span class=\"string\">\" No Parens!\"</span>;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lambda表达式的递归\"><a href=\"#Lambda表达式的递归\" class=\"headerlink\" title=\"Lambda表达式的递归\"></a>Lambda表达式的递归</h3><p>其实正常来说Lambda表达式是不能递归的, 因为Lambda表达式没有函数名, 但是java是个神奇的语言:), 请看下面例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IntCall</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">call</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursiveFactorial</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> IntCall fact;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    fact = n -&gt; n == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : n * fact.call(n - <span class=\"number\">1</span>); <span class=\"comment\">//递归!</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">      System.out.println(fact.call(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好吧! 上面的写法确实通过定义一个域fact, 给我们的Lambda表达式间接的附上了一个名称! </p>\n<p>我自己试了下, 要写递归代码, 则必须按照上面这样写, 十分苛刻! fact必须是static的!</p>\n<p><strong>[注意]</strong>: 大家还可以关注下尾递归这玩意.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这一章, 我仔细说明了Java的函数式编程中的Lambda和FunctionalInterface, 由于时间不早了, 明天要加班, 后天继续来填坑!</p>\n"},{"title":"JavaScript操作浏览器cookie容易发生的Path问题","date":"2019-07-13T02:21:14.000Z","_content":"\n# 1\n\ncookie已经是熟的不能再熟悉的东西，常常用于一些B和S会话管理的场景\n\nJavaScript提供了一些好用的cookie api供我们使用(我自己测试用的原生的，你如果使用的是别的js库操作，比如npm上的库，那么和本文无关)，比如`document.cookie`\n\n我们在使用的时候，最关注的是key和value，但是可能会忽略几个比较重要的东西，下面讲\n\n# 2\n\ncookie按照host和path进行了分类，默认的path是当前web访问路径，那么如果你在不同路径下操作cookie，就会发生生成了好多份key和value相同的拷贝，这是因为它们的path不一样，导致cookie删除api执行逻辑和你的预期不符导致\n\n# 3\n\n最简单的方法是指定path，我认为不错的写法是指定path为`/${ApplicationContext}`路径即可,或者干脆点指定为`/`，因为host每个网站是不同的，所以不会影响到其他站点cookie\n\n","source":"_posts/javascript-setCookie-path.md","raw":"---\ntitle: JavaScript操作浏览器cookie容易发生的Path问题\ntags: cookie\ncategories: IT\ndate: 2019-07-13 10:21:14\n---\n\n# 1\n\ncookie已经是熟的不能再熟悉的东西，常常用于一些B和S会话管理的场景\n\nJavaScript提供了一些好用的cookie api供我们使用(我自己测试用的原生的，你如果使用的是别的js库操作，比如npm上的库，那么和本文无关)，比如`document.cookie`\n\n我们在使用的时候，最关注的是key和value，但是可能会忽略几个比较重要的东西，下面讲\n\n# 2\n\ncookie按照host和path进行了分类，默认的path是当前web访问路径，那么如果你在不同路径下操作cookie，就会发生生成了好多份key和value相同的拷贝，这是因为它们的path不一样，导致cookie删除api执行逻辑和你的预期不符导致\n\n# 3\n\n最简单的方法是指定path，我认为不错的写法是指定path为`/${ApplicationContext}`路径即可,或者干脆点指定为`/`，因为host每个网站是不同的，所以不会影响到其他站点cookie\n\n","slug":"javascript-setCookie-path","published":1,"updated":"2019-07-13T02:29:50.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9ta001hm6el1yjgazem","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>cookie已经是熟的不能再熟悉的东西，常常用于一些B和S会话管理的场景</p>\n<p>JavaScript提供了一些好用的cookie api供我们使用(我自己测试用的原生的，你如果使用的是别的js库操作，比如npm上的库，那么和本文无关)，比如<code>document.cookie</code></p>\n<p>我们在使用的时候，最关注的是key和value，但是可能会忽略几个比较重要的东西，下面讲</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>cookie按照host和path进行了分类，默认的path是当前web访问路径，那么如果你在不同路径下操作cookie，就会发生生成了好多份key和value相同的拷贝，这是因为它们的path不一样，导致cookie删除api执行逻辑和你的预期不符导致</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>最简单的方法是指定path，我认为不错的写法是指定path为<code>/${ApplicationContext}</code>路径即可,或者干脆点指定为<code>/</code>，因为host每个网站是不同的，所以不会影响到其他站点cookie</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>cookie已经是熟的不能再熟悉的东西，常常用于一些B和S会话管理的场景</p>\n<p>JavaScript提供了一些好用的cookie api供我们使用(我自己测试用的原生的，你如果使用的是别的js库操作，比如npm上的库，那么和本文无关)，比如<code>document.cookie</code></p>\n<p>我们在使用的时候，最关注的是key和value，但是可能会忽略几个比较重要的东西，下面讲</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>cookie按照host和path进行了分类，默认的path是当前web访问路径，那么如果你在不同路径下操作cookie，就会发生生成了好多份key和value相同的拷贝，这是因为它们的path不一样，导致cookie删除api执行逻辑和你的预期不符导致</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>最简单的方法是指定path，我认为不错的写法是指定path为<code>/${ApplicationContext}</code>路径即可,或者干脆点指定为<code>/</code>，因为host每个网站是不同的，所以不会影响到其他站点cookie</p>\n"},{"title":"既然自己懒得搞那就只好认真摸索别人的了-被一些人诟病的mybatis二级缓存","date":"2019-07-31T08:59:06.000Z","_content":"\n# 1 简单介绍\n\nmybatis是javaweb开发再熟悉不过的orm框架。没有公司内部自研的orm框架的话，我见过的基本现在都走mybatis或者spring-jpa\n\n为了加速查询，减少数据库I/O次数，我们都需要缓存这玩意来辅助我们存储一些数据在内存中，利用内存查询速度很快的特点，来让我们的读操作耗时更短。\n\n# 2 吐槽PerpetualCache\n\n我最近经常听人吐槽mybatis的缓存机制（无中生有？），并会在生产上停用其缓存功能，加入额外的(分布式)缓存中间件来自定义控制系统的缓存处理。\n\nmybatis的缓存一路走来，已经从一开始的小小的基本缓存模块，到现在已经变成了一个相当健壮的缓存模块，已经提供了自定义缓存接口，来自定义改变mybatis的缓存策略(虽然还是不够灵活)。\n\n其一级缓存(local cache)是默认使用的，同一个sqlsession使用一个Cache实例，不同的sqlsession使用的是不同的Cache实例。故其细粒度只到sqlsession。结合了ioc容器，比如spring后，这个缓存确实几乎变成了鸡肋。因为现在编程思想趋向于模块化，功能单一化，所以在一次请求范围内，同一个sqlsession能缓存到的数据少之又少（假设不使用分布式或者单机缓存中间件）\n\n既然一级缓存几乎团灭，那么mybatis还有什么防线呢？二级缓存(2nd cache)\n\nmybatis的二级缓存最显著的特点是可以让不同的sqlsession共享同一个Cache实例，细粒度到达命名空间级别(namespace)，也就是说同一个Mapper内的所有curd操作会被同一个Cache管理，不管你使用的是不是同一个sqlsession。\n\n表面上看上去可以让人发出`哇哦`的声音，但是一用起来，还是很`sad`的。\n\n由于根据业务逻辑，代码都是分模块的，所以我们有超多个Mapper来对应不同的表结构。于是鸡肋的一点依旧发生了，A_Mapper的修改不会刷新B_Mapper的缓存数据，导致缓存数据变成了`dirty data`，╮(╯▽╰)╭真的惨\n\n# 3 挽救\n\n很多人看到到这里应该也开始想放弃使用mybatis二级缓存，或者借助mybatis提供的自定义缓存接口，来改变mybatis策略，使用一些分布式缓存系统来控制mybatis的缓存。不过由于小项目是真的没必要上完整的缓存中间件的，所以默认存在的PerpetualCache还是挺香的。可是我前面也说了，二级缓存最大的毛病就是细粒度只到命名空间(namespace)，而我们正常的应用场景是需要一个全局缓存实例。那么该怎么玩呢？\n\n查看mybatis3的文档，在cache的最角落里有一个小小的功能存在着。`cache-ref`功能。文档对它的描述真的非常短小精湛，而且是在最底下。\n\n接下来我就说下如何使用它来实现一个简单的全局缓存实例\n\n# 4 实验\n\n本实验源码不开放了，大家看看结果就好，不懂可以回复我慢慢解答。（懒得整一份单独的代码出来！）\n\n> 先来测试下默认的二级缓存的细粒度是否是namespace\n\n我们执行两个Mapper方法，\n一个是`LikeMapper`的`inserts`方法，更新方法，会刷新缓存\n一个是`MessageMapper`的`selects`方法，查询方法，会利用到`LikeMapper`中的表数据进行查询\n两者在不同的namespace中，所以`inserts`方法的执行不会刷新另一个方法所在的缓存空间\n\nOK，接下来我按`selects`->`inserts`->`selects`的顺序来执行，我们的预期目的是：第二次`selects`方法依旧从缓存中取数据\n\n下面是日志打印，\n<img src=\"/images/tmpImage/mybatis_level_2.png\">\n\n第二次selects的打印可以看出，依旧会从缓存中获取数据验证了，确实默认的二级缓存细粒度是只到namespace的\n\n> 使用cache-ref来使得两个Mapper使用同一个Cache实例\n\n在LikeMapper中如下配置\n```\n<mapper namespace=\"LikeMapper\">\n\n    <!--选择一个Namespace作为主namespace，其余Mapper全部使用cache-ref引用此Cache-->\n\t<cache/>\n...\n...\n\n</mapper>\n```\n\n在MessageMapper中如下配置\n```\n<mapper namespace=\"LikeMapper\">\n\n\t<cache-ref namespace=\"LikeMapper\"/>\n...\n...\n\n</mapper>\n```\n\n随后，我们在按顺序执行一次刚刚的方法，下面是日志打印\n<img src=\"/images/tmpImage/mybatis_level_2_global.png\">\n\n可以看到，第二次select依旧执行了sql语句，证明了不同namespace的Mapper都使用了同一个cache\n\n# 5 总结\n\n通过cache-ref可以间接的实现全局缓存实例的效果，从而解决目前常常遇到的一类缓存数据脏读问题而不得不抛弃mybatis二级缓存功能的现象\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/mybatis-level-2-cache-global-i.md","raw":"---\ntitle: 既然自己懒得搞那就只好认真摸索别人的了-被一些人诟病的mybatis二级缓存\ntags: mybatis\ncategories: IT\ndate: 2019-07-31 16:59:06\n---\n\n# 1 简单介绍\n\nmybatis是javaweb开发再熟悉不过的orm框架。没有公司内部自研的orm框架的话，我见过的基本现在都走mybatis或者spring-jpa\n\n为了加速查询，减少数据库I/O次数，我们都需要缓存这玩意来辅助我们存储一些数据在内存中，利用内存查询速度很快的特点，来让我们的读操作耗时更短。\n\n# 2 吐槽PerpetualCache\n\n我最近经常听人吐槽mybatis的缓存机制（无中生有？），并会在生产上停用其缓存功能，加入额外的(分布式)缓存中间件来自定义控制系统的缓存处理。\n\nmybatis的缓存一路走来，已经从一开始的小小的基本缓存模块，到现在已经变成了一个相当健壮的缓存模块，已经提供了自定义缓存接口，来自定义改变mybatis的缓存策略(虽然还是不够灵活)。\n\n其一级缓存(local cache)是默认使用的，同一个sqlsession使用一个Cache实例，不同的sqlsession使用的是不同的Cache实例。故其细粒度只到sqlsession。结合了ioc容器，比如spring后，这个缓存确实几乎变成了鸡肋。因为现在编程思想趋向于模块化，功能单一化，所以在一次请求范围内，同一个sqlsession能缓存到的数据少之又少（假设不使用分布式或者单机缓存中间件）\n\n既然一级缓存几乎团灭，那么mybatis还有什么防线呢？二级缓存(2nd cache)\n\nmybatis的二级缓存最显著的特点是可以让不同的sqlsession共享同一个Cache实例，细粒度到达命名空间级别(namespace)，也就是说同一个Mapper内的所有curd操作会被同一个Cache管理，不管你使用的是不是同一个sqlsession。\n\n表面上看上去可以让人发出`哇哦`的声音，但是一用起来，还是很`sad`的。\n\n由于根据业务逻辑，代码都是分模块的，所以我们有超多个Mapper来对应不同的表结构。于是鸡肋的一点依旧发生了，A_Mapper的修改不会刷新B_Mapper的缓存数据，导致缓存数据变成了`dirty data`，╮(╯▽╰)╭真的惨\n\n# 3 挽救\n\n很多人看到到这里应该也开始想放弃使用mybatis二级缓存，或者借助mybatis提供的自定义缓存接口，来改变mybatis策略，使用一些分布式缓存系统来控制mybatis的缓存。不过由于小项目是真的没必要上完整的缓存中间件的，所以默认存在的PerpetualCache还是挺香的。可是我前面也说了，二级缓存最大的毛病就是细粒度只到命名空间(namespace)，而我们正常的应用场景是需要一个全局缓存实例。那么该怎么玩呢？\n\n查看mybatis3的文档，在cache的最角落里有一个小小的功能存在着。`cache-ref`功能。文档对它的描述真的非常短小精湛，而且是在最底下。\n\n接下来我就说下如何使用它来实现一个简单的全局缓存实例\n\n# 4 实验\n\n本实验源码不开放了，大家看看结果就好，不懂可以回复我慢慢解答。（懒得整一份单独的代码出来！）\n\n> 先来测试下默认的二级缓存的细粒度是否是namespace\n\n我们执行两个Mapper方法，\n一个是`LikeMapper`的`inserts`方法，更新方法，会刷新缓存\n一个是`MessageMapper`的`selects`方法，查询方法，会利用到`LikeMapper`中的表数据进行查询\n两者在不同的namespace中，所以`inserts`方法的执行不会刷新另一个方法所在的缓存空间\n\nOK，接下来我按`selects`->`inserts`->`selects`的顺序来执行，我们的预期目的是：第二次`selects`方法依旧从缓存中取数据\n\n下面是日志打印，\n<img src=\"/images/tmpImage/mybatis_level_2.png\">\n\n第二次selects的打印可以看出，依旧会从缓存中获取数据验证了，确实默认的二级缓存细粒度是只到namespace的\n\n> 使用cache-ref来使得两个Mapper使用同一个Cache实例\n\n在LikeMapper中如下配置\n```\n<mapper namespace=\"LikeMapper\">\n\n    <!--选择一个Namespace作为主namespace，其余Mapper全部使用cache-ref引用此Cache-->\n\t<cache/>\n...\n...\n\n</mapper>\n```\n\n在MessageMapper中如下配置\n```\n<mapper namespace=\"LikeMapper\">\n\n\t<cache-ref namespace=\"LikeMapper\"/>\n...\n...\n\n</mapper>\n```\n\n随后，我们在按顺序执行一次刚刚的方法，下面是日志打印\n<img src=\"/images/tmpImage/mybatis_level_2_global.png\">\n\n可以看到，第二次select依旧执行了sql语句，证明了不同namespace的Mapper都使用了同一个cache\n\n# 5 总结\n\n通过cache-ref可以间接的实现全局缓存实例的效果，从而解决目前常常遇到的一类缓存数据脏读问题而不得不抛弃mybatis二级缓存功能的现象\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"mybatis-level-2-cache-global-i","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tb001km6elljpu9jv9","content":"<h1 id=\"1-简单介绍\"><a href=\"#1-简单介绍\" class=\"headerlink\" title=\"1 简单介绍\"></a>1 简单介绍</h1><p>mybatis是javaweb开发再熟悉不过的orm框架。没有公司内部自研的orm框架的话，我见过的基本现在都走mybatis或者spring-jpa</p>\n<p>为了加速查询，减少数据库I/O次数，我们都需要缓存这玩意来辅助我们存储一些数据在内存中，利用内存查询速度很快的特点，来让我们的读操作耗时更短。</p>\n<h1 id=\"2-吐槽PerpetualCache\"><a href=\"#2-吐槽PerpetualCache\" class=\"headerlink\" title=\"2 吐槽PerpetualCache\"></a>2 吐槽PerpetualCache</h1><p>我最近经常听人吐槽mybatis的缓存机制（无中生有？），并会在生产上停用其缓存功能，加入额外的(分布式)缓存中间件来自定义控制系统的缓存处理。</p>\n<p>mybatis的缓存一路走来，已经从一开始的小小的基本缓存模块，到现在已经变成了一个相当健壮的缓存模块，已经提供了自定义缓存接口，来自定义改变mybatis的缓存策略(虽然还是不够灵活)。</p>\n<p>其一级缓存(local cache)是默认使用的，同一个sqlsession使用一个Cache实例，不同的sqlsession使用的是不同的Cache实例。故其细粒度只到sqlsession。结合了ioc容器，比如spring后，这个缓存确实几乎变成了鸡肋。因为现在编程思想趋向于模块化，功能单一化，所以在一次请求范围内，同一个sqlsession能缓存到的数据少之又少（假设不使用分布式或者单机缓存中间件）</p>\n<p>既然一级缓存几乎团灭，那么mybatis还有什么防线呢？二级缓存(2nd cache)</p>\n<p>mybatis的二级缓存最显著的特点是可以让不同的sqlsession共享同一个Cache实例，细粒度到达命名空间级别(namespace)，也就是说同一个Mapper内的所有curd操作会被同一个Cache管理，不管你使用的是不是同一个sqlsession。</p>\n<p>表面上看上去可以让人发出<code>哇哦</code>的声音，但是一用起来，还是很<code>sad</code>的。</p>\n<p>由于根据业务逻辑，代码都是分模块的，所以我们有超多个Mapper来对应不同的表结构。于是鸡肋的一点依旧发生了，A_Mapper的修改不会刷新B_Mapper的缓存数据，导致缓存数据变成了<code>dirty data</code>，╮(╯▽╰)╭真的惨</p>\n<h1 id=\"3-挽救\"><a href=\"#3-挽救\" class=\"headerlink\" title=\"3 挽救\"></a>3 挽救</h1><p>很多人看到到这里应该也开始想放弃使用mybatis二级缓存，或者借助mybatis提供的自定义缓存接口，来改变mybatis策略，使用一些分布式缓存系统来控制mybatis的缓存。不过由于小项目是真的没必要上完整的缓存中间件的，所以默认存在的PerpetualCache还是挺香的。可是我前面也说了，二级缓存最大的毛病就是细粒度只到命名空间(namespace)，而我们正常的应用场景是需要一个全局缓存实例。那么该怎么玩呢？</p>\n<p>查看mybatis3的文档，在cache的最角落里有一个小小的功能存在着。<code>cache-ref</code>功能。文档对它的描述真的非常短小精湛，而且是在最底下。</p>\n<p>接下来我就说下如何使用它来实现一个简单的全局缓存实例</p>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4 实验\"></a>4 实验</h1><p>本实验源码不开放了，大家看看结果就好，不懂可以回复我慢慢解答。（懒得整一份单独的代码出来！）</p>\n<blockquote>\n<p>先来测试下默认的二级缓存的细粒度是否是namespace</p>\n</blockquote>\n<p>我们执行两个Mapper方法，<br>一个是<code>LikeMapper</code>的<code>inserts</code>方法，更新方法，会刷新缓存<br>一个是<code>MessageMapper</code>的<code>selects</code>方法，查询方法，会利用到<code>LikeMapper</code>中的表数据进行查询<br>两者在不同的namespace中，所以<code>inserts</code>方法的执行不会刷新另一个方法所在的缓存空间</p>\n<p>OK，接下来我按<code>selects</code>-&gt;<code>inserts</code>-&gt;<code>selects</code>的顺序来执行，我们的预期目的是：第二次<code>selects</code>方法依旧从缓存中取数据</p>\n<p>下面是日志打印，<br><img src=\"/images/tmpImage/mybatis_level_2.png\"></p>\n<p>第二次selects的打印可以看出，依旧会从缓存中获取数据验证了，确实默认的二级缓存细粒度是只到namespace的</p>\n<blockquote>\n<p>使用cache-ref来使得两个Mapper使用同一个Cache实例</p>\n</blockquote>\n<p>在LikeMapper中如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;LikeMapper&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--选择一个Namespace作为主namespace，其余Mapper全部使用cache-ref引用此Cache--&gt;</span><br><span class=\"line\">\t&lt;cache/&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在MessageMapper中如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;LikeMapper&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;cache-ref namespace=&quot;LikeMapper&quot;/&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\n<p>随后，我们在按顺序执行一次刚刚的方法，下面是日志打印<br><img src=\"/images/tmpImage/mybatis_level_2_global.png\"></p>\n<p>可以看到，第二次select依旧执行了sql语句，证明了不同namespace的Mapper都使用了同一个cache</p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><p>通过cache-ref可以间接的实现全局缓存实例的效果，从而解决目前常常遇到的一类缓存数据脏读问题而不得不抛弃mybatis二级缓存功能的现象</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-简单介绍\"><a href=\"#1-简单介绍\" class=\"headerlink\" title=\"1 简单介绍\"></a>1 简单介绍</h1><p>mybatis是javaweb开发再熟悉不过的orm框架。没有公司内部自研的orm框架的话，我见过的基本现在都走mybatis或者spring-jpa</p>\n<p>为了加速查询，减少数据库I/O次数，我们都需要缓存这玩意来辅助我们存储一些数据在内存中，利用内存查询速度很快的特点，来让我们的读操作耗时更短。</p>\n<h1 id=\"2-吐槽PerpetualCache\"><a href=\"#2-吐槽PerpetualCache\" class=\"headerlink\" title=\"2 吐槽PerpetualCache\"></a>2 吐槽PerpetualCache</h1><p>我最近经常听人吐槽mybatis的缓存机制（无中生有？），并会在生产上停用其缓存功能，加入额外的(分布式)缓存中间件来自定义控制系统的缓存处理。</p>\n<p>mybatis的缓存一路走来，已经从一开始的小小的基本缓存模块，到现在已经变成了一个相当健壮的缓存模块，已经提供了自定义缓存接口，来自定义改变mybatis的缓存策略(虽然还是不够灵活)。</p>\n<p>其一级缓存(local cache)是默认使用的，同一个sqlsession使用一个Cache实例，不同的sqlsession使用的是不同的Cache实例。故其细粒度只到sqlsession。结合了ioc容器，比如spring后，这个缓存确实几乎变成了鸡肋。因为现在编程思想趋向于模块化，功能单一化，所以在一次请求范围内，同一个sqlsession能缓存到的数据少之又少（假设不使用分布式或者单机缓存中间件）</p>\n<p>既然一级缓存几乎团灭，那么mybatis还有什么防线呢？二级缓存(2nd cache)</p>\n<p>mybatis的二级缓存最显著的特点是可以让不同的sqlsession共享同一个Cache实例，细粒度到达命名空间级别(namespace)，也就是说同一个Mapper内的所有curd操作会被同一个Cache管理，不管你使用的是不是同一个sqlsession。</p>\n<p>表面上看上去可以让人发出<code>哇哦</code>的声音，但是一用起来，还是很<code>sad</code>的。</p>\n<p>由于根据业务逻辑，代码都是分模块的，所以我们有超多个Mapper来对应不同的表结构。于是鸡肋的一点依旧发生了，A_Mapper的修改不会刷新B_Mapper的缓存数据，导致缓存数据变成了<code>dirty data</code>，╮(╯▽╰)╭真的惨</p>\n<h1 id=\"3-挽救\"><a href=\"#3-挽救\" class=\"headerlink\" title=\"3 挽救\"></a>3 挽救</h1><p>很多人看到到这里应该也开始想放弃使用mybatis二级缓存，或者借助mybatis提供的自定义缓存接口，来改变mybatis策略，使用一些分布式缓存系统来控制mybatis的缓存。不过由于小项目是真的没必要上完整的缓存中间件的，所以默认存在的PerpetualCache还是挺香的。可是我前面也说了，二级缓存最大的毛病就是细粒度只到命名空间(namespace)，而我们正常的应用场景是需要一个全局缓存实例。那么该怎么玩呢？</p>\n<p>查看mybatis3的文档，在cache的最角落里有一个小小的功能存在着。<code>cache-ref</code>功能。文档对它的描述真的非常短小精湛，而且是在最底下。</p>\n<p>接下来我就说下如何使用它来实现一个简单的全局缓存实例</p>\n<h1 id=\"4-实验\"><a href=\"#4-实验\" class=\"headerlink\" title=\"4 实验\"></a>4 实验</h1><p>本实验源码不开放了，大家看看结果就好，不懂可以回复我慢慢解答。（懒得整一份单独的代码出来！）</p>\n<blockquote>\n<p>先来测试下默认的二级缓存的细粒度是否是namespace</p>\n</blockquote>\n<p>我们执行两个Mapper方法，<br>一个是<code>LikeMapper</code>的<code>inserts</code>方法，更新方法，会刷新缓存<br>一个是<code>MessageMapper</code>的<code>selects</code>方法，查询方法，会利用到<code>LikeMapper</code>中的表数据进行查询<br>两者在不同的namespace中，所以<code>inserts</code>方法的执行不会刷新另一个方法所在的缓存空间</p>\n<p>OK，接下来我按<code>selects</code>-&gt;<code>inserts</code>-&gt;<code>selects</code>的顺序来执行，我们的预期目的是：第二次<code>selects</code>方法依旧从缓存中取数据</p>\n<p>下面是日志打印，<br><img src=\"/images/tmpImage/mybatis_level_2.png\"></p>\n<p>第二次selects的打印可以看出，依旧会从缓存中获取数据验证了，确实默认的二级缓存细粒度是只到namespace的</p>\n<blockquote>\n<p>使用cache-ref来使得两个Mapper使用同一个Cache实例</p>\n</blockquote>\n<p>在LikeMapper中如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;LikeMapper&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--选择一个Namespace作为主namespace，其余Mapper全部使用cache-ref引用此Cache--&gt;</span><br><span class=\"line\">\t&lt;cache/&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在MessageMapper中如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mapper namespace=&quot;LikeMapper&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;cache-ref namespace=&quot;LikeMapper&quot;/&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p>\n<p>随后，我们在按顺序执行一次刚刚的方法，下面是日志打印<br><img src=\"/images/tmpImage/mybatis_level_2_global.png\"></p>\n<p>可以看到，第二次select依旧执行了sql语句，证明了不同namespace的Mapper都使用了同一个cache</p>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h1><p>通过cache-ref可以间接的实现全局缓存实例的效果，从而解决目前常常遇到的一类缓存数据脏读问题而不得不抛弃mybatis二级缓存功能的现象</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"hexo博客多环境同步使用","date":"2019-04-30T02:11:43.000Z","_content":"\n最近自己可使用的机子多起来了，一台windows，一台mac，一台ubuntu。windows我目前是纯娱乐，mac是之前大学时候常用的电脑，ubuntu是之前为了加强自己对linux系统的好感度最近才买的机子，准备未来在这个机子上做主要IT开发任务（\b还很年轻还能挖坑.jpg）\n\n但是机子多了也带了一定的困扰，我其实是一个爱记录的人，之前做记录一般都是在mac上做，但是因为最近想学一些新语言的练习开发项目，mac这台电脑内存过小（仍在考虑这台仍可以使用但是性能已经不佳的mac该如何处理，后续如何让它起到一定价值，还在思考中），我有点用的不舒服，所以自己弄了一台16G内存来专门负责以后的学习工作兼并开发的电脑。为了方便起见，我肯定会将博客相关的全部挪到ubuntu上去做。不过一直觉得mac用起来非常舒服，估计在写一些非技术文章的时候还是会考虑打开mac来写。\n\n所以就有了可以同时在mac和ubuntu上写博客的需求。今天就简单的写一下实现思路。\n\n## hexo本地数据同步\n\nhexo博客在不同环境想要同步使用，最关键的一点就是hexo data的同步，也就是你的那些文章，主题，配置文件。这些文件是hexo博客的自定义数据，无法从别人那里拿到，也无法从hexo官网拿到，我这里就把这些数据归类为本地数据。\n\n当你换一台电脑，虽然可以非常简单的重新搭建hexo博客环境，但是如果不同步之前的本地数据，那么这个新搭建的hexo博客就和新的hexo博客没区别。\n\n绕了一大圈，总结来说，想要从一台电脑转到另一台电脑，然后实现hexo博客的转移，最根本的要素就是本地数据的转移。\n\n那么我们如何做到本地数据的转移呢？\n\n1. 使用便携式硬盘，比如u盘，拷贝你的本地数据，然后转到新的电脑上。\n2. 使用现在流行的云端存储，那么只要有网络的情况下，不管是什么环境，你都可以轻松的同步你的hexo博客\n\nu盘这种形式我最早就用过，但是缺点有很多，最明显的缺点就是同步率低而且麻烦，只适合用于转移使用环境，比如你从一台电脑转移到另一台，并且从此不在之前的电脑上进行hexo博客使用\n所以将hexo本地数据云备份是最好的办法，它不仅可以让我们实时的进行本地数据同步，并且可以有网络的机子上快速搭建，无需考虑其他u盘等什么麻烦的要素。\n\n## hexo本地数据云端管理实现思路\n\n上小节我谈到，最好的hexo本地数据管理方式是云端管理，那么如何这个云端管理如何运行呢？它的整体架构是怎么样的呢？\n\n1. 选择一款好用的云端存储软件，目前来看最切合的还是github，因为hexo博客的view层数据本身就是存在github上的，然后通过gitpage.io去展现的。使用github提供的远端git库，我们就可以很方便把hexo博客运行和本地数据统一管理起来。\n\n2. 将本地数据存至远端git库，这一步其实也完成了hexo本地数据备份的功能，具体操作可以见“hexo备份之路”\n\n3. 每次在本地想写文章的时候，先进行git远端库和本地库的数据同步操作（git pull），让本地数据和远端git库一致，并且始终已远端git库作为自己父类数据，本地的数据只看成子类数据，每次在本地完成新文章编写后，将最新的数据提交到远端git库（git push），实现父类数据的更新。\n\n## 总结\n\n总而言之，hexo多环境同步使用的核心思路就是\n\n1. 云端存储本地数据\n2. 每次更改前先将从云端同步数据到本地，每次更改完后将本地数据提交到云端\n\n## 注意事项\n\n虽然思想很简单，但是还是说一些注意事项\n\n1. git相关代码会产生较多而且固定化，建议使用shell脚本，将所有命令整合成一个语句\n\n2. 由于使用了git，所以要遵守代码管理软件的通用规则，那就是必须先更新再提交，以免造成云端数据问题","source":"_posts/hexo博客多环境同步使用.md","raw":"---\ntitle: hexo博客多环境同步使用\ntags: hexo\ncategories: IT\ndate: 2019-04-30 10:11:43\n---\n\n最近自己可使用的机子多起来了，一台windows，一台mac，一台ubuntu。windows我目前是纯娱乐，mac是之前大学时候常用的电脑，ubuntu是之前为了加强自己对linux系统的好感度最近才买的机子，准备未来在这个机子上做主要IT开发任务（\b还很年轻还能挖坑.jpg）\n\n但是机子多了也带了一定的困扰，我其实是一个爱记录的人，之前做记录一般都是在mac上做，但是因为最近想学一些新语言的练习开发项目，mac这台电脑内存过小（仍在考虑这台仍可以使用但是性能已经不佳的mac该如何处理，后续如何让它起到一定价值，还在思考中），我有点用的不舒服，所以自己弄了一台16G内存来专门负责以后的学习工作兼并开发的电脑。为了方便起见，我肯定会将博客相关的全部挪到ubuntu上去做。不过一直觉得mac用起来非常舒服，估计在写一些非技术文章的时候还是会考虑打开mac来写。\n\n所以就有了可以同时在mac和ubuntu上写博客的需求。今天就简单的写一下实现思路。\n\n## hexo本地数据同步\n\nhexo博客在不同环境想要同步使用，最关键的一点就是hexo data的同步，也就是你的那些文章，主题，配置文件。这些文件是hexo博客的自定义数据，无法从别人那里拿到，也无法从hexo官网拿到，我这里就把这些数据归类为本地数据。\n\n当你换一台电脑，虽然可以非常简单的重新搭建hexo博客环境，但是如果不同步之前的本地数据，那么这个新搭建的hexo博客就和新的hexo博客没区别。\n\n绕了一大圈，总结来说，想要从一台电脑转到另一台电脑，然后实现hexo博客的转移，最根本的要素就是本地数据的转移。\n\n那么我们如何做到本地数据的转移呢？\n\n1. 使用便携式硬盘，比如u盘，拷贝你的本地数据，然后转到新的电脑上。\n2. 使用现在流行的云端存储，那么只要有网络的情况下，不管是什么环境，你都可以轻松的同步你的hexo博客\n\nu盘这种形式我最早就用过，但是缺点有很多，最明显的缺点就是同步率低而且麻烦，只适合用于转移使用环境，比如你从一台电脑转移到另一台，并且从此不在之前的电脑上进行hexo博客使用\n所以将hexo本地数据云备份是最好的办法，它不仅可以让我们实时的进行本地数据同步，并且可以有网络的机子上快速搭建，无需考虑其他u盘等什么麻烦的要素。\n\n## hexo本地数据云端管理实现思路\n\n上小节我谈到，最好的hexo本地数据管理方式是云端管理，那么如何这个云端管理如何运行呢？它的整体架构是怎么样的呢？\n\n1. 选择一款好用的云端存储软件，目前来看最切合的还是github，因为hexo博客的view层数据本身就是存在github上的，然后通过gitpage.io去展现的。使用github提供的远端git库，我们就可以很方便把hexo博客运行和本地数据统一管理起来。\n\n2. 将本地数据存至远端git库，这一步其实也完成了hexo本地数据备份的功能，具体操作可以见“hexo备份之路”\n\n3. 每次在本地想写文章的时候，先进行git远端库和本地库的数据同步操作（git pull），让本地数据和远端git库一致，并且始终已远端git库作为自己父类数据，本地的数据只看成子类数据，每次在本地完成新文章编写后，将最新的数据提交到远端git库（git push），实现父类数据的更新。\n\n## 总结\n\n总而言之，hexo多环境同步使用的核心思路就是\n\n1. 云端存储本地数据\n2. 每次更改前先将从云端同步数据到本地，每次更改完后将本地数据提交到云端\n\n## 注意事项\n\n虽然思想很简单，但是还是说一些注意事项\n\n1. git相关代码会产生较多而且固定化，建议使用shell脚本，将所有命令整合成一个语句\n\n2. 由于使用了git，所以要遵守代码管理软件的通用规则，那就是必须先更新再提交，以免造成云端数据问题","slug":"hexo博客多环境同步使用","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9td001nm6elkzzuvxfo","content":"<p>最近自己可使用的机子多起来了，一台windows，一台mac，一台ubuntu。windows我目前是纯娱乐，mac是之前大学时候常用的电脑，ubuntu是之前为了加强自己对linux系统的好感度最近才买的机子，准备未来在这个机子上做主要IT开发任务（\b还很年轻还能挖坑.jpg）</p>\n<p>但是机子多了也带了一定的困扰，我其实是一个爱记录的人，之前做记录一般都是在mac上做，但是因为最近想学一些新语言的练习开发项目，mac这台电脑内存过小（仍在考虑这台仍可以使用但是性能已经不佳的mac该如何处理，后续如何让它起到一定价值，还在思考中），我有点用的不舒服，所以自己弄了一台16G内存来专门负责以后的学习工作兼并开发的电脑。为了方便起见，我肯定会将博客相关的全部挪到ubuntu上去做。不过一直觉得mac用起来非常舒服，估计在写一些非技术文章的时候还是会考虑打开mac来写。</p>\n<p>所以就有了可以同时在mac和ubuntu上写博客的需求。今天就简单的写一下实现思路。</p>\n<h2 id=\"hexo本地数据同步\"><a href=\"#hexo本地数据同步\" class=\"headerlink\" title=\"hexo本地数据同步\"></a>hexo本地数据同步</h2><p>hexo博客在不同环境想要同步使用，最关键的一点就是hexo data的同步，也就是你的那些文章，主题，配置文件。这些文件是hexo博客的自定义数据，无法从别人那里拿到，也无法从hexo官网拿到，我这里就把这些数据归类为本地数据。</p>\n<p>当你换一台电脑，虽然可以非常简单的重新搭建hexo博客环境，但是如果不同步之前的本地数据，那么这个新搭建的hexo博客就和新的hexo博客没区别。</p>\n<p>绕了一大圈，总结来说，想要从一台电脑转到另一台电脑，然后实现hexo博客的转移，最根本的要素就是本地数据的转移。</p>\n<p>那么我们如何做到本地数据的转移呢？</p>\n<ol>\n<li>使用便携式硬盘，比如u盘，拷贝你的本地数据，然后转到新的电脑上。</li>\n<li>使用现在流行的云端存储，那么只要有网络的情况下，不管是什么环境，你都可以轻松的同步你的hexo博客</li>\n</ol>\n<p>u盘这种形式我最早就用过，但是缺点有很多，最明显的缺点就是同步率低而且麻烦，只适合用于转移使用环境，比如你从一台电脑转移到另一台，并且从此不在之前的电脑上进行hexo博客使用<br>所以将hexo本地数据云备份是最好的办法，它不仅可以让我们实时的进行本地数据同步，并且可以有网络的机子上快速搭建，无需考虑其他u盘等什么麻烦的要素。</p>\n<h2 id=\"hexo本地数据云端管理实现思路\"><a href=\"#hexo本地数据云端管理实现思路\" class=\"headerlink\" title=\"hexo本地数据云端管理实现思路\"></a>hexo本地数据云端管理实现思路</h2><p>上小节我谈到，最好的hexo本地数据管理方式是云端管理，那么如何这个云端管理如何运行呢？它的整体架构是怎么样的呢？</p>\n<ol>\n<li><p>选择一款好用的云端存储软件，目前来看最切合的还是github，因为hexo博客的view层数据本身就是存在github上的，然后通过gitpage.io去展现的。使用github提供的远端git库，我们就可以很方便把hexo博客运行和本地数据统一管理起来。</p>\n</li>\n<li><p>将本地数据存至远端git库，这一步其实也完成了hexo本地数据备份的功能，具体操作可以见“hexo备份之路”</p>\n</li>\n<li><p>每次在本地想写文章的时候，先进行git远端库和本地库的数据同步操作（git pull），让本地数据和远端git库一致，并且始终已远端git库作为自己父类数据，本地的数据只看成子类数据，每次在本地完成新文章编写后，将最新的数据提交到远端git库（git push），实现父类数据的更新。</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，hexo多环境同步使用的核心思路就是</p>\n<ol>\n<li>云端存储本地数据</li>\n<li>每次更改前先将从云端同步数据到本地，每次更改完后将本地数据提交到云端</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>虽然思想很简单，但是还是说一些注意事项</p>\n<ol>\n<li><p>git相关代码会产生较多而且固定化，建议使用shell脚本，将所有命令整合成一个语句</p>\n</li>\n<li><p>由于使用了git，所以要遵守代码管理软件的通用规则，那就是必须先更新再提交，以免造成云端数据问题</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近自己可使用的机子多起来了，一台windows，一台mac，一台ubuntu。windows我目前是纯娱乐，mac是之前大学时候常用的电脑，ubuntu是之前为了加强自己对linux系统的好感度最近才买的机子，准备未来在这个机子上做主要IT开发任务（\b还很年轻还能挖坑.jpg）</p>\n<p>但是机子多了也带了一定的困扰，我其实是一个爱记录的人，之前做记录一般都是在mac上做，但是因为最近想学一些新语言的练习开发项目，mac这台电脑内存过小（仍在考虑这台仍可以使用但是性能已经不佳的mac该如何处理，后续如何让它起到一定价值，还在思考中），我有点用的不舒服，所以自己弄了一台16G内存来专门负责以后的学习工作兼并开发的电脑。为了方便起见，我肯定会将博客相关的全部挪到ubuntu上去做。不过一直觉得mac用起来非常舒服，估计在写一些非技术文章的时候还是会考虑打开mac来写。</p>\n<p>所以就有了可以同时在mac和ubuntu上写博客的需求。今天就简单的写一下实现思路。</p>\n<h2 id=\"hexo本地数据同步\"><a href=\"#hexo本地数据同步\" class=\"headerlink\" title=\"hexo本地数据同步\"></a>hexo本地数据同步</h2><p>hexo博客在不同环境想要同步使用，最关键的一点就是hexo data的同步，也就是你的那些文章，主题，配置文件。这些文件是hexo博客的自定义数据，无法从别人那里拿到，也无法从hexo官网拿到，我这里就把这些数据归类为本地数据。</p>\n<p>当你换一台电脑，虽然可以非常简单的重新搭建hexo博客环境，但是如果不同步之前的本地数据，那么这个新搭建的hexo博客就和新的hexo博客没区别。</p>\n<p>绕了一大圈，总结来说，想要从一台电脑转到另一台电脑，然后实现hexo博客的转移，最根本的要素就是本地数据的转移。</p>\n<p>那么我们如何做到本地数据的转移呢？</p>\n<ol>\n<li>使用便携式硬盘，比如u盘，拷贝你的本地数据，然后转到新的电脑上。</li>\n<li>使用现在流行的云端存储，那么只要有网络的情况下，不管是什么环境，你都可以轻松的同步你的hexo博客</li>\n</ol>\n<p>u盘这种形式我最早就用过，但是缺点有很多，最明显的缺点就是同步率低而且麻烦，只适合用于转移使用环境，比如你从一台电脑转移到另一台，并且从此不在之前的电脑上进行hexo博客使用<br>所以将hexo本地数据云备份是最好的办法，它不仅可以让我们实时的进行本地数据同步，并且可以有网络的机子上快速搭建，无需考虑其他u盘等什么麻烦的要素。</p>\n<h2 id=\"hexo本地数据云端管理实现思路\"><a href=\"#hexo本地数据云端管理实现思路\" class=\"headerlink\" title=\"hexo本地数据云端管理实现思路\"></a>hexo本地数据云端管理实现思路</h2><p>上小节我谈到，最好的hexo本地数据管理方式是云端管理，那么如何这个云端管理如何运行呢？它的整体架构是怎么样的呢？</p>\n<ol>\n<li><p>选择一款好用的云端存储软件，目前来看最切合的还是github，因为hexo博客的view层数据本身就是存在github上的，然后通过gitpage.io去展现的。使用github提供的远端git库，我们就可以很方便把hexo博客运行和本地数据统一管理起来。</p>\n</li>\n<li><p>将本地数据存至远端git库，这一步其实也完成了hexo本地数据备份的功能，具体操作可以见“hexo备份之路”</p>\n</li>\n<li><p>每次在本地想写文章的时候，先进行git远端库和本地库的数据同步操作（git pull），让本地数据和远端git库一致，并且始终已远端git库作为自己父类数据，本地的数据只看成子类数据，每次在本地完成新文章编写后，将最新的数据提交到远端git库（git push），实现父类数据的更新。</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，hexo多环境同步使用的核心思路就是</p>\n<ol>\n<li>云端存储本地数据</li>\n<li>每次更改前先将从云端同步数据到本地，每次更改完后将本地数据提交到云端</li>\n</ol>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>虽然思想很简单，但是还是说一些注意事项</p>\n<ol>\n<li><p>git相关代码会产生较多而且固定化，建议使用shell脚本，将所有命令整合成一个语句</p>\n</li>\n<li><p>由于使用了git，所以要遵守代码管理软件的通用规则，那就是必须先更新再提交，以免造成云端数据问题</p>\n</li>\n</ol>\n"},{"title":"在我眼里的mysql与redis的区别","date":"2019-08-14T03:38:20.000Z","_content":"\n# 1\n\nredis可以你当做nosql内存数据库用, 而mysql是我们耳熟能详的关系型数据库.\n\n关于他们之间的区别, 你google一下, 一大堆一大堆的分析, 那些词汇看的我天花乱坠, 仿佛把redis吹上了天.\n\n不过我发现大家好像都忘记了一个在实际开发中更容易想到的优点. 我接下来就来说说\n\n# 2\n\n和oracle不一样,mysql不存在什么序列锁,所以写代码的时候要非常小心并发问题带来的数据异常. 不过这些对于现在的java社区来说已经不成问题. spring框架对数据库的事务支持相当的优雅, 我们只需一点点配置,就可以精确的控制事务的范围,事务的级别.\n\n但是我们退一步想,如果因为一些原因,公司需要开发自己的IOC容器,AOP框架这些玩意. 这时候,我们就没法偷懒了. 事务控制这些就必须自己写.\n\n我前面也说了和oracle不同,oracle存在一种叫序列锁的东西,所以在编写代码的时候,做一点点的同步控制, 就可以有效防止因数据一致性问题引发的数据异常问题\n\n直到现在为止, 最新的mysql8, 使用默认的事务级别REPEATABLE-READ , 在多线程同时执行读写的情况下,依旧会发生这类问题. 有疑问的可以自己去测试下,开两个mysql客户端,然后同时开启事务A和B, 在A事务中更新一个flag值,在B事务中flag值依旧是旧的. 这会导致代码中if判断的逻辑和业务不符.\n\n不过这并不怪mysql, 因为mysql官方对于事务级别REPEATABLE-READ并不提供这方面的解决方案,因为它们已经有了串行化事务级别.\n\n但是由于硬盘IO效率低, 使用串行化, 发生堵塞最后影响性能是必然的, 所以现在都是用高级语言去进行同步控制, 会比mysql自己处理性能更好.\n\n但是redis单线程架构+内存操作速度快, 故事就不一样了, 可以说省了不少事,下一节慢慢说\n\n# 3\n\n上一节我吐槽了一些mysql同步控制相关的话题, 我的意思是使用mysql的时候, 为了达到完美使用的目的, 必须配合高级语言的锁机制去实现, 使得我们开发人员要多操心一些东西.\n\n这一节我就来说说redis的一个好处, 它让我们少操心了很多事情.\n\nredis的最大特点是它是单线程架构, emmm, 这不是重点...  \n\nredis的最大特点是它提供了一些原子性的指令!  \n\n那么事情就变得简单了, 有一些简单的计数器场景下, 我们对计数+1操作, 都不需要去做任何的事务控制, 同步控制.  不同的客户端同时发送递增原子性指令,比如`incr`, 到达redis后, 被redis消息队列接受,随后被redis一个个依次执行! 最后我们得到的数据也不会出错\n\n不过这个情况是符合直接使用这些原子性指令的时候,如果你中间参杂了其他非原子性指令, 比如你先get一个数据,再做增1. 那原子性结构就被破坏了, 数据一致性问题依旧会发生 请注意哦!\n\n# 总结\n\n其实说了半天, 我想说的就是redis提供了一些原子性指令,对于一些简单的计数器场景, 减少了我们需要的代码量去控制, 这些事情都由redis帮我们完成了\n\n**[注意]**: 非原子性指令依旧需要进行同步控制, 请注意, 本文只针对redis的原子性指令而言, 节省了不少业务层代码量去控制\n\n","source":"_posts/mysql-redis-diff-in-my-eyes.md","raw":"---\ntitle: 在我眼里的mysql与redis的区别\ntags: redis\ncategories: IT\ndate: 2019-08-14 11:38:20\n---\n\n# 1\n\nredis可以你当做nosql内存数据库用, 而mysql是我们耳熟能详的关系型数据库.\n\n关于他们之间的区别, 你google一下, 一大堆一大堆的分析, 那些词汇看的我天花乱坠, 仿佛把redis吹上了天.\n\n不过我发现大家好像都忘记了一个在实际开发中更容易想到的优点. 我接下来就来说说\n\n# 2\n\n和oracle不一样,mysql不存在什么序列锁,所以写代码的时候要非常小心并发问题带来的数据异常. 不过这些对于现在的java社区来说已经不成问题. spring框架对数据库的事务支持相当的优雅, 我们只需一点点配置,就可以精确的控制事务的范围,事务的级别.\n\n但是我们退一步想,如果因为一些原因,公司需要开发自己的IOC容器,AOP框架这些玩意. 这时候,我们就没法偷懒了. 事务控制这些就必须自己写.\n\n我前面也说了和oracle不同,oracle存在一种叫序列锁的东西,所以在编写代码的时候,做一点点的同步控制, 就可以有效防止因数据一致性问题引发的数据异常问题\n\n直到现在为止, 最新的mysql8, 使用默认的事务级别REPEATABLE-READ , 在多线程同时执行读写的情况下,依旧会发生这类问题. 有疑问的可以自己去测试下,开两个mysql客户端,然后同时开启事务A和B, 在A事务中更新一个flag值,在B事务中flag值依旧是旧的. 这会导致代码中if判断的逻辑和业务不符.\n\n不过这并不怪mysql, 因为mysql官方对于事务级别REPEATABLE-READ并不提供这方面的解决方案,因为它们已经有了串行化事务级别.\n\n但是由于硬盘IO效率低, 使用串行化, 发生堵塞最后影响性能是必然的, 所以现在都是用高级语言去进行同步控制, 会比mysql自己处理性能更好.\n\n但是redis单线程架构+内存操作速度快, 故事就不一样了, 可以说省了不少事,下一节慢慢说\n\n# 3\n\n上一节我吐槽了一些mysql同步控制相关的话题, 我的意思是使用mysql的时候, 为了达到完美使用的目的, 必须配合高级语言的锁机制去实现, 使得我们开发人员要多操心一些东西.\n\n这一节我就来说说redis的一个好处, 它让我们少操心了很多事情.\n\nredis的最大特点是它是单线程架构, emmm, 这不是重点...  \n\nredis的最大特点是它提供了一些原子性的指令!  \n\n那么事情就变得简单了, 有一些简单的计数器场景下, 我们对计数+1操作, 都不需要去做任何的事务控制, 同步控制.  不同的客户端同时发送递增原子性指令,比如`incr`, 到达redis后, 被redis消息队列接受,随后被redis一个个依次执行! 最后我们得到的数据也不会出错\n\n不过这个情况是符合直接使用这些原子性指令的时候,如果你中间参杂了其他非原子性指令, 比如你先get一个数据,再做增1. 那原子性结构就被破坏了, 数据一致性问题依旧会发生 请注意哦!\n\n# 总结\n\n其实说了半天, 我想说的就是redis提供了一些原子性指令,对于一些简单的计数器场景, 减少了我们需要的代码量去控制, 这些事情都由redis帮我们完成了\n\n**[注意]**: 非原子性指令依旧需要进行同步控制, 请注意, 本文只针对redis的原子性指令而言, 节省了不少业务层代码量去控制\n\n","slug":"mysql-redis-diff-in-my-eyes","published":1,"updated":"2019-08-15T04:15:49.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9te001qm6elpxdhedpn","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>redis可以你当做nosql内存数据库用, 而mysql是我们耳熟能详的关系型数据库.</p>\n<p>关于他们之间的区别, 你google一下, 一大堆一大堆的分析, 那些词汇看的我天花乱坠, 仿佛把redis吹上了天.</p>\n<p>不过我发现大家好像都忘记了一个在实际开发中更容易想到的优点. 我接下来就来说说</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>和oracle不一样,mysql不存在什么序列锁,所以写代码的时候要非常小心并发问题带来的数据异常. 不过这些对于现在的java社区来说已经不成问题. spring框架对数据库的事务支持相当的优雅, 我们只需一点点配置,就可以精确的控制事务的范围,事务的级别.</p>\n<p>但是我们退一步想,如果因为一些原因,公司需要开发自己的IOC容器,AOP框架这些玩意. 这时候,我们就没法偷懒了. 事务控制这些就必须自己写.</p>\n<p>我前面也说了和oracle不同,oracle存在一种叫序列锁的东西,所以在编写代码的时候,做一点点的同步控制, 就可以有效防止因数据一致性问题引发的数据异常问题</p>\n<p>直到现在为止, 最新的mysql8, 使用默认的事务级别REPEATABLE-READ , 在多线程同时执行读写的情况下,依旧会发生这类问题. 有疑问的可以自己去测试下,开两个mysql客户端,然后同时开启事务A和B, 在A事务中更新一个flag值,在B事务中flag值依旧是旧的. 这会导致代码中if判断的逻辑和业务不符.</p>\n<p>不过这并不怪mysql, 因为mysql官方对于事务级别REPEATABLE-READ并不提供这方面的解决方案,因为它们已经有了串行化事务级别.</p>\n<p>但是由于硬盘IO效率低, 使用串行化, 发生堵塞最后影响性能是必然的, 所以现在都是用高级语言去进行同步控制, 会比mysql自己处理性能更好.</p>\n<p>但是redis单线程架构+内存操作速度快, 故事就不一样了, 可以说省了不少事,下一节慢慢说</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>上一节我吐槽了一些mysql同步控制相关的话题, 我的意思是使用mysql的时候, 为了达到完美使用的目的, 必须配合高级语言的锁机制去实现, 使得我们开发人员要多操心一些东西.</p>\n<p>这一节我就来说说redis的一个好处, 它让我们少操心了很多事情.</p>\n<p>redis的最大特点是它是单线程架构, emmm, 这不是重点…  </p>\n<p>redis的最大特点是它提供了一些原子性的指令!  </p>\n<p>那么事情就变得简单了, 有一些简单的计数器场景下, 我们对计数+1操作, 都不需要去做任何的事务控制, 同步控制.  不同的客户端同时发送递增原子性指令,比如<code>incr</code>, 到达redis后, 被redis消息队列接受,随后被redis一个个依次执行! 最后我们得到的数据也不会出错</p>\n<p>不过这个情况是符合直接使用这些原子性指令的时候,如果你中间参杂了其他非原子性指令, 比如你先get一个数据,再做增1. 那原子性结构就被破坏了, 数据一致性问题依旧会发生 请注意哦!</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实说了半天, 我想说的就是redis提供了一些原子性指令,对于一些简单的计数器场景, 减少了我们需要的代码量去控制, 这些事情都由redis帮我们完成了</p>\n<p><strong>[注意]</strong>: 非原子性指令依旧需要进行同步控制, 请注意, 本文只针对redis的原子性指令而言, 节省了不少业务层代码量去控制</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>redis可以你当做nosql内存数据库用, 而mysql是我们耳熟能详的关系型数据库.</p>\n<p>关于他们之间的区别, 你google一下, 一大堆一大堆的分析, 那些词汇看的我天花乱坠, 仿佛把redis吹上了天.</p>\n<p>不过我发现大家好像都忘记了一个在实际开发中更容易想到的优点. 我接下来就来说说</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>和oracle不一样,mysql不存在什么序列锁,所以写代码的时候要非常小心并发问题带来的数据异常. 不过这些对于现在的java社区来说已经不成问题. spring框架对数据库的事务支持相当的优雅, 我们只需一点点配置,就可以精确的控制事务的范围,事务的级别.</p>\n<p>但是我们退一步想,如果因为一些原因,公司需要开发自己的IOC容器,AOP框架这些玩意. 这时候,我们就没法偷懒了. 事务控制这些就必须自己写.</p>\n<p>我前面也说了和oracle不同,oracle存在一种叫序列锁的东西,所以在编写代码的时候,做一点点的同步控制, 就可以有效防止因数据一致性问题引发的数据异常问题</p>\n<p>直到现在为止, 最新的mysql8, 使用默认的事务级别REPEATABLE-READ , 在多线程同时执行读写的情况下,依旧会发生这类问题. 有疑问的可以自己去测试下,开两个mysql客户端,然后同时开启事务A和B, 在A事务中更新一个flag值,在B事务中flag值依旧是旧的. 这会导致代码中if判断的逻辑和业务不符.</p>\n<p>不过这并不怪mysql, 因为mysql官方对于事务级别REPEATABLE-READ并不提供这方面的解决方案,因为它们已经有了串行化事务级别.</p>\n<p>但是由于硬盘IO效率低, 使用串行化, 发生堵塞最后影响性能是必然的, 所以现在都是用高级语言去进行同步控制, 会比mysql自己处理性能更好.</p>\n<p>但是redis单线程架构+内存操作速度快, 故事就不一样了, 可以说省了不少事,下一节慢慢说</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>上一节我吐槽了一些mysql同步控制相关的话题, 我的意思是使用mysql的时候, 为了达到完美使用的目的, 必须配合高级语言的锁机制去实现, 使得我们开发人员要多操心一些东西.</p>\n<p>这一节我就来说说redis的一个好处, 它让我们少操心了很多事情.</p>\n<p>redis的最大特点是它是单线程架构, emmm, 这不是重点…  </p>\n<p>redis的最大特点是它提供了一些原子性的指令!  </p>\n<p>那么事情就变得简单了, 有一些简单的计数器场景下, 我们对计数+1操作, 都不需要去做任何的事务控制, 同步控制.  不同的客户端同时发送递增原子性指令,比如<code>incr</code>, 到达redis后, 被redis消息队列接受,随后被redis一个个依次执行! 最后我们得到的数据也不会出错</p>\n<p>不过这个情况是符合直接使用这些原子性指令的时候,如果你中间参杂了其他非原子性指令, 比如你先get一个数据,再做增1. 那原子性结构就被破坏了, 数据一致性问题依旧会发生 请注意哦!</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>其实说了半天, 我想说的就是redis提供了一些原子性指令,对于一些简单的计数器场景, 减少了我们需要的代码量去控制, 这些事情都由redis帮我们完成了</p>\n<p><strong>[注意]</strong>: 非原子性指令依旧需要进行同步控制, 请注意, 本文只针对redis的原子性指令而言, 节省了不少业务层代码量去控制</p>\n"},{"title":"我还记得去年写过oracle的批量插入随机数据的脚本,今天补个mysql的吧","date":"2019-08-27T14:25:17.000Z","_content":"\n# 1\n\n银行项目一直用的oracle, 所以我回忆起来自己从来没碰过mysql的批量随机数据插入...\n\n主要是简单记录下批量插入的方式, 会有一个优化的过程, 希望对你有点帮助哦\n\n下面我就讲解如何插入100w条随机测试数据到mysql中\n\n# 建表\n\n```sql\n-- drop table Merchant\ncreate table Merchant\n(\n    id int auto_increment,\n    merchantId VARCHAR(10) not null comment '10位商户编号',\n    merchantName VARCHAR(10) not null comment '商户名称',\n    createTime VARCHAR(12) not null comment '创建时间',\n    constraint Merchant_pk\n        primary key (id)\n) comment '商户表';\n```\n\n# 存储引擎的配置进行优化\n\n可以见:\nhttps://blog.csdn.net/QWERDF10010/article/details/79770764\n\n# insert语句优化\n\n先来看看最暴力的插入\n\n1. 包含100w条数据的爆炸sql :)\n\n```sql\n-- 100w条insert语句\ninsert (...) values (...);\n...\n...\n..\n.\n```\n\n这种形式,就算MyISAM都救不了你, 按下回车后你就可以去睡一觉了, 醒来说不定就好了,嘻嘻\n\n2. 存储过程 写个循环100w次的插入\n\n这种其实和第一种性质一样, 也是巨慢无比的.\n\n```sql\ndelimiter //\ncreate procedure batchInsert()\nbegin\n    declare num int;\n    set num=1;\n    while num<=1000000do\n    -- 100w次loop\n    insert (...) values (...);\n    set num=num+1;\n    end while;\nend\n//\ndelimiter;\n```\n\n看完了暴力的,就来看看怎么优化.\n\n其实优化很简单, 有一种特别简便的方式就可以达到插入速度提升几百倍, 就是使用批量插入的功能\n\n```sql\ninsert (xxx) values(...),(...),(...),(...),(...) ....;\n```\n\n你可以像上面这样, 一次插入几百条.\n然后你就会惊人的发现, 真的很快, 100w条数据大概30多s左右(不同机器环境稍微会不同)就可以完成,由于30s左右已经是我可以接受的范围了. 所以就停手不进行下一步优化, 如果你还是有一点深入的兴趣, 可以看看[这篇文章](https://www.jianshu.com/p/36b87cb3a05a)\n\n# 随机数据如何处理?\n\n你可以使用sql的函数,也可以用任意高级编程语言生成sql文件, 这样你就可以接住高级编程语言的一些api去做随机数据的处理了\n\n如果你和我一样,希望统一用sql帮我们干事, 那么目前来看`rand()`, `floor()`等函数适合你, 但是注意多一个函数就相当于sql慢一点哦 :)\n\n","source":"_posts/mysql-batch-insert-1.md","raw":"---\ntitle: 我还记得去年写过oracle的批量插入随机数据的脚本,今天补个mysql的吧\ntags: batchInsert\ncategories: 计算机\ndate: 2019-08-27 22:25:17\n---\n\n# 1\n\n银行项目一直用的oracle, 所以我回忆起来自己从来没碰过mysql的批量随机数据插入...\n\n主要是简单记录下批量插入的方式, 会有一个优化的过程, 希望对你有点帮助哦\n\n下面我就讲解如何插入100w条随机测试数据到mysql中\n\n# 建表\n\n```sql\n-- drop table Merchant\ncreate table Merchant\n(\n    id int auto_increment,\n    merchantId VARCHAR(10) not null comment '10位商户编号',\n    merchantName VARCHAR(10) not null comment '商户名称',\n    createTime VARCHAR(12) not null comment '创建时间',\n    constraint Merchant_pk\n        primary key (id)\n) comment '商户表';\n```\n\n# 存储引擎的配置进行优化\n\n可以见:\nhttps://blog.csdn.net/QWERDF10010/article/details/79770764\n\n# insert语句优化\n\n先来看看最暴力的插入\n\n1. 包含100w条数据的爆炸sql :)\n\n```sql\n-- 100w条insert语句\ninsert (...) values (...);\n...\n...\n..\n.\n```\n\n这种形式,就算MyISAM都救不了你, 按下回车后你就可以去睡一觉了, 醒来说不定就好了,嘻嘻\n\n2. 存储过程 写个循环100w次的插入\n\n这种其实和第一种性质一样, 也是巨慢无比的.\n\n```sql\ndelimiter //\ncreate procedure batchInsert()\nbegin\n    declare num int;\n    set num=1;\n    while num<=1000000do\n    -- 100w次loop\n    insert (...) values (...);\n    set num=num+1;\n    end while;\nend\n//\ndelimiter;\n```\n\n看完了暴力的,就来看看怎么优化.\n\n其实优化很简单, 有一种特别简便的方式就可以达到插入速度提升几百倍, 就是使用批量插入的功能\n\n```sql\ninsert (xxx) values(...),(...),(...),(...),(...) ....;\n```\n\n你可以像上面这样, 一次插入几百条.\n然后你就会惊人的发现, 真的很快, 100w条数据大概30多s左右(不同机器环境稍微会不同)就可以完成,由于30s左右已经是我可以接受的范围了. 所以就停手不进行下一步优化, 如果你还是有一点深入的兴趣, 可以看看[这篇文章](https://www.jianshu.com/p/36b87cb3a05a)\n\n# 随机数据如何处理?\n\n你可以使用sql的函数,也可以用任意高级编程语言生成sql文件, 这样你就可以接住高级编程语言的一些api去做随机数据的处理了\n\n如果你和我一样,希望统一用sql帮我们干事, 那么目前来看`rand()`, `floor()`等函数适合你, 但是注意多一个函数就相当于sql慢一点哦 :)\n\n","slug":"mysql-batch-insert-1","published":1,"updated":"2019-08-28T09:37:07.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tf001tm6el9oz6gele","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>银行项目一直用的oracle, 所以我回忆起来自己从来没碰过mysql的批量随机数据插入…</p>\n<p>主要是简单记录下批量插入的方式, 会有一个优化的过程, 希望对你有点帮助哦</p>\n<p>下面我就讲解如何插入100w条随机测试数据到mysql中</p>\n<h1 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- drop table Merchant</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Merchant</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> auto_increment,</span><br><span class=\"line\">    merchantId <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'10位商户编号'</span>,</span><br><span class=\"line\">    merchantName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'商户名称'</span>,</span><br><span class=\"line\">    createTime <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">12</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> Merchant_pk</span><br><span class=\"line\">        primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">) <span class=\"keyword\">comment</span> <span class=\"string\">'商户表'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"存储引擎的配置进行优化\"><a href=\"#存储引擎的配置进行优化\" class=\"headerlink\" title=\"存储引擎的配置进行优化\"></a>存储引擎的配置进行优化</h1><p>可以见:<br><a href=\"https://blog.csdn.net/QWERDF10010/article/details/79770764\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/QWERDF10010/article/details/79770764</a></p>\n<h1 id=\"insert语句优化\"><a href=\"#insert语句优化\" class=\"headerlink\" title=\"insert语句优化\"></a>insert语句优化</h1><p>先来看看最暴力的插入</p>\n<ol>\n<li>包含100w条数据的爆炸sql :)</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 100w条insert语句</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> (...) <span class=\"keyword\">values</span> (...);</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">..</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p>这种形式,就算MyISAM都救不了你, 按下回车后你就可以去睡一觉了, 醒来说不定就好了,嘻嘻</p>\n<ol start=\"2\">\n<li>存储过程 写个循环100w次的插入</li>\n</ol>\n<p>这种其实和第一种性质一样, 也是巨慢无比的.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> batchInsert()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">num</span> <span class=\"built_in\">int</span>;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"keyword\">num</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">    while num&lt;=1000000do</span><br><span class=\"line\">    <span class=\"comment\">-- 100w次loop</span></span><br><span class=\"line\">    <span class=\"keyword\">insert</span> (...) <span class=\"keyword\">values</span> (...);</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"keyword\">num</span>=<span class=\"keyword\">num</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">while</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">//</span><br><span class=\"line\">delimiter;</span><br></pre></td></tr></table></figure>\n<p>看完了暴力的,就来看看怎么优化.</p>\n<p>其实优化很简单, 有一种特别简便的方式就可以达到插入速度提升几百倍, 就是使用批量插入的功能</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> (xxx) <span class=\"keyword\">values</span>(...),(...),(...),(...),(...) ....;</span><br></pre></td></tr></table></figure>\n<p>你可以像上面这样, 一次插入几百条.<br>然后你就会惊人的发现, 真的很快, 100w条数据大概30多s左右(不同机器环境稍微会不同)就可以完成,由于30s左右已经是我可以接受的范围了. 所以就停手不进行下一步优化, 如果你还是有一点深入的兴趣, 可以看看<a href=\"https://www.jianshu.com/p/36b87cb3a05a\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h1 id=\"随机数据如何处理\"><a href=\"#随机数据如何处理\" class=\"headerlink\" title=\"随机数据如何处理?\"></a>随机数据如何处理?</h1><p>你可以使用sql的函数,也可以用任意高级编程语言生成sql文件, 这样你就可以接住高级编程语言的一些api去做随机数据的处理了</p>\n<p>如果你和我一样,希望统一用sql帮我们干事, 那么目前来看<code>rand()</code>, <code>floor()</code>等函数适合你, 但是注意多一个函数就相当于sql慢一点哦 :)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>银行项目一直用的oracle, 所以我回忆起来自己从来没碰过mysql的批量随机数据插入…</p>\n<p>主要是简单记录下批量插入的方式, 会有一个优化的过程, 希望对你有点帮助哦</p>\n<p>下面我就讲解如何插入100w条随机测试数据到mysql中</p>\n<h1 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- drop table Merchant</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> Merchant</span><br><span class=\"line\">(</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">int</span> auto_increment,</span><br><span class=\"line\">    merchantId <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'10位商户编号'</span>,</span><br><span class=\"line\">    merchantName <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'商户名称'</span>,</span><br><span class=\"line\">    createTime <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">12</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> <span class=\"keyword\">comment</span> <span class=\"string\">'创建时间'</span>,</span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> Merchant_pk</span><br><span class=\"line\">        primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</span><br><span class=\"line\">) <span class=\"keyword\">comment</span> <span class=\"string\">'商户表'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"存储引擎的配置进行优化\"><a href=\"#存储引擎的配置进行优化\" class=\"headerlink\" title=\"存储引擎的配置进行优化\"></a>存储引擎的配置进行优化</h1><p>可以见:<br><a href=\"https://blog.csdn.net/QWERDF10010/article/details/79770764\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/QWERDF10010/article/details/79770764</a></p>\n<h1 id=\"insert语句优化\"><a href=\"#insert语句优化\" class=\"headerlink\" title=\"insert语句优化\"></a>insert语句优化</h1><p>先来看看最暴力的插入</p>\n<ol>\n<li>包含100w条数据的爆炸sql :)</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 100w条insert语句</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> (...) <span class=\"keyword\">values</span> (...);</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">..</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<p>这种形式,就算MyISAM都救不了你, 按下回车后你就可以去睡一觉了, 醒来说不定就好了,嘻嘻</p>\n<ol start=\"2\">\n<li>存储过程 写个循环100w次的插入</li>\n</ol>\n<p>这种其实和第一种性质一样, 也是巨慢无比的.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> batchInsert()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">declare</span> <span class=\"keyword\">num</span> <span class=\"built_in\">int</span>;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"keyword\">num</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">    while num&lt;=1000000do</span><br><span class=\"line\">    <span class=\"comment\">-- 100w次loop</span></span><br><span class=\"line\">    <span class=\"keyword\">insert</span> (...) <span class=\"keyword\">values</span> (...);</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"keyword\">num</span>=<span class=\"keyword\">num</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">while</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">//</span><br><span class=\"line\">delimiter;</span><br></pre></td></tr></table></figure>\n<p>看完了暴力的,就来看看怎么优化.</p>\n<p>其实优化很简单, 有一种特别简便的方式就可以达到插入速度提升几百倍, 就是使用批量插入的功能</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> (xxx) <span class=\"keyword\">values</span>(...),(...),(...),(...),(...) ....;</span><br></pre></td></tr></table></figure>\n<p>你可以像上面这样, 一次插入几百条.<br>然后你就会惊人的发现, 真的很快, 100w条数据大概30多s左右(不同机器环境稍微会不同)就可以完成,由于30s左右已经是我可以接受的范围了. 所以就停手不进行下一步优化, 如果你还是有一点深入的兴趣, 可以看看<a href=\"https://www.jianshu.com/p/36b87cb3a05a\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p>\n<h1 id=\"随机数据如何处理\"><a href=\"#随机数据如何处理\" class=\"headerlink\" title=\"随机数据如何处理?\"></a>随机数据如何处理?</h1><p>你可以使用sql的函数,也可以用任意高级编程语言生成sql文件, 这样你就可以接住高级编程语言的一些api去做随机数据的处理了</p>\n<p>如果你和我一样,希望统一用sql帮我们干事, 那么目前来看<code>rand()</code>, <code>floor()</code>等函数适合你, 但是注意多一个函数就相当于sql慢一点哦 :)</p>\n"},{"title":"火焰最虚弱的那一瞬间","date":"2019-08-24T14:29:34.000Z","_content":"\n# 1\n\nGoogle推出新操作系统Fuchsia...\n华为推出鸿蒙OS...\nxxx荣获xxx...\n...\n..\n.\n\n# 2\n\n我觉得人的内心确实可以比拟成一把火焰, 而公司则是一个小小火焰的集合体\n\n有些人是火苗, 是火种.\n\n但是很不幸的是, 我也许只是燃料\n\n# 3\n\n燃料存在缺点, 那就是会耗尽\n\n燃料也有个优点, 那就是存在很多的替代品, A燃料用尽了, 可以拿B燃料换上\n\n也许一开始系统不太适应B燃料, 会排出一些低劣气体, 但是经过一段时间的磨合, 火炬依旧会闪闪发光\n\n# 4\n\n\"你能看到我的火焰吗?\"\n\n我瞄一眼, 我也许看错了, 以为那是光\n\n我深看一眼, 这次我看准了, 它是一团火焰, 在大街上, 形形色色的人类看过去, 那都是不同的火焰在燃烧\n\n有些人, 眼看着火焰就要熄灭了\n\n这时候我看到有个人凑了过去, 我非常开心, 因为我看到了那团火焰重新冉冉发光了\n\n# 5\n\n可怕, 我竟然写不出任何感受.\n\n2019年08月24日23:08:04 晚安\n\n<img src=\"/images/tmpImage/dongfang.jpg\">","source":"_posts/one-day-i-lost-all-my-Memory-but-i-just-laugh-at-last.md","raw":"---\ntitle: 火焰最虚弱的那一瞬间\ntags: 随笔\ncategories: 生活\ndate: 2019-08-24 22:29:34\n---\n\n# 1\n\nGoogle推出新操作系统Fuchsia...\n华为推出鸿蒙OS...\nxxx荣获xxx...\n...\n..\n.\n\n# 2\n\n我觉得人的内心确实可以比拟成一把火焰, 而公司则是一个小小火焰的集合体\n\n有些人是火苗, 是火种.\n\n但是很不幸的是, 我也许只是燃料\n\n# 3\n\n燃料存在缺点, 那就是会耗尽\n\n燃料也有个优点, 那就是存在很多的替代品, A燃料用尽了, 可以拿B燃料换上\n\n也许一开始系统不太适应B燃料, 会排出一些低劣气体, 但是经过一段时间的磨合, 火炬依旧会闪闪发光\n\n# 4\n\n\"你能看到我的火焰吗?\"\n\n我瞄一眼, 我也许看错了, 以为那是光\n\n我深看一眼, 这次我看准了, 它是一团火焰, 在大街上, 形形色色的人类看过去, 那都是不同的火焰在燃烧\n\n有些人, 眼看着火焰就要熄灭了\n\n这时候我看到有个人凑了过去, 我非常开心, 因为我看到了那团火焰重新冉冉发光了\n\n# 5\n\n可怕, 我竟然写不出任何感受.\n\n2019年08月24日23:08:04 晚安\n\n<img src=\"/images/tmpImage/dongfang.jpg\">","slug":"one-day-i-lost-all-my-Memory-but-i-just-laugh-at-last","published":1,"updated":"2019-08-24T15:09:11.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tg001wm6elv46y7rd7","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>Google推出新操作系统Fuchsia…<br>华为推出鸿蒙OS…<br>xxx荣获xxx…<br>…<br>..<br>.</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>我觉得人的内心确实可以比拟成一把火焰, 而公司则是一个小小火焰的集合体</p>\n<p>有些人是火苗, 是火种.</p>\n<p>但是很不幸的是, 我也许只是燃料</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>燃料存在缺点, 那就是会耗尽</p>\n<p>燃料也有个优点, 那就是存在很多的替代品, A燃料用尽了, 可以拿B燃料换上</p>\n<p>也许一开始系统不太适应B燃料, 会排出一些低劣气体, 但是经过一段时间的磨合, 火炬依旧会闪闪发光</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>“你能看到我的火焰吗?”</p>\n<p>我瞄一眼, 我也许看错了, 以为那是光</p>\n<p>我深看一眼, 这次我看准了, 它是一团火焰, 在大街上, 形形色色的人类看过去, 那都是不同的火焰在燃烧</p>\n<p>有些人, 眼看着火焰就要熄灭了</p>\n<p>这时候我看到有个人凑了过去, 我非常开心, 因为我看到了那团火焰重新冉冉发光了</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>可怕, 我竟然写不出任何感受.</p>\n<p>2019年08月24日23:08:04 晚安</p>\n<p><img src=\"/images/tmpImage/dongfang.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>Google推出新操作系统Fuchsia…<br>华为推出鸿蒙OS…<br>xxx荣获xxx…<br>…<br>..<br>.</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>我觉得人的内心确实可以比拟成一把火焰, 而公司则是一个小小火焰的集合体</p>\n<p>有些人是火苗, 是火种.</p>\n<p>但是很不幸的是, 我也许只是燃料</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>燃料存在缺点, 那就是会耗尽</p>\n<p>燃料也有个优点, 那就是存在很多的替代品, A燃料用尽了, 可以拿B燃料换上</p>\n<p>也许一开始系统不太适应B燃料, 会排出一些低劣气体, 但是经过一段时间的磨合, 火炬依旧会闪闪发光</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>“你能看到我的火焰吗?”</p>\n<p>我瞄一眼, 我也许看错了, 以为那是光</p>\n<p>我深看一眼, 这次我看准了, 它是一团火焰, 在大街上, 形形色色的人类看过去, 那都是不同的火焰在燃烧</p>\n<p>有些人, 眼看着火焰就要熄灭了</p>\n<p>这时候我看到有个人凑了过去, 我非常开心, 因为我看到了那团火焰重新冉冉发光了</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>可怕, 我竟然写不出任何感受.</p>\n<p>2019年08月24日23:08:04 晚安</p>\n<p><img src=\"/images/tmpImage/dongfang.jpg\"></p>\n"},{"title":"加快Github Pages服务+Hexo博客的首次加载速度解决方案","date":"2019-09-20T07:57:04.000Z","_content":"\n# 情况分析\n\n国内往GithubPages发送GET请求，很慢，第一次访问的速度在我这边透过浏览器F12工具解析大概是\n\n建立连接（初始化，SSL等等）好几s\n等待响应（TTFB）好几s\n下载速度倒还行几毫秒\n\n\n下载到index.html后，浏览器对html进行解析，继续请求html内的各种js，css，字体库等等等等静态资源！\n\n然后我的网页才开始展示！\n\n# 如何解决\n\n1. 访问github很慢，是由于国外网站，而我在国内，不开代理情况下，肯定慢。所以解决方法是让网站备案然后加入CDN，但是好的CDN要钱（万一一个DDOS攻击呵呵），作为一个垃圾个人博客，没必要，暂时先不搞\n\n2. 将所有静态资源托管到国内服务器上，这里有两种选择：\n    - 白嫖国内免费pages服务（我自己的骚操作）: 我发现gitee的pages支持跨域访问（目前发现只支持css,js,image资源，不支持字体库，json文件），于是可以在gitee上上传一份hexo的文件，然后在_config.yml中配置一个`baseUrl`，然后在各类模板文件中加上这个`baseUrl`配置，比如我现在是这样的：\n    ```yml\n    Trusteeship:\n        baseUrl: https://your.gitee.io/your.gitee.repo/\n    ```\n    然后在模板文档里这样搞一下(需要的地方加上前缀))：\n    ```html\n    <%- css(theme.Trusteeship.baseUrl + 'css/style') %>\n    ```\n    这个方法总体来看很不错，唯一缺点就是字体库，json文件没法跨域访问，导致加载失败，最后只能把这些加载失败的文件单独重新转到github pages上或者转到你别的托管服务器上了。。这过程中由于我对hexo整体代码架构也不是很熟悉，所以为了一时爽，我直接硬编码了！\n\n    最后在hexo配置文件中加入gitee的git库配置就行了，这样`hexo d`就会依次推到这两个pages上了，然后github page上的部分静态资源从gitee pages上去获取！ xswl。\n    ```yml\n    deploy:\n    - type: git\n      repository: 'your github repo'\n      branch: master\n    - type: git\n      repository: 'your gitee repo'\n      branch: master\n    ```\n    注意先git remote 'gitee repo'\n    \n\n    - 托管到自己的服务器上：比如你搞个阿里云轻量服务器，专门搞个后台负责管理静态资源，由于服务器在国内，所以访问肯定不慢。 不过这个方法是个伪命题，你既然都有自己的服务器了，那就直接把hexo也搬过来不就好了。由于服务器花钱，我暂时不考虑。\n\n# 说说为啥我要这么做\n\n其实回过头来看我觉得肯定有人会说我这样搞折腾，麻烦，既然用了gitee了，那就直接全部搬家搬到gitee就好了。 \n\n但是那样的话域名的跳转，CNAME，这些东西都要改QAQ， 我想了想算了，不改已经搞定的东西了，毕竟完全没必要，而且github pages更稳定\n\nCDN加速等我完成备案再搞\n\n# 存在的坑\n\n1. 如果采用上面的第二种方法，当你想换主题的时候，额外的工作量会很比较大，因为你换个主题后，这个主题内的配置你要转移到新主题上，重新配！\n\n2. gitee pages需要重新部署才能访问你新加的静态资源，比如访问新加入的图片，新加的css，js文件，不然直接404！ 除非你开通gitee pages pro， 不然都需要在网页上手动重新部署！ 对gitee的这种行为我只能竖一个中指.. 毕竟网站也要盈利...\n\n\n暂时就总结这些，有事先闪了！！\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/pages-hexo-accelerate.md","raw":"---\ntitle: 加快Github Pages服务+Hexo博客的首次加载速度解决方案\ntags: Hexo魔改\ncategories: IT\ndate: 2019-09-20 15:57:04\n---\n\n# 情况分析\n\n国内往GithubPages发送GET请求，很慢，第一次访问的速度在我这边透过浏览器F12工具解析大概是\n\n建立连接（初始化，SSL等等）好几s\n等待响应（TTFB）好几s\n下载速度倒还行几毫秒\n\n\n下载到index.html后，浏览器对html进行解析，继续请求html内的各种js，css，字体库等等等等静态资源！\n\n然后我的网页才开始展示！\n\n# 如何解决\n\n1. 访问github很慢，是由于国外网站，而我在国内，不开代理情况下，肯定慢。所以解决方法是让网站备案然后加入CDN，但是好的CDN要钱（万一一个DDOS攻击呵呵），作为一个垃圾个人博客，没必要，暂时先不搞\n\n2. 将所有静态资源托管到国内服务器上，这里有两种选择：\n    - 白嫖国内免费pages服务（我自己的骚操作）: 我发现gitee的pages支持跨域访问（目前发现只支持css,js,image资源，不支持字体库，json文件），于是可以在gitee上上传一份hexo的文件，然后在_config.yml中配置一个`baseUrl`，然后在各类模板文件中加上这个`baseUrl`配置，比如我现在是这样的：\n    ```yml\n    Trusteeship:\n        baseUrl: https://your.gitee.io/your.gitee.repo/\n    ```\n    然后在模板文档里这样搞一下(需要的地方加上前缀))：\n    ```html\n    <%- css(theme.Trusteeship.baseUrl + 'css/style') %>\n    ```\n    这个方法总体来看很不错，唯一缺点就是字体库，json文件没法跨域访问，导致加载失败，最后只能把这些加载失败的文件单独重新转到github pages上或者转到你别的托管服务器上了。。这过程中由于我对hexo整体代码架构也不是很熟悉，所以为了一时爽，我直接硬编码了！\n\n    最后在hexo配置文件中加入gitee的git库配置就行了，这样`hexo d`就会依次推到这两个pages上了，然后github page上的部分静态资源从gitee pages上去获取！ xswl。\n    ```yml\n    deploy:\n    - type: git\n      repository: 'your github repo'\n      branch: master\n    - type: git\n      repository: 'your gitee repo'\n      branch: master\n    ```\n    注意先git remote 'gitee repo'\n    \n\n    - 托管到自己的服务器上：比如你搞个阿里云轻量服务器，专门搞个后台负责管理静态资源，由于服务器在国内，所以访问肯定不慢。 不过这个方法是个伪命题，你既然都有自己的服务器了，那就直接把hexo也搬过来不就好了。由于服务器花钱，我暂时不考虑。\n\n# 说说为啥我要这么做\n\n其实回过头来看我觉得肯定有人会说我这样搞折腾，麻烦，既然用了gitee了，那就直接全部搬家搬到gitee就好了。 \n\n但是那样的话域名的跳转，CNAME，这些东西都要改QAQ， 我想了想算了，不改已经搞定的东西了，毕竟完全没必要，而且github pages更稳定\n\nCDN加速等我完成备案再搞\n\n# 存在的坑\n\n1. 如果采用上面的第二种方法，当你想换主题的时候，额外的工作量会很比较大，因为你换个主题后，这个主题内的配置你要转移到新主题上，重新配！\n\n2. gitee pages需要重新部署才能访问你新加的静态资源，比如访问新加入的图片，新加的css，js文件，不然直接404！ 除非你开通gitee pages pro， 不然都需要在网页上手动重新部署！ 对gitee的这种行为我只能竖一个中指.. 毕竟网站也要盈利...\n\n\n暂时就总结这些，有事先闪了！！\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"pages-hexo-accelerate","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9th001zm6elrqol85sx","content":"<h1 id=\"情况分析\"><a href=\"#情况分析\" class=\"headerlink\" title=\"情况分析\"></a>情况分析</h1><p>国内往GithubPages发送GET请求，很慢，第一次访问的速度在我这边透过浏览器F12工具解析大概是</p>\n<p>建立连接（初始化，SSL等等）好几s<br>等待响应（TTFB）好几s<br>下载速度倒还行几毫秒</p>\n<p>下载到index.html后，浏览器对html进行解析，继续请求html内的各种js，css，字体库等等等等静态资源！</p>\n<p>然后我的网页才开始展示！</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>访问github很慢，是由于国外网站，而我在国内，不开代理情况下，肯定慢。所以解决方法是让网站备案然后加入CDN，但是好的CDN要钱（万一一个DDOS攻击呵呵），作为一个垃圾个人博客，没必要，暂时先不搞</p>\n</li>\n<li><p>将所有静态资源托管到国内服务器上，这里有两种选择：</p>\n<ul>\n<li><p>白嫖国内免费pages服务（我自己的骚操作）: 我发现gitee的pages支持跨域访问（目前发现只支持css,js,image资源，不支持字体库，json文件），于是可以在gitee上上传一份hexo的文件，然后在_config.yml中配置一个<code>baseUrl</code>，然后在各类模板文件中加上这个<code>baseUrl</code>配置，比如我现在是这样的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Trusteeship:</span></span><br><span class=\"line\"><span class=\"attr\">    baseUrl:</span> <span class=\"attr\">https://your.gitee.io/your.gitee.repo/</span></span><br></pre></td></tr></table></figure>\n<p>然后在模板文档里这样搞一下(需要的地方加上前缀))：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">css</span>(<span class=\"attr\">theme.Trusteeship.baseUrl</span> + '<span class=\"attr\">css</span>/<span class=\"attr\">style</span>') %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个方法总体来看很不错，唯一缺点就是字体库，json文件没法跨域访问，导致加载失败，最后只能把这些加载失败的文件单独重新转到github pages上或者转到你别的托管服务器上了。。这过程中由于我对hexo整体代码架构也不是很熟悉，所以为了一时爽，我直接硬编码了！</p>\n<p>最后在hexo配置文件中加入gitee的git库配置就行了，这样<code>hexo d</code>就会依次推到这两个pages上了，然后github page上的部分静态资源从gitee pages上去获取！ xswl。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"string\">'your github repo'</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"string\">'your gitee repo'</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>注意先git remote ‘gitee repo’</p>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- 托管到自己的服务器上：比如你搞个阿里云轻量服务器，专门搞个后台负责管理静态资源，由于服务器在国内，所以访问肯定不慢。 不过这个方法是个伪命题，你既然都有自己的服务器了，那就直接把hexo也搬过来不就好了。由于服务器花钱，我暂时不考虑。\n</code></pre><h1 id=\"说说为啥我要这么做\"><a href=\"#说说为啥我要这么做\" class=\"headerlink\" title=\"说说为啥我要这么做\"></a>说说为啥我要这么做</h1><p>其实回过头来看我觉得肯定有人会说我这样搞折腾，麻烦，既然用了gitee了，那就直接全部搬家搬到gitee就好了。 </p>\n<p>但是那样的话域名的跳转，CNAME，这些东西都要改QAQ， 我想了想算了，不改已经搞定的东西了，毕竟完全没必要，而且github pages更稳定</p>\n<p>CDN加速等我完成备案再搞</p>\n<h1 id=\"存在的坑\"><a href=\"#存在的坑\" class=\"headerlink\" title=\"存在的坑\"></a>存在的坑</h1><ol>\n<li><p>如果采用上面的第二种方法，当你想换主题的时候，额外的工作量会很比较大，因为你换个主题后，这个主题内的配置你要转移到新主题上，重新配！</p>\n</li>\n<li><p>gitee pages需要重新部署才能访问你新加的静态资源，比如访问新加入的图片，新加的css，js文件，不然直接404！ 除非你开通gitee pages pro， 不然都需要在网页上手动重新部署！ 对gitee的这种行为我只能竖一个中指.. 毕竟网站也要盈利…</p>\n</li>\n</ol>\n<p>暂时就总结这些，有事先闪了！！</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"情况分析\"><a href=\"#情况分析\" class=\"headerlink\" title=\"情况分析\"></a>情况分析</h1><p>国内往GithubPages发送GET请求，很慢，第一次访问的速度在我这边透过浏览器F12工具解析大概是</p>\n<p>建立连接（初始化，SSL等等）好几s<br>等待响应（TTFB）好几s<br>下载速度倒还行几毫秒</p>\n<p>下载到index.html后，浏览器对html进行解析，继续请求html内的各种js，css，字体库等等等等静态资源！</p>\n<p>然后我的网页才开始展示！</p>\n<h1 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h1><ol>\n<li><p>访问github很慢，是由于国外网站，而我在国内，不开代理情况下，肯定慢。所以解决方法是让网站备案然后加入CDN，但是好的CDN要钱（万一一个DDOS攻击呵呵），作为一个垃圾个人博客，没必要，暂时先不搞</p>\n</li>\n<li><p>将所有静态资源托管到国内服务器上，这里有两种选择：</p>\n<ul>\n<li><p>白嫖国内免费pages服务（我自己的骚操作）: 我发现gitee的pages支持跨域访问（目前发现只支持css,js,image资源，不支持字体库，json文件），于是可以在gitee上上传一份hexo的文件，然后在_config.yml中配置一个<code>baseUrl</code>，然后在各类模板文件中加上这个<code>baseUrl</code>配置，比如我现在是这样的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Trusteeship:</span></span><br><span class=\"line\"><span class=\"attr\">    baseUrl:</span> <span class=\"attr\">https://your.gitee.io/your.gitee.repo/</span></span><br></pre></td></tr></table></figure>\n<p>然后在模板文档里这样搞一下(需要的地方加上前缀))：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">css</span>(<span class=\"attr\">theme.Trusteeship.baseUrl</span> + '<span class=\"attr\">css</span>/<span class=\"attr\">style</span>') %&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个方法总体来看很不错，唯一缺点就是字体库，json文件没法跨域访问，导致加载失败，最后只能把这些加载失败的文件单独重新转到github pages上或者转到你别的托管服务器上了。。这过程中由于我对hexo整体代码架构也不是很熟悉，所以为了一时爽，我直接硬编码了！</p>\n<p>最后在hexo配置文件中加入gitee的git库配置就行了，这样<code>hexo d</code>就会依次推到这两个pages上了，然后github page上的部分静态资源从gitee pages上去获取！ xswl。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"string\">'your github repo'</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repository:</span> <span class=\"string\">'your gitee repo'</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>注意先git remote ‘gitee repo’</p>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- 托管到自己的服务器上：比如你搞个阿里云轻量服务器，专门搞个后台负责管理静态资源，由于服务器在国内，所以访问肯定不慢。 不过这个方法是个伪命题，你既然都有自己的服务器了，那就直接把hexo也搬过来不就好了。由于服务器花钱，我暂时不考虑。\n</code></pre><h1 id=\"说说为啥我要这么做\"><a href=\"#说说为啥我要这么做\" class=\"headerlink\" title=\"说说为啥我要这么做\"></a>说说为啥我要这么做</h1><p>其实回过头来看我觉得肯定有人会说我这样搞折腾，麻烦，既然用了gitee了，那就直接全部搬家搬到gitee就好了。 </p>\n<p>但是那样的话域名的跳转，CNAME，这些东西都要改QAQ， 我想了想算了，不改已经搞定的东西了，毕竟完全没必要，而且github pages更稳定</p>\n<p>CDN加速等我完成备案再搞</p>\n<h1 id=\"存在的坑\"><a href=\"#存在的坑\" class=\"headerlink\" title=\"存在的坑\"></a>存在的坑</h1><ol>\n<li><p>如果采用上面的第二种方法，当你想换主题的时候，额外的工作量会很比较大，因为你换个主题后，这个主题内的配置你要转移到新主题上，重新配！</p>\n</li>\n<li><p>gitee pages需要重新部署才能访问你新加的静态资源，比如访问新加入的图片，新加的css，js文件，不然直接404！ 除非你开通gitee pages pro， 不然都需要在网页上手动重新部署！ 对gitee的这种行为我只能竖一个中指.. 毕竟网站也要盈利…</p>\n</li>\n</ol>\n<p>暂时就总结这些，有事先闪了！！</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"细说mysql分页系统(入门篇, 本篇主要是网上一些方法的搜集和验证)","date":"2019-08-28T07:22:27.000Z","_content":"\n# 1\n\n分页优化是最常见问题之一, 针对日宜扩大的业务数据, 分页优化是数据库查询优化中的一个必经环节. 目前虽然我负责的项目日流量不大, 每天2000+订单量, 但是已经开始后怕后期的数据库查询响应速度, 由于并不是什么互联网公司, 所以在分页这块依旧停留在`limit`,`offset`上, 公司内部并没有成型的分页优化方案 ,对于几十万的数据量来说, 它们是可以忍受的, 事实上低于1s的查询速度都是我可以接受的, 但是随着数据量的加大, 特别是数据量超过100w往上走, 达到千万级别的时候, `limit`的方式则需要更多的辅料才能勉强达到不分表,同时有一个较小的查询时间. \n\n本系列旨在研究mysql分页优化而开展的, 本篇为基础篇, 即我不会引入具体的业务场景, 而是简单的在一个千万级别的测试表上, 进行一些特别不靠谱的基准测试, 最终得出一个基本结论(干货不会很多)\n\n部分单词含义说明:\n`total` 总数据量\n`pageSize` 每页大小\n`pageTotal` 是(total / pageSize)向上取整\n\n# 分页优化基础 - keyset pagination\n\nkeyset pagination应该是任何数据库分页的最快解决方案, 但是无法做到跳页, 只能提供上一页,下一页功能\n\n详情请参考:\nhttp://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/\n\n# 分页优化基础 - Maintain a Page or Place column\n\n可以在你的表中为每行单独维护一个`page`列, 比如前100行都是`page=1`, 代表前100个数据都是第一页, 以此类推(给page加个索引)\n\n```sql\nSELECT id, name, address, phone\nFROM customers\nWHERE page = 1\nORDER BY name;\n```\n\n**[缺点]**: \n这个方案可以执行的前提:\n - `pageSize` 不变\n - 表中的数据只增不减\n\n# 分页优化深入 - 水平切分优化\n\n根据现有业务按列分表,将用于排序的列数做最小拆分，尽量不要有大规模字符串,查询后用 in(ids)方式聚合 \n\n实施起来复杂, 增加了不少工作量, 不建议使用\n\n# 分页优化的小聪明 - 反转 (效果不明显,谨慎使用)\n\n> 利用Order来反转查询, \n\n就拿我前面的例子来说, 我有如下查询\n```sql\nselect id from Merchant_1000w where createTime=347446113 limit 9000000,10;\n```\n\n直接查900 0001开始的数据, 但是我们知道表目前只有1000w条数据, 所以 这时候为何不先逆向排序, 然后从100 0000开始查呢?\n\n我们稍微修改下sql\n\n```sql\nselect id from Merchant_1000w where createTime=347446113 order by id DESC limit 1000000,10; \n```\n\n效果不是很明显, 但是普遍加快了100ms左右\n","source":"_posts/mysql-pagination-optimization-1.md","raw":"---\ntitle: 细说mysql分页系统(入门篇, 本篇主要是网上一些方法的搜集和验证)\ntags: 数据库优化\ncategories: 计算机\ndate: 2019-08-28 15:22:27\n---\n\n# 1\n\n分页优化是最常见问题之一, 针对日宜扩大的业务数据, 分页优化是数据库查询优化中的一个必经环节. 目前虽然我负责的项目日流量不大, 每天2000+订单量, 但是已经开始后怕后期的数据库查询响应速度, 由于并不是什么互联网公司, 所以在分页这块依旧停留在`limit`,`offset`上, 公司内部并没有成型的分页优化方案 ,对于几十万的数据量来说, 它们是可以忍受的, 事实上低于1s的查询速度都是我可以接受的, 但是随着数据量的加大, 特别是数据量超过100w往上走, 达到千万级别的时候, `limit`的方式则需要更多的辅料才能勉强达到不分表,同时有一个较小的查询时间. \n\n本系列旨在研究mysql分页优化而开展的, 本篇为基础篇, 即我不会引入具体的业务场景, 而是简单的在一个千万级别的测试表上, 进行一些特别不靠谱的基准测试, 最终得出一个基本结论(干货不会很多)\n\n部分单词含义说明:\n`total` 总数据量\n`pageSize` 每页大小\n`pageTotal` 是(total / pageSize)向上取整\n\n# 分页优化基础 - keyset pagination\n\nkeyset pagination应该是任何数据库分页的最快解决方案, 但是无法做到跳页, 只能提供上一页,下一页功能\n\n详情请参考:\nhttp://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/\n\n# 分页优化基础 - Maintain a Page or Place column\n\n可以在你的表中为每行单独维护一个`page`列, 比如前100行都是`page=1`, 代表前100个数据都是第一页, 以此类推(给page加个索引)\n\n```sql\nSELECT id, name, address, phone\nFROM customers\nWHERE page = 1\nORDER BY name;\n```\n\n**[缺点]**: \n这个方案可以执行的前提:\n - `pageSize` 不变\n - 表中的数据只增不减\n\n# 分页优化深入 - 水平切分优化\n\n根据现有业务按列分表,将用于排序的列数做最小拆分，尽量不要有大规模字符串,查询后用 in(ids)方式聚合 \n\n实施起来复杂, 增加了不少工作量, 不建议使用\n\n# 分页优化的小聪明 - 反转 (效果不明显,谨慎使用)\n\n> 利用Order来反转查询, \n\n就拿我前面的例子来说, 我有如下查询\n```sql\nselect id from Merchant_1000w where createTime=347446113 limit 9000000,10;\n```\n\n直接查900 0001开始的数据, 但是我们知道表目前只有1000w条数据, 所以 这时候为何不先逆向排序, 然后从100 0000开始查呢?\n\n我们稍微修改下sql\n\n```sql\nselect id from Merchant_1000w where createTime=347446113 order by id DESC limit 1000000,10; \n```\n\n效果不是很明显, 但是普遍加快了100ms左右\n","slug":"mysql-pagination-optimization-1","published":1,"updated":"2019-08-29T03:02:53.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9ti0022m6elk16n647m","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>分页优化是最常见问题之一, 针对日宜扩大的业务数据, 分页优化是数据库查询优化中的一个必经环节. 目前虽然我负责的项目日流量不大, 每天2000+订单量, 但是已经开始后怕后期的数据库查询响应速度, 由于并不是什么互联网公司, 所以在分页这块依旧停留在<code>limit</code>,<code>offset</code>上, 公司内部并没有成型的分页优化方案 ,对于几十万的数据量来说, 它们是可以忍受的, 事实上低于1s的查询速度都是我可以接受的, 但是随着数据量的加大, 特别是数据量超过100w往上走, 达到千万级别的时候, <code>limit</code>的方式则需要更多的辅料才能勉强达到不分表,同时有一个较小的查询时间. </p>\n<p>本系列旨在研究mysql分页优化而开展的, 本篇为基础篇, 即我不会引入具体的业务场景, 而是简单的在一个千万级别的测试表上, 进行一些特别不靠谱的基准测试, 最终得出一个基本结论(干货不会很多)</p>\n<p>部分单词含义说明:<br><code>total</code> 总数据量<br><code>pageSize</code> 每页大小<br><code>pageTotal</code> 是(total / pageSize)向上取整</p>\n<h1 id=\"分页优化基础-keyset-pagination\"><a href=\"#分页优化基础-keyset-pagination\" class=\"headerlink\" title=\"分页优化基础 - keyset pagination\"></a>分页优化基础 - keyset pagination</h1><p>keyset pagination应该是任何数据库分页的最快解决方案, 但是无法做到跳页, 只能提供上一页,下一页功能</p>\n<p>详情请参考:<br><a href=\"http://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/\" target=\"_blank\" rel=\"noopener\">http://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/</a></p>\n<h1 id=\"分页优化基础-Maintain-a-Page-or-Place-column\"><a href=\"#分页优化基础-Maintain-a-Page-or-Place-column\" class=\"headerlink\" title=\"分页优化基础 - Maintain a Page or Place column\"></a>分页优化基础 - Maintain a Page or Place column</h1><p>可以在你的表中为每行单独维护一个<code>page</code>列, 比如前100行都是<code>page=1</code>, 代表前100个数据都是第一页, 以此类推(给page加个索引)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, address, phone</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> page = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">name</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>[缺点]</strong>:<br>这个方案可以执行的前提:</p>\n<ul>\n<li><code>pageSize</code> 不变</li>\n<li>表中的数据只增不减</li>\n</ul>\n<h1 id=\"分页优化深入-水平切分优化\"><a href=\"#分页优化深入-水平切分优化\" class=\"headerlink\" title=\"分页优化深入 - 水平切分优化\"></a>分页优化深入 - 水平切分优化</h1><p>根据现有业务按列分表,将用于排序的列数做最小拆分，尽量不要有大规模字符串,查询后用 in(ids)方式聚合 </p>\n<p>实施起来复杂, 增加了不少工作量, 不建议使用</p>\n<h1 id=\"分页优化的小聪明-反转-效果不明显-谨慎使用\"><a href=\"#分页优化的小聪明-反转-效果不明显-谨慎使用\" class=\"headerlink\" title=\"分页优化的小聪明 - 反转 (效果不明显,谨慎使用)\"></a>分页优化的小聪明 - 反转 (效果不明显,谨慎使用)</h1><blockquote>\n<p>利用Order来反转查询, </p>\n</blockquote>\n<p>就拿我前面的例子来说, 我有如下查询<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> Merchant_1000w <span class=\"keyword\">where</span> createTime=<span class=\"number\">347446113</span> <span class=\"keyword\">limit</span> <span class=\"number\">9000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure></p>\n<p>直接查900 0001开始的数据, 但是我们知道表目前只有1000w条数据, 所以 这时候为何不先逆向排序, 然后从100 0000开始查呢?</p>\n<p>我们稍微修改下sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> Merchant_1000w <span class=\"keyword\">where</span> createTime=<span class=\"number\">347446113</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> <span class=\"keyword\">DESC</span> <span class=\"keyword\">limit</span> <span class=\"number\">1000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>效果不是很明显, 但是普遍加快了100ms左右</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>分页优化是最常见问题之一, 针对日宜扩大的业务数据, 分页优化是数据库查询优化中的一个必经环节. 目前虽然我负责的项目日流量不大, 每天2000+订单量, 但是已经开始后怕后期的数据库查询响应速度, 由于并不是什么互联网公司, 所以在分页这块依旧停留在<code>limit</code>,<code>offset</code>上, 公司内部并没有成型的分页优化方案 ,对于几十万的数据量来说, 它们是可以忍受的, 事实上低于1s的查询速度都是我可以接受的, 但是随着数据量的加大, 特别是数据量超过100w往上走, 达到千万级别的时候, <code>limit</code>的方式则需要更多的辅料才能勉强达到不分表,同时有一个较小的查询时间. </p>\n<p>本系列旨在研究mysql分页优化而开展的, 本篇为基础篇, 即我不会引入具体的业务场景, 而是简单的在一个千万级别的测试表上, 进行一些特别不靠谱的基准测试, 最终得出一个基本结论(干货不会很多)</p>\n<p>部分单词含义说明:<br><code>total</code> 总数据量<br><code>pageSize</code> 每页大小<br><code>pageTotal</code> 是(total / pageSize)向上取整</p>\n<h1 id=\"分页优化基础-keyset-pagination\"><a href=\"#分页优化基础-keyset-pagination\" class=\"headerlink\" title=\"分页优化基础 - keyset pagination\"></a>分页优化基础 - keyset pagination</h1><p>keyset pagination应该是任何数据库分页的最快解决方案, 但是无法做到跳页, 只能提供上一页,下一页功能</p>\n<p>详情请参考:<br><a href=\"http://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/\" target=\"_blank\" rel=\"noopener\">http://allyouneedisbackend.com/blog/2017/09/24/the-sql-i-love-part-1-scanning-large-table/</a></p>\n<h1 id=\"分页优化基础-Maintain-a-Page-or-Place-column\"><a href=\"#分页优化基础-Maintain-a-Page-or-Place-column\" class=\"headerlink\" title=\"分页优化基础 - Maintain a Page or Place column\"></a>分页优化基础 - Maintain a Page or Place column</h1><p>可以在你的表中为每行单独维护一个<code>page</code>列, 比如前100行都是<code>page=1</code>, 代表前100个数据都是第一页, 以此类推(给page加个索引)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, address, phone</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> customers</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> page = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">name</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>[缺点]</strong>:<br>这个方案可以执行的前提:</p>\n<ul>\n<li><code>pageSize</code> 不变</li>\n<li>表中的数据只增不减</li>\n</ul>\n<h1 id=\"分页优化深入-水平切分优化\"><a href=\"#分页优化深入-水平切分优化\" class=\"headerlink\" title=\"分页优化深入 - 水平切分优化\"></a>分页优化深入 - 水平切分优化</h1><p>根据现有业务按列分表,将用于排序的列数做最小拆分，尽量不要有大规模字符串,查询后用 in(ids)方式聚合 </p>\n<p>实施起来复杂, 增加了不少工作量, 不建议使用</p>\n<h1 id=\"分页优化的小聪明-反转-效果不明显-谨慎使用\"><a href=\"#分页优化的小聪明-反转-效果不明显-谨慎使用\" class=\"headerlink\" title=\"分页优化的小聪明 - 反转 (效果不明显,谨慎使用)\"></a>分页优化的小聪明 - 反转 (效果不明显,谨慎使用)</h1><blockquote>\n<p>利用Order来反转查询, </p>\n</blockquote>\n<p>就拿我前面的例子来说, 我有如下查询<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> Merchant_1000w <span class=\"keyword\">where</span> createTime=<span class=\"number\">347446113</span> <span class=\"keyword\">limit</span> <span class=\"number\">9000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure></p>\n<p>直接查900 0001开始的数据, 但是我们知道表目前只有1000w条数据, 所以 这时候为何不先逆向排序, 然后从100 0000开始查呢?</p>\n<p>我们稍微修改下sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> Merchant_1000w <span class=\"keyword\">where</span> createTime=<span class=\"number\">347446113</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"keyword\">id</span> <span class=\"keyword\">DESC</span> <span class=\"keyword\">limit</span> <span class=\"number\">1000000</span>,<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>效果不是很明显, 但是普遍加快了100ms左右</p>\n"},{"title":"ubuntu18.04安装mysql8.0.16(Community)，内附详细说明适合小白学习哦","date":"2019-06-14T02:14:12.000Z","_content":"\n# 0\n\n首先mysql已经不是以前的mysql了，自从加入oracle旗下后，各类付费mysql产品已经陆续上线了。目前最新的付费企业mysql版中，居然已经支持了nosql！但是非常遗憾！这个功能在社区版（也就是免费开源版）中是不支持的！╮(╯▽╰)╭ 好吧，想白嫖nosql还是老老实实用别的把！Oracel爸爸不收钱是不可能的\n\n今天记录安装的是使用`ubuntu18.04`安装`MySQL Community Edition 8.0.16`\n\nMySQL Community Edition就是我们最熟知的mysql啦，可以白嫖的mysql啦！\n\n# 1\n\n打开mysql官方下载网页\nhttps://dev.mysql.com/downloads/\n\n寻找如下的位置\n```\nMySQL Community Server (GPL)\n(Current Generally Available Release: 8.0.16)\nMySQL Community Server is the world's most popular open source database.\nDOWNLOAD\n```\n\n随后我们来到了下载页面，先选择我们的操作系统版本，我是`ubuntu18.04 64-bit`，如下图所示\n\n<img src=\"/images/tmpImage/mysql_1.png\">\n\n我刻意没有截图下面的那些各种各样的软件包，那是因为选择安装最新的8.0x，官方已经强力推荐使用包管理工具来安装了！所以我们没必要去看那些名字复杂，乱七八糟的各种安装包了！\n\n点击推荐我们使用apt下载mysql的那个企鹅图片，我们会跳转到apt下载mysql的专栏网页。\n\n该网页分成三个部分，第一部分介绍apt安装mysql的优点和它目前支持的版本，第二部分是一个快速开始的操作文档会教你怎么用！，第三部分是一个deb下载包`mysql-apt-config_0.8.13-1_all.deb`，可以先下好保存在本地，待会要用\n\n下载好`mysql-apt-config_0.8.13-1_all.deb`后，你如果看不懂官方的操作文档，或者对其内部用到的东西感兴趣，那么看下面的内容是最好的！\n\n# 2 开始安装\n\n1. 为了文件摆放合理，请创建一个mysql-config-deb的文件夹，随后把你下载好的`mysql-apt-config_0.8.13-1_all.deb`移动过去，并在当前文件夹开启terminal\n\n2. 在terminal内输入`sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb `，随后会弹出一个配置界面，除非你有特殊需求，不然直接选择`OK`即可，最后你会得到如下输出：\n```s\n(Reading database ... 224799 files and directories currently installed.)\nPreparing to unpack mysql-apt-config_0.8.13-1_all.deb ...\nUnpacking mysql-apt-config (0.8.13-1) over (0.8.13-1) ...\nSetting up mysql-apt-config (0.8.13-1) ...\nWarning: apt-key should not be used in scripts (called from postinst maintainerscript of the package mysql-apt-config)\nOK\n```\n**[讲解]**: `sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb` 这一步是使用dpkg工具运行我们的mysql-config的程序，dpkg是ubuntu这类linux系统的底层包管理工具，也负责管理.deb结果的程序包。 mysql-cofig弹出的配置界面用于选择你要安装的是什么版本的mysql以及想要安装哪些mysql插件，选择完毕后，这个工具会生成一个类似`source.list`的东西，内部记录了mysql的apt软件仓库的服务器地址，用于后续的apt工具可以正常的安装mysql，会告知apt工具应该去检索哪些软件仓库的软件包。当然这个步骤其实也可以手动来添加这些apt的相关配置，如果你对apt的软件仓库配置非常熟悉，那么可以自己尝试，或者从这篇文档开始`https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#repo-qg-apt-repo-manual-setup`\n\n3. 输入`sudo apt-get update`，apt-get就开始重新更新软件仓库服务器内的所有包文件索引，在这里使用该命令的目的是，拉取mysql的apt软件仓库的服务器上的包索引列表。\n**[讲解]**: apt工具是dpkg工具的上层软件，它拥有更强的包管理功能；它是利用自身软件仓库（source.list）内指定的源服务器地址内包含的包索引列表来正常的安装我们要安装的软件应用。这一步骤也正是在更新这些包索引列表，目的是添加我们刚刚引入的mysql的源软件仓库服务器内包含的包索引列表。可以把这个操作类比成电脑管家的查看更新。完成这步骤后，apt工具就会知道如何去下载安装我们的mysql了！所以这个步骤是使用apt安装mysql的关键步骤，是必须执行的哦！\n\n4. 输入`sudo apt-get install mysql-server`，提示是否安装选`Y`，随后apt工具会根据本地的包索引列表去下载我们的mysql-server对应的包程序！为什么apt可以自我管理怎么去安装mysql-server，我们从这条命令也没有告知他安装啥版本，但是它就会去自行安装我们的8.0x版本。这一切都归功于我们前面对apt软件仓库的配置！\n\n5. 等待片刻后，会弹出mysql一个小的配置程序界面，要求你输入下root用户的密码（输入2次），并且选择加密方式，8.0x使用了新的加密方式，也是官方推荐的，所以选推荐的就完事了！\n\n6. 看到如下输出，恭喜你安装成功！（入坑成功！）\n```s\nemitting double-array: 100% |###########################################| \nreading /usr/share/mecab/dic/ipadic/matrix.def ... 1316x1316\nemitting matrix      : 100% |###########################################| \n\ndone!\nupdate-alternatives: using /var/lib/mecab/dic/ipadic-utf8 to provide /var/lib/mecab/dic/debian (mecab-dictionary) in auto mode\nSetting up mysql-community-server (8.0.16-2ubuntu18.04) ...\nupdate-alternatives: using /etc/mysql/mysql.cnf to provide /etc/mysql/my.cnf (my.cnf) in auto mode\nCreated symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service.\nSetting up mysql-server (8.0.16-2ubuntu18.04) ...\nProcessing triggers for libc-bin (2.27-3ubuntu1) ...\n```\n\n7. 使用`sudo service mysql status`，查看mysql目前的状态，输出如下\n```s\n● mysql.service - MySQL Community Server\n   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)\n   Active: active (running) since Fri 2019-06-14 11:06:40 CST; 21s ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 18991 ExecStartPre=/usr/share/mysql-8.0/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 19030 (mysqld)\n   Status: \"SERVER_OPERATING\"\n    Tasks: 39 (limit: 4915)\n   CGroup: /system.slice/mysql.service\n           └─19030 /usr/sbin/mysqld\n\n6月 14 11:06:35 zazalu-ThinkPad-E480 systemd[1]: Starting MySQL Community Server...\n6月 14 11:06:40 zazalu-ThinkPad-E480 systemd[1]: Started MySQL Community Server.\n```\n\nmysql的安装程序真的越来越傻瓜了！因为它不仅在安装完后自动运行了mysql，同时它还把它搞成了一个service，这样就可以在开机的时候自启动了！\n\n# 3 其他控制命令\n\n1. 关闭mysql，这里推荐如下命令，也是官方推荐的，当然你kill进程也是莫得问题的\n`sudo service mysql stop`\n\n2. 重启mysql\n`sudo service mysql start`\n\n# 4 卸载\n\n1. 由于使用apt安装，所以卸载也会变得及其傻瓜式，使用如下命令即可\n`sudo apt-get remove mysql-server`\n\n2. 有些人喜欢下一些mysql的插件来增强mysql的功能，使用如下命令卸载这些插件\n`sudo apt-get autoremove`\n或者指定包名\n`sudo apt-get remove package-name`\n\n不知道有哪些包，先用如下命令查看\n`dpkg -l | grep mysql | grep ii`\n\n\n# 5 自动安装-超傻瓜式\n\n可以写个shell脚本，把这些东西捆绑，一键执行！那就是真的超傻瓜式安装包了，我以后来填\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/ubuntu18-04安装mysql8-0-16-Community.md","raw":"---\ntitle: ubuntu18.04安装mysql8.0.16(Community)，内附详细说明适合小白学习哦\ntags: mysql\ncategories: IT\ndate: 2019-06-14 10:14:12\n---\n\n# 0\n\n首先mysql已经不是以前的mysql了，自从加入oracle旗下后，各类付费mysql产品已经陆续上线了。目前最新的付费企业mysql版中，居然已经支持了nosql！但是非常遗憾！这个功能在社区版（也就是免费开源版）中是不支持的！╮(╯▽╰)╭ 好吧，想白嫖nosql还是老老实实用别的把！Oracel爸爸不收钱是不可能的\n\n今天记录安装的是使用`ubuntu18.04`安装`MySQL Community Edition 8.0.16`\n\nMySQL Community Edition就是我们最熟知的mysql啦，可以白嫖的mysql啦！\n\n# 1\n\n打开mysql官方下载网页\nhttps://dev.mysql.com/downloads/\n\n寻找如下的位置\n```\nMySQL Community Server (GPL)\n(Current Generally Available Release: 8.0.16)\nMySQL Community Server is the world's most popular open source database.\nDOWNLOAD\n```\n\n随后我们来到了下载页面，先选择我们的操作系统版本，我是`ubuntu18.04 64-bit`，如下图所示\n\n<img src=\"/images/tmpImage/mysql_1.png\">\n\n我刻意没有截图下面的那些各种各样的软件包，那是因为选择安装最新的8.0x，官方已经强力推荐使用包管理工具来安装了！所以我们没必要去看那些名字复杂，乱七八糟的各种安装包了！\n\n点击推荐我们使用apt下载mysql的那个企鹅图片，我们会跳转到apt下载mysql的专栏网页。\n\n该网页分成三个部分，第一部分介绍apt安装mysql的优点和它目前支持的版本，第二部分是一个快速开始的操作文档会教你怎么用！，第三部分是一个deb下载包`mysql-apt-config_0.8.13-1_all.deb`，可以先下好保存在本地，待会要用\n\n下载好`mysql-apt-config_0.8.13-1_all.deb`后，你如果看不懂官方的操作文档，或者对其内部用到的东西感兴趣，那么看下面的内容是最好的！\n\n# 2 开始安装\n\n1. 为了文件摆放合理，请创建一个mysql-config-deb的文件夹，随后把你下载好的`mysql-apt-config_0.8.13-1_all.deb`移动过去，并在当前文件夹开启terminal\n\n2. 在terminal内输入`sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb `，随后会弹出一个配置界面，除非你有特殊需求，不然直接选择`OK`即可，最后你会得到如下输出：\n```s\n(Reading database ... 224799 files and directories currently installed.)\nPreparing to unpack mysql-apt-config_0.8.13-1_all.deb ...\nUnpacking mysql-apt-config (0.8.13-1) over (0.8.13-1) ...\nSetting up mysql-apt-config (0.8.13-1) ...\nWarning: apt-key should not be used in scripts (called from postinst maintainerscript of the package mysql-apt-config)\nOK\n```\n**[讲解]**: `sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb` 这一步是使用dpkg工具运行我们的mysql-config的程序，dpkg是ubuntu这类linux系统的底层包管理工具，也负责管理.deb结果的程序包。 mysql-cofig弹出的配置界面用于选择你要安装的是什么版本的mysql以及想要安装哪些mysql插件，选择完毕后，这个工具会生成一个类似`source.list`的东西，内部记录了mysql的apt软件仓库的服务器地址，用于后续的apt工具可以正常的安装mysql，会告知apt工具应该去检索哪些软件仓库的软件包。当然这个步骤其实也可以手动来添加这些apt的相关配置，如果你对apt的软件仓库配置非常熟悉，那么可以自己尝试，或者从这篇文档开始`https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#repo-qg-apt-repo-manual-setup`\n\n3. 输入`sudo apt-get update`，apt-get就开始重新更新软件仓库服务器内的所有包文件索引，在这里使用该命令的目的是，拉取mysql的apt软件仓库的服务器上的包索引列表。\n**[讲解]**: apt工具是dpkg工具的上层软件，它拥有更强的包管理功能；它是利用自身软件仓库（source.list）内指定的源服务器地址内包含的包索引列表来正常的安装我们要安装的软件应用。这一步骤也正是在更新这些包索引列表，目的是添加我们刚刚引入的mysql的源软件仓库服务器内包含的包索引列表。可以把这个操作类比成电脑管家的查看更新。完成这步骤后，apt工具就会知道如何去下载安装我们的mysql了！所以这个步骤是使用apt安装mysql的关键步骤，是必须执行的哦！\n\n4. 输入`sudo apt-get install mysql-server`，提示是否安装选`Y`，随后apt工具会根据本地的包索引列表去下载我们的mysql-server对应的包程序！为什么apt可以自我管理怎么去安装mysql-server，我们从这条命令也没有告知他安装啥版本，但是它就会去自行安装我们的8.0x版本。这一切都归功于我们前面对apt软件仓库的配置！\n\n5. 等待片刻后，会弹出mysql一个小的配置程序界面，要求你输入下root用户的密码（输入2次），并且选择加密方式，8.0x使用了新的加密方式，也是官方推荐的，所以选推荐的就完事了！\n\n6. 看到如下输出，恭喜你安装成功！（入坑成功！）\n```s\nemitting double-array: 100% |###########################################| \nreading /usr/share/mecab/dic/ipadic/matrix.def ... 1316x1316\nemitting matrix      : 100% |###########################################| \n\ndone!\nupdate-alternatives: using /var/lib/mecab/dic/ipadic-utf8 to provide /var/lib/mecab/dic/debian (mecab-dictionary) in auto mode\nSetting up mysql-community-server (8.0.16-2ubuntu18.04) ...\nupdate-alternatives: using /etc/mysql/mysql.cnf to provide /etc/mysql/my.cnf (my.cnf) in auto mode\nCreated symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service.\nSetting up mysql-server (8.0.16-2ubuntu18.04) ...\nProcessing triggers for libc-bin (2.27-3ubuntu1) ...\n```\n\n7. 使用`sudo service mysql status`，查看mysql目前的状态，输出如下\n```s\n● mysql.service - MySQL Community Server\n   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)\n   Active: active (running) since Fri 2019-06-14 11:06:40 CST; 21s ago\n     Docs: man:mysqld(8)\n           http://dev.mysql.com/doc/refman/en/using-systemd.html\n  Process: 18991 ExecStartPre=/usr/share/mysql-8.0/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 19030 (mysqld)\n   Status: \"SERVER_OPERATING\"\n    Tasks: 39 (limit: 4915)\n   CGroup: /system.slice/mysql.service\n           └─19030 /usr/sbin/mysqld\n\n6月 14 11:06:35 zazalu-ThinkPad-E480 systemd[1]: Starting MySQL Community Server...\n6月 14 11:06:40 zazalu-ThinkPad-E480 systemd[1]: Started MySQL Community Server.\n```\n\nmysql的安装程序真的越来越傻瓜了！因为它不仅在安装完后自动运行了mysql，同时它还把它搞成了一个service，这样就可以在开机的时候自启动了！\n\n# 3 其他控制命令\n\n1. 关闭mysql，这里推荐如下命令，也是官方推荐的，当然你kill进程也是莫得问题的\n`sudo service mysql stop`\n\n2. 重启mysql\n`sudo service mysql start`\n\n# 4 卸载\n\n1. 由于使用apt安装，所以卸载也会变得及其傻瓜式，使用如下命令即可\n`sudo apt-get remove mysql-server`\n\n2. 有些人喜欢下一些mysql的插件来增强mysql的功能，使用如下命令卸载这些插件\n`sudo apt-get autoremove`\n或者指定包名\n`sudo apt-get remove package-name`\n\n不知道有哪些包，先用如下命令查看\n`dpkg -l | grep mysql | grep ii`\n\n\n# 5 自动安装-超傻瓜式\n\n可以写个shell脚本，把这些东西捆绑，一键执行！那就是真的超傻瓜式安装包了，我以后来填\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"ubuntu18-04安装mysql8-0-16-Community","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tj0026m6elfhh1ub52","content":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>首先mysql已经不是以前的mysql了，自从加入oracle旗下后，各类付费mysql产品已经陆续上线了。目前最新的付费企业mysql版中，居然已经支持了nosql！但是非常遗憾！这个功能在社区版（也就是免费开源版）中是不支持的！╮(╯▽╰)╭ 好吧，想白嫖nosql还是老老实实用别的把！Oracel爸爸不收钱是不可能的</p>\n<p>今天记录安装的是使用<code>ubuntu18.04</code>安装<code>MySQL Community Edition 8.0.16</code></p>\n<p>MySQL Community Edition就是我们最熟知的mysql啦，可以白嫖的mysql啦！</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>打开mysql官方下载网页<br><a href=\"https://dev.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/</a></p>\n<p>寻找如下的位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL Community Server (GPL)</span><br><span class=\"line\">(Current Generally Available Release: 8.0.16)</span><br><span class=\"line\">MySQL Community Server is the world&apos;s most popular open source database.</span><br><span class=\"line\">DOWNLOAD</span><br></pre></td></tr></table></figure></p>\n<p>随后我们来到了下载页面，先选择我们的操作系统版本，我是<code>ubuntu18.04 64-bit</code>，如下图所示</p>\n<p><img src=\"/images/tmpImage/mysql_1.png\"></p>\n<p>我刻意没有截图下面的那些各种各样的软件包，那是因为选择安装最新的8.0x，官方已经强力推荐使用包管理工具来安装了！所以我们没必要去看那些名字复杂，乱七八糟的各种安装包了！</p>\n<p>点击推荐我们使用apt下载mysql的那个企鹅图片，我们会跳转到apt下载mysql的专栏网页。</p>\n<p>该网页分成三个部分，第一部分介绍apt安装mysql的优点和它目前支持的版本，第二部分是一个快速开始的操作文档会教你怎么用！，第三部分是一个deb下载包<code>mysql-apt-config_0.8.13-1_all.deb</code>，可以先下好保存在本地，待会要用</p>\n<p>下载好<code>mysql-apt-config_0.8.13-1_all.deb</code>后，你如果看不懂官方的操作文档，或者对其内部用到的东西感兴趣，那么看下面的内容是最好的！</p>\n<h1 id=\"2-开始安装\"><a href=\"#2-开始安装\" class=\"headerlink\" title=\"2 开始安装\"></a>2 开始安装</h1><ol>\n<li><p>为了文件摆放合理，请创建一个mysql-config-deb的文件夹，随后把你下载好的<code>mysql-apt-config_0.8.13-1_all.deb</code>移动过去，并在当前文件夹开启terminal</p>\n</li>\n<li><p>在terminal内输入<code>sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb</code>，随后会弹出一个配置界面，除非你有特殊需求，不然直接选择<code>OK</code>即可，最后你会得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Reading database ... 224799 files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack mysql-apt-config_0.8.13-1_all.deb ...</span><br><span class=\"line\">Unpacking mysql-apt-config (0.8.13-1) over (0.8.13-1) ...</span><br><span class=\"line\">Setting up mysql-apt-config (0.8.13-1) ...</span><br><span class=\"line\">Warning: apt-key should not be used in scripts (called from postinst maintainerscript of the package mysql-apt-config)</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>[讲解]</strong>: <code>sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb</code> 这一步是使用dpkg工具运行我们的mysql-config的程序，dpkg是ubuntu这类linux系统的底层包管理工具，也负责管理.deb结果的程序包。 mysql-cofig弹出的配置界面用于选择你要安装的是什么版本的mysql以及想要安装哪些mysql插件，选择完毕后，这个工具会生成一个类似<code>source.list</code>的东西，内部记录了mysql的apt软件仓库的服务器地址，用于后续的apt工具可以正常的安装mysql，会告知apt工具应该去检索哪些软件仓库的软件包。当然这个步骤其实也可以手动来添加这些apt的相关配置，如果你对apt的软件仓库配置非常熟悉，那么可以自己尝试，或者从这篇文档开始<code>https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#repo-qg-apt-repo-manual-setup</code></p>\n<ol start=\"3\">\n<li><p>输入<code>sudo apt-get update</code>，apt-get就开始重新更新软件仓库服务器内的所有包文件索引，在这里使用该命令的目的是，拉取mysql的apt软件仓库的服务器上的包索引列表。<br><strong>[讲解]</strong>: apt工具是dpkg工具的上层软件，它拥有更强的包管理功能；它是利用自身软件仓库（source.list）内指定的源服务器地址内包含的包索引列表来正常的安装我们要安装的软件应用。这一步骤也正是在更新这些包索引列表，目的是添加我们刚刚引入的mysql的源软件仓库服务器内包含的包索引列表。可以把这个操作类比成电脑管家的查看更新。完成这步骤后，apt工具就会知道如何去下载安装我们的mysql了！所以这个步骤是使用apt安装mysql的关键步骤，是必须执行的哦！</p>\n</li>\n<li><p>输入<code>sudo apt-get install mysql-server</code>，提示是否安装选<code>Y</code>，随后apt工具会根据本地的包索引列表去下载我们的mysql-server对应的包程序！为什么apt可以自我管理怎么去安装mysql-server，我们从这条命令也没有告知他安装啥版本，但是它就会去自行安装我们的8.0x版本。这一切都归功于我们前面对apt软件仓库的配置！</p>\n</li>\n<li><p>等待片刻后，会弹出mysql一个小的配置程序界面，要求你输入下root用户的密码（输入2次），并且选择加密方式，8.0x使用了新的加密方式，也是官方推荐的，所以选推荐的就完事了！</p>\n</li>\n<li><p>看到如下输出，恭喜你安装成功！（入坑成功！）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emitting double-array: 100% |###########################################| </span><br><span class=\"line\">reading /usr/share/mecab/dic/ipadic/matrix.def ... 1316x1316</span><br><span class=\"line\">emitting matrix      : 100% |###########################################| </span><br><span class=\"line\"></span><br><span class=\"line\">done!</span><br><span class=\"line\">update-alternatives: using /var/lib/mecab/dic/ipadic-utf8 to provide /var/lib/mecab/dic/debian (mecab-dictionary) in auto mode</span><br><span class=\"line\">Setting up mysql-community-server (8.0.16-2ubuntu18.04) ...</span><br><span class=\"line\">update-alternatives: using /etc/mysql/mysql.cnf to provide /etc/mysql/my.cnf (my.cnf) in auto mode</span><br><span class=\"line\">Created symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service.</span><br><span class=\"line\">Setting up mysql-server (8.0.16-2ubuntu18.04) ...</span><br><span class=\"line\">Processing triggers for libc-bin (2.27-3ubuntu1) ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>sudo service mysql status</code>，查看mysql目前的状态，输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● mysql.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2019-06-14 11:06:40 CST; 21s ago</span><br><span class=\"line\">     Docs: man:mysqld(8)</span><br><span class=\"line\">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">  Process: 18991 ExecStartPre=/usr/share/mysql-8.0/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19030 (mysqld)</span><br><span class=\"line\">   Status: &quot;SERVER_OPERATING&quot;</span><br><span class=\"line\">    Tasks: 39 (limit: 4915)</span><br><span class=\"line\">   CGroup: /system.slice/mysql.service</span><br><span class=\"line\">           └─19030 /usr/sbin/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">6月 14 11:06:35 zazalu-ThinkPad-E480 systemd[1]: Starting MySQL Community Server...</span><br><span class=\"line\">6月 14 11:06:40 zazalu-ThinkPad-E480 systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>mysql的安装程序真的越来越傻瓜了！因为它不仅在安装完后自动运行了mysql，同时它还把它搞成了一个service，这样就可以在开机的时候自启动了！</p>\n<h1 id=\"3-其他控制命令\"><a href=\"#3-其他控制命令\" class=\"headerlink\" title=\"3 其他控制命令\"></a>3 其他控制命令</h1><ol>\n<li><p>关闭mysql，这里推荐如下命令，也是官方推荐的，当然你kill进程也是莫得问题的<br><code>sudo service mysql stop</code></p>\n</li>\n<li><p>重启mysql<br><code>sudo service mysql start</code></p>\n</li>\n</ol>\n<h1 id=\"4-卸载\"><a href=\"#4-卸载\" class=\"headerlink\" title=\"4 卸载\"></a>4 卸载</h1><ol>\n<li><p>由于使用apt安装，所以卸载也会变得及其傻瓜式，使用如下命令即可<br><code>sudo apt-get remove mysql-server</code></p>\n</li>\n<li><p>有些人喜欢下一些mysql的插件来增强mysql的功能，使用如下命令卸载这些插件<br><code>sudo apt-get autoremove</code><br>或者指定包名<br><code>sudo apt-get remove package-name</code></p>\n</li>\n</ol>\n<p>不知道有哪些包，先用如下命令查看<br><code>dpkg -l | grep mysql | grep ii</code></p>\n<h1 id=\"5-自动安装-超傻瓜式\"><a href=\"#5-自动安装-超傻瓜式\" class=\"headerlink\" title=\"5 自动安装-超傻瓜式\"></a>5 自动安装-超傻瓜式</h1><p>可以写个shell脚本，把这些东西捆绑，一键执行！那就是真的超傻瓜式安装包了，我以后来填</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>首先mysql已经不是以前的mysql了，自从加入oracle旗下后，各类付费mysql产品已经陆续上线了。目前最新的付费企业mysql版中，居然已经支持了nosql！但是非常遗憾！这个功能在社区版（也就是免费开源版）中是不支持的！╮(╯▽╰)╭ 好吧，想白嫖nosql还是老老实实用别的把！Oracel爸爸不收钱是不可能的</p>\n<p>今天记录安装的是使用<code>ubuntu18.04</code>安装<code>MySQL Community Edition 8.0.16</code></p>\n<p>MySQL Community Edition就是我们最熟知的mysql啦，可以白嫖的mysql啦！</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>打开mysql官方下载网页<br><a href=\"https://dev.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/downloads/</a></p>\n<p>寻找如下的位置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MySQL Community Server (GPL)</span><br><span class=\"line\">(Current Generally Available Release: 8.0.16)</span><br><span class=\"line\">MySQL Community Server is the world&apos;s most popular open source database.</span><br><span class=\"line\">DOWNLOAD</span><br></pre></td></tr></table></figure></p>\n<p>随后我们来到了下载页面，先选择我们的操作系统版本，我是<code>ubuntu18.04 64-bit</code>，如下图所示</p>\n<p><img src=\"/images/tmpImage/mysql_1.png\"></p>\n<p>我刻意没有截图下面的那些各种各样的软件包，那是因为选择安装最新的8.0x，官方已经强力推荐使用包管理工具来安装了！所以我们没必要去看那些名字复杂，乱七八糟的各种安装包了！</p>\n<p>点击推荐我们使用apt下载mysql的那个企鹅图片，我们会跳转到apt下载mysql的专栏网页。</p>\n<p>该网页分成三个部分，第一部分介绍apt安装mysql的优点和它目前支持的版本，第二部分是一个快速开始的操作文档会教你怎么用！，第三部分是一个deb下载包<code>mysql-apt-config_0.8.13-1_all.deb</code>，可以先下好保存在本地，待会要用</p>\n<p>下载好<code>mysql-apt-config_0.8.13-1_all.deb</code>后，你如果看不懂官方的操作文档，或者对其内部用到的东西感兴趣，那么看下面的内容是最好的！</p>\n<h1 id=\"2-开始安装\"><a href=\"#2-开始安装\" class=\"headerlink\" title=\"2 开始安装\"></a>2 开始安装</h1><ol>\n<li><p>为了文件摆放合理，请创建一个mysql-config-deb的文件夹，随后把你下载好的<code>mysql-apt-config_0.8.13-1_all.deb</code>移动过去，并在当前文件夹开启terminal</p>\n</li>\n<li><p>在terminal内输入<code>sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb</code>，随后会弹出一个配置界面，除非你有特殊需求，不然直接选择<code>OK</code>即可，最后你会得到如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Reading database ... 224799 files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack mysql-apt-config_0.8.13-1_all.deb ...</span><br><span class=\"line\">Unpacking mysql-apt-config (0.8.13-1) over (0.8.13-1) ...</span><br><span class=\"line\">Setting up mysql-apt-config (0.8.13-1) ...</span><br><span class=\"line\">Warning: apt-key should not be used in scripts (called from postinst maintainerscript of the package mysql-apt-config)</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>[讲解]</strong>: <code>sudo dpkg -i mysql-apt-config_0.8.13-1_all.deb</code> 这一步是使用dpkg工具运行我们的mysql-config的程序，dpkg是ubuntu这类linux系统的底层包管理工具，也负责管理.deb结果的程序包。 mysql-cofig弹出的配置界面用于选择你要安装的是什么版本的mysql以及想要安装哪些mysql插件，选择完毕后，这个工具会生成一个类似<code>source.list</code>的东西，内部记录了mysql的apt软件仓库的服务器地址，用于后续的apt工具可以正常的安装mysql，会告知apt工具应该去检索哪些软件仓库的软件包。当然这个步骤其实也可以手动来添加这些apt的相关配置，如果你对apt的软件仓库配置非常熟悉，那么可以自己尝试，或者从这篇文档开始<code>https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/#repo-qg-apt-repo-manual-setup</code></p>\n<ol start=\"3\">\n<li><p>输入<code>sudo apt-get update</code>，apt-get就开始重新更新软件仓库服务器内的所有包文件索引，在这里使用该命令的目的是，拉取mysql的apt软件仓库的服务器上的包索引列表。<br><strong>[讲解]</strong>: apt工具是dpkg工具的上层软件，它拥有更强的包管理功能；它是利用自身软件仓库（source.list）内指定的源服务器地址内包含的包索引列表来正常的安装我们要安装的软件应用。这一步骤也正是在更新这些包索引列表，目的是添加我们刚刚引入的mysql的源软件仓库服务器内包含的包索引列表。可以把这个操作类比成电脑管家的查看更新。完成这步骤后，apt工具就会知道如何去下载安装我们的mysql了！所以这个步骤是使用apt安装mysql的关键步骤，是必须执行的哦！</p>\n</li>\n<li><p>输入<code>sudo apt-get install mysql-server</code>，提示是否安装选<code>Y</code>，随后apt工具会根据本地的包索引列表去下载我们的mysql-server对应的包程序！为什么apt可以自我管理怎么去安装mysql-server，我们从这条命令也没有告知他安装啥版本，但是它就会去自行安装我们的8.0x版本。这一切都归功于我们前面对apt软件仓库的配置！</p>\n</li>\n<li><p>等待片刻后，会弹出mysql一个小的配置程序界面，要求你输入下root用户的密码（输入2次），并且选择加密方式，8.0x使用了新的加密方式，也是官方推荐的，所以选推荐的就完事了！</p>\n</li>\n<li><p>看到如下输出，恭喜你安装成功！（入坑成功！）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">emitting double-array: 100% |###########################################| </span><br><span class=\"line\">reading /usr/share/mecab/dic/ipadic/matrix.def ... 1316x1316</span><br><span class=\"line\">emitting matrix      : 100% |###########################################| </span><br><span class=\"line\"></span><br><span class=\"line\">done!</span><br><span class=\"line\">update-alternatives: using /var/lib/mecab/dic/ipadic-utf8 to provide /var/lib/mecab/dic/debian (mecab-dictionary) in auto mode</span><br><span class=\"line\">Setting up mysql-community-server (8.0.16-2ubuntu18.04) ...</span><br><span class=\"line\">update-alternatives: using /etc/mysql/mysql.cnf to provide /etc/mysql/my.cnf (my.cnf) in auto mode</span><br><span class=\"line\">Created symlink /etc/systemd/system/multi-user.target.wants/mysql.service → /lib/systemd/system/mysql.service.</span><br><span class=\"line\">Setting up mysql-server (8.0.16-2ubuntu18.04) ...</span><br><span class=\"line\">Processing triggers for libc-bin (2.27-3ubuntu1) ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>sudo service mysql status</code>，查看mysql目前的状态，输出如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● mysql.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since Fri 2019-06-14 11:06:40 CST; 21s ago</span><br><span class=\"line\">     Docs: man:mysqld(8)</span><br><span class=\"line\">           http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class=\"line\">  Process: 18991 ExecStartPre=/usr/share/mysql-8.0/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 19030 (mysqld)</span><br><span class=\"line\">   Status: &quot;SERVER_OPERATING&quot;</span><br><span class=\"line\">    Tasks: 39 (limit: 4915)</span><br><span class=\"line\">   CGroup: /system.slice/mysql.service</span><br><span class=\"line\">           └─19030 /usr/sbin/mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">6月 14 11:06:35 zazalu-ThinkPad-E480 systemd[1]: Starting MySQL Community Server...</span><br><span class=\"line\">6月 14 11:06:40 zazalu-ThinkPad-E480 systemd[1]: Started MySQL Community Server.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>mysql的安装程序真的越来越傻瓜了！因为它不仅在安装完后自动运行了mysql，同时它还把它搞成了一个service，这样就可以在开机的时候自启动了！</p>\n<h1 id=\"3-其他控制命令\"><a href=\"#3-其他控制命令\" class=\"headerlink\" title=\"3 其他控制命令\"></a>3 其他控制命令</h1><ol>\n<li><p>关闭mysql，这里推荐如下命令，也是官方推荐的，当然你kill进程也是莫得问题的<br><code>sudo service mysql stop</code></p>\n</li>\n<li><p>重启mysql<br><code>sudo service mysql start</code></p>\n</li>\n</ol>\n<h1 id=\"4-卸载\"><a href=\"#4-卸载\" class=\"headerlink\" title=\"4 卸载\"></a>4 卸载</h1><ol>\n<li><p>由于使用apt安装，所以卸载也会变得及其傻瓜式，使用如下命令即可<br><code>sudo apt-get remove mysql-server</code></p>\n</li>\n<li><p>有些人喜欢下一些mysql的插件来增强mysql的功能，使用如下命令卸载这些插件<br><code>sudo apt-get autoremove</code><br>或者指定包名<br><code>sudo apt-get remove package-name</code></p>\n</li>\n</ol>\n<p>不知道有哪些包，先用如下命令查看<br><code>dpkg -l | grep mysql | grep ii</code></p>\n<h1 id=\"5-自动安装-超傻瓜式\"><a href=\"#5-自动安装-超傻瓜式\" class=\"headerlink\" title=\"5 自动安装-超傻瓜式\"></a>5 自动安装-超傻瓜式</h1><p>可以写个shell脚本，把这些东西捆绑，一键执行！那就是真的超傻瓜式安装包了，我以后来填</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"放弃Disqus, 拥抱Gitalk(基于Hexo)","date":"2019-09-19T08:36:36.000Z","_content":"\n## 前言\n\nDisqus用起来啥都还行，就是国内访问不了太差劲了。。\n\n最终决定改用Gitalk， 简单看下了文档， 上手还是很快的， 结合自己写的脚本， 可以做到一键开闭Gitalk功能（日后在完善成package打包到npm上供我自己更方便的使用）\n\n## 安装Gitalk到Hexo中\n\n### 修改_config.yml\n\n在Hexo的`_config.yml`中添加如下配置：\nz\n```yml\n# Gitalk comments config. (if use Gitalk, please close Disqus comments first)\ngitalk:\n  enabled: true\n  clientID: 'GitHub Application Client ID',\n  clientSecret: 'GitHub Application Client Secret',\n  repo: 'GitHub repo',\n  owner: 'GitHub repo owner',\n  admin: ['GitHub repo owner and collaborators, only these guys can initialize github issues'],\n  distractionFreeMode: false # 是否需要遮罩\n```\n\n该配置中的`clientID`和`clientSecret` 需要 GitHub Application，可以在这个网站注册后获得\n\nhttps://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\n\n注册的时候`Homepage URL`和`Authorization callback URL`都填你的博客域名即可\n\n下面是我的gitalk配置，还不是很理解的小伙伴可以参考下\n\n```yml\n# Gitalk comments config. (if use Gitalk, please close Disqus comments first)\ngitalk:\n  enabled: true\n  clientID: '我的clientID'\n  clientSecret: '我的clientSecret'\n  repo: 'zazaluMonster.github.io'\n  owner: 'zazaluMonster'\n  admin: ['zazaluMonster']\n  distractionFreeMode: false # 是否需要遮罩\n```\n\n## 编写脚本-自动注入Gitalk启动代码\n\n脚本内容如下：\n```js\n/**\n * gitalk_register.js\n * @description 注入gitalk内容到index.html末尾\n */\nconst _ = require('lodash');\n\n// Apply options with default\nlet config = _.defaultsDeep({\n}, hexo.config.gitalk);\n\nif(config.enabled){\n  hexo.extend.filter.register('after_render:html', (htmlContent) => {\n    const scriptToInject = `\n    if(location.pathname == '/'){\n      //首页不需要评论系统\n    }else{\n      var gitalk = new Gitalk({\n        clientID: '${config.clientID}',\n        clientSecret: '${config.clientSecret}',\n        repo: '${config.repo}',\n        owner: '${config.owner}',\n        admin: '${config.admin}',\n        id: md5(location.pathname),\n        distractionFreeMode: ${config.distractionFreeMode}\n      });\n      \n      gitalk.render('gitalk-container');\n    }\n    `;\n    const contentToInject = `\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n    <script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n    <script src=\"/js/md5.min.js\"></script>\n    <div id=\"gitalk-container\"></div>\n    <script>${scriptToInject}</script>\n    `;\n    let newHtmlContent = htmlContent;\n    if ((/([\\n\\r\\s\\t]*<\\/body>)/i).test(htmlContent)) {\n\n      const lastIndex = htmlContent.lastIndexOf('</body>');\n      newHtmlContent = `${htmlContent.substring(0, lastIndex)}${contentToInject}${htmlContent.substring(lastIndex, htmlContent.length)}`; // eslint-disable-line no-magic-numbers\n\n    }\n    return newHtmlContent;\n\n  });\n\n}\n```\n\n没有lodash模块的话使用npm自己安装下.（说实话这里也不需要用到lodash，由于我代码复制过来然后自己改了点，所以保留了这个方法）\n\n这段脚本就是在渲染完成后的html末尾加上gitalk的启动代码，非常好理解，唯一注意的地方用到了md5加密方法来加密id，防止gittalk报错. id字段不允许超过50个字符，所以迫不得已只能对location.pathname进行加密。\n\n`md5.min.js`这个js的内容在https://github.com/blueimp/JavaScript-MD5\n把这个js下下来后放置到`your.github.io\\themes\\your-theme-folder\\source\\js`下即可\n\n将该脚本`gitalk_register.js`放置到`your.github.io\\themes\\your-theme-folder\\scripts`下即可， 这个文件夹下的js文件会在hexo-cli工具运行的时候自动执行(执行时机就不说明了，可以自己看官方文档)\n\n如果仍然出现文件404问题，请自行根据自己的情况来改变路径即可\n\n## 大功告成\n\n试试`hexo g`,`hexo d`然后看看效果吧\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/use-gitalk-in-hexo-by-script.md","raw":"---\ntitle: 放弃Disqus, 拥抱Gitalk(基于Hexo)\ntags: hexo魔改\ncategories: IT\ndate: 2019-09-19 16:36:36\n---\n\n## 前言\n\nDisqus用起来啥都还行，就是国内访问不了太差劲了。。\n\n最终决定改用Gitalk， 简单看下了文档， 上手还是很快的， 结合自己写的脚本， 可以做到一键开闭Gitalk功能（日后在完善成package打包到npm上供我自己更方便的使用）\n\n## 安装Gitalk到Hexo中\n\n### 修改_config.yml\n\n在Hexo的`_config.yml`中添加如下配置：\nz\n```yml\n# Gitalk comments config. (if use Gitalk, please close Disqus comments first)\ngitalk:\n  enabled: true\n  clientID: 'GitHub Application Client ID',\n  clientSecret: 'GitHub Application Client Secret',\n  repo: 'GitHub repo',\n  owner: 'GitHub repo owner',\n  admin: ['GitHub repo owner and collaborators, only these guys can initialize github issues'],\n  distractionFreeMode: false # 是否需要遮罩\n```\n\n该配置中的`clientID`和`clientSecret` 需要 GitHub Application，可以在这个网站注册后获得\n\nhttps://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\n\n注册的时候`Homepage URL`和`Authorization callback URL`都填你的博客域名即可\n\n下面是我的gitalk配置，还不是很理解的小伙伴可以参考下\n\n```yml\n# Gitalk comments config. (if use Gitalk, please close Disqus comments first)\ngitalk:\n  enabled: true\n  clientID: '我的clientID'\n  clientSecret: '我的clientSecret'\n  repo: 'zazaluMonster.github.io'\n  owner: 'zazaluMonster'\n  admin: ['zazaluMonster']\n  distractionFreeMode: false # 是否需要遮罩\n```\n\n## 编写脚本-自动注入Gitalk启动代码\n\n脚本内容如下：\n```js\n/**\n * gitalk_register.js\n * @description 注入gitalk内容到index.html末尾\n */\nconst _ = require('lodash');\n\n// Apply options with default\nlet config = _.defaultsDeep({\n}, hexo.config.gitalk);\n\nif(config.enabled){\n  hexo.extend.filter.register('after_render:html', (htmlContent) => {\n    const scriptToInject = `\n    if(location.pathname == '/'){\n      //首页不需要评论系统\n    }else{\n      var gitalk = new Gitalk({\n        clientID: '${config.clientID}',\n        clientSecret: '${config.clientSecret}',\n        repo: '${config.repo}',\n        owner: '${config.owner}',\n        admin: '${config.admin}',\n        id: md5(location.pathname),\n        distractionFreeMode: ${config.distractionFreeMode}\n      });\n      \n      gitalk.render('gitalk-container');\n    }\n    `;\n    const contentToInject = `\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\">\n    <script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n    <script src=\"/js/md5.min.js\"></script>\n    <div id=\"gitalk-container\"></div>\n    <script>${scriptToInject}</script>\n    `;\n    let newHtmlContent = htmlContent;\n    if ((/([\\n\\r\\s\\t]*<\\/body>)/i).test(htmlContent)) {\n\n      const lastIndex = htmlContent.lastIndexOf('</body>');\n      newHtmlContent = `${htmlContent.substring(0, lastIndex)}${contentToInject}${htmlContent.substring(lastIndex, htmlContent.length)}`; // eslint-disable-line no-magic-numbers\n\n    }\n    return newHtmlContent;\n\n  });\n\n}\n```\n\n没有lodash模块的话使用npm自己安装下.（说实话这里也不需要用到lodash，由于我代码复制过来然后自己改了点，所以保留了这个方法）\n\n这段脚本就是在渲染完成后的html末尾加上gitalk的启动代码，非常好理解，唯一注意的地方用到了md5加密方法来加密id，防止gittalk报错. id字段不允许超过50个字符，所以迫不得已只能对location.pathname进行加密。\n\n`md5.min.js`这个js的内容在https://github.com/blueimp/JavaScript-MD5\n把这个js下下来后放置到`your.github.io\\themes\\your-theme-folder\\source\\js`下即可\n\n将该脚本`gitalk_register.js`放置到`your.github.io\\themes\\your-theme-folder\\scripts`下即可， 这个文件夹下的js文件会在hexo-cli工具运行的时候自动执行(执行时机就不说明了，可以自己看官方文档)\n\n如果仍然出现文件404问题，请自行根据自己的情况来改变路径即可\n\n## 大功告成\n\n试试`hexo g`,`hexo d`然后看看效果吧\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"use-gitalk-in-hexo-by-script","published":1,"updated":"2019-10-19T13:01:10.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tk0028m6elznwutksc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Disqus用起来啥都还行，就是国内访问不了太差劲了。。</p>\n<p>最终决定改用Gitalk， 简单看下了文档， 上手还是很快的， 结合自己写的脚本， 可以做到一键开闭Gitalk功能（日后在完善成package打包到npm上供我自己更方便的使用）</p>\n<h2 id=\"安装Gitalk到Hexo中\"><a href=\"#安装Gitalk到Hexo中\" class=\"headerlink\" title=\"安装Gitalk到Hexo中\"></a>安装Gitalk到Hexo中</h2><h3 id=\"修改-config-yml\"><a href=\"#修改-config-yml\" class=\"headerlink\" title=\"修改_config.yml\"></a>修改_config.yml</h3><p>在Hexo的<code>_config.yml</code>中添加如下配置：<br>z<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk comments config. (if use Gitalk, please close Disqus comments first)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">'GitHub Application Client ID'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">'GitHub Application Client Secret'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">'GitHub repo'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">'GitHub repo owner'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">['GitHub</span> <span class=\"string\">repo</span> <span class=\"string\">owner</span> <span class=\"string\">and</span> <span class=\"string\">collaborators,</span> <span class=\"string\">only</span> <span class=\"string\">these</span> <span class=\"string\">guys</span> <span class=\"string\">can</span> <span class=\"string\">initialize</span> <span class=\"string\">github</span> <span class=\"string\">issues'],</span></span><br><span class=\"line\"><span class=\"attr\">  distractionFreeMode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否需要遮罩</span></span><br></pre></td></tr></table></figure></p>\n<p>该配置中的<code>clientID</code>和<code>clientSecret</code> 需要 GitHub Application，可以在这个网站注册后获得</p>\n<p><a href=\"https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\" target=\"_blank\" rel=\"noopener\">https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973</a></p>\n<p>注册的时候<code>Homepage URL</code>和<code>Authorization callback URL</code>都填你的博客域名即可</p>\n<p>下面是我的gitalk配置，还不是很理解的小伙伴可以参考下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk comments config. (if use Gitalk, please close Disqus comments first)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">'我的clientID'</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">'我的clientSecret'</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">'zazaluMonster.github.io'</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">'zazaluMonster'</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">['zazaluMonster']</span></span><br><span class=\"line\"><span class=\"attr\">  distractionFreeMode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否需要遮罩</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写脚本-自动注入Gitalk启动代码\"><a href=\"#编写脚本-自动注入Gitalk启动代码\" class=\"headerlink\" title=\"编写脚本-自动注入Gitalk启动代码\"></a>编写脚本-自动注入Gitalk启动代码</h2><p>脚本内容如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * gitalk_register.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注入gitalk内容到index.html末尾</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply options with default</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = _.defaultsDeep(&#123;</span><br><span class=\"line\">&#125;, hexo.config.gitalk);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(config.enabled)&#123;</span><br><span class=\"line\">  hexo.extend.filter.register(<span class=\"string\">'after_render:html'</span>, (htmlContent) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scriptToInject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    if(location.pathname == '/')&#123;</span></span><br><span class=\"line\"><span class=\"string\">      //首页不需要评论系统</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">      var gitalk = new Gitalk(&#123;</span></span><br><span class=\"line\"><span class=\"string\">        clientID: '<span class=\"subst\">$&#123;config.clientID&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        clientSecret: '<span class=\"subst\">$&#123;config.clientSecret&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        repo: '<span class=\"subst\">$&#123;config.repo&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        owner: '<span class=\"subst\">$&#123;config.owner&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        admin: '<span class=\"subst\">$&#123;config.admin&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        id: md5(location.pathname),</span></span><br><span class=\"line\"><span class=\"string\">        distractionFreeMode: <span class=\"subst\">$&#123;config.distractionFreeMode&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">      gitalk.render('gitalk-container');</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contentToInject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src=\"/js/md5.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=\"gitalk-container\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;<span class=\"subst\">$&#123;scriptToInject&#125;</span>&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newHtmlContent = htmlContent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"regexp\">/([\\n\\r\\s\\t]*&lt;\\/body&gt;)/i</span>).test(htmlContent)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastIndex = htmlContent.lastIndexOf(<span class=\"string\">'&lt;/body&gt;'</span>);</span><br><span class=\"line\">      newHtmlContent = <span class=\"string\">`<span class=\"subst\">$&#123;htmlContent.substring(<span class=\"number\">0</span>, lastIndex)&#125;</span><span class=\"subst\">$&#123;contentToInject&#125;</span><span class=\"subst\">$&#123;htmlContent.substring(lastIndex, htmlContent.length)&#125;</span>`</span>; <span class=\"comment\">// eslint-disable-line no-magic-numbers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHtmlContent;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>没有lodash模块的话使用npm自己安装下.（说实话这里也不需要用到lodash，由于我代码复制过来然后自己改了点，所以保留了这个方法）</p>\n<p>这段脚本就是在渲染完成后的html末尾加上gitalk的启动代码，非常好理解，唯一注意的地方用到了md5加密方法来加密id，防止gittalk报错. id字段不允许超过50个字符，所以迫不得已只能对location.pathname进行加密。</p>\n<p><code>md5.min.js</code>这个js的内容在<a href=\"https://github.com/blueimp/JavaScript-MD5\" target=\"_blank\" rel=\"noopener\">https://github.com/blueimp/JavaScript-MD5</a><br>把这个js下下来后放置到<code>your.github.io\\themes\\your-theme-folder\\source\\js</code>下即可</p>\n<p>将该脚本<code>gitalk_register.js</code>放置到<code>your.github.io\\themes\\your-theme-folder\\scripts</code>下即可， 这个文件夹下的js文件会在hexo-cli工具运行的时候自动执行(执行时机就不说明了，可以自己看官方文档)</p>\n<p>如果仍然出现文件404问题，请自行根据自己的情况来改变路径即可</p>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p>试试<code>hexo g</code>,<code>hexo d</code>然后看看效果吧</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Disqus用起来啥都还行，就是国内访问不了太差劲了。。</p>\n<p>最终决定改用Gitalk， 简单看下了文档， 上手还是很快的， 结合自己写的脚本， 可以做到一键开闭Gitalk功能（日后在完善成package打包到npm上供我自己更方便的使用）</p>\n<h2 id=\"安装Gitalk到Hexo中\"><a href=\"#安装Gitalk到Hexo中\" class=\"headerlink\" title=\"安装Gitalk到Hexo中\"></a>安装Gitalk到Hexo中</h2><h3 id=\"修改-config-yml\"><a href=\"#修改-config-yml\" class=\"headerlink\" title=\"修改_config.yml\"></a>修改_config.yml</h3><p>在Hexo的<code>_config.yml</code>中添加如下配置：<br>z<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk comments config. (if use Gitalk, please close Disqus comments first)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">'GitHub Application Client ID'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">'GitHub Application Client Secret'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">'GitHub repo'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">'GitHub repo owner'</span><span class=\"string\">,</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">['GitHub</span> <span class=\"string\">repo</span> <span class=\"string\">owner</span> <span class=\"string\">and</span> <span class=\"string\">collaborators,</span> <span class=\"string\">only</span> <span class=\"string\">these</span> <span class=\"string\">guys</span> <span class=\"string\">can</span> <span class=\"string\">initialize</span> <span class=\"string\">github</span> <span class=\"string\">issues'],</span></span><br><span class=\"line\"><span class=\"attr\">  distractionFreeMode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否需要遮罩</span></span><br></pre></td></tr></table></figure></p>\n<p>该配置中的<code>clientID</code>和<code>clientSecret</code> 需要 GitHub Application，可以在这个网站注册后获得</p>\n<p><a href=\"https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\" target=\"_blank\" rel=\"noopener\">https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973</a></p>\n<p>注册的时候<code>Homepage URL</code>和<code>Authorization callback URL</code>都填你的博客域名即可</p>\n<p>下面是我的gitalk配置，还不是很理解的小伙伴可以参考下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk comments config. (if use Gitalk, please close Disqus comments first)</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\"><span class=\"attr\">  enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  clientID:</span> <span class=\"string\">'我的clientID'</span></span><br><span class=\"line\"><span class=\"attr\">  clientSecret:</span> <span class=\"string\">'我的clientSecret'</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">'zazaluMonster.github.io'</span></span><br><span class=\"line\"><span class=\"attr\">  owner:</span> <span class=\"string\">'zazaluMonster'</span></span><br><span class=\"line\"><span class=\"attr\">  admin:</span> <span class=\"string\">['zazaluMonster']</span></span><br><span class=\"line\"><span class=\"attr\">  distractionFreeMode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否需要遮罩</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写脚本-自动注入Gitalk启动代码\"><a href=\"#编写脚本-自动注入Gitalk启动代码\" class=\"headerlink\" title=\"编写脚本-自动注入Gitalk启动代码\"></a>编写脚本-自动注入Gitalk启动代码</h2><p>脚本内容如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * gitalk_register.js</span></span><br><span class=\"line\"><span class=\"comment\"> * @description 注入gitalk内容到index.html末尾</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply options with default</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> config = _.defaultsDeep(&#123;</span><br><span class=\"line\">&#125;, hexo.config.gitalk);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(config.enabled)&#123;</span><br><span class=\"line\">  hexo.extend.filter.register(<span class=\"string\">'after_render:html'</span>, (htmlContent) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scriptToInject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    if(location.pathname == '/')&#123;</span></span><br><span class=\"line\"><span class=\"string\">      //首页不需要评论系统</span></span><br><span class=\"line\"><span class=\"string\">    &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"string\">      var gitalk = new Gitalk(&#123;</span></span><br><span class=\"line\"><span class=\"string\">        clientID: '<span class=\"subst\">$&#123;config.clientID&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        clientSecret: '<span class=\"subst\">$&#123;config.clientSecret&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        repo: '<span class=\"subst\">$&#123;config.repo&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        owner: '<span class=\"subst\">$&#123;config.owner&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        admin: '<span class=\"subst\">$&#123;config.admin&#125;</span>',</span></span><br><span class=\"line\"><span class=\"string\">        id: md5(location.pathname),</span></span><br><span class=\"line\"><span class=\"string\">        distractionFreeMode: <span class=\"subst\">$&#123;config.distractionFreeMode&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">      &#125;);</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">      gitalk.render('gitalk-container');</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contentToInject = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script src=\"/js/md5.min.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=\"gitalk-container\"&gt;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;script&gt;<span class=\"subst\">$&#123;scriptToInject&#125;</span>&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newHtmlContent = htmlContent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"regexp\">/([\\n\\r\\s\\t]*&lt;\\/body&gt;)/i</span>).test(htmlContent)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastIndex = htmlContent.lastIndexOf(<span class=\"string\">'&lt;/body&gt;'</span>);</span><br><span class=\"line\">      newHtmlContent = <span class=\"string\">`<span class=\"subst\">$&#123;htmlContent.substring(<span class=\"number\">0</span>, lastIndex)&#125;</span><span class=\"subst\">$&#123;contentToInject&#125;</span><span class=\"subst\">$&#123;htmlContent.substring(lastIndex, htmlContent.length)&#125;</span>`</span>; <span class=\"comment\">// eslint-disable-line no-magic-numbers</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newHtmlContent;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>没有lodash模块的话使用npm自己安装下.（说实话这里也不需要用到lodash，由于我代码复制过来然后自己改了点，所以保留了这个方法）</p>\n<p>这段脚本就是在渲染完成后的html末尾加上gitalk的启动代码，非常好理解，唯一注意的地方用到了md5加密方法来加密id，防止gittalk报错. id字段不允许超过50个字符，所以迫不得已只能对location.pathname进行加密。</p>\n<p><code>md5.min.js</code>这个js的内容在<a href=\"https://github.com/blueimp/JavaScript-MD5\" target=\"_blank\" rel=\"noopener\">https://github.com/blueimp/JavaScript-MD5</a><br>把这个js下下来后放置到<code>your.github.io\\themes\\your-theme-folder\\source\\js</code>下即可</p>\n<p>将该脚本<code>gitalk_register.js</code>放置到<code>your.github.io\\themes\\your-theme-folder\\scripts</code>下即可， 这个文件夹下的js文件会在hexo-cli工具运行的时候自动执行(执行时机就不说明了，可以自己看官方文档)</p>\n<p>如果仍然出现文件404问题，请自行根据自己的情况来改变路径即可</p>\n<h2 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h2><p>试试<code>hexo g</code>,<code>hexo d</code>然后看看效果吧</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"ubuntu18.04配置shadowsocks客户端","date":"2019-06-06T04:11:49.000Z","_content":"\n## 下载shadowsock客户端\n\n有两种shadowsocks客户端供你选择\n\n1. 图形化界面的版本 Shadowsocks-Qt5 ，本文不介绍图形化界面客户端配置，\n参考https://github.com/shadowsocks/shadowsocks-qt5/wiki\n2. 命令行客户端，用包管理工具下载，分两种，一种python实现，一种c实现的，本文介绍python的，想要c的\n参考https://github.com/shadowsocks/shadowsocks-libev#installation\n\n## 安装\n\n使用Ubuntu高级包管理工具apt安装：\n```s\napt-get install python-pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n## 配置网络连接文件\n\n创建配置文件`/etc/shadowsocks.json`，路径随意，不想思考就装etc路径下，这样就符合linux文件系统目录规范放置方式；如果是etc的话，注意root权限\n\n格式如下：\n```json\n{\n    \"server\":\"服务器 IP 或是域名\",\n    \"server_port\":端口号,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"密码\",\n    \"timeout\":300,\n    \"method\":\"加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)\",\n    \"fast_open\": false\n}\n```\n\n## 启动shadowsocks python版客户端\n\nsslocal（ss提供的一个proxy工具）已一个守护进程启动：\n```s\n# sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息\n/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start  \n```\n\n关闭：\n```s\n# sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息\n/usr/local/bin/sslocal -c /etc/shadowsocks.json -d stop\n```\n或者你直接kill进程也可以，使用`ps -aux | grep sslocal`就可以找到进程\n\n**[!]**: 建议使用守护进程启动，如果不使用守护进程启动，那么这个工具就会一直在terminal页面挂起，实时的打印log。一旦关闭terminal，它也就异常退出了，代理功能就没法持续稳定的运行。\n\n## 全局代理 （选填项）\n\n打开ubuntu系统的设置 -> 点击Network ->点击Network Proxy设置 -> 选择Manual -> 在socks Host一栏输入 127.0.0.1，端口1080即可\n\n**[!]** 全局代理指的是所有网络请求全部走这个代理，如果你不需要这样，，那就跳过这个步骤。\n\n## 浏览器配置（Chrome例子）\n\n由于我不想要全局都用一个代理，我更希望shadowsocks只是帮我上国外网站，所有我只限定浏览器使用shadowsocks。\n\n### 下载Proxy SwitchyOmega扩展工具\n\n**[!]** 不依赖工具你也可以手动，但是切换代理起来麻烦，所以直接推荐使用扩展工具\n\nProxy SwitchyOmega 可以轻松快捷的帮我们切换浏览器的代理设置\n\nProxy SwitchyOmega 的下载安装，如果你能打开chrome应用商店，那么直接输入Proxy SwitchyOmega即可安装\n\n如果你没法打开chrome应用商店，可以在github该扩张工具项目的release下找到下载源，下载crx文件即可\ngithub release地址：https://github.com/FelisCatus/SwitchyOmega/releases\n\n嫌麻烦不想自己找，用下面这个，目前（2019-06-06）最新版本\n下载地址：https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx\n\n下载好后，将.crx文件拖入`chrome://extensions/`\n\n**[!]** 最新版chrome直接拖入crx文件会拒绝，解决方法：\n```\n把下载后的.crx扩展名的离线Chrome插件的文件扩展名改成.zip(建议不要改成rar，有可能出现损坏)\n解压压缩文件\n在Chrome的地址栏中输入：chrome://extensions/ 打开Chrome浏览器的扩展程序管理界面，并在该界面的右上方的开发者模式按钮上打勾\n在勾选开发者模式选项以后，在该页面就会出现加载正在开发的扩展程序等按钮，点击“加载正在开发的扩展程序”按钮，并选择刚刚解压的Chrome插件文件夹的位置\n```\n\n全部完成后，在`chrome://extensions/`页面记得启动Proxy SwitchyOmega\n\n启动后会在chrome的右上角（插件栏）观察到一个圆形的图标。\n\n### 配置Proxy SwitchyOmega\n\n使用之前，我们要先配置下。\n\n可以直接使用这个配置文件来快速应用shadowsocks服务到Proxy SwitchyOmega中\n\n配置文件下载地址：\nhttps://home.shadowsocks.ch/dl.php?type=d&id=74\n\n点击 “Proxy SwitchyOmega” > \"选项\" > \"导入/导出\" > \"从备份文件中恢复\" \n\n配置文件的内容：填写不同种代理设置而已，该配置文件帮你配置了四种模式，\n[直接连接]， 不使用代理\n[系统代理]， 使用系统默认代理，如果你没配过系统默认代理，那么就想到与直接连接\n[Shadowsock]， 使用配置好的代理(127.0.0.1:1080)\n[自动切换] ， 可以在所有上述模式中自动切换，已达到完成网页访问的目的（不推荐）\n\n### 使用Proxy SwitchyOmega\n\n点击圆形图标，选择Shadowsock模式你就发现能够上Google，youtube等网站了（注意先启动shadowsocks客户端服务）\n\n## 开机自启动\n\n我们希望不是每次自己调用启动命令来启动shadowsocks，而是开机可以自己启动。那么需要配置一个自定义的ubuntu开机启动服务，我们使用Systemd来完成这项任务\n\n1. 创建文件sudo vim /etc/systemd/system/shadowsocks.service\n\n2. 文件内容填写如下（我已我自己的为例）：\n```\n[Unit]\nDescription=Shadowsocks Client Service\nAfter=network.target\nAfter=network-online.target\n\n[Service]\n#Type=simple\nType=forking\nUser=root\nExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start\n\n[Install]\nWantedBy=multi-user.target\n```\n\n重点是填写ExecStart那里，把我们的启动指令填进去\n\n**[!]** shadowsocks.json的路径填你自己的，如果你安全按照本配置文档来一路做过来的话，就可以直接使用上面的内容\n\n**[!]**: Service模块的Type必须使用forking，因为指令`/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start`执行完后不会一直运行，创建完守护线程后很快会退出，最后Service发现指令已经执行完，于是service就也退出了。但是sslocal这时的守护线程是挂载在service上的，所以service退出，守护线程立马也kill了。这就导致最终你的sslocal没开启，就和走了一次片场一样。所以必须要规定Type=forking，因为forking模式下，Service会将自己的所有守护线程移交给os，那就没问题了，sslocal会在os下继续运行！\n\n3. 让配置文件生效\n\n`systemctl enable /etc/systemd/system/shadowsocks.service`\n\n4. 重启看看效果即可\n\n\n## 有关Systemd管理的指令介绍\n\n1. 当你因为某些原因要修改shadowsocks.service的内容，比如字母打错了。修改完后必须调用`systemctl enable /etc/systemd/system/shadowsocks.service`来使其重新生效\n\n2. sslocal提供log打印到文件的功能，使用-help查看具体帮助就可以翻阅到如何使用了\n\n3. 启动（关闭）service服务，使用指令`systemctl start(stop) shadowsocks.service` \n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","source":"_posts/ubuntu18-04配置shadowsocks客户端.md","raw":"---\ntitle: ubuntu18.04配置shadowsocks客户端\ntags: Proxy\ncategories: IT\ndate: 2019-06-06 12:11:49\n---\n\n## 下载shadowsock客户端\n\n有两种shadowsocks客户端供你选择\n\n1. 图形化界面的版本 Shadowsocks-Qt5 ，本文不介绍图形化界面客户端配置，\n参考https://github.com/shadowsocks/shadowsocks-qt5/wiki\n2. 命令行客户端，用包管理工具下载，分两种，一种python实现，一种c实现的，本文介绍python的，想要c的\n参考https://github.com/shadowsocks/shadowsocks-libev#installation\n\n## 安装\n\n使用Ubuntu高级包管理工具apt安装：\n```s\napt-get install python-pip\npip install git+https://github.com/shadowsocks/shadowsocks.git@master\n```\n\n## 配置网络连接文件\n\n创建配置文件`/etc/shadowsocks.json`，路径随意，不想思考就装etc路径下，这样就符合linux文件系统目录规范放置方式；如果是etc的话，注意root权限\n\n格式如下：\n```json\n{\n    \"server\":\"服务器 IP 或是域名\",\n    \"server_port\":端口号,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"密码\",\n    \"timeout\":300,\n    \"method\":\"加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)\",\n    \"fast_open\": false\n}\n```\n\n## 启动shadowsocks python版客户端\n\nsslocal（ss提供的一个proxy工具）已一个守护进程启动：\n```s\n# sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息\n/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start  \n```\n\n关闭：\n```s\n# sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息\n/usr/local/bin/sslocal -c /etc/shadowsocks.json -d stop\n```\n或者你直接kill进程也可以，使用`ps -aux | grep sslocal`就可以找到进程\n\n**[!]**: 建议使用守护进程启动，如果不使用守护进程启动，那么这个工具就会一直在terminal页面挂起，实时的打印log。一旦关闭terminal，它也就异常退出了，代理功能就没法持续稳定的运行。\n\n## 全局代理 （选填项）\n\n打开ubuntu系统的设置 -> 点击Network ->点击Network Proxy设置 -> 选择Manual -> 在socks Host一栏输入 127.0.0.1，端口1080即可\n\n**[!]** 全局代理指的是所有网络请求全部走这个代理，如果你不需要这样，，那就跳过这个步骤。\n\n## 浏览器配置（Chrome例子）\n\n由于我不想要全局都用一个代理，我更希望shadowsocks只是帮我上国外网站，所有我只限定浏览器使用shadowsocks。\n\n### 下载Proxy SwitchyOmega扩展工具\n\n**[!]** 不依赖工具你也可以手动，但是切换代理起来麻烦，所以直接推荐使用扩展工具\n\nProxy SwitchyOmega 可以轻松快捷的帮我们切换浏览器的代理设置\n\nProxy SwitchyOmega 的下载安装，如果你能打开chrome应用商店，那么直接输入Proxy SwitchyOmega即可安装\n\n如果你没法打开chrome应用商店，可以在github该扩张工具项目的release下找到下载源，下载crx文件即可\ngithub release地址：https://github.com/FelisCatus/SwitchyOmega/releases\n\n嫌麻烦不想自己找，用下面这个，目前（2019-06-06）最新版本\n下载地址：https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx\n\n下载好后，将.crx文件拖入`chrome://extensions/`\n\n**[!]** 最新版chrome直接拖入crx文件会拒绝，解决方法：\n```\n把下载后的.crx扩展名的离线Chrome插件的文件扩展名改成.zip(建议不要改成rar，有可能出现损坏)\n解压压缩文件\n在Chrome的地址栏中输入：chrome://extensions/ 打开Chrome浏览器的扩展程序管理界面，并在该界面的右上方的开发者模式按钮上打勾\n在勾选开发者模式选项以后，在该页面就会出现加载正在开发的扩展程序等按钮，点击“加载正在开发的扩展程序”按钮，并选择刚刚解压的Chrome插件文件夹的位置\n```\n\n全部完成后，在`chrome://extensions/`页面记得启动Proxy SwitchyOmega\n\n启动后会在chrome的右上角（插件栏）观察到一个圆形的图标。\n\n### 配置Proxy SwitchyOmega\n\n使用之前，我们要先配置下。\n\n可以直接使用这个配置文件来快速应用shadowsocks服务到Proxy SwitchyOmega中\n\n配置文件下载地址：\nhttps://home.shadowsocks.ch/dl.php?type=d&id=74\n\n点击 “Proxy SwitchyOmega” > \"选项\" > \"导入/导出\" > \"从备份文件中恢复\" \n\n配置文件的内容：填写不同种代理设置而已，该配置文件帮你配置了四种模式，\n[直接连接]， 不使用代理\n[系统代理]， 使用系统默认代理，如果你没配过系统默认代理，那么就想到与直接连接\n[Shadowsock]， 使用配置好的代理(127.0.0.1:1080)\n[自动切换] ， 可以在所有上述模式中自动切换，已达到完成网页访问的目的（不推荐）\n\n### 使用Proxy SwitchyOmega\n\n点击圆形图标，选择Shadowsock模式你就发现能够上Google，youtube等网站了（注意先启动shadowsocks客户端服务）\n\n## 开机自启动\n\n我们希望不是每次自己调用启动命令来启动shadowsocks，而是开机可以自己启动。那么需要配置一个自定义的ubuntu开机启动服务，我们使用Systemd来完成这项任务\n\n1. 创建文件sudo vim /etc/systemd/system/shadowsocks.service\n\n2. 文件内容填写如下（我已我自己的为例）：\n```\n[Unit]\nDescription=Shadowsocks Client Service\nAfter=network.target\nAfter=network-online.target\n\n[Service]\n#Type=simple\nType=forking\nUser=root\nExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start\n\n[Install]\nWantedBy=multi-user.target\n```\n\n重点是填写ExecStart那里，把我们的启动指令填进去\n\n**[!]** shadowsocks.json的路径填你自己的，如果你安全按照本配置文档来一路做过来的话，就可以直接使用上面的内容\n\n**[!]**: Service模块的Type必须使用forking，因为指令`/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start`执行完后不会一直运行，创建完守护线程后很快会退出，最后Service发现指令已经执行完，于是service就也退出了。但是sslocal这时的守护线程是挂载在service上的，所以service退出，守护线程立马也kill了。这就导致最终你的sslocal没开启，就和走了一次片场一样。所以必须要规定Type=forking，因为forking模式下，Service会将自己的所有守护线程移交给os，那就没问题了，sslocal会在os下继续运行！\n\n3. 让配置文件生效\n\n`systemctl enable /etc/systemd/system/shadowsocks.service`\n\n4. 重启看看效果即可\n\n\n## 有关Systemd管理的指令介绍\n\n1. 当你因为某些原因要修改shadowsocks.service的内容，比如字母打错了。修改完后必须调用`systemctl enable /etc/systemd/system/shadowsocks.service`来使其重新生效\n\n2. sslocal提供log打印到文件的功能，使用-help查看具体帮助就可以翻阅到如何使用了\n\n3. 启动（关闭）service服务，使用指令`systemctl start(stop) shadowsocks.service` \n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","slug":"ubuntu18-04配置shadowsocks客户端","published":1,"updated":"2019-10-19T13:01:10.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tl002cm6elqxdl9upn","content":"<h2 id=\"下载shadowsock客户端\"><a href=\"#下载shadowsock客户端\" class=\"headerlink\" title=\"下载shadowsock客户端\"></a>下载shadowsock客户端</h2><p>有两种shadowsocks客户端供你选择</p>\n<ol>\n<li>图形化界面的版本 Shadowsocks-Qt5 ，本文不介绍图形化界面客户端配置，<br>参考<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki</a></li>\n<li>命令行客户端，用包管理工具下载，分两种，一种python实现，一种c实现的，本文介绍python的，想要c的<br>参考<a href=\"https://github.com/shadowsocks/shadowsocks-libev#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-libev#installation</a></li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用Ubuntu高级包管理工具apt安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置网络连接文件\"><a href=\"#配置网络连接文件\" class=\"headerlink\" title=\"配置网络连接文件\"></a>配置网络连接文件</h2><p>创建配置文件<code>/etc/shadowsocks.json</code>，路径随意，不想思考就装etc路径下，这样就符合linux文件系统目录规范放置方式；如果是etc的话，注意root权限</p>\n<p>格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"服务器 IP 或是域名\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server_port\"</span>:端口号,</span><br><span class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"密码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动shadowsocks-python版客户端\"><a href=\"#启动shadowsocks-python版客户端\" class=\"headerlink\" title=\"启动shadowsocks python版客户端\"></a>启动shadowsocks python版客户端</h2><p>sslocal（ss提供的一个proxy工具）已一个守护进程启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息</span><br><span class=\"line\">/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure></p>\n<p>关闭：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息</span><br><span class=\"line\">/usr/local/bin/sslocal -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure></p>\n<p>或者你直接kill进程也可以，使用<code>ps -aux | grep sslocal</code>就可以找到进程</p>\n<p><strong>[!]</strong>: 建议使用守护进程启动，如果不使用守护进程启动，那么这个工具就会一直在terminal页面挂起，实时的打印log。一旦关闭terminal，它也就异常退出了，代理功能就没法持续稳定的运行。</p>\n<h2 id=\"全局代理-（选填项）\"><a href=\"#全局代理-（选填项）\" class=\"headerlink\" title=\"全局代理 （选填项）\"></a>全局代理 （选填项）</h2><p>打开ubuntu系统的设置 -&gt; 点击Network -&gt;点击Network Proxy设置 -&gt; 选择Manual -&gt; 在socks Host一栏输入 127.0.0.1，端口1080即可</p>\n<p><strong>[!]</strong> 全局代理指的是所有网络请求全部走这个代理，如果你不需要这样，，那就跳过这个步骤。</p>\n<h2 id=\"浏览器配置（Chrome例子）\"><a href=\"#浏览器配置（Chrome例子）\" class=\"headerlink\" title=\"浏览器配置（Chrome例子）\"></a>浏览器配置（Chrome例子）</h2><p>由于我不想要全局都用一个代理，我更希望shadowsocks只是帮我上国外网站，所有我只限定浏览器使用shadowsocks。</p>\n<h3 id=\"下载Proxy-SwitchyOmega扩展工具\"><a href=\"#下载Proxy-SwitchyOmega扩展工具\" class=\"headerlink\" title=\"下载Proxy SwitchyOmega扩展工具\"></a>下载Proxy SwitchyOmega扩展工具</h3><p><strong>[!]</strong> 不依赖工具你也可以手动，但是切换代理起来麻烦，所以直接推荐使用扩展工具</p>\n<p>Proxy SwitchyOmega 可以轻松快捷的帮我们切换浏览器的代理设置</p>\n<p>Proxy SwitchyOmega 的下载安装，如果你能打开chrome应用商店，那么直接输入Proxy SwitchyOmega即可安装</p>\n<p>如果你没法打开chrome应用商店，可以在github该扩张工具项目的release下找到下载源，下载crx文件即可<br>github release地址：<a href=\"https://github.com/FelisCatus/SwitchyOmega/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>\n<p>嫌麻烦不想自己找，用下面这个，目前（2019-06-06）最新版本<br>下载地址：<a href=\"https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx</a></p>\n<p>下载好后，将.crx文件拖入<code>chrome://extensions/</code></p>\n<p><strong>[!]</strong> 最新版chrome直接拖入crx文件会拒绝，解决方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把下载后的.crx扩展名的离线Chrome插件的文件扩展名改成.zip(建议不要改成rar，有可能出现损坏)</span><br><span class=\"line\">解压压缩文件</span><br><span class=\"line\">在Chrome的地址栏中输入：chrome://extensions/ 打开Chrome浏览器的扩展程序管理界面，并在该界面的右上方的开发者模式按钮上打勾</span><br><span class=\"line\">在勾选开发者模式选项以后，在该页面就会出现加载正在开发的扩展程序等按钮，点击“加载正在开发的扩展程序”按钮，并选择刚刚解压的Chrome插件文件夹的位置</span><br></pre></td></tr></table></figure></p>\n<p>全部完成后，在<code>chrome://extensions/</code>页面记得启动Proxy SwitchyOmega</p>\n<p>启动后会在chrome的右上角（插件栏）观察到一个圆形的图标。</p>\n<h3 id=\"配置Proxy-SwitchyOmega\"><a href=\"#配置Proxy-SwitchyOmega\" class=\"headerlink\" title=\"配置Proxy SwitchyOmega\"></a>配置Proxy SwitchyOmega</h3><p>使用之前，我们要先配置下。</p>\n<p>可以直接使用这个配置文件来快速应用shadowsocks服务到Proxy SwitchyOmega中</p>\n<p>配置文件下载地址：<br><a href=\"https://home.shadowsocks.ch/dl.php?type=d&amp;id=74\" target=\"_blank\" rel=\"noopener\">https://home.shadowsocks.ch/dl.php?type=d&amp;id=74</a></p>\n<p>点击 “Proxy SwitchyOmega” &gt; “选项” &gt; “导入/导出” &gt; “从备份文件中恢复” </p>\n<p>配置文件的内容：填写不同种代理设置而已，该配置文件帮你配置了四种模式，<br>[直接连接]， 不使用代理<br>[系统代理]， 使用系统默认代理，如果你没配过系统默认代理，那么就想到与直接连接<br>[Shadowsock]， 使用配置好的代理(127.0.0.1:1080)<br>[自动切换] ， 可以在所有上述模式中自动切换，已达到完成网页访问的目的（不推荐）</p>\n<h3 id=\"使用Proxy-SwitchyOmega\"><a href=\"#使用Proxy-SwitchyOmega\" class=\"headerlink\" title=\"使用Proxy SwitchyOmega\"></a>使用Proxy SwitchyOmega</h3><p>点击圆形图标，选择Shadowsock模式你就发现能够上Google，youtube等网站了（注意先启动shadowsocks客户端服务）</p>\n<h2 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h2><p>我们希望不是每次自己调用启动命令来启动shadowsocks，而是开机可以自己启动。那么需要配置一个自定义的ubuntu开机启动服务，我们使用Systemd来完成这项任务</p>\n<ol>\n<li><p>创建文件sudo vim /etc/systemd/system/shadowsocks.service</p>\n</li>\n<li><p>文件内容填写如下（我已我自己的为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks Client Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">#Type=simple</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重点是填写ExecStart那里，把我们的启动指令填进去</p>\n<p><strong>[!]</strong> shadowsocks.json的路径填你自己的，如果你安全按照本配置文档来一路做过来的话，就可以直接使用上面的内容</p>\n<p><strong>[!]</strong>: Service模块的Type必须使用forking，因为指令<code>/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</code>执行完后不会一直运行，创建完守护线程后很快会退出，最后Service发现指令已经执行完，于是service就也退出了。但是sslocal这时的守护线程是挂载在service上的，所以service退出，守护线程立马也kill了。这就导致最终你的sslocal没开启，就和走了一次片场一样。所以必须要规定Type=forking，因为forking模式下，Service会将自己的所有守护线程移交给os，那就没问题了，sslocal会在os下继续运行！</p>\n<ol start=\"3\">\n<li>让配置文件生效</li>\n</ol>\n<p><code>systemctl enable /etc/systemd/system/shadowsocks.service</code></p>\n<ol start=\"4\">\n<li>重启看看效果即可</li>\n</ol>\n<h2 id=\"有关Systemd管理的指令介绍\"><a href=\"#有关Systemd管理的指令介绍\" class=\"headerlink\" title=\"有关Systemd管理的指令介绍\"></a>有关Systemd管理的指令介绍</h2><ol>\n<li><p>当你因为某些原因要修改shadowsocks.service的内容，比如字母打错了。修改完后必须调用<code>systemctl enable /etc/systemd/system/shadowsocks.service</code>来使其重新生效</p>\n</li>\n<li><p>sslocal提供log打印到文件的功能，使用-help查看具体帮助就可以翻阅到如何使用了</p>\n</li>\n<li><p>启动（关闭）service服务，使用指令<code>systemctl start(stop) shadowsocks.service</code> </p>\n</li>\n</ol>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载shadowsock客户端\"><a href=\"#下载shadowsock客户端\" class=\"headerlink\" title=\"下载shadowsock客户端\"></a>下载shadowsock客户端</h2><p>有两种shadowsocks客户端供你选择</p>\n<ol>\n<li>图形化界面的版本 Shadowsocks-Qt5 ，本文不介绍图形化界面客户端配置，<br>参考<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki</a></li>\n<li>命令行客户端，用包管理工具下载，分两种，一种python实现，一种c实现的，本文介绍python的，想要c的<br>参考<a href=\"https://github.com/shadowsocks/shadowsocks-libev#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-libev#installation</a></li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>使用Ubuntu高级包管理工具apt安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置网络连接文件\"><a href=\"#配置网络连接文件\" class=\"headerlink\" title=\"配置网络连接文件\"></a>配置网络连接文件</h2><p>创建配置文件<code>/etc/shadowsocks.json</code>，路径随意，不想思考就装etc路径下，这样就符合linux文件系统目录规范放置方式；如果是etc的话，注意root权限</p>\n<p>格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"服务器 IP 或是域名\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"server_port\"</span>:端口号,</span><br><span class=\"line\">    <span class=\"attr\">\"local_address\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"密码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动shadowsocks-python版客户端\"><a href=\"#启动shadowsocks-python版客户端\" class=\"headerlink\" title=\"启动shadowsocks python版客户端\"></a>启动shadowsocks python版客户端</h2><p>sslocal（ss提供的一个proxy工具）已一个守护进程启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息</span><br><span class=\"line\">/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure></p>\n<p>关闭：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sslocal是python客户度命令，-c是使用配置文件启动，-d是作为守护进程启动，start是启动。具体使用-h指令获取帮助信息</span><br><span class=\"line\">/usr/local/bin/sslocal -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure></p>\n<p>或者你直接kill进程也可以，使用<code>ps -aux | grep sslocal</code>就可以找到进程</p>\n<p><strong>[!]</strong>: 建议使用守护进程启动，如果不使用守护进程启动，那么这个工具就会一直在terminal页面挂起，实时的打印log。一旦关闭terminal，它也就异常退出了，代理功能就没法持续稳定的运行。</p>\n<h2 id=\"全局代理-（选填项）\"><a href=\"#全局代理-（选填项）\" class=\"headerlink\" title=\"全局代理 （选填项）\"></a>全局代理 （选填项）</h2><p>打开ubuntu系统的设置 -&gt; 点击Network -&gt;点击Network Proxy设置 -&gt; 选择Manual -&gt; 在socks Host一栏输入 127.0.0.1，端口1080即可</p>\n<p><strong>[!]</strong> 全局代理指的是所有网络请求全部走这个代理，如果你不需要这样，，那就跳过这个步骤。</p>\n<h2 id=\"浏览器配置（Chrome例子）\"><a href=\"#浏览器配置（Chrome例子）\" class=\"headerlink\" title=\"浏览器配置（Chrome例子）\"></a>浏览器配置（Chrome例子）</h2><p>由于我不想要全局都用一个代理，我更希望shadowsocks只是帮我上国外网站，所有我只限定浏览器使用shadowsocks。</p>\n<h3 id=\"下载Proxy-SwitchyOmega扩展工具\"><a href=\"#下载Proxy-SwitchyOmega扩展工具\" class=\"headerlink\" title=\"下载Proxy SwitchyOmega扩展工具\"></a>下载Proxy SwitchyOmega扩展工具</h3><p><strong>[!]</strong> 不依赖工具你也可以手动，但是切换代理起来麻烦，所以直接推荐使用扩展工具</p>\n<p>Proxy SwitchyOmega 可以轻松快捷的帮我们切换浏览器的代理设置</p>\n<p>Proxy SwitchyOmega 的下载安装，如果你能打开chrome应用商店，那么直接输入Proxy SwitchyOmega即可安装</p>\n<p>如果你没法打开chrome应用商店，可以在github该扩张工具项目的release下找到下载源，下载crx文件即可<br>github release地址：<a href=\"https://github.com/FelisCatus/SwitchyOmega/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases</a></p>\n<p>嫌麻烦不想自己找，用下面这个，目前（2019-06-06）最新版本<br>下载地址：<a href=\"https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx\" target=\"_blank\" rel=\"noopener\">https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.5.20/SwitchyOmega_Chromium.crx</a></p>\n<p>下载好后，将.crx文件拖入<code>chrome://extensions/</code></p>\n<p><strong>[!]</strong> 最新版chrome直接拖入crx文件会拒绝，解决方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把下载后的.crx扩展名的离线Chrome插件的文件扩展名改成.zip(建议不要改成rar，有可能出现损坏)</span><br><span class=\"line\">解压压缩文件</span><br><span class=\"line\">在Chrome的地址栏中输入：chrome://extensions/ 打开Chrome浏览器的扩展程序管理界面，并在该界面的右上方的开发者模式按钮上打勾</span><br><span class=\"line\">在勾选开发者模式选项以后，在该页面就会出现加载正在开发的扩展程序等按钮，点击“加载正在开发的扩展程序”按钮，并选择刚刚解压的Chrome插件文件夹的位置</span><br></pre></td></tr></table></figure></p>\n<p>全部完成后，在<code>chrome://extensions/</code>页面记得启动Proxy SwitchyOmega</p>\n<p>启动后会在chrome的右上角（插件栏）观察到一个圆形的图标。</p>\n<h3 id=\"配置Proxy-SwitchyOmega\"><a href=\"#配置Proxy-SwitchyOmega\" class=\"headerlink\" title=\"配置Proxy SwitchyOmega\"></a>配置Proxy SwitchyOmega</h3><p>使用之前，我们要先配置下。</p>\n<p>可以直接使用这个配置文件来快速应用shadowsocks服务到Proxy SwitchyOmega中</p>\n<p>配置文件下载地址：<br><a href=\"https://home.shadowsocks.ch/dl.php?type=d&amp;id=74\" target=\"_blank\" rel=\"noopener\">https://home.shadowsocks.ch/dl.php?type=d&amp;id=74</a></p>\n<p>点击 “Proxy SwitchyOmega” &gt; “选项” &gt; “导入/导出” &gt; “从备份文件中恢复” </p>\n<p>配置文件的内容：填写不同种代理设置而已，该配置文件帮你配置了四种模式，<br>[直接连接]， 不使用代理<br>[系统代理]， 使用系统默认代理，如果你没配过系统默认代理，那么就想到与直接连接<br>[Shadowsock]， 使用配置好的代理(127.0.0.1:1080)<br>[自动切换] ， 可以在所有上述模式中自动切换，已达到完成网页访问的目的（不推荐）</p>\n<h3 id=\"使用Proxy-SwitchyOmega\"><a href=\"#使用Proxy-SwitchyOmega\" class=\"headerlink\" title=\"使用Proxy SwitchyOmega\"></a>使用Proxy SwitchyOmega</h3><p>点击圆形图标，选择Shadowsock模式你就发现能够上Google，youtube等网站了（注意先启动shadowsocks客户端服务）</p>\n<h2 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h2><p>我们希望不是每次自己调用启动命令来启动shadowsocks，而是开机可以自己启动。那么需要配置一个自定义的ubuntu开机启动服务，我们使用Systemd来完成这项任务</p>\n<ol>\n<li><p>创建文件sudo vim /etc/systemd/system/shadowsocks.service</p>\n</li>\n<li><p>文件内容填写如下（我已我自己的为例）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Shadowsocks Client Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">#Type=simple</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">User=root</span><br><span class=\"line\">ExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重点是填写ExecStart那里，把我们的启动指令填进去</p>\n<p><strong>[!]</strong> shadowsocks.json的路径填你自己的，如果你安全按照本配置文档来一路做过来的话，就可以直接使用上面的内容</p>\n<p><strong>[!]</strong>: Service模块的Type必须使用forking，因为指令<code>/usr/local/bin/sslocal -c /etc/shadowsocks.json -d start</code>执行完后不会一直运行，创建完守护线程后很快会退出，最后Service发现指令已经执行完，于是service就也退出了。但是sslocal这时的守护线程是挂载在service上的，所以service退出，守护线程立马也kill了。这就导致最终你的sslocal没开启，就和走了一次片场一样。所以必须要规定Type=forking，因为forking模式下，Service会将自己的所有守护线程移交给os，那就没问题了，sslocal会在os下继续运行！</p>\n<ol start=\"3\">\n<li>让配置文件生效</li>\n</ol>\n<p><code>systemctl enable /etc/systemd/system/shadowsocks.service</code></p>\n<ol start=\"4\">\n<li>重启看看效果即可</li>\n</ol>\n<h2 id=\"有关Systemd管理的指令介绍\"><a href=\"#有关Systemd管理的指令介绍\" class=\"headerlink\" title=\"有关Systemd管理的指令介绍\"></a>有关Systemd管理的指令介绍</h2><ol>\n<li><p>当你因为某些原因要修改shadowsocks.service的内容，比如字母打错了。修改完后必须调用<code>systemctl enable /etc/systemd/system/shadowsocks.service</code>来使其重新生效</p>\n</li>\n<li><p>sslocal提供log打印到文件的功能，使用-help查看具体帮助就可以翻阅到如何使用了</p>\n</li>\n<li><p>启动（关闭）service服务，使用指令<code>systemctl start(stop) shadowsocks.service</code> </p>\n</li>\n</ol>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>"},{"title":"云计算相关产品扫盲_概念说明","date":"2019-07-14T02:34:19.000Z","_content":"\n# 1 域名 Domain Name\n\n就好比人类更容易记忆住画面内容而不是文字内容一样，ip地址的\"图形化\"表示方式就是域名(早期最常见的顶级域名.com,有关域名的分级请自行查阅)\n\n域名是要有域名系统(DNS)才能正常运作的,域名系统负责解析域名并转换为ip地址\n\n根据地域的不同，域名注册后可能还需要(中国内陆)\n\n1. 域名实名认证(备案的前提)\n2. 域名备案(用于访问国内服务器是必须的,不然会被国内DNS拦截)\n\n>为什么需要实名认证,为什么需要备案\n\n如果发现你的网站违法，那么可以立即把你的网站网线\"拔了\"，减少对社会的\"伤害\"\n\n>为什么我的域名不需要备案，就只完成了注册,实名认真和解析就可以正常使用\n\n因为你的域名解析到的是大陆境外服务器，那些是不需要备案的，毕竟政府没法管这些\n\n# 2 数据集成\n\n大数据相关，简单来说，就是系统化的数据存储方式，提供数据存储，数据计算，数据展示等相关功能(我不太熟悉,但是扫下盲感觉够了。。)\n\n# 3 云效(alibaba)\n\n很像公司内部的项目管理系统，可以提需求，提优化，提bug，然后显示进度等等，把项目开发整成一个标准的流水线，然后大家有一个管理后台可以加快项目开发速度。同时它附带了各类”流水线“开发工具。 \n\n先把它当做一个公网上比较好看美观实用安全的项目管理系统吧。。。\n\n# 4 云数据库\n\n由于部署数据库以及运维的成本是比较高的，很多公司可能不想在上面花费太多资源，所以随着云计算的发展，云数据库的成熟方案也是越来越多。相比于自己花时间花精力去搞这些，确实找个云数据库会更靠谱，毕竟人家还提供集群，读写分离，优秀的备份方案等等\n\n# 5 专有网络\n\n可以看成是一个专属私有云计算平台\n\n# 6 Elasticsearch （系统数据量上了10亿、100亿条）\n\n现如今用Elasticsearch做搜索服务器是不错的选择，我用过一段时间，体验上查询确实很快，但是Elasticsearch服务在搭建过程中(从原始数据库做数据导入)，要花很久时间去构建，不知道是不是我姿势问题、\n\n构建完毕后，做一些查询那个速度肉眼可识别的快呢。\n\n适合场景：全文搜索\n\n# 7 云服务器ECS\n\n我们常说的云服务器单元就是这个了，包含了大量的IT基础设施。\n\n# 8 轻量应用服务器\n\nECS的简约版，做了一点封装，用起来更方便，对新手更友好一点，适合用于个人博客等小型网站。\n\n\n","source":"_posts/what-is-cloud-service-1.md","raw":"---\ntitle: 云计算相关产品扫盲_概念说明\ntags: 云服务\ncategories: IT\ndate: 2019-07-14 10:34:19\n---\n\n# 1 域名 Domain Name\n\n就好比人类更容易记忆住画面内容而不是文字内容一样，ip地址的\"图形化\"表示方式就是域名(早期最常见的顶级域名.com,有关域名的分级请自行查阅)\n\n域名是要有域名系统(DNS)才能正常运作的,域名系统负责解析域名并转换为ip地址\n\n根据地域的不同，域名注册后可能还需要(中国内陆)\n\n1. 域名实名认证(备案的前提)\n2. 域名备案(用于访问国内服务器是必须的,不然会被国内DNS拦截)\n\n>为什么需要实名认证,为什么需要备案\n\n如果发现你的网站违法，那么可以立即把你的网站网线\"拔了\"，减少对社会的\"伤害\"\n\n>为什么我的域名不需要备案，就只完成了注册,实名认真和解析就可以正常使用\n\n因为你的域名解析到的是大陆境外服务器，那些是不需要备案的，毕竟政府没法管这些\n\n# 2 数据集成\n\n大数据相关，简单来说，就是系统化的数据存储方式，提供数据存储，数据计算，数据展示等相关功能(我不太熟悉,但是扫下盲感觉够了。。)\n\n# 3 云效(alibaba)\n\n很像公司内部的项目管理系统，可以提需求，提优化，提bug，然后显示进度等等，把项目开发整成一个标准的流水线，然后大家有一个管理后台可以加快项目开发速度。同时它附带了各类”流水线“开发工具。 \n\n先把它当做一个公网上比较好看美观实用安全的项目管理系统吧。。。\n\n# 4 云数据库\n\n由于部署数据库以及运维的成本是比较高的，很多公司可能不想在上面花费太多资源，所以随着云计算的发展，云数据库的成熟方案也是越来越多。相比于自己花时间花精力去搞这些，确实找个云数据库会更靠谱，毕竟人家还提供集群，读写分离，优秀的备份方案等等\n\n# 5 专有网络\n\n可以看成是一个专属私有云计算平台\n\n# 6 Elasticsearch （系统数据量上了10亿、100亿条）\n\n现如今用Elasticsearch做搜索服务器是不错的选择，我用过一段时间，体验上查询确实很快，但是Elasticsearch服务在搭建过程中(从原始数据库做数据导入)，要花很久时间去构建，不知道是不是我姿势问题、\n\n构建完毕后，做一些查询那个速度肉眼可识别的快呢。\n\n适合场景：全文搜索\n\n# 7 云服务器ECS\n\n我们常说的云服务器单元就是这个了，包含了大量的IT基础设施。\n\n# 8 轻量应用服务器\n\nECS的简约版，做了一点封装，用起来更方便，对新手更友好一点，适合用于个人博客等小型网站。\n\n\n","slug":"what-is-cloud-service-1","published":1,"updated":"2019-07-14T04:32:51.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tm002em6ellose67fj","content":"<h1 id=\"1-域名-Domain-Name\"><a href=\"#1-域名-Domain-Name\" class=\"headerlink\" title=\"1 域名 Domain Name\"></a>1 域名 Domain Name</h1><p>就好比人类更容易记忆住画面内容而不是文字内容一样，ip地址的”图形化”表示方式就是域名(早期最常见的顶级域名.com,有关域名的分级请自行查阅)</p>\n<p>域名是要有域名系统(DNS)才能正常运作的,域名系统负责解析域名并转换为ip地址</p>\n<p>根据地域的不同，域名注册后可能还需要(中国内陆)</p>\n<ol>\n<li>域名实名认证(备案的前提)</li>\n<li>域名备案(用于访问国内服务器是必须的,不然会被国内DNS拦截)</li>\n</ol>\n<blockquote>\n<p>为什么需要实名认证,为什么需要备案</p>\n</blockquote>\n<p>如果发现你的网站违法，那么可以立即把你的网站网线”拔了”，减少对社会的”伤害”</p>\n<blockquote>\n<p>为什么我的域名不需要备案，就只完成了注册,实名认真和解析就可以正常使用</p>\n</blockquote>\n<p>因为你的域名解析到的是大陆境外服务器，那些是不需要备案的，毕竟政府没法管这些</p>\n<h1 id=\"2-数据集成\"><a href=\"#2-数据集成\" class=\"headerlink\" title=\"2 数据集成\"></a>2 数据集成</h1><p>大数据相关，简单来说，就是系统化的数据存储方式，提供数据存储，数据计算，数据展示等相关功能(我不太熟悉,但是扫下盲感觉够了。。)</p>\n<h1 id=\"3-云效-alibaba\"><a href=\"#3-云效-alibaba\" class=\"headerlink\" title=\"3 云效(alibaba)\"></a>3 云效(alibaba)</h1><p>很像公司内部的项目管理系统，可以提需求，提优化，提bug，然后显示进度等等，把项目开发整成一个标准的流水线，然后大家有一个管理后台可以加快项目开发速度。同时它附带了各类”流水线“开发工具。 </p>\n<p>先把它当做一个公网上比较好看美观实用安全的项目管理系统吧。。。</p>\n<h1 id=\"4-云数据库\"><a href=\"#4-云数据库\" class=\"headerlink\" title=\"4 云数据库\"></a>4 云数据库</h1><p>由于部署数据库以及运维的成本是比较高的，很多公司可能不想在上面花费太多资源，所以随着云计算的发展，云数据库的成熟方案也是越来越多。相比于自己花时间花精力去搞这些，确实找个云数据库会更靠谱，毕竟人家还提供集群，读写分离，优秀的备份方案等等</p>\n<h1 id=\"5-专有网络\"><a href=\"#5-专有网络\" class=\"headerlink\" title=\"5 专有网络\"></a>5 专有网络</h1><p>可以看成是一个专属私有云计算平台</p>\n<h1 id=\"6-Elasticsearch-（系统数据量上了10亿、100亿条）\"><a href=\"#6-Elasticsearch-（系统数据量上了10亿、100亿条）\" class=\"headerlink\" title=\"6 Elasticsearch （系统数据量上了10亿、100亿条）\"></a>6 Elasticsearch （系统数据量上了10亿、100亿条）</h1><p>现如今用Elasticsearch做搜索服务器是不错的选择，我用过一段时间，体验上查询确实很快，但是Elasticsearch服务在搭建过程中(从原始数据库做数据导入)，要花很久时间去构建，不知道是不是我姿势问题、</p>\n<p>构建完毕后，做一些查询那个速度肉眼可识别的快呢。</p>\n<p>适合场景：全文搜索</p>\n<h1 id=\"7-云服务器ECS\"><a href=\"#7-云服务器ECS\" class=\"headerlink\" title=\"7 云服务器ECS\"></a>7 云服务器ECS</h1><p>我们常说的云服务器单元就是这个了，包含了大量的IT基础设施。</p>\n<h1 id=\"8-轻量应用服务器\"><a href=\"#8-轻量应用服务器\" class=\"headerlink\" title=\"8 轻量应用服务器\"></a>8 轻量应用服务器</h1><p>ECS的简约版，做了一点封装，用起来更方便，对新手更友好一点，适合用于个人博客等小型网站。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-域名-Domain-Name\"><a href=\"#1-域名-Domain-Name\" class=\"headerlink\" title=\"1 域名 Domain Name\"></a>1 域名 Domain Name</h1><p>就好比人类更容易记忆住画面内容而不是文字内容一样，ip地址的”图形化”表示方式就是域名(早期最常见的顶级域名.com,有关域名的分级请自行查阅)</p>\n<p>域名是要有域名系统(DNS)才能正常运作的,域名系统负责解析域名并转换为ip地址</p>\n<p>根据地域的不同，域名注册后可能还需要(中国内陆)</p>\n<ol>\n<li>域名实名认证(备案的前提)</li>\n<li>域名备案(用于访问国内服务器是必须的,不然会被国内DNS拦截)</li>\n</ol>\n<blockquote>\n<p>为什么需要实名认证,为什么需要备案</p>\n</blockquote>\n<p>如果发现你的网站违法，那么可以立即把你的网站网线”拔了”，减少对社会的”伤害”</p>\n<blockquote>\n<p>为什么我的域名不需要备案，就只完成了注册,实名认真和解析就可以正常使用</p>\n</blockquote>\n<p>因为你的域名解析到的是大陆境外服务器，那些是不需要备案的，毕竟政府没法管这些</p>\n<h1 id=\"2-数据集成\"><a href=\"#2-数据集成\" class=\"headerlink\" title=\"2 数据集成\"></a>2 数据集成</h1><p>大数据相关，简单来说，就是系统化的数据存储方式，提供数据存储，数据计算，数据展示等相关功能(我不太熟悉,但是扫下盲感觉够了。。)</p>\n<h1 id=\"3-云效-alibaba\"><a href=\"#3-云效-alibaba\" class=\"headerlink\" title=\"3 云效(alibaba)\"></a>3 云效(alibaba)</h1><p>很像公司内部的项目管理系统，可以提需求，提优化，提bug，然后显示进度等等，把项目开发整成一个标准的流水线，然后大家有一个管理后台可以加快项目开发速度。同时它附带了各类”流水线“开发工具。 </p>\n<p>先把它当做一个公网上比较好看美观实用安全的项目管理系统吧。。。</p>\n<h1 id=\"4-云数据库\"><a href=\"#4-云数据库\" class=\"headerlink\" title=\"4 云数据库\"></a>4 云数据库</h1><p>由于部署数据库以及运维的成本是比较高的，很多公司可能不想在上面花费太多资源，所以随着云计算的发展，云数据库的成熟方案也是越来越多。相比于自己花时间花精力去搞这些，确实找个云数据库会更靠谱，毕竟人家还提供集群，读写分离，优秀的备份方案等等</p>\n<h1 id=\"5-专有网络\"><a href=\"#5-专有网络\" class=\"headerlink\" title=\"5 专有网络\"></a>5 专有网络</h1><p>可以看成是一个专属私有云计算平台</p>\n<h1 id=\"6-Elasticsearch-（系统数据量上了10亿、100亿条）\"><a href=\"#6-Elasticsearch-（系统数据量上了10亿、100亿条）\" class=\"headerlink\" title=\"6 Elasticsearch （系统数据量上了10亿、100亿条）\"></a>6 Elasticsearch （系统数据量上了10亿、100亿条）</h1><p>现如今用Elasticsearch做搜索服务器是不错的选择，我用过一段时间，体验上查询确实很快，但是Elasticsearch服务在搭建过程中(从原始数据库做数据导入)，要花很久时间去构建，不知道是不是我姿势问题、</p>\n<p>构建完毕后，做一些查询那个速度肉眼可识别的快呢。</p>\n<p>适合场景：全文搜索</p>\n<h1 id=\"7-云服务器ECS\"><a href=\"#7-云服务器ECS\" class=\"headerlink\" title=\"7 云服务器ECS\"></a>7 云服务器ECS</h1><p>我们常说的云服务器单元就是这个了，包含了大量的IT基础设施。</p>\n<h1 id=\"8-轻量应用服务器\"><a href=\"#8-轻量应用服务器\" class=\"headerlink\" title=\"8 轻量应用服务器\"></a>8 轻量应用服务器</h1><p>ECS的简约版，做了一点封装，用起来更方便，对新手更友好一点，适合用于个人博客等小型网站。</p>\n"},{"title":"使用JavaSeurity进行数字签名(二)","date":"2019-04-24T06:45:12.000Z","_content":"\n在上一章中，我们使用JavaSeurityAPI对dsaSignFile文件进行了一次数字签名，并且将其数字签名以及公钥都保存到了本地硬盘的相应文件中。作为发送方，我们通过各种“交通”手段，将这三个文件一一发给了接收方。在本章我们就来展示接收方如何使用这三个文件，对数字签名进行验证，最终确定dsaSignFile的确实是由发送方发出的\n\n>什么是验签\n\n接收方获取到原数据文件，公钥文件，数字签名文件后，使用这三个文件便可以完成验签。验签的基本流程简单来说如下\n\n1. 使用公钥文件将数字签名还原为散列值A\n2. 使用加签时相同的算法获取原数据文件的散列值B\n3. 对比A和B是否一致，若一致便说明数字签名正确，该文件确实是发送方发出，而不是由别人篡改后发出的\n\n>JavaSeurity进行验签\n\n1.使用公钥文件获取公钥\n```java\nprivate PublicKey getPubFromPubFile(File pubFile) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n        //从文件中获取公钥字节数据\n        FileInputStream keyfis = new FileInputStream(pubFile);\n        byte[] encKey = new byte[keyfis.available()];\n        keyfis.read(encKey);\n        keyfis.close();\n        //先将公钥字节数据转换为key specification，只有key specification才能使用KeyFactory转化为PublicKey Object\n        //key specification你可以理解为密钥的一种格式，是密钥字节数据的升级\n        X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);\n        //使用KeyFactory，通过key specification获取PublicKey Object\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);\n        return pubKey;\n    }\n```\n\n2.使用数字签名文件获取数字签名字节数据\n```java\nprivate byte[] getSignatureBytesFromSignFile(File signFile) throws IOException {\n        FileInputStream sigfis = new FileInputStream(signFile);\n        byte[] sigToVerify = new byte[sigfis.available()];\n        sigfis.read(sigToVerify);\n        sigfis.close();\n        return sigToVerify;\n    }\n```\n\n3.使用原数据，公钥，数字签名字节数据验证正确性\n```java\nprivate boolean verifySignature(PublicKey publicKey,File dataFile,byte[] sigToVerify) throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n        //这次我们使用公钥初始化签名器\n        Signature sig = Signature.getInstance(\"SHA1withRSA\");\n        sig.initVerify(publicKey);\n        //将原数据导入签名器\n        FileInputStream datafis = new FileInputStream(dataFile);\n        BufferedInputStream bufin = new BufferedInputStream(datafis);\n        byte[] buffer = new byte[1024];\n        int len;\n        while (bufin.available() != 0) {\n            len = bufin.read(buffer);\n            sig.update(buffer, 0, len);\n        }\n        bufin.close();\n        //使用签名器进行验证\n        boolean verifies = sig.verify(sigToVerify);\n        return verifies;\n    }\n```\n\n4.前三步整合为一个验签程序如下\n```java\n@Test\n    public void verifySign() throws NoSuchAlgorithmException, IOException, InvalidKeySpecException, SignatureException, InvalidKeyException {\n        String pubKeyDataFileUrl = \"src/test/resource/pubKeyData\";\n        PublicKey publicKey = getPubFromPubFile(new File(pubKeyDataFileUrl));\n        String signDataFileUrl = \"src/test/resource/signData\" ;\n        byte[] sigToVerify = getSignatureBytesFromSignFile(new File(signDataFileUrl));\n        String dsaSignFileUrl = \"src/test/resource/dsaSignFile\" ;\n        boolean verifies = verifySignature(publicKey,new File(dsaSignFileUrl),sigToVerify);\n        System.out.println(\"signature verifies: \" + verifies);\n    }\n```\n\n>存在的隐患\n\n到目前为止，使用Java进行加签验签的过程已经全部测试完毕了，但是在我们的这个流程中存在一个隐患。那就是我们不能确保接收方获得的公钥文件是正确的。\n\n打个比方，如果发送方在发出原数据，公钥文件，数字签名文件后，被中间人拦截。中间人为了达到自己的目的，篡改了原数据的内容，并且使用自己的私钥重新生成了一份新的数字签名文件，并且把公钥文件也替换为自己的公钥文件。然后将这三个文件再发送给接收方。接收方的验签过程并不会报错，从而导致接收方将错误的信息信以为真。\n\n为了避免这样的情况发生，目前的解决方法之一就是使用数字证书。一个数字证书是由国际上公认的机构进行颁发，每个数字证书中包含了发送方的公钥，以及一个该证书内容的数字签名。接收方则在本地密钥库中寻找该数字证书所对应的公钥数据，如果存在，则使用它解开这个数字证书，随后拿到发送方的公钥。这个过程中最终我们的信任方是计算机本地存储的受信任的根证书列表，只要保证它的正常运作，那么就不会发生被人篡改的情况\n\n>小节\njava的数字签名练习就到此结束了。本来我还想着写一下RSA加解密，但是发现其实在流程本质上和数字签名是一致的，所以就不浪费时间重新赘述了\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/使用JavaSeurity进行数字签名-二.md","raw":"---\ntitle: 使用JavaSeurity进行数字签名(二)\ntags: signature\ncategories: IT\ndate: 2019-04-24 14:45:12\n---\n\n在上一章中，我们使用JavaSeurityAPI对dsaSignFile文件进行了一次数字签名，并且将其数字签名以及公钥都保存到了本地硬盘的相应文件中。作为发送方，我们通过各种“交通”手段，将这三个文件一一发给了接收方。在本章我们就来展示接收方如何使用这三个文件，对数字签名进行验证，最终确定dsaSignFile的确实是由发送方发出的\n\n>什么是验签\n\n接收方获取到原数据文件，公钥文件，数字签名文件后，使用这三个文件便可以完成验签。验签的基本流程简单来说如下\n\n1. 使用公钥文件将数字签名还原为散列值A\n2. 使用加签时相同的算法获取原数据文件的散列值B\n3. 对比A和B是否一致，若一致便说明数字签名正确，该文件确实是发送方发出，而不是由别人篡改后发出的\n\n>JavaSeurity进行验签\n\n1.使用公钥文件获取公钥\n```java\nprivate PublicKey getPubFromPubFile(File pubFile) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\n        //从文件中获取公钥字节数据\n        FileInputStream keyfis = new FileInputStream(pubFile);\n        byte[] encKey = new byte[keyfis.available()];\n        keyfis.read(encKey);\n        keyfis.close();\n        //先将公钥字节数据转换为key specification，只有key specification才能使用KeyFactory转化为PublicKey Object\n        //key specification你可以理解为密钥的一种格式，是密钥字节数据的升级\n        X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);\n        //使用KeyFactory，通过key specification获取PublicKey Object\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);\n        return pubKey;\n    }\n```\n\n2.使用数字签名文件获取数字签名字节数据\n```java\nprivate byte[] getSignatureBytesFromSignFile(File signFile) throws IOException {\n        FileInputStream sigfis = new FileInputStream(signFile);\n        byte[] sigToVerify = new byte[sigfis.available()];\n        sigfis.read(sigToVerify);\n        sigfis.close();\n        return sigToVerify;\n    }\n```\n\n3.使用原数据，公钥，数字签名字节数据验证正确性\n```java\nprivate boolean verifySignature(PublicKey publicKey,File dataFile,byte[] sigToVerify) throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n        //这次我们使用公钥初始化签名器\n        Signature sig = Signature.getInstance(\"SHA1withRSA\");\n        sig.initVerify(publicKey);\n        //将原数据导入签名器\n        FileInputStream datafis = new FileInputStream(dataFile);\n        BufferedInputStream bufin = new BufferedInputStream(datafis);\n        byte[] buffer = new byte[1024];\n        int len;\n        while (bufin.available() != 0) {\n            len = bufin.read(buffer);\n            sig.update(buffer, 0, len);\n        }\n        bufin.close();\n        //使用签名器进行验证\n        boolean verifies = sig.verify(sigToVerify);\n        return verifies;\n    }\n```\n\n4.前三步整合为一个验签程序如下\n```java\n@Test\n    public void verifySign() throws NoSuchAlgorithmException, IOException, InvalidKeySpecException, SignatureException, InvalidKeyException {\n        String pubKeyDataFileUrl = \"src/test/resource/pubKeyData\";\n        PublicKey publicKey = getPubFromPubFile(new File(pubKeyDataFileUrl));\n        String signDataFileUrl = \"src/test/resource/signData\" ;\n        byte[] sigToVerify = getSignatureBytesFromSignFile(new File(signDataFileUrl));\n        String dsaSignFileUrl = \"src/test/resource/dsaSignFile\" ;\n        boolean verifies = verifySignature(publicKey,new File(dsaSignFileUrl),sigToVerify);\n        System.out.println(\"signature verifies: \" + verifies);\n    }\n```\n\n>存在的隐患\n\n到目前为止，使用Java进行加签验签的过程已经全部测试完毕了，但是在我们的这个流程中存在一个隐患。那就是我们不能确保接收方获得的公钥文件是正确的。\n\n打个比方，如果发送方在发出原数据，公钥文件，数字签名文件后，被中间人拦截。中间人为了达到自己的目的，篡改了原数据的内容，并且使用自己的私钥重新生成了一份新的数字签名文件，并且把公钥文件也替换为自己的公钥文件。然后将这三个文件再发送给接收方。接收方的验签过程并不会报错，从而导致接收方将错误的信息信以为真。\n\n为了避免这样的情况发生，目前的解决方法之一就是使用数字证书。一个数字证书是由国际上公认的机构进行颁发，每个数字证书中包含了发送方的公钥，以及一个该证书内容的数字签名。接收方则在本地密钥库中寻找该数字证书所对应的公钥数据，如果存在，则使用它解开这个数字证书，随后拿到发送方的公钥。这个过程中最终我们的信任方是计算机本地存储的受信任的根证书列表，只要保证它的正常运作，那么就不会发生被人篡改的情况\n\n>小节\njava的数字签名练习就到此结束了。本来我还想着写一下RSA加解密，但是发现其实在流程本质上和数字签名是一致的，所以就不浪费时间重新赘述了\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"使用JavaSeurity进行数字签名-二","published":1,"updated":"2019-10-19T13:01:10.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tn002im6el39kh9bnz","content":"<p>在上一章中，我们使用JavaSeurityAPI对dsaSignFile文件进行了一次数字签名，并且将其数字签名以及公钥都保存到了本地硬盘的相应文件中。作为发送方，我们通过各种“交通”手段，将这三个文件一一发给了接收方。在本章我们就来展示接收方如何使用这三个文件，对数字签名进行验证，最终确定dsaSignFile的确实是由发送方发出的</p>\n<blockquote>\n<p>什么是验签</p>\n</blockquote>\n<p>接收方获取到原数据文件，公钥文件，数字签名文件后，使用这三个文件便可以完成验签。验签的基本流程简单来说如下</p>\n<ol>\n<li>使用公钥文件将数字签名还原为散列值A</li>\n<li>使用加签时相同的算法获取原数据文件的散列值B</li>\n<li>对比A和B是否一致，若一致便说明数字签名正确，该文件确实是发送方发出，而不是由别人篡改后发出的</li>\n</ol>\n<blockquote>\n<p>JavaSeurity进行验签</p>\n</blockquote>\n<p>1.使用公钥文件获取公钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PublicKey <span class=\"title\">getPubFromPubFile</span><span class=\"params\">(File pubFile)</span> <span class=\"keyword\">throws</span> IOException, NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//从文件中获取公钥字节数据</span></span><br><span class=\"line\">        FileInputStream keyfis = <span class=\"keyword\">new</span> FileInputStream(pubFile);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] encKey = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[keyfis.available()];</span><br><span class=\"line\">        keyfis.read(encKey);</span><br><span class=\"line\">        keyfis.close();</span><br><span class=\"line\">        <span class=\"comment\">//先将公钥字节数据转换为key specification，只有key specification才能使用KeyFactory转化为PublicKey Object</span></span><br><span class=\"line\">        <span class=\"comment\">//key specification你可以理解为密钥的一种格式，是密钥字节数据的升级</span></span><br><span class=\"line\">        X509EncodedKeySpec pubKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(encKey);</span><br><span class=\"line\">        <span class=\"comment\">//使用KeyFactory，通过key specification获取PublicKey Object</span></span><br><span class=\"line\">        KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pubKey;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.使用数字签名文件获取数字签名字节数据<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getSignatureBytesFromSignFile(File signFile) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        FileInputStream sigfis = <span class=\"keyword\">new</span> FileInputStream(signFile);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sigToVerify = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[sigfis.available()];</span><br><span class=\"line\">        sigfis.read(sigToVerify);</span><br><span class=\"line\">        sigfis.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sigToVerify;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.使用原数据，公钥，数字签名字节数据验证正确性<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifySignature</span><span class=\"params\">(PublicKey publicKey,File dataFile,<span class=\"keyword\">byte</span>[] sigToVerify)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这次我们使用公钥初始化签名器</span></span><br><span class=\"line\">        Signature sig = Signature.getInstance(<span class=\"string\">\"SHA1withRSA\"</span>);</span><br><span class=\"line\">        sig.initVerify(publicKey);</span><br><span class=\"line\">        <span class=\"comment\">//将原数据导入签名器</span></span><br><span class=\"line\">        FileInputStream datafis = <span class=\"keyword\">new</span> FileInputStream(dataFile);</span><br><span class=\"line\">        BufferedInputStream bufin = <span class=\"keyword\">new</span> BufferedInputStream(datafis);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bufin.available() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            len = bufin.read(buffer);</span><br><span class=\"line\">            sig.update(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufin.close();</span><br><span class=\"line\">        <span class=\"comment\">//使用签名器进行验证</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> verifies = sig.verify(sigToVerify);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> verifies;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.前三步整合为一个验签程序如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">verifySign</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException, InvalidKeySpecException, SignatureException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        String pubKeyDataFileUrl = <span class=\"string\">\"src/test/resource/pubKeyData\"</span>;</span><br><span class=\"line\">        PublicKey publicKey = getPubFromPubFile(<span class=\"keyword\">new</span> File(pubKeyDataFileUrl));</span><br><span class=\"line\">        String signDataFileUrl = <span class=\"string\">\"src/test/resource/signData\"</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sigToVerify = getSignatureBytesFromSignFile(<span class=\"keyword\">new</span> File(signDataFileUrl));</span><br><span class=\"line\">        String dsaSignFileUrl = <span class=\"string\">\"src/test/resource/dsaSignFile\"</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> verifies = verifySignature(publicKey,<span class=\"keyword\">new</span> File(dsaSignFileUrl),sigToVerify);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"signature verifies: \"</span> + verifies);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>存在的隐患</p>\n</blockquote>\n<p>到目前为止，使用Java进行加签验签的过程已经全部测试完毕了，但是在我们的这个流程中存在一个隐患。那就是我们不能确保接收方获得的公钥文件是正确的。</p>\n<p>打个比方，如果发送方在发出原数据，公钥文件，数字签名文件后，被中间人拦截。中间人为了达到自己的目的，篡改了原数据的内容，并且使用自己的私钥重新生成了一份新的数字签名文件，并且把公钥文件也替换为自己的公钥文件。然后将这三个文件再发送给接收方。接收方的验签过程并不会报错，从而导致接收方将错误的信息信以为真。</p>\n<p>为了避免这样的情况发生，目前的解决方法之一就是使用数字证书。一个数字证书是由国际上公认的机构进行颁发，每个数字证书中包含了发送方的公钥，以及一个该证书内容的数字签名。接收方则在本地密钥库中寻找该数字证书所对应的公钥数据，如果存在，则使用它解开这个数字证书，随后拿到发送方的公钥。这个过程中最终我们的信任方是计算机本地存储的受信任的根证书列表，只要保证它的正常运作，那么就不会发生被人篡改的情况</p>\n<blockquote>\n<p>小节<br>java的数字签名练习就到此结束了。本来我还想着写一下RSA加解密，但是发现其实在流程本质上和数字签名是一致的，所以就不浪费时间重新赘述了</p>\n</blockquote>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<p>在上一章中，我们使用JavaSeurityAPI对dsaSignFile文件进行了一次数字签名，并且将其数字签名以及公钥都保存到了本地硬盘的相应文件中。作为发送方，我们通过各种“交通”手段，将这三个文件一一发给了接收方。在本章我们就来展示接收方如何使用这三个文件，对数字签名进行验证，最终确定dsaSignFile的确实是由发送方发出的</p>\n<blockquote>\n<p>什么是验签</p>\n</blockquote>\n<p>接收方获取到原数据文件，公钥文件，数字签名文件后，使用这三个文件便可以完成验签。验签的基本流程简单来说如下</p>\n<ol>\n<li>使用公钥文件将数字签名还原为散列值A</li>\n<li>使用加签时相同的算法获取原数据文件的散列值B</li>\n<li>对比A和B是否一致，若一致便说明数字签名正确，该文件确实是发送方发出，而不是由别人篡改后发出的</li>\n</ol>\n<blockquote>\n<p>JavaSeurity进行验签</p>\n</blockquote>\n<p>1.使用公钥文件获取公钥<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> PublicKey <span class=\"title\">getPubFromPubFile</span><span class=\"params\">(File pubFile)</span> <span class=\"keyword\">throws</span> IOException, NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//从文件中获取公钥字节数据</span></span><br><span class=\"line\">        FileInputStream keyfis = <span class=\"keyword\">new</span> FileInputStream(pubFile);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] encKey = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[keyfis.available()];</span><br><span class=\"line\">        keyfis.read(encKey);</span><br><span class=\"line\">        keyfis.close();</span><br><span class=\"line\">        <span class=\"comment\">//先将公钥字节数据转换为key specification，只有key specification才能使用KeyFactory转化为PublicKey Object</span></span><br><span class=\"line\">        <span class=\"comment\">//key specification你可以理解为密钥的一种格式，是密钥字节数据的升级</span></span><br><span class=\"line\">        X509EncodedKeySpec pubKeySpec = <span class=\"keyword\">new</span> X509EncodedKeySpec(encKey);</span><br><span class=\"line\">        <span class=\"comment\">//使用KeyFactory，通过key specification获取PublicKey Object</span></span><br><span class=\"line\">        KeyFactory keyFactory = KeyFactory.getInstance(<span class=\"string\">\"RSA\"</span>);</span><br><span class=\"line\">        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pubKey;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.使用数字签名文件获取数字签名字节数据<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getSignatureBytesFromSignFile(File signFile) <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        FileInputStream sigfis = <span class=\"keyword\">new</span> FileInputStream(signFile);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sigToVerify = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[sigfis.available()];</span><br><span class=\"line\">        sigfis.read(sigToVerify);</span><br><span class=\"line\">        sigfis.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sigToVerify;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.使用原数据，公钥，数字签名字节数据验证正确性<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifySignature</span><span class=\"params\">(PublicKey publicKey,File dataFile,<span class=\"keyword\">byte</span>[] sigToVerify)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这次我们使用公钥初始化签名器</span></span><br><span class=\"line\">        Signature sig = Signature.getInstance(<span class=\"string\">\"SHA1withRSA\"</span>);</span><br><span class=\"line\">        sig.initVerify(publicKey);</span><br><span class=\"line\">        <span class=\"comment\">//将原数据导入签名器</span></span><br><span class=\"line\">        FileInputStream datafis = <span class=\"keyword\">new</span> FileInputStream(dataFile);</span><br><span class=\"line\">        BufferedInputStream bufin = <span class=\"keyword\">new</span> BufferedInputStream(datafis);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bufin.available() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            len = bufin.read(buffer);</span><br><span class=\"line\">            sig.update(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufin.close();</span><br><span class=\"line\">        <span class=\"comment\">//使用签名器进行验证</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> verifies = sig.verify(sigToVerify);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> verifies;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.前三步整合为一个验签程序如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">verifySign</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException, InvalidKeySpecException, SignatureException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        String pubKeyDataFileUrl = <span class=\"string\">\"src/test/resource/pubKeyData\"</span>;</span><br><span class=\"line\">        PublicKey publicKey = getPubFromPubFile(<span class=\"keyword\">new</span> File(pubKeyDataFileUrl));</span><br><span class=\"line\">        String signDataFileUrl = <span class=\"string\">\"src/test/resource/signData\"</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] sigToVerify = getSignatureBytesFromSignFile(<span class=\"keyword\">new</span> File(signDataFileUrl));</span><br><span class=\"line\">        String dsaSignFileUrl = <span class=\"string\">\"src/test/resource/dsaSignFile\"</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> verifies = verifySignature(publicKey,<span class=\"keyword\">new</span> File(dsaSignFileUrl),sigToVerify);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"signature verifies: \"</span> + verifies);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>存在的隐患</p>\n</blockquote>\n<p>到目前为止，使用Java进行加签验签的过程已经全部测试完毕了，但是在我们的这个流程中存在一个隐患。那就是我们不能确保接收方获得的公钥文件是正确的。</p>\n<p>打个比方，如果发送方在发出原数据，公钥文件，数字签名文件后，被中间人拦截。中间人为了达到自己的目的，篡改了原数据的内容，并且使用自己的私钥重新生成了一份新的数字签名文件，并且把公钥文件也替换为自己的公钥文件。然后将这三个文件再发送给接收方。接收方的验签过程并不会报错，从而导致接收方将错误的信息信以为真。</p>\n<p>为了避免这样的情况发生，目前的解决方法之一就是使用数字证书。一个数字证书是由国际上公认的机构进行颁发，每个数字证书中包含了发送方的公钥，以及一个该证书内容的数字签名。接收方则在本地密钥库中寻找该数字证书所对应的公钥数据，如果存在，则使用它解开这个数字证书，随后拿到发送方的公钥。这个过程中最终我们的信任方是计算机本地存储的受信任的根证书列表，只要保证它的正常运作，那么就不会发生被人篡改的情况</p>\n<blockquote>\n<p>小节<br>java的数字签名练习就到此结束了。本来我还想着写一下RSA加解密，但是发现其实在流程本质上和数字签名是一致的，所以就不浪费时间重新赘述了</p>\n</blockquote>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"修复ubuntu18.04上的问题Wi-Fi adapter not found（Realtek RTL8821CE）","date":"2019-05-01T03:42:24.000Z","_content":"\n刚使用ubuntu18.04，在桌面版上想使用wifi的时候，发现显示\n**Wi-Fi adapter not found**\n\n这个是因为我们没有安装网卡驱动程序的缘故\n\n所以解决此问题的关键是先明确自己电脑是什么无线网卡！\n\n## 1\n\n首先我们需明确ubuntu所使用的是什么网卡\n\n使用命令`lspci`获取我们的network-controller信息。\n\n我的是\n```s\n(前面的大量输出省略，找到下面这一行就行)\nNetwork controller: Realtek Semiconductor Co., Ltd. RTL8821CE 802.11ac PCIe Wireless Network Adapter\n```\n\n从中可以看出我的无线网卡是为**Realtek RTL8821CE**\n\n所以我们要安装的是RTL8821CE的网卡驱动程序\n\n## 2\n\n由于没有wifi，所以你目前没有网络环境，但是为了修复这个问题你必须连接上网络，这个时候你必须先准备好可以上网的有线网络(wired network)\n\n## 3\n\n打开terminal，先输入如下代码\n\n```s\nsudo apt update\n```\n\n先更新您的apt软件包管理工具，防止后续我们安装使用相关软件时不会报出一些神奇的错误\n\n## 4\n\n安装下必须的一些软件\n```s\nsudo apt-get install --reinstall git dkms build-essential linux-headers-$(uname -r)\ngit clone https://github.com/tomaspinho/rtl8821ce\ncd rtl8821ce\nchmod +x dkms-install.sh\nchmod +x dkms-remove.sh\nsudo ./dkms-install.sh\n```\n上述命令会去\n1. 先安装\n    git(这个不用我解释是什么了吧？) \n    dkms(DKMS是基于动态内核模块支持的可以让开发者无需使用最新的内核版本而对某个单一的内核模块做升级) \n    build-essential（携带编译必须软件包） \n    linux-header-$(uname -r)（重装当前linux内核版本的linux-headers）\n2. 将rtl8821ce的驱动程序clone至本地，相当于我们在windows下载驱动程序一个意思\n3. 进入驱动程序包文件夹\n4. 使用chmod调整相关sh脚本的权限\n5. 运行脚本dkms-install.sh，会自动将rtl8821ce驱动程序安装完毕\n\n## 5\n\n重启ubuntu\n\n再看看你的wifi配置，应该已经可以使用了！\n\n## 6\n其他你可能遇到的问题\n\n信号弱，使用关键字`weak signal`去google上搜查答案吧\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n\n\n","source":"_posts/修复ubuntu18-04-Wi-Fi-adapter-not-found.md","raw":"---\ntitle: 修复ubuntu18.04上的问题Wi-Fi adapter not found（Realtek RTL8821CE）\ntags: ubuntu\ncategories: IT\ndate: 2019-05-01 11:42:24\n---\n\n刚使用ubuntu18.04，在桌面版上想使用wifi的时候，发现显示\n**Wi-Fi adapter not found**\n\n这个是因为我们没有安装网卡驱动程序的缘故\n\n所以解决此问题的关键是先明确自己电脑是什么无线网卡！\n\n## 1\n\n首先我们需明确ubuntu所使用的是什么网卡\n\n使用命令`lspci`获取我们的network-controller信息。\n\n我的是\n```s\n(前面的大量输出省略，找到下面这一行就行)\nNetwork controller: Realtek Semiconductor Co., Ltd. RTL8821CE 802.11ac PCIe Wireless Network Adapter\n```\n\n从中可以看出我的无线网卡是为**Realtek RTL8821CE**\n\n所以我们要安装的是RTL8821CE的网卡驱动程序\n\n## 2\n\n由于没有wifi，所以你目前没有网络环境，但是为了修复这个问题你必须连接上网络，这个时候你必须先准备好可以上网的有线网络(wired network)\n\n## 3\n\n打开terminal，先输入如下代码\n\n```s\nsudo apt update\n```\n\n先更新您的apt软件包管理工具，防止后续我们安装使用相关软件时不会报出一些神奇的错误\n\n## 4\n\n安装下必须的一些软件\n```s\nsudo apt-get install --reinstall git dkms build-essential linux-headers-$(uname -r)\ngit clone https://github.com/tomaspinho/rtl8821ce\ncd rtl8821ce\nchmod +x dkms-install.sh\nchmod +x dkms-remove.sh\nsudo ./dkms-install.sh\n```\n上述命令会去\n1. 先安装\n    git(这个不用我解释是什么了吧？) \n    dkms(DKMS是基于动态内核模块支持的可以让开发者无需使用最新的内核版本而对某个单一的内核模块做升级) \n    build-essential（携带编译必须软件包） \n    linux-header-$(uname -r)（重装当前linux内核版本的linux-headers）\n2. 将rtl8821ce的驱动程序clone至本地，相当于我们在windows下载驱动程序一个意思\n3. 进入驱动程序包文件夹\n4. 使用chmod调整相关sh脚本的权限\n5. 运行脚本dkms-install.sh，会自动将rtl8821ce驱动程序安装完毕\n\n## 5\n\n重启ubuntu\n\n再看看你的wifi配置，应该已经可以使用了！\n\n## 6\n其他你可能遇到的问题\n\n信号弱，使用关键字`weak signal`去google上搜查答案吧\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n\n\n","slug":"修复ubuntu18-04-Wi-Fi-adapter-not-found","published":1,"updated":"2019-10-19T13:01:10.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9to002km6eldxgyxg1l","content":"<p>刚使用ubuntu18.04，在桌面版上想使用wifi的时候，发现显示<br><strong>Wi-Fi adapter not found</strong></p>\n<p>这个是因为我们没有安装网卡驱动程序的缘故</p>\n<p>所以解决此问题的关键是先明确自己电脑是什么无线网卡！</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>首先我们需明确ubuntu所使用的是什么网卡</p>\n<p>使用命令<code>lspci</code>获取我们的network-controller信息。</p>\n<p>我的是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(前面的大量输出省略，找到下面这一行就行)</span><br><span class=\"line\">Network controller: Realtek Semiconductor Co., Ltd. RTL8821CE 802.11ac PCIe Wireless Network Adapter</span><br></pre></td></tr></table></figure></p>\n<p>从中可以看出我的无线网卡是为<strong>Realtek RTL8821CE</strong></p>\n<p>所以我们要安装的是RTL8821CE的网卡驱动程序</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>由于没有wifi，所以你目前没有网络环境，但是为了修复这个问题你必须连接上网络，这个时候你必须先准备好可以上网的有线网络(wired network)</p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>打开terminal，先输入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<p>先更新您的apt软件包管理工具，防止后续我们安装使用相关软件时不会报出一些神奇的错误</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>安装下必须的一些软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install --reinstall git dkms build-essential linux-headers-$(uname -r)</span><br><span class=\"line\">git clone https://github.com/tomaspinho/rtl8821ce</span><br><span class=\"line\">cd rtl8821ce</span><br><span class=\"line\">chmod +x dkms-install.sh</span><br><span class=\"line\">chmod +x dkms-remove.sh</span><br><span class=\"line\">sudo ./dkms-install.sh</span><br></pre></td></tr></table></figure></p>\n<p>上述命令会去</p>\n<ol>\n<li>先安装<br> git(这个不用我解释是什么了吧？)<br> dkms(DKMS是基于动态内核模块支持的可以让开发者无需使用最新的内核版本而对某个单一的内核模块做升级)<br> build-essential（携带编译必须软件包）<br> linux-header-$(uname -r)（重装当前linux内核版本的linux-headers）</li>\n<li>将rtl8821ce的驱动程序clone至本地，相当于我们在windows下载驱动程序一个意思</li>\n<li>进入驱动程序包文件夹</li>\n<li>使用chmod调整相关sh脚本的权限</li>\n<li>运行脚本dkms-install.sh，会自动将rtl8821ce驱动程序安装完毕</li>\n</ol>\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h2><p>重启ubuntu</p>\n<p>再看看你的wifi配置，应该已经可以使用了！</p>\n<h2 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h2><p>其他你可能遇到的问题</p>\n<p>信号弱，使用关键字<code>weak signal</code>去google上搜查答案吧</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n\n\n</div></div>","site":{"data":{}},"excerpt":"","more":"<p>刚使用ubuntu18.04，在桌面版上想使用wifi的时候，发现显示<br><strong>Wi-Fi adapter not found</strong></p>\n<p>这个是因为我们没有安装网卡驱动程序的缘故</p>\n<p>所以解决此问题的关键是先明确自己电脑是什么无线网卡！</p>\n<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>首先我们需明确ubuntu所使用的是什么网卡</p>\n<p>使用命令<code>lspci</code>获取我们的network-controller信息。</p>\n<p>我的是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(前面的大量输出省略，找到下面这一行就行)</span><br><span class=\"line\">Network controller: Realtek Semiconductor Co., Ltd. RTL8821CE 802.11ac PCIe Wireless Network Adapter</span><br></pre></td></tr></table></figure></p>\n<p>从中可以看出我的无线网卡是为<strong>Realtek RTL8821CE</strong></p>\n<p>所以我们要安装的是RTL8821CE的网卡驱动程序</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>由于没有wifi，所以你目前没有网络环境，但是为了修复这个问题你必须连接上网络，这个时候你必须先准备好可以上网的有线网络(wired network)</p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>打开terminal，先输入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<p>先更新您的apt软件包管理工具，防止后续我们安装使用相关软件时不会报出一些神奇的错误</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>安装下必须的一些软件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install --reinstall git dkms build-essential linux-headers-$(uname -r)</span><br><span class=\"line\">git clone https://github.com/tomaspinho/rtl8821ce</span><br><span class=\"line\">cd rtl8821ce</span><br><span class=\"line\">chmod +x dkms-install.sh</span><br><span class=\"line\">chmod +x dkms-remove.sh</span><br><span class=\"line\">sudo ./dkms-install.sh</span><br></pre></td></tr></table></figure></p>\n<p>上述命令会去</p>\n<ol>\n<li>先安装<br> git(这个不用我解释是什么了吧？)<br> dkms(DKMS是基于动态内核模块支持的可以让开发者无需使用最新的内核版本而对某个单一的内核模块做升级)<br> build-essential（携带编译必须软件包）<br> linux-header-$(uname -r)（重装当前linux内核版本的linux-headers）</li>\n<li>将rtl8821ce的驱动程序clone至本地，相当于我们在windows下载驱动程序一个意思</li>\n<li>进入驱动程序包文件夹</li>\n<li>使用chmod调整相关sh脚本的权限</li>\n<li>运行脚本dkms-install.sh，会自动将rtl8821ce驱动程序安装完毕</li>\n</ol>\n<h2 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h2><p>重启ubuntu</p>\n<p>再看看你的wifi配置，应该已经可以使用了！</p>\n<h2 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h2><p>其他你可能遇到的问题</p>\n<p>信号弱，使用关键字<code>weak signal</code>去google上搜查答案吧</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n\n\n</div></div>"},{"title":"大学的日子(一)","date":"2019-04-24T05:25:26.000Z","_content":"\n{% img http://i63.tinypic.com/2a8p10o.jpg %}\n\n这是一篇回忆自己大学时光的文章\n\n  \t\t\n>比起不做而后悔，不如做了再后悔。\n>\t\t\t\t\t\t\t\t\t——空白《游戏人生》\n\n不得不说，电子游戏是我大学人生中占比重比较大的一部分内容，所以我想先拿一些值得写的，自认为比较有营养的游戏。\n\n高强度的高三结束后，顺利的来到了西电。心里当时确实是充满了对未来的幻想，想做这个，想干那么，心里想做的事真的很多很多～（标准结局：到现在有好多都没有完成～笑）\n\n和高中不一样，大一的自主时间很多，在认认真真完成了上课，作业，报告等任务后，可以剩下很多时间自由安排。自然而然，我想好好的享受一下游戏（毕竟高中三年都没能好好玩）\n\n{% img https://pbs.twimg.com/profile_images/692932156826451969/gNsHJSuZ.jpg %}\n\n## LOL\n\n>那天的团灭，依然记忆犹新\n\nDota，LOL，可以说它们展开了电子竞技的辉煌舞台。对一个职业的电子竞技选手，综合素质可以说是要非常强的。\n\n我觉得这类游戏，可以锻炼一个人的以下能力：\n\n* 全局观念\n* 抗压能力\n* 团队能力（领导）\n\n对全局的掌控，是这类游戏上手的玩家应该做的第一门功课。什么时候，应该干什么。具备这一点，才能让胜利离你更近一步。毕竟这游戏的胜利方式不是取决于杀死敌对玩家操作的人物，而是拆除敌方核心建筑物取胜。如果对全局的掌控好的话，取胜的方法是有很多的，就算你们处于劣势也没关系，重点在于调配全局的动向。\n\n在电子竞技的正式比赛上，观赛人数是不输于别的竞技类节目的。这也就让参赛选手更加想赢得比赛的胜利，向世界证明自己的实力。但是期望越大，在面临我方劣势的时候，压力也就会越大。这就是我所说的抗压能力的体现。如果在这场比赛中，你的抗压能力更好，那么很有可能你会获得最后的胜利。\n\n最后想说的是团队能力。有一句话说得好 “这是五个人的舞台，而不是让你一枝独秀的地方” \n是的，团队在这个游戏的份量是很大的。一般来说，五个人中会分配一个统帅全队的玩家，而到底是哪个玩家来统帅其余4个玩家，带领全队走向胜利，那么这是要由很多方面说明的，简单来说，你展示的足够优秀，那么其余的人自然会跟上你的节奏，顺从你的引导。而当我方和敌方集体交战的时候，就是所谓的\"团战\"。团战爆发的时候，各司其职是很重要的，中间如果出错一环，都有可能失败，让战局逆转。而如何在团战中站稳自己的位置，要说的就更多了，这里就简单的说一句，相信自己的队友！\n\nLOL在大一还是玩的比较多的一款游戏，觉得是一款精良的游戏。要说还可以持续多久，我觉得这游戏再活5，6年应该是可以的，也许甚至更多\n\n---\n## ElsWorld\n\n{% img http://i68.tinypic.com/2l8uu4y.png %}\n\n\n>吾乃 艾拉 韩\n\n这款游戏就没有那么有名了，但是其实它在韩国还是很火的一款游戏。\n\n接触这款游戏的初衷那自然就是被一个游戏人物的人设所吸引了（上图中的妹子）\n\n个人爱好：\n我在2D的建模方面都是比较挑剔的，只要是有关2D的游戏，扫一脸所有人物的建模，就可以让我对这个游戏产生了一个6成的评价。其次的4成在于声优的配音工作是否理解了人物本身的性格。\n\n而其中的一个枪兵角色，艾拉 韩，不管是在人物建模还是声优配音方面，我都给100分的评价。\n\n人物建模依旧是ElsWorld的人物建模的团队，在这里我向他们致敬，他们还是用心在不断的创造欣赏力极佳的人物（后来的新成员希尔与露也有一种匠心巨作的感觉）\n\n声优方面，佐藤聪美为其配音的真可谓非常的到位！那声音入耳后就觉得，艾拉是一个比较坚强，好学，但是又有点冒失的孩子，再配上自认为完美的人物建模，和技能特效（艾拉的技能特效全部设定为晚秋的红黄色，所有技能的释放都会伴有秋叶的飘落，技能“飞燕”，更是把秋叶飘落特效放大到极致，词贫的我只能已“美”来形容了）\n\n游戏体验：\n选好了角色，那么后面的人物就是玩这款游戏了。\n\n可以说，中国的游戏玩家素质还是非常令人失望的（苦笑），国服的ElsWorld环境并不是很好，玩的人也不多。\n\n不过自从官方发布了一个HA技能演示视频后，在各大视频网站上转播，国内玩家到了最峰值，我也是在那段时间认识了很多和自己有一样爱好的小伙伴们（笑）\n\n游戏主要就是打副本性质的游戏，同时也拥有玩家对战pk的功能。\n\nElsWorld的玩家对战是设计的很好的。玩过毒奶粉的对战后，我就感到ElsWorld设计者在设计对战规则的独到之处。不过对战的装备还是越厉害越好，所以这一点上依旧是一个大坑。不过好在玩家不多，随便带点装备，就可以去愉快的和别人对战了～。\n\n游戏时间：从我转向Mac OSX之前都有间断的在玩，如果你和我差不多同龄，又喜欢二次，那么可以在课余时间尝试下这游戏呢。\n\n---\n\n## 结束\n\n在用了Mac OSX后，基本不玩端游了，我对自己大学阶段有关游戏的介绍也就告一段落了～不过，还真是一份不错的回忆。\n\n呼，时间也过去挺久了，今天就写到这里吧。","source":"_posts/大学的日子-一.md","raw":"---\ntitle: 大学的日子(一)\ndate: 2019-04-24 13:25:26\ntags: 回忆向 \ncategories: 生活\n---\n\n{% img http://i63.tinypic.com/2a8p10o.jpg %}\n\n这是一篇回忆自己大学时光的文章\n\n  \t\t\n>比起不做而后悔，不如做了再后悔。\n>\t\t\t\t\t\t\t\t\t——空白《游戏人生》\n\n不得不说，电子游戏是我大学人生中占比重比较大的一部分内容，所以我想先拿一些值得写的，自认为比较有营养的游戏。\n\n高强度的高三结束后，顺利的来到了西电。心里当时确实是充满了对未来的幻想，想做这个，想干那么，心里想做的事真的很多很多～（标准结局：到现在有好多都没有完成～笑）\n\n和高中不一样，大一的自主时间很多，在认认真真完成了上课，作业，报告等任务后，可以剩下很多时间自由安排。自然而然，我想好好的享受一下游戏（毕竟高中三年都没能好好玩）\n\n{% img https://pbs.twimg.com/profile_images/692932156826451969/gNsHJSuZ.jpg %}\n\n## LOL\n\n>那天的团灭，依然记忆犹新\n\nDota，LOL，可以说它们展开了电子竞技的辉煌舞台。对一个职业的电子竞技选手，综合素质可以说是要非常强的。\n\n我觉得这类游戏，可以锻炼一个人的以下能力：\n\n* 全局观念\n* 抗压能力\n* 团队能力（领导）\n\n对全局的掌控，是这类游戏上手的玩家应该做的第一门功课。什么时候，应该干什么。具备这一点，才能让胜利离你更近一步。毕竟这游戏的胜利方式不是取决于杀死敌对玩家操作的人物，而是拆除敌方核心建筑物取胜。如果对全局的掌控好的话，取胜的方法是有很多的，就算你们处于劣势也没关系，重点在于调配全局的动向。\n\n在电子竞技的正式比赛上，观赛人数是不输于别的竞技类节目的。这也就让参赛选手更加想赢得比赛的胜利，向世界证明自己的实力。但是期望越大，在面临我方劣势的时候，压力也就会越大。这就是我所说的抗压能力的体现。如果在这场比赛中，你的抗压能力更好，那么很有可能你会获得最后的胜利。\n\n最后想说的是团队能力。有一句话说得好 “这是五个人的舞台，而不是让你一枝独秀的地方” \n是的，团队在这个游戏的份量是很大的。一般来说，五个人中会分配一个统帅全队的玩家，而到底是哪个玩家来统帅其余4个玩家，带领全队走向胜利，那么这是要由很多方面说明的，简单来说，你展示的足够优秀，那么其余的人自然会跟上你的节奏，顺从你的引导。而当我方和敌方集体交战的时候，就是所谓的\"团战\"。团战爆发的时候，各司其职是很重要的，中间如果出错一环，都有可能失败，让战局逆转。而如何在团战中站稳自己的位置，要说的就更多了，这里就简单的说一句，相信自己的队友！\n\nLOL在大一还是玩的比较多的一款游戏，觉得是一款精良的游戏。要说还可以持续多久，我觉得这游戏再活5，6年应该是可以的，也许甚至更多\n\n---\n## ElsWorld\n\n{% img http://i68.tinypic.com/2l8uu4y.png %}\n\n\n>吾乃 艾拉 韩\n\n这款游戏就没有那么有名了，但是其实它在韩国还是很火的一款游戏。\n\n接触这款游戏的初衷那自然就是被一个游戏人物的人设所吸引了（上图中的妹子）\n\n个人爱好：\n我在2D的建模方面都是比较挑剔的，只要是有关2D的游戏，扫一脸所有人物的建模，就可以让我对这个游戏产生了一个6成的评价。其次的4成在于声优的配音工作是否理解了人物本身的性格。\n\n而其中的一个枪兵角色，艾拉 韩，不管是在人物建模还是声优配音方面，我都给100分的评价。\n\n人物建模依旧是ElsWorld的人物建模的团队，在这里我向他们致敬，他们还是用心在不断的创造欣赏力极佳的人物（后来的新成员希尔与露也有一种匠心巨作的感觉）\n\n声优方面，佐藤聪美为其配音的真可谓非常的到位！那声音入耳后就觉得，艾拉是一个比较坚强，好学，但是又有点冒失的孩子，再配上自认为完美的人物建模，和技能特效（艾拉的技能特效全部设定为晚秋的红黄色，所有技能的释放都会伴有秋叶的飘落，技能“飞燕”，更是把秋叶飘落特效放大到极致，词贫的我只能已“美”来形容了）\n\n游戏体验：\n选好了角色，那么后面的人物就是玩这款游戏了。\n\n可以说，中国的游戏玩家素质还是非常令人失望的（苦笑），国服的ElsWorld环境并不是很好，玩的人也不多。\n\n不过自从官方发布了一个HA技能演示视频后，在各大视频网站上转播，国内玩家到了最峰值，我也是在那段时间认识了很多和自己有一样爱好的小伙伴们（笑）\n\n游戏主要就是打副本性质的游戏，同时也拥有玩家对战pk的功能。\n\nElsWorld的玩家对战是设计的很好的。玩过毒奶粉的对战后，我就感到ElsWorld设计者在设计对战规则的独到之处。不过对战的装备还是越厉害越好，所以这一点上依旧是一个大坑。不过好在玩家不多，随便带点装备，就可以去愉快的和别人对战了～。\n\n游戏时间：从我转向Mac OSX之前都有间断的在玩，如果你和我差不多同龄，又喜欢二次，那么可以在课余时间尝试下这游戏呢。\n\n---\n\n## 结束\n\n在用了Mac OSX后，基本不玩端游了，我对自己大学阶段有关游戏的介绍也就告一段落了～不过，还真是一份不错的回忆。\n\n呼，时间也过去挺久了，今天就写到这里吧。","slug":"大学的日子-一","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tp002om6eluak9d159","content":"<img src=\"http://i63.tinypic.com/2a8p10o.jpg\">\n<p>这是一篇回忆自己大学时光的文章</p>\n<blockquote>\n<p>比起不做而后悔，不如做了再后悔。<br>                                   ——空白《游戏人生》</p>\n</blockquote>\n<p>不得不说，电子游戏是我大学人生中占比重比较大的一部分内容，所以我想先拿一些值得写的，自认为比较有营养的游戏。</p>\n<p>高强度的高三结束后，顺利的来到了西电。心里当时确实是充满了对未来的幻想，想做这个，想干那么，心里想做的事真的很多很多～（标准结局：到现在有好多都没有完成～笑）</p>\n<p>和高中不一样，大一的自主时间很多，在认认真真完成了上课，作业，报告等任务后，可以剩下很多时间自由安排。自然而然，我想好好的享受一下游戏（毕竟高中三年都没能好好玩）</p>\n<img src=\"https://pbs.twimg.com/profile_images/692932156826451969/gNsHJSuZ.jpg\">\n<h2 id=\"LOL\"><a href=\"#LOL\" class=\"headerlink\" title=\"LOL\"></a>LOL</h2><blockquote>\n<p>那天的团灭，依然记忆犹新</p>\n</blockquote>\n<p>Dota，LOL，可以说它们展开了电子竞技的辉煌舞台。对一个职业的电子竞技选手，综合素质可以说是要非常强的。</p>\n<p>我觉得这类游戏，可以锻炼一个人的以下能力：</p>\n<ul>\n<li>全局观念</li>\n<li>抗压能力</li>\n<li>团队能力（领导）</li>\n</ul>\n<p>对全局的掌控，是这类游戏上手的玩家应该做的第一门功课。什么时候，应该干什么。具备这一点，才能让胜利离你更近一步。毕竟这游戏的胜利方式不是取决于杀死敌对玩家操作的人物，而是拆除敌方核心建筑物取胜。如果对全局的掌控好的话，取胜的方法是有很多的，就算你们处于劣势也没关系，重点在于调配全局的动向。</p>\n<p>在电子竞技的正式比赛上，观赛人数是不输于别的竞技类节目的。这也就让参赛选手更加想赢得比赛的胜利，向世界证明自己的实力。但是期望越大，在面临我方劣势的时候，压力也就会越大。这就是我所说的抗压能力的体现。如果在这场比赛中，你的抗压能力更好，那么很有可能你会获得最后的胜利。</p>\n<p>最后想说的是团队能力。有一句话说得好 “这是五个人的舞台，而不是让你一枝独秀的地方”<br>是的，团队在这个游戏的份量是很大的。一般来说，五个人中会分配一个统帅全队的玩家，而到底是哪个玩家来统帅其余4个玩家，带领全队走向胜利，那么这是要由很多方面说明的，简单来说，你展示的足够优秀，那么其余的人自然会跟上你的节奏，顺从你的引导。而当我方和敌方集体交战的时候，就是所谓的”团战”。团战爆发的时候，各司其职是很重要的，中间如果出错一环，都有可能失败，让战局逆转。而如何在团战中站稳自己的位置，要说的就更多了，这里就简单的说一句，相信自己的队友！</p>\n<p>LOL在大一还是玩的比较多的一款游戏，觉得是一款精良的游戏。要说还可以持续多久，我觉得这游戏再活5，6年应该是可以的，也许甚至更多</p>\n<hr>\n<h2 id=\"ElsWorld\"><a href=\"#ElsWorld\" class=\"headerlink\" title=\"ElsWorld\"></a>ElsWorld</h2><img src=\"http://i68.tinypic.com/2l8uu4y.png\">\n<blockquote>\n<p>吾乃 艾拉 韩</p>\n</blockquote>\n<p>这款游戏就没有那么有名了，但是其实它在韩国还是很火的一款游戏。</p>\n<p>接触这款游戏的初衷那自然就是被一个游戏人物的人设所吸引了（上图中的妹子）</p>\n<p>个人爱好：<br>我在2D的建模方面都是比较挑剔的，只要是有关2D的游戏，扫一脸所有人物的建模，就可以让我对这个游戏产生了一个6成的评价。其次的4成在于声优的配音工作是否理解了人物本身的性格。</p>\n<p>而其中的一个枪兵角色，艾拉 韩，不管是在人物建模还是声优配音方面，我都给100分的评价。</p>\n<p>人物建模依旧是ElsWorld的人物建模的团队，在这里我向他们致敬，他们还是用心在不断的创造欣赏力极佳的人物（后来的新成员希尔与露也有一种匠心巨作的感觉）</p>\n<p>声优方面，佐藤聪美为其配音的真可谓非常的到位！那声音入耳后就觉得，艾拉是一个比较坚强，好学，但是又有点冒失的孩子，再配上自认为完美的人物建模，和技能特效（艾拉的技能特效全部设定为晚秋的红黄色，所有技能的释放都会伴有秋叶的飘落，技能“飞燕”，更是把秋叶飘落特效放大到极致，词贫的我只能已“美”来形容了）</p>\n<p>游戏体验：<br>选好了角色，那么后面的人物就是玩这款游戏了。</p>\n<p>可以说，中国的游戏玩家素质还是非常令人失望的（苦笑），国服的ElsWorld环境并不是很好，玩的人也不多。</p>\n<p>不过自从官方发布了一个HA技能演示视频后，在各大视频网站上转播，国内玩家到了最峰值，我也是在那段时间认识了很多和自己有一样爱好的小伙伴们（笑）</p>\n<p>游戏主要就是打副本性质的游戏，同时也拥有玩家对战pk的功能。</p>\n<p>ElsWorld的玩家对战是设计的很好的。玩过毒奶粉的对战后，我就感到ElsWorld设计者在设计对战规则的独到之处。不过对战的装备还是越厉害越好，所以这一点上依旧是一个大坑。不过好在玩家不多，随便带点装备，就可以去愉快的和别人对战了～。</p>\n<p>游戏时间：从我转向Mac OSX之前都有间断的在玩，如果你和我差不多同龄，又喜欢二次，那么可以在课余时间尝试下这游戏呢。</p>\n<hr>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>在用了Mac OSX后，基本不玩端游了，我对自己大学阶段有关游戏的介绍也就告一段落了～不过，还真是一份不错的回忆。</p>\n<p>呼，时间也过去挺久了，今天就写到这里吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"http://i63.tinypic.com/2a8p10o.jpg\">\n<p>这是一篇回忆自己大学时光的文章</p>\n<blockquote>\n<p>比起不做而后悔，不如做了再后悔。<br>                                   ——空白《游戏人生》</p>\n</blockquote>\n<p>不得不说，电子游戏是我大学人生中占比重比较大的一部分内容，所以我想先拿一些值得写的，自认为比较有营养的游戏。</p>\n<p>高强度的高三结束后，顺利的来到了西电。心里当时确实是充满了对未来的幻想，想做这个，想干那么，心里想做的事真的很多很多～（标准结局：到现在有好多都没有完成～笑）</p>\n<p>和高中不一样，大一的自主时间很多，在认认真真完成了上课，作业，报告等任务后，可以剩下很多时间自由安排。自然而然，我想好好的享受一下游戏（毕竟高中三年都没能好好玩）</p>\n<img src=\"https://pbs.twimg.com/profile_images/692932156826451969/gNsHJSuZ.jpg\">\n<h2 id=\"LOL\"><a href=\"#LOL\" class=\"headerlink\" title=\"LOL\"></a>LOL</h2><blockquote>\n<p>那天的团灭，依然记忆犹新</p>\n</blockquote>\n<p>Dota，LOL，可以说它们展开了电子竞技的辉煌舞台。对一个职业的电子竞技选手，综合素质可以说是要非常强的。</p>\n<p>我觉得这类游戏，可以锻炼一个人的以下能力：</p>\n<ul>\n<li>全局观念</li>\n<li>抗压能力</li>\n<li>团队能力（领导）</li>\n</ul>\n<p>对全局的掌控，是这类游戏上手的玩家应该做的第一门功课。什么时候，应该干什么。具备这一点，才能让胜利离你更近一步。毕竟这游戏的胜利方式不是取决于杀死敌对玩家操作的人物，而是拆除敌方核心建筑物取胜。如果对全局的掌控好的话，取胜的方法是有很多的，就算你们处于劣势也没关系，重点在于调配全局的动向。</p>\n<p>在电子竞技的正式比赛上，观赛人数是不输于别的竞技类节目的。这也就让参赛选手更加想赢得比赛的胜利，向世界证明自己的实力。但是期望越大，在面临我方劣势的时候，压力也就会越大。这就是我所说的抗压能力的体现。如果在这场比赛中，你的抗压能力更好，那么很有可能你会获得最后的胜利。</p>\n<p>最后想说的是团队能力。有一句话说得好 “这是五个人的舞台，而不是让你一枝独秀的地方”<br>是的，团队在这个游戏的份量是很大的。一般来说，五个人中会分配一个统帅全队的玩家，而到底是哪个玩家来统帅其余4个玩家，带领全队走向胜利，那么这是要由很多方面说明的，简单来说，你展示的足够优秀，那么其余的人自然会跟上你的节奏，顺从你的引导。而当我方和敌方集体交战的时候，就是所谓的”团战”。团战爆发的时候，各司其职是很重要的，中间如果出错一环，都有可能失败，让战局逆转。而如何在团战中站稳自己的位置，要说的就更多了，这里就简单的说一句，相信自己的队友！</p>\n<p>LOL在大一还是玩的比较多的一款游戏，觉得是一款精良的游戏。要说还可以持续多久，我觉得这游戏再活5，6年应该是可以的，也许甚至更多</p>\n<hr>\n<h2 id=\"ElsWorld\"><a href=\"#ElsWorld\" class=\"headerlink\" title=\"ElsWorld\"></a>ElsWorld</h2><img src=\"http://i68.tinypic.com/2l8uu4y.png\">\n<blockquote>\n<p>吾乃 艾拉 韩</p>\n</blockquote>\n<p>这款游戏就没有那么有名了，但是其实它在韩国还是很火的一款游戏。</p>\n<p>接触这款游戏的初衷那自然就是被一个游戏人物的人设所吸引了（上图中的妹子）</p>\n<p>个人爱好：<br>我在2D的建模方面都是比较挑剔的，只要是有关2D的游戏，扫一脸所有人物的建模，就可以让我对这个游戏产生了一个6成的评价。其次的4成在于声优的配音工作是否理解了人物本身的性格。</p>\n<p>而其中的一个枪兵角色，艾拉 韩，不管是在人物建模还是声优配音方面，我都给100分的评价。</p>\n<p>人物建模依旧是ElsWorld的人物建模的团队，在这里我向他们致敬，他们还是用心在不断的创造欣赏力极佳的人物（后来的新成员希尔与露也有一种匠心巨作的感觉）</p>\n<p>声优方面，佐藤聪美为其配音的真可谓非常的到位！那声音入耳后就觉得，艾拉是一个比较坚强，好学，但是又有点冒失的孩子，再配上自认为完美的人物建模，和技能特效（艾拉的技能特效全部设定为晚秋的红黄色，所有技能的释放都会伴有秋叶的飘落，技能“飞燕”，更是把秋叶飘落特效放大到极致，词贫的我只能已“美”来形容了）</p>\n<p>游戏体验：<br>选好了角色，那么后面的人物就是玩这款游戏了。</p>\n<p>可以说，中国的游戏玩家素质还是非常令人失望的（苦笑），国服的ElsWorld环境并不是很好，玩的人也不多。</p>\n<p>不过自从官方发布了一个HA技能演示视频后，在各大视频网站上转播，国内玩家到了最峰值，我也是在那段时间认识了很多和自己有一样爱好的小伙伴们（笑）</p>\n<p>游戏主要就是打副本性质的游戏，同时也拥有玩家对战pk的功能。</p>\n<p>ElsWorld的玩家对战是设计的很好的。玩过毒奶粉的对战后，我就感到ElsWorld设计者在设计对战规则的独到之处。不过对战的装备还是越厉害越好，所以这一点上依旧是一个大坑。不过好在玩家不多，随便带点装备，就可以去愉快的和别人对战了～。</p>\n<p>游戏时间：从我转向Mac OSX之前都有间断的在玩，如果你和我差不多同龄，又喜欢二次，那么可以在课余时间尝试下这游戏呢。</p>\n<hr>\n<h2 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h2><p>在用了Mac OSX后，基本不玩端游了，我对自己大学阶段有关游戏的介绍也就告一段落了～不过，还真是一份不错的回忆。</p>\n<p>呼，时间也过去挺久了，今天就写到这里吧。</p>\n"},{"title":"在我的双硬盘windows电脑上安装ubuntu18.04-Desktop-LTS","date":"2019-04-30T08:12:21.000Z","_content":"\n在我的thinkpad电脑上安装ubuntu18.04-Desktop-LTS系统，达到windows+ubuntu的双系统环境\n\n## 我的电脑配置\n\nIntel i7-8550U，16GB内存，双硬盘256G的SSD，1T的机械硬盘，BOOT启动模式为UEFI,磁盘分区表模式是GPT，开机进入UEFI BIOS设置按住F12，磁盘分区情况如下：\n\n<img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E5%AE%89%E8%A3%85%E5%89%8D%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5.JPG?raw=true\" />\n\n## 制作ubuntu的U盘启动盘\n\n准备的材料\n1. ubuntu18.04-Desktop-LTS.iso镜像文件，在ubuntu官网就可以轻松下载\n2. 一个16GB的u盘\n3. Rufus，一个启动盘写入软件，官网下载最近版即可\n\n打开Rufus，按照如下配置：\n\n<img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E4%BD%BF%E7%94%A8Rufus%E5%88%9B%E9%80%A0U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98.JPG\">\n\n分区类型选择GPT（因为我windows用的GPT分区），目标系统类型选择UEFI（因为我windows用的就是这个启动方式）\n文件系统选择FAT32（FAT虽然只支持最高4GB的文件大小，但是兼容性强，所以先选择这个文件系统，后面我会尝试使用NTFS）\n簇大小我用的默认8192字节(8K)\n\n点击开始后会弹出选择什么镜像模式写入，选择推荐的ISO镜像\n完成后u盘启动盘就制作完成了\n\n## 为ubuntu准备磁盘空间\n\n1. 在windows的系统盘C盘中预留10G，用于分配/boot分区（分配多一点，以防万一，如果你的SSD不够大的话，分2G应该就足以了）\n2. 在1T的机械硬盘中分割500G作为ubuntu系统存储使用\n\n如何分割？\n使用windows自带的磁盘管理工具，右键压缩卷，输入压缩的大小就是分割出来的磁盘空间（黑色显示未分配的部分）\n\n## 禁用快速启动fast startup\n我暂时没做，用起来没啥区别，估计底层做了一定处理\n\n\n## 关闭Secure Boot功能\n由于过去 cracker 经常借由 BIOS 开机阶段来破坏系统，并取得系统的控制权，因此 UEFI加入了一个所谓的安全启动 （secure boot） 机制。\n但是这个机制容易导致linux系统无法顺利开机，所以需要进行关闭\n\n关闭方式：\n重启电脑，按住F12打开BIOS界面，在该界面找到Secure Boot，改成disabled，然后保存重启即可（不同主版也许不同，具体请自己上网查询）\n\n## 正式安装ubuntu\n\n1. 插入我们u盘启动盘！\n2. 开机，按住f12！选中自己的USB设备，回车运行\n3. 选择install ubuntu\n4. 中间什么语言，键盘设定我就不做说明了，选自己喜欢的就行，最好english，可以提高自己\n5. 分区配置：\n    在SSD的未分配空间分：\n\n    /boot,至少2G,我给了10G,Logical逻辑分区(因为我的boot分区放在windows的SSD盘里，而这个SSD盘已经有windows的主分区了，所以这里我们选逻辑分区即可)\n    在HHD的未分配空间分：\n\n    /,至少15000MB，我给20G，逻辑分区（但是随后我使用后发现20G也不够用，因为一些常用软件会全部存放至`/opt`这个文件夹，比如chrome，网易云音乐等，建议多分配一点）\n\n    /swap,你电脑实际内存(RAM)的两倍，不过很多资料说基本不需要了，所以就随便给了16G，逻辑分区\n    \n    /home,因为就我一个人用，所以把剩下的所有空间都放给这个用户文件夹，逻辑分区\n\n    所有分区位置都选择从头位置开始（beginning of the space）\n\n    最后一栏：\n    Device for boot loader installation:\n    选择刚刚我们分配的/boot对应的那个Device，意思就是把启动程序都装到那里\n\n    下面放2张参考图\n    <img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/boot%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E%E6%88%AA%E5%9B%BE.png?raw=true\" title=\"boot分区配好后\">\n\n     <img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/root%E5%88%86%E5%8C%BAhome%E5%88%86%E5%8C%BAswap%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E.png\" title=\"root分区home分区swap分区配好后\">\n\n    全部搞定后点击下一步！\n6. 设置用户\n7. 等待安装完成，安装完成后提示重启\n8. 开机后会自动先进入UEFI界面，然后选择启动ubuntu即可\n\n## 总结\n\n到此为止，我个人在双硬盘windows上安装ubuntu18.04-Desktop-LTS的流程已经完毕，上面所描述的步骤都是我亲手秩序的过程，最后成功安装完毕\n\n\n参考：\n1. <http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html>\n2. <https://blog.csdn.net/love666666shen/article/details/80947903>\n\n\n\n\n\n\n","source":"_posts/在我的双硬盘windows电脑上安装ubuntu18-04-Desktop-LTS.md","raw":"---\ntitle: 在我的双硬盘windows电脑上安装ubuntu18.04-Desktop-LTS\ntags: ubuntu\ncategories: IT\ndate: 2019-04-30 16:12:21\n---\n\n在我的thinkpad电脑上安装ubuntu18.04-Desktop-LTS系统，达到windows+ubuntu的双系统环境\n\n## 我的电脑配置\n\nIntel i7-8550U，16GB内存，双硬盘256G的SSD，1T的机械硬盘，BOOT启动模式为UEFI,磁盘分区表模式是GPT，开机进入UEFI BIOS设置按住F12，磁盘分区情况如下：\n\n<img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E5%AE%89%E8%A3%85%E5%89%8D%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5.JPG?raw=true\" />\n\n## 制作ubuntu的U盘启动盘\n\n准备的材料\n1. ubuntu18.04-Desktop-LTS.iso镜像文件，在ubuntu官网就可以轻松下载\n2. 一个16GB的u盘\n3. Rufus，一个启动盘写入软件，官网下载最近版即可\n\n打开Rufus，按照如下配置：\n\n<img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E4%BD%BF%E7%94%A8Rufus%E5%88%9B%E9%80%A0U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98.JPG\">\n\n分区类型选择GPT（因为我windows用的GPT分区），目标系统类型选择UEFI（因为我windows用的就是这个启动方式）\n文件系统选择FAT32（FAT虽然只支持最高4GB的文件大小，但是兼容性强，所以先选择这个文件系统，后面我会尝试使用NTFS）\n簇大小我用的默认8192字节(8K)\n\n点击开始后会弹出选择什么镜像模式写入，选择推荐的ISO镜像\n完成后u盘启动盘就制作完成了\n\n## 为ubuntu准备磁盘空间\n\n1. 在windows的系统盘C盘中预留10G，用于分配/boot分区（分配多一点，以防万一，如果你的SSD不够大的话，分2G应该就足以了）\n2. 在1T的机械硬盘中分割500G作为ubuntu系统存储使用\n\n如何分割？\n使用windows自带的磁盘管理工具，右键压缩卷，输入压缩的大小就是分割出来的磁盘空间（黑色显示未分配的部分）\n\n## 禁用快速启动fast startup\n我暂时没做，用起来没啥区别，估计底层做了一定处理\n\n\n## 关闭Secure Boot功能\n由于过去 cracker 经常借由 BIOS 开机阶段来破坏系统，并取得系统的控制权，因此 UEFI加入了一个所谓的安全启动 （secure boot） 机制。\n但是这个机制容易导致linux系统无法顺利开机，所以需要进行关闭\n\n关闭方式：\n重启电脑，按住F12打开BIOS界面，在该界面找到Secure Boot，改成disabled，然后保存重启即可（不同主版也许不同，具体请自己上网查询）\n\n## 正式安装ubuntu\n\n1. 插入我们u盘启动盘！\n2. 开机，按住f12！选中自己的USB设备，回车运行\n3. 选择install ubuntu\n4. 中间什么语言，键盘设定我就不做说明了，选自己喜欢的就行，最好english，可以提高自己\n5. 分区配置：\n    在SSD的未分配空间分：\n\n    /boot,至少2G,我给了10G,Logical逻辑分区(因为我的boot分区放在windows的SSD盘里，而这个SSD盘已经有windows的主分区了，所以这里我们选逻辑分区即可)\n    在HHD的未分配空间分：\n\n    /,至少15000MB，我给20G，逻辑分区（但是随后我使用后发现20G也不够用，因为一些常用软件会全部存放至`/opt`这个文件夹，比如chrome，网易云音乐等，建议多分配一点）\n\n    /swap,你电脑实际内存(RAM)的两倍，不过很多资料说基本不需要了，所以就随便给了16G，逻辑分区\n    \n    /home,因为就我一个人用，所以把剩下的所有空间都放给这个用户文件夹，逻辑分区\n\n    所有分区位置都选择从头位置开始（beginning of the space）\n\n    最后一栏：\n    Device for boot loader installation:\n    选择刚刚我们分配的/boot对应的那个Device，意思就是把启动程序都装到那里\n\n    下面放2张参考图\n    <img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/boot%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E%E6%88%AA%E5%9B%BE.png?raw=true\" title=\"boot分区配好后\">\n\n     <img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/root%E5%88%86%E5%8C%BAhome%E5%88%86%E5%8C%BAswap%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E.png\" title=\"root分区home分区swap分区配好后\">\n\n    全部搞定后点击下一步！\n6. 设置用户\n7. 等待安装完成，安装完成后提示重启\n8. 开机后会自动先进入UEFI界面，然后选择启动ubuntu即可\n\n## 总结\n\n到此为止，我个人在双硬盘windows上安装ubuntu18.04-Desktop-LTS的流程已经完毕，上面所描述的步骤都是我亲手秩序的过程，最后成功安装完毕\n\n\n参考：\n1. <http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html>\n2. <https://blog.csdn.net/love666666shen/article/details/80947903>\n\n\n\n\n\n\n","slug":"在我的双硬盘windows电脑上安装ubuntu18-04-Desktop-LTS","published":1,"updated":"2019-05-06T14:28:49.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tr002qm6elztonuhrc","content":"<p>在我的thinkpad电脑上安装ubuntu18.04-Desktop-LTS系统，达到windows+ubuntu的双系统环境</p>\n<h2 id=\"我的电脑配置\"><a href=\"#我的电脑配置\" class=\"headerlink\" title=\"我的电脑配置\"></a>我的电脑配置</h2><p>Intel i7-8550U，16GB内存，双硬盘256G的SSD，1T的机械硬盘，BOOT启动模式为UEFI,磁盘分区表模式是GPT，开机进入UEFI BIOS设置按住F12，磁盘分区情况如下：</p>\n<p><img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E5%AE%89%E8%A3%85%E5%89%8D%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5.JPG?raw=true\"></p>\n<h2 id=\"制作ubuntu的U盘启动盘\"><a href=\"#制作ubuntu的U盘启动盘\" class=\"headerlink\" title=\"制作ubuntu的U盘启动盘\"></a>制作ubuntu的U盘启动盘</h2><p>准备的材料</p>\n<ol>\n<li>ubuntu18.04-Desktop-LTS.iso镜像文件，在ubuntu官网就可以轻松下载</li>\n<li>一个16GB的u盘</li>\n<li>Rufus，一个启动盘写入软件，官网下载最近版即可</li>\n</ol>\n<p>打开Rufus，按照如下配置：</p>\n<p><img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E4%BD%BF%E7%94%A8Rufus%E5%88%9B%E9%80%A0U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98.JPG\"></p>\n<p>分区类型选择GPT（因为我windows用的GPT分区），目标系统类型选择UEFI（因为我windows用的就是这个启动方式）<br>文件系统选择FAT32（FAT虽然只支持最高4GB的文件大小，但是兼容性强，所以先选择这个文件系统，后面我会尝试使用NTFS）<br>簇大小我用的默认8192字节(8K)</p>\n<p>点击开始后会弹出选择什么镜像模式写入，选择推荐的ISO镜像<br>完成后u盘启动盘就制作完成了</p>\n<h2 id=\"为ubuntu准备磁盘空间\"><a href=\"#为ubuntu准备磁盘空间\" class=\"headerlink\" title=\"为ubuntu准备磁盘空间\"></a>为ubuntu准备磁盘空间</h2><ol>\n<li>在windows的系统盘C盘中预留10G，用于分配/boot分区（分配多一点，以防万一，如果你的SSD不够大的话，分2G应该就足以了）</li>\n<li>在1T的机械硬盘中分割500G作为ubuntu系统存储使用</li>\n</ol>\n<p>如何分割？<br>使用windows自带的磁盘管理工具，右键压缩卷，输入压缩的大小就是分割出来的磁盘空间（黑色显示未分配的部分）</p>\n<h2 id=\"禁用快速启动fast-startup\"><a href=\"#禁用快速启动fast-startup\" class=\"headerlink\" title=\"禁用快速启动fast startup\"></a>禁用快速启动fast startup</h2><p>我暂时没做，用起来没啥区别，估计底层做了一定处理</p>\n<h2 id=\"关闭Secure-Boot功能\"><a href=\"#关闭Secure-Boot功能\" class=\"headerlink\" title=\"关闭Secure Boot功能\"></a>关闭Secure Boot功能</h2><p>由于过去 cracker 经常借由 BIOS 开机阶段来破坏系统，并取得系统的控制权，因此 UEFI加入了一个所谓的安全启动 （secure boot） 机制。<br>但是这个机制容易导致linux系统无法顺利开机，所以需要进行关闭</p>\n<p>关闭方式：<br>重启电脑，按住F12打开BIOS界面，在该界面找到Secure Boot，改成disabled，然后保存重启即可（不同主版也许不同，具体请自己上网查询）</p>\n<h2 id=\"正式安装ubuntu\"><a href=\"#正式安装ubuntu\" class=\"headerlink\" title=\"正式安装ubuntu\"></a>正式安装ubuntu</h2><ol>\n<li>插入我们u盘启动盘！</li>\n<li>开机，按住f12！选中自己的USB设备，回车运行</li>\n<li>选择install ubuntu</li>\n<li>中间什么语言，键盘设定我就不做说明了，选自己喜欢的就行，最好english，可以提高自己</li>\n<li><p>分区配置：<br> 在SSD的未分配空间分：</p>\n<p> /boot,至少2G,我给了10G,Logical逻辑分区(因为我的boot分区放在windows的SSD盘里，而这个SSD盘已经有windows的主分区了，所以这里我们选逻辑分区即可)<br> 在HHD的未分配空间分：</p>\n<p> /,至少15000MB，我给20G，逻辑分区（但是随后我使用后发现20G也不够用，因为一些常用软件会全部存放至<code>/opt</code>这个文件夹，比如chrome，网易云音乐等，建议多分配一点）</p>\n<p> /swap,你电脑实际内存(RAM)的两倍，不过很多资料说基本不需要了，所以就随便给了16G，逻辑分区</p>\n<p> /home,因为就我一个人用，所以把剩下的所有空间都放给这个用户文件夹，逻辑分区</p>\n<p> 所有分区位置都选择从头位置开始（beginning of the space）</p>\n<p> 最后一栏：<br> Device for boot loader installation:<br> 选择刚刚我们分配的/boot对应的那个Device，意思就是把启动程序都装到那里</p>\n<p> 下面放2张参考图<br> <img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/boot%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E%E6%88%AA%E5%9B%BE.png?raw=true\" title=\"boot分区配好后\"></p>\n<p>  <img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/root%E5%88%86%E5%8C%BAhome%E5%88%86%E5%8C%BAswap%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E.png\" title=\"root分区home分区swap分区配好后\"></p>\n<p> 全部搞定后点击下一步！</p>\n</li>\n<li>设置用户</li>\n<li>等待安装完成，安装完成后提示重启</li>\n<li>开机后会自动先进入UEFI界面，然后选择启动ubuntu即可</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，我个人在双硬盘windows上安装ubuntu18.04-Desktop-LTS的流程已经完毕，上面所描述的步骤都是我亲手秩序的过程，最后成功安装完毕</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html\" target=\"_blank\" rel=\"noopener\">http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html</a></li>\n<li><a href=\"https://blog.csdn.net/love666666shen/article/details/80947903\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/love666666shen/article/details/80947903</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在我的thinkpad电脑上安装ubuntu18.04-Desktop-LTS系统，达到windows+ubuntu的双系统环境</p>\n<h2 id=\"我的电脑配置\"><a href=\"#我的电脑配置\" class=\"headerlink\" title=\"我的电脑配置\"></a>我的电脑配置</h2><p>Intel i7-8550U，16GB内存，双硬盘256G的SSD，1T的机械硬盘，BOOT启动模式为UEFI,磁盘分区表模式是GPT，开机进入UEFI BIOS设置按住F12，磁盘分区情况如下：</p>\n<p><img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E5%AE%89%E8%A3%85%E5%89%8D%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E6%83%85%E5%86%B5.JPG?raw=true\"></p>\n<h2 id=\"制作ubuntu的U盘启动盘\"><a href=\"#制作ubuntu的U盘启动盘\" class=\"headerlink\" title=\"制作ubuntu的U盘启动盘\"></a>制作ubuntu的U盘启动盘</h2><p>准备的材料</p>\n<ol>\n<li>ubuntu18.04-Desktop-LTS.iso镜像文件，在ubuntu官网就可以轻松下载</li>\n<li>一个16GB的u盘</li>\n<li>Rufus，一个启动盘写入软件，官网下载最近版即可</li>\n</ol>\n<p>打开Rufus，按照如下配置：</p>\n<p><img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/%E4%BD%BF%E7%94%A8Rufus%E5%88%9B%E9%80%A0U%E7%9B%98%E5%90%AF%E5%8A%A8%E7%9B%98.JPG\"></p>\n<p>分区类型选择GPT（因为我windows用的GPT分区），目标系统类型选择UEFI（因为我windows用的就是这个启动方式）<br>文件系统选择FAT32（FAT虽然只支持最高4GB的文件大小，但是兼容性强，所以先选择这个文件系统，后面我会尝试使用NTFS）<br>簇大小我用的默认8192字节(8K)</p>\n<p>点击开始后会弹出选择什么镜像模式写入，选择推荐的ISO镜像<br>完成后u盘启动盘就制作完成了</p>\n<h2 id=\"为ubuntu准备磁盘空间\"><a href=\"#为ubuntu准备磁盘空间\" class=\"headerlink\" title=\"为ubuntu准备磁盘空间\"></a>为ubuntu准备磁盘空间</h2><ol>\n<li>在windows的系统盘C盘中预留10G，用于分配/boot分区（分配多一点，以防万一，如果你的SSD不够大的话，分2G应该就足以了）</li>\n<li>在1T的机械硬盘中分割500G作为ubuntu系统存储使用</li>\n</ol>\n<p>如何分割？<br>使用windows自带的磁盘管理工具，右键压缩卷，输入压缩的大小就是分割出来的磁盘空间（黑色显示未分配的部分）</p>\n<h2 id=\"禁用快速启动fast-startup\"><a href=\"#禁用快速启动fast-startup\" class=\"headerlink\" title=\"禁用快速启动fast startup\"></a>禁用快速启动fast startup</h2><p>我暂时没做，用起来没啥区别，估计底层做了一定处理</p>\n<h2 id=\"关闭Secure-Boot功能\"><a href=\"#关闭Secure-Boot功能\" class=\"headerlink\" title=\"关闭Secure Boot功能\"></a>关闭Secure Boot功能</h2><p>由于过去 cracker 经常借由 BIOS 开机阶段来破坏系统，并取得系统的控制权，因此 UEFI加入了一个所谓的安全启动 （secure boot） 机制。<br>但是这个机制容易导致linux系统无法顺利开机，所以需要进行关闭</p>\n<p>关闭方式：<br>重启电脑，按住F12打开BIOS界面，在该界面找到Secure Boot，改成disabled，然后保存重启即可（不同主版也许不同，具体请自己上网查询）</p>\n<h2 id=\"正式安装ubuntu\"><a href=\"#正式安装ubuntu\" class=\"headerlink\" title=\"正式安装ubuntu\"></a>正式安装ubuntu</h2><ol>\n<li>插入我们u盘启动盘！</li>\n<li>开机，按住f12！选中自己的USB设备，回车运行</li>\n<li>选择install ubuntu</li>\n<li>中间什么语言，键盘设定我就不做说明了，选自己喜欢的就行，最好english，可以提高自己</li>\n<li><p>分区配置：<br> 在SSD的未分配空间分：</p>\n<p> /boot,至少2G,我给了10G,Logical逻辑分区(因为我的boot分区放在windows的SSD盘里，而这个SSD盘已经有windows的主分区了，所以这里我们选逻辑分区即可)<br> 在HHD的未分配空间分：</p>\n<p> /,至少15000MB，我给20G，逻辑分区（但是随后我使用后发现20G也不够用，因为一些常用软件会全部存放至<code>/opt</code>这个文件夹，比如chrome，网易云音乐等，建议多分配一点）</p>\n<p> /swap,你电脑实际内存(RAM)的两倍，不过很多资料说基本不需要了，所以就随便给了16G，逻辑分区</p>\n<p> /home,因为就我一个人用，所以把剩下的所有空间都放给这个用户文件夹，逻辑分区</p>\n<p> 所有分区位置都选择从头位置开始（beginning of the space）</p>\n<p> 最后一栏：<br> Device for boot loader installation:<br> 选择刚刚我们分配的/boot对应的那个Device，意思就是把启动程序都装到那里</p>\n<p> 下面放2张参考图<br> <img src=\"https://github.com/zazaluMonster/zazaluMonster.github.io/blob/hexo/themes/hexo-theme-cactus/source/images/tmpImage/boot%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E%E6%88%AA%E5%9B%BE.png?raw=true\" title=\"boot分区配好后\"></p>\n<p>  <img src=\"https://raw.githubusercontent.com/zazaluMonster/zazaluMonster.github.io/hexo/themes/hexo-theme-cactus/source/images/tmpImage/root%E5%88%86%E5%8C%BAhome%E5%88%86%E5%8C%BAswap%E5%88%86%E5%8C%BA%E9%85%8D%E5%A5%BD%E5%90%8E.png\" title=\"root分区home分区swap分区配好后\"></p>\n<p> 全部搞定后点击下一步！</p>\n</li>\n<li>设置用户</li>\n<li>等待安装完成，安装完成后提示重启</li>\n<li>开机后会自动先进入UEFI界面，然后选择启动ubuntu即可</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，我个人在双硬盘windows上安装ubuntu18.04-Desktop-LTS的流程已经完毕，上面所描述的步骤都是我亲手秩序的过程，最后成功安装完毕</p>\n<p>参考：</p>\n<ol>\n<li><a href=\"http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html\" target=\"_blank\" rel=\"noopener\">http://myviewsonfoss.blogspot.com/2018/05/this-article-willshow-you-how-you-can.html</a></li>\n<li><a href=\"https://blog.csdn.net/love666666shen/article/details/80947903\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/love666666shen/article/details/80947903</a></li>\n</ol>\n"},{"title":"大学的日子(二)","date":"2019-04-24T06:00:04.000Z","_content":"\n好久不见，我的博客。离上次写博客，已经有很长一段时间过去了，这段时间之间自己刚毕业，刚迈入工作岗位，每天拼命的工作，生活不是很安定，和以前的大学生活差距很大，自然而然就没什么心情写写博客了。可能是因为想倾诉的东西很多吧，有太多的东西想倾诉给某人听，不过自己身边并没有那么适合的人，所以我最终还是找回自己的博客，将自己想说的都说给我自己的博客听。\n\n这次我想回忆回忆自己的大学学习生活。\n\n我是一名普通的西安电子科技大学软件学院的学生，我今天就想好好的说一说我自己在大学的学习故事。\n\n## 西电有一个很好的软件IT氛围\n\n大二左右的时候，自己打开qq和微信就可以看到很多人拉队友，参加各种竞赛，增加自己的能力和经验，自己身边也不乏各种编程大神，当我还只会使用windows的时候，人家都已经熟练的使用着ubantu了。每次做软件的大作业的时候，我总会花一两礼拜的时间，泡在图书馆里，学习编程知识，然后边问那些大神们，边完成自己的软件大作业。没有他们，我都不知道自己模拟制作的那些聊天室，web网站(基本处于玩玩的那种程度吧)能不能按时完成呢。我非常感谢自己可以很幸运的遇到他们，能够在他们提供的帮助下，一次次的完成老师布置的软件大作业，不会被老师挨骂，同时也会有那么一点点小小的成就感，毕竟程序的完成，都是我自己一个个代码敲出来的，虽然其实现方式和代码总体架构和设计上完成不能看就是了，基本处于做完就废的那种感觉。我也非常感谢他们不断的在我身边熏陶着一些编程新闻，让我至少在聊软件的时候，可以多说几句我知道的东西。现在很多人认为学软件是不错的选择，不过我还是善意的提醒一句，如果你真的喜欢敲代码，那么我不介意你去学，如果你只是单纯的想找一份比较好的工作，那么我觉得软件这一行业是不适合你的。\n\n## 贵在坚持\n\n大一大二的时候，都是在上编程的基础课程，基本没有自己真正去敲代码的经验，所以自己真正接触代码的时间应该要从大三开始吧。大一大二平平庸庸的过了两年后，我慢慢的察觉到在大学里，按时完成老师布置的作业真的是远远不够的。我不知道985的学校是怎么样的，反正我觉得现在内陆的大学，因为看重毕业率，在大学学习，非常自由，老师不会给太难的任务，导师不会给太多的约束，完全就属于放养的状态。那么我们这些从小就按部就班，一步一步走过来的人呢，就会感觉没有了明确的目标，学习的劲头也没有以前足，加上有些人本身也并不喜欢软件这个专业。差不多到了大三，可以明显的看出我们这批人开始行动了起来，有的开始认真学习自己的专业知识，有的开始另求后路。大三这一年最辛苦的应该就是这些人了，他们每天应该看上去都像一个拼命三郎，每天都在准备的去翻越眼前的大山。我差不多也是这个时候开始喜欢泡图书馆，每天上完课，就回去图书馆看书学习，也是那个时候把自己的Mac系统用了起来，卸载了原来的windows。自从开始用Mac系统后，就开始慢慢的喜欢捣鼓自己的东西，因为Mac系统玩不了很多流行的游戏，自然而然我的时间就更多的花到了自己喜欢的地方去了。这些时间，有些我用来逛自己喜欢的博客，看看他们的生活和技术博文；有些我用来捣鼓Mac系统的使用，使得它更加的适合我平时的学习和使用；还有一些时间我就用来看看视频，发发弹幕，修身养性了。软件编程，我们经常会碰到一些奇奇怪怪的问题，这是因为我们现在大部分的程序员都是在使用软件巨人们帮我们打好的”地基”上面进行开发，由于我们对这些”地基”了解程度不够，没有好好的看文档，也没有好好的去理解深层的原理；有时候一个问题，可能会麻烦你好几天也没有个解决方法。这很考验一个人的坚持能力，如果你坚持了，说不定你成功了。做软件的，如果你真喜欢，那么不管发生什么事情，都请静下来，一个个的去解决眼前的问题，在解决完以后，自己要花点时间去思考，去总结，才能有所收获！\n\n## 大学==玩? \n\n至少在我小时候居住的环境下，都流行着一种不好的风气，就是高中好好念，上个好大学，在大学里就可以不用像高中那样拼命学习。正如我现在的导师所说，你现在努力过头，不给自己一个喘气的机会，你怎么保证自己可以一直这种状态工作下去呢？没错，现在很多小孩子，从小学，初中到高中，特别是高三，更是把自己的全部都豁了出去，就像这是自己一生中最后一次拼搏一样，有些努力的身体出毛病，有些则努力的自己的心理也开始扭曲。所以一旦毕了业，就会非常想好好休息休息，而因为之前拼搏太久，可能那三个月一点点的假期是远远不够的。所以自然而然，到了大学，我们开始追求自由的生活，不再那么努力，不再那么的看重学业，感觉自己的未来明朗清晰，把大学按部就班的读好，就可以找个好点的工作，然后开始自己的后半生。那么往往这样的结果是不好的。有句话说得好，出来混总有一天要还的。大学才是我们人生中最重要的时刻，你如何利用好你的大学时光，才能真正的决定你的未来。\n\n## 大四的那点小事\n\n西电软院，每年大三暑假都会安排一次实训，和一些软件公司合作，安排我们这些娃子去他们那里实习，实习的内容都是做一个模拟的项目，几个人一个小组进行正常的工作。我认为这是非常好的，甚至比有些自己找的实习机会更加的有帮助。如果在看这篇文章的同学正好是我校友而且也是软院的学生的话，如果你正在烦恼实习怎么办的话，强烈建议你不用花时间去找个自己不喜欢的单位，然后在那里面实习，而是参加学校安排的实训，重点不是看你去哪里实习，而是要看你在实习的时候做了什么。实训的时候如果你想着水过去，那么也就水过去了，因为毕竟只是实训，项目经理不会过来骂你，说你完成的不好，完成的不对。所以还是那句话，自己要严格要求自己。大三实训完接着就是大四的上半学期，各大公司都会过来学校校招，这是一个丰收自己的学习成果的阶段，机会都是留给有准备的人的。但是要进好公司，比如腾讯，阿里，那么你估计需要大量的努力和一点点好运。同时我也推荐你们能进到互联网公司而不是传统IT行业。虽然互联网公司对技术要求高，但是对你来说，可以算是一个很好的平台，站得越高，看得越远。\n\n## 结束语\n感觉自言自语的很久，也算是对自己的大学生活的学习过程有了一个小总结，日后可以自己看看.\n\n","source":"_posts/大学的日子-二.md","raw":"---\ntitle: 大学的日子(二)\ntags: 回忆向\ncategories: 生活\ndate: 2019-04-24 14:00:04\n---\n\n好久不见，我的博客。离上次写博客，已经有很长一段时间过去了，这段时间之间自己刚毕业，刚迈入工作岗位，每天拼命的工作，生活不是很安定，和以前的大学生活差距很大，自然而然就没什么心情写写博客了。可能是因为想倾诉的东西很多吧，有太多的东西想倾诉给某人听，不过自己身边并没有那么适合的人，所以我最终还是找回自己的博客，将自己想说的都说给我自己的博客听。\n\n这次我想回忆回忆自己的大学学习生活。\n\n我是一名普通的西安电子科技大学软件学院的学生，我今天就想好好的说一说我自己在大学的学习故事。\n\n## 西电有一个很好的软件IT氛围\n\n大二左右的时候，自己打开qq和微信就可以看到很多人拉队友，参加各种竞赛，增加自己的能力和经验，自己身边也不乏各种编程大神，当我还只会使用windows的时候，人家都已经熟练的使用着ubantu了。每次做软件的大作业的时候，我总会花一两礼拜的时间，泡在图书馆里，学习编程知识，然后边问那些大神们，边完成自己的软件大作业。没有他们，我都不知道自己模拟制作的那些聊天室，web网站(基本处于玩玩的那种程度吧)能不能按时完成呢。我非常感谢自己可以很幸运的遇到他们，能够在他们提供的帮助下，一次次的完成老师布置的软件大作业，不会被老师挨骂，同时也会有那么一点点小小的成就感，毕竟程序的完成，都是我自己一个个代码敲出来的，虽然其实现方式和代码总体架构和设计上完成不能看就是了，基本处于做完就废的那种感觉。我也非常感谢他们不断的在我身边熏陶着一些编程新闻，让我至少在聊软件的时候，可以多说几句我知道的东西。现在很多人认为学软件是不错的选择，不过我还是善意的提醒一句，如果你真的喜欢敲代码，那么我不介意你去学，如果你只是单纯的想找一份比较好的工作，那么我觉得软件这一行业是不适合你的。\n\n## 贵在坚持\n\n大一大二的时候，都是在上编程的基础课程，基本没有自己真正去敲代码的经验，所以自己真正接触代码的时间应该要从大三开始吧。大一大二平平庸庸的过了两年后，我慢慢的察觉到在大学里，按时完成老师布置的作业真的是远远不够的。我不知道985的学校是怎么样的，反正我觉得现在内陆的大学，因为看重毕业率，在大学学习，非常自由，老师不会给太难的任务，导师不会给太多的约束，完全就属于放养的状态。那么我们这些从小就按部就班，一步一步走过来的人呢，就会感觉没有了明确的目标，学习的劲头也没有以前足，加上有些人本身也并不喜欢软件这个专业。差不多到了大三，可以明显的看出我们这批人开始行动了起来，有的开始认真学习自己的专业知识，有的开始另求后路。大三这一年最辛苦的应该就是这些人了，他们每天应该看上去都像一个拼命三郎，每天都在准备的去翻越眼前的大山。我差不多也是这个时候开始喜欢泡图书馆，每天上完课，就回去图书馆看书学习，也是那个时候把自己的Mac系统用了起来，卸载了原来的windows。自从开始用Mac系统后，就开始慢慢的喜欢捣鼓自己的东西，因为Mac系统玩不了很多流行的游戏，自然而然我的时间就更多的花到了自己喜欢的地方去了。这些时间，有些我用来逛自己喜欢的博客，看看他们的生活和技术博文；有些我用来捣鼓Mac系统的使用，使得它更加的适合我平时的学习和使用；还有一些时间我就用来看看视频，发发弹幕，修身养性了。软件编程，我们经常会碰到一些奇奇怪怪的问题，这是因为我们现在大部分的程序员都是在使用软件巨人们帮我们打好的”地基”上面进行开发，由于我们对这些”地基”了解程度不够，没有好好的看文档，也没有好好的去理解深层的原理；有时候一个问题，可能会麻烦你好几天也没有个解决方法。这很考验一个人的坚持能力，如果你坚持了，说不定你成功了。做软件的，如果你真喜欢，那么不管发生什么事情，都请静下来，一个个的去解决眼前的问题，在解决完以后，自己要花点时间去思考，去总结，才能有所收获！\n\n## 大学==玩? \n\n至少在我小时候居住的环境下，都流行着一种不好的风气，就是高中好好念，上个好大学，在大学里就可以不用像高中那样拼命学习。正如我现在的导师所说，你现在努力过头，不给自己一个喘气的机会，你怎么保证自己可以一直这种状态工作下去呢？没错，现在很多小孩子，从小学，初中到高中，特别是高三，更是把自己的全部都豁了出去，就像这是自己一生中最后一次拼搏一样，有些努力的身体出毛病，有些则努力的自己的心理也开始扭曲。所以一旦毕了业，就会非常想好好休息休息，而因为之前拼搏太久，可能那三个月一点点的假期是远远不够的。所以自然而然，到了大学，我们开始追求自由的生活，不再那么努力，不再那么的看重学业，感觉自己的未来明朗清晰，把大学按部就班的读好，就可以找个好点的工作，然后开始自己的后半生。那么往往这样的结果是不好的。有句话说得好，出来混总有一天要还的。大学才是我们人生中最重要的时刻，你如何利用好你的大学时光，才能真正的决定你的未来。\n\n## 大四的那点小事\n\n西电软院，每年大三暑假都会安排一次实训，和一些软件公司合作，安排我们这些娃子去他们那里实习，实习的内容都是做一个模拟的项目，几个人一个小组进行正常的工作。我认为这是非常好的，甚至比有些自己找的实习机会更加的有帮助。如果在看这篇文章的同学正好是我校友而且也是软院的学生的话，如果你正在烦恼实习怎么办的话，强烈建议你不用花时间去找个自己不喜欢的单位，然后在那里面实习，而是参加学校安排的实训，重点不是看你去哪里实习，而是要看你在实习的时候做了什么。实训的时候如果你想着水过去，那么也就水过去了，因为毕竟只是实训，项目经理不会过来骂你，说你完成的不好，完成的不对。所以还是那句话，自己要严格要求自己。大三实训完接着就是大四的上半学期，各大公司都会过来学校校招，这是一个丰收自己的学习成果的阶段，机会都是留给有准备的人的。但是要进好公司，比如腾讯，阿里，那么你估计需要大量的努力和一点点好运。同时我也推荐你们能进到互联网公司而不是传统IT行业。虽然互联网公司对技术要求高，但是对你来说，可以算是一个很好的平台，站得越高，看得越远。\n\n## 结束语\n感觉自言自语的很久，也算是对自己的大学生活的学习过程有了一个小总结，日后可以自己看看.\n\n","slug":"大学的日子-二","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9ts002tm6el1l1a72ro","content":"<p>好久不见，我的博客。离上次写博客，已经有很长一段时间过去了，这段时间之间自己刚毕业，刚迈入工作岗位，每天拼命的工作，生活不是很安定，和以前的大学生活差距很大，自然而然就没什么心情写写博客了。可能是因为想倾诉的东西很多吧，有太多的东西想倾诉给某人听，不过自己身边并没有那么适合的人，所以我最终还是找回自己的博客，将自己想说的都说给我自己的博客听。</p>\n<p>这次我想回忆回忆自己的大学学习生活。</p>\n<p>我是一名普通的西安电子科技大学软件学院的学生，我今天就想好好的说一说我自己在大学的学习故事。</p>\n<h2 id=\"西电有一个很好的软件IT氛围\"><a href=\"#西电有一个很好的软件IT氛围\" class=\"headerlink\" title=\"西电有一个很好的软件IT氛围\"></a>西电有一个很好的软件IT氛围</h2><p>大二左右的时候，自己打开qq和微信就可以看到很多人拉队友，参加各种竞赛，增加自己的能力和经验，自己身边也不乏各种编程大神，当我还只会使用windows的时候，人家都已经熟练的使用着ubantu了。每次做软件的大作业的时候，我总会花一两礼拜的时间，泡在图书馆里，学习编程知识，然后边问那些大神们，边完成自己的软件大作业。没有他们，我都不知道自己模拟制作的那些聊天室，web网站(基本处于玩玩的那种程度吧)能不能按时完成呢。我非常感谢自己可以很幸运的遇到他们，能够在他们提供的帮助下，一次次的完成老师布置的软件大作业，不会被老师挨骂，同时也会有那么一点点小小的成就感，毕竟程序的完成，都是我自己一个个代码敲出来的，虽然其实现方式和代码总体架构和设计上完成不能看就是了，基本处于做完就废的那种感觉。我也非常感谢他们不断的在我身边熏陶着一些编程新闻，让我至少在聊软件的时候，可以多说几句我知道的东西。现在很多人认为学软件是不错的选择，不过我还是善意的提醒一句，如果你真的喜欢敲代码，那么我不介意你去学，如果你只是单纯的想找一份比较好的工作，那么我觉得软件这一行业是不适合你的。</p>\n<h2 id=\"贵在坚持\"><a href=\"#贵在坚持\" class=\"headerlink\" title=\"贵在坚持\"></a>贵在坚持</h2><p>大一大二的时候，都是在上编程的基础课程，基本没有自己真正去敲代码的经验，所以自己真正接触代码的时间应该要从大三开始吧。大一大二平平庸庸的过了两年后，我慢慢的察觉到在大学里，按时完成老师布置的作业真的是远远不够的。我不知道985的学校是怎么样的，反正我觉得现在内陆的大学，因为看重毕业率，在大学学习，非常自由，老师不会给太难的任务，导师不会给太多的约束，完全就属于放养的状态。那么我们这些从小就按部就班，一步一步走过来的人呢，就会感觉没有了明确的目标，学习的劲头也没有以前足，加上有些人本身也并不喜欢软件这个专业。差不多到了大三，可以明显的看出我们这批人开始行动了起来，有的开始认真学习自己的专业知识，有的开始另求后路。大三这一年最辛苦的应该就是这些人了，他们每天应该看上去都像一个拼命三郎，每天都在准备的去翻越眼前的大山。我差不多也是这个时候开始喜欢泡图书馆，每天上完课，就回去图书馆看书学习，也是那个时候把自己的Mac系统用了起来，卸载了原来的windows。自从开始用Mac系统后，就开始慢慢的喜欢捣鼓自己的东西，因为Mac系统玩不了很多流行的游戏，自然而然我的时间就更多的花到了自己喜欢的地方去了。这些时间，有些我用来逛自己喜欢的博客，看看他们的生活和技术博文；有些我用来捣鼓Mac系统的使用，使得它更加的适合我平时的学习和使用；还有一些时间我就用来看看视频，发发弹幕，修身养性了。软件编程，我们经常会碰到一些奇奇怪怪的问题，这是因为我们现在大部分的程序员都是在使用软件巨人们帮我们打好的”地基”上面进行开发，由于我们对这些”地基”了解程度不够，没有好好的看文档，也没有好好的去理解深层的原理；有时候一个问题，可能会麻烦你好几天也没有个解决方法。这很考验一个人的坚持能力，如果你坚持了，说不定你成功了。做软件的，如果你真喜欢，那么不管发生什么事情，都请静下来，一个个的去解决眼前的问题，在解决完以后，自己要花点时间去思考，去总结，才能有所收获！</p>\n<h2 id=\"大学-玩\"><a href=\"#大学-玩\" class=\"headerlink\" title=\"大学==玩?\"></a>大学==玩?</h2><p>至少在我小时候居住的环境下，都流行着一种不好的风气，就是高中好好念，上个好大学，在大学里就可以不用像高中那样拼命学习。正如我现在的导师所说，你现在努力过头，不给自己一个喘气的机会，你怎么保证自己可以一直这种状态工作下去呢？没错，现在很多小孩子，从小学，初中到高中，特别是高三，更是把自己的全部都豁了出去，就像这是自己一生中最后一次拼搏一样，有些努力的身体出毛病，有些则努力的自己的心理也开始扭曲。所以一旦毕了业，就会非常想好好休息休息，而因为之前拼搏太久，可能那三个月一点点的假期是远远不够的。所以自然而然，到了大学，我们开始追求自由的生活，不再那么努力，不再那么的看重学业，感觉自己的未来明朗清晰，把大学按部就班的读好，就可以找个好点的工作，然后开始自己的后半生。那么往往这样的结果是不好的。有句话说得好，出来混总有一天要还的。大学才是我们人生中最重要的时刻，你如何利用好你的大学时光，才能真正的决定你的未来。</p>\n<h2 id=\"大四的那点小事\"><a href=\"#大四的那点小事\" class=\"headerlink\" title=\"大四的那点小事\"></a>大四的那点小事</h2><p>西电软院，每年大三暑假都会安排一次实训，和一些软件公司合作，安排我们这些娃子去他们那里实习，实习的内容都是做一个模拟的项目，几个人一个小组进行正常的工作。我认为这是非常好的，甚至比有些自己找的实习机会更加的有帮助。如果在看这篇文章的同学正好是我校友而且也是软院的学生的话，如果你正在烦恼实习怎么办的话，强烈建议你不用花时间去找个自己不喜欢的单位，然后在那里面实习，而是参加学校安排的实训，重点不是看你去哪里实习，而是要看你在实习的时候做了什么。实训的时候如果你想着水过去，那么也就水过去了，因为毕竟只是实训，项目经理不会过来骂你，说你完成的不好，完成的不对。所以还是那句话，自己要严格要求自己。大三实训完接着就是大四的上半学期，各大公司都会过来学校校招，这是一个丰收自己的学习成果的阶段，机会都是留给有准备的人的。但是要进好公司，比如腾讯，阿里，那么你估计需要大量的努力和一点点好运。同时我也推荐你们能进到互联网公司而不是传统IT行业。虽然互联网公司对技术要求高，但是对你来说，可以算是一个很好的平台，站得越高，看得越远。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>感觉自言自语的很久，也算是对自己的大学生活的学习过程有了一个小总结，日后可以自己看看.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久不见，我的博客。离上次写博客，已经有很长一段时间过去了，这段时间之间自己刚毕业，刚迈入工作岗位，每天拼命的工作，生活不是很安定，和以前的大学生活差距很大，自然而然就没什么心情写写博客了。可能是因为想倾诉的东西很多吧，有太多的东西想倾诉给某人听，不过自己身边并没有那么适合的人，所以我最终还是找回自己的博客，将自己想说的都说给我自己的博客听。</p>\n<p>这次我想回忆回忆自己的大学学习生活。</p>\n<p>我是一名普通的西安电子科技大学软件学院的学生，我今天就想好好的说一说我自己在大学的学习故事。</p>\n<h2 id=\"西电有一个很好的软件IT氛围\"><a href=\"#西电有一个很好的软件IT氛围\" class=\"headerlink\" title=\"西电有一个很好的软件IT氛围\"></a>西电有一个很好的软件IT氛围</h2><p>大二左右的时候，自己打开qq和微信就可以看到很多人拉队友，参加各种竞赛，增加自己的能力和经验，自己身边也不乏各种编程大神，当我还只会使用windows的时候，人家都已经熟练的使用着ubantu了。每次做软件的大作业的时候，我总会花一两礼拜的时间，泡在图书馆里，学习编程知识，然后边问那些大神们，边完成自己的软件大作业。没有他们，我都不知道自己模拟制作的那些聊天室，web网站(基本处于玩玩的那种程度吧)能不能按时完成呢。我非常感谢自己可以很幸运的遇到他们，能够在他们提供的帮助下，一次次的完成老师布置的软件大作业，不会被老师挨骂，同时也会有那么一点点小小的成就感，毕竟程序的完成，都是我自己一个个代码敲出来的，虽然其实现方式和代码总体架构和设计上完成不能看就是了，基本处于做完就废的那种感觉。我也非常感谢他们不断的在我身边熏陶着一些编程新闻，让我至少在聊软件的时候，可以多说几句我知道的东西。现在很多人认为学软件是不错的选择，不过我还是善意的提醒一句，如果你真的喜欢敲代码，那么我不介意你去学，如果你只是单纯的想找一份比较好的工作，那么我觉得软件这一行业是不适合你的。</p>\n<h2 id=\"贵在坚持\"><a href=\"#贵在坚持\" class=\"headerlink\" title=\"贵在坚持\"></a>贵在坚持</h2><p>大一大二的时候，都是在上编程的基础课程，基本没有自己真正去敲代码的经验，所以自己真正接触代码的时间应该要从大三开始吧。大一大二平平庸庸的过了两年后，我慢慢的察觉到在大学里，按时完成老师布置的作业真的是远远不够的。我不知道985的学校是怎么样的，反正我觉得现在内陆的大学，因为看重毕业率，在大学学习，非常自由，老师不会给太难的任务，导师不会给太多的约束，完全就属于放养的状态。那么我们这些从小就按部就班，一步一步走过来的人呢，就会感觉没有了明确的目标，学习的劲头也没有以前足，加上有些人本身也并不喜欢软件这个专业。差不多到了大三，可以明显的看出我们这批人开始行动了起来，有的开始认真学习自己的专业知识，有的开始另求后路。大三这一年最辛苦的应该就是这些人了，他们每天应该看上去都像一个拼命三郎，每天都在准备的去翻越眼前的大山。我差不多也是这个时候开始喜欢泡图书馆，每天上完课，就回去图书馆看书学习，也是那个时候把自己的Mac系统用了起来，卸载了原来的windows。自从开始用Mac系统后，就开始慢慢的喜欢捣鼓自己的东西，因为Mac系统玩不了很多流行的游戏，自然而然我的时间就更多的花到了自己喜欢的地方去了。这些时间，有些我用来逛自己喜欢的博客，看看他们的生活和技术博文；有些我用来捣鼓Mac系统的使用，使得它更加的适合我平时的学习和使用；还有一些时间我就用来看看视频，发发弹幕，修身养性了。软件编程，我们经常会碰到一些奇奇怪怪的问题，这是因为我们现在大部分的程序员都是在使用软件巨人们帮我们打好的”地基”上面进行开发，由于我们对这些”地基”了解程度不够，没有好好的看文档，也没有好好的去理解深层的原理；有时候一个问题，可能会麻烦你好几天也没有个解决方法。这很考验一个人的坚持能力，如果你坚持了，说不定你成功了。做软件的，如果你真喜欢，那么不管发生什么事情，都请静下来，一个个的去解决眼前的问题，在解决完以后，自己要花点时间去思考，去总结，才能有所收获！</p>\n<h2 id=\"大学-玩\"><a href=\"#大学-玩\" class=\"headerlink\" title=\"大学==玩?\"></a>大学==玩?</h2><p>至少在我小时候居住的环境下，都流行着一种不好的风气，就是高中好好念，上个好大学，在大学里就可以不用像高中那样拼命学习。正如我现在的导师所说，你现在努力过头，不给自己一个喘气的机会，你怎么保证自己可以一直这种状态工作下去呢？没错，现在很多小孩子，从小学，初中到高中，特别是高三，更是把自己的全部都豁了出去，就像这是自己一生中最后一次拼搏一样，有些努力的身体出毛病，有些则努力的自己的心理也开始扭曲。所以一旦毕了业，就会非常想好好休息休息，而因为之前拼搏太久，可能那三个月一点点的假期是远远不够的。所以自然而然，到了大学，我们开始追求自由的生活，不再那么努力，不再那么的看重学业，感觉自己的未来明朗清晰，把大学按部就班的读好，就可以找个好点的工作，然后开始自己的后半生。那么往往这样的结果是不好的。有句话说得好，出来混总有一天要还的。大学才是我们人生中最重要的时刻，你如何利用好你的大学时光，才能真正的决定你的未来。</p>\n<h2 id=\"大四的那点小事\"><a href=\"#大四的那点小事\" class=\"headerlink\" title=\"大四的那点小事\"></a>大四的那点小事</h2><p>西电软院，每年大三暑假都会安排一次实训，和一些软件公司合作，安排我们这些娃子去他们那里实习，实习的内容都是做一个模拟的项目，几个人一个小组进行正常的工作。我认为这是非常好的，甚至比有些自己找的实习机会更加的有帮助。如果在看这篇文章的同学正好是我校友而且也是软院的学生的话，如果你正在烦恼实习怎么办的话，强烈建议你不用花时间去找个自己不喜欢的单位，然后在那里面实习，而是参加学校安排的实训，重点不是看你去哪里实习，而是要看你在实习的时候做了什么。实训的时候如果你想着水过去，那么也就水过去了，因为毕竟只是实训，项目经理不会过来骂你，说你完成的不好，完成的不对。所以还是那句话，自己要严格要求自己。大三实训完接着就是大四的上半学期，各大公司都会过来学校校招，这是一个丰收自己的学习成果的阶段，机会都是留给有准备的人的。但是要进好公司，比如腾讯，阿里，那么你估计需要大量的努力和一点点好运。同时我也推荐你们能进到互联网公司而不是传统IT行业。虽然互联网公司对技术要求高，但是对你来说，可以算是一个很好的平台，站得越高，看得越远。</p>\n<h2 id=\"结束语\"><a href=\"#结束语\" class=\"headerlink\" title=\"结束语\"></a>结束语</h2><p>感觉自言自语的很久，也算是对自己的大学生活的学习过程有了一个小总结，日后可以自己看看.</p>\n"},{"title":"当你不得不在SpringBoot2中使用jedis的时候","date":"2019-08-15T04:14:50.000Z","_content":"\n# 1\n\n当我把上一个项目的代码功能模块,原封不动的移到某银行内网的一个小项目中去的时候,发现java7不支持使用Lettuce,爆了一大堆错(汗)\n\n看来Lettuce用了很多java8特性并且没有做兼容\n\n所以就google下, 最偷懒的方式就是改用jedis, 虽然它是线程不安全的, 但是自己封装点控制代码也无妨\n\n# 2\n\n> maven配置\n\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>io.lettuce</groupId>\n\t\t\t<artifactId>lettuce-core</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n</dependency>\n```\n\n**[注意]**: 建议用spring-boot-starter-data-redis, 因为看xml配置, spring-data-redis已经包含在starter里面了,别重复定义\n\n**[注意]**: 必须先移除lettuce依赖,不然会报错,感觉肯定是坑,因为官方给出的报错提示和解决方案根本不对应= =\n\n> 编程式配置\n\n```java\n@Bean\n    JedisConnectionFactory jedisConnectionFactory() {\n        RedisStandaloneConfiguration redisStandaloneConfiguration =\n                new RedisStandaloneConfiguration(hostName, port);\n        return new JedisConnectionFactory(redisStandaloneConfiguration);\n    }\n\n    @Bean\n    public RedisTemplate<String,Object> redisTemplate() {\n        RedisTemplate<String,Object>  template = new RedisTemplate<String,Object> ();\n        template.setConnectionFactory(jedisConnectionFactory());\n\n        //为RedisTemplate配置序列化策略,这样我就不用自己做序列化反序列化了\n\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\n        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper om = new ObjectMapper();\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jacksonSeial.setObjectMapper(om);\n\n        // 值采用json序列化\n        template.setValueSerializer(jacksonSeial);\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n\n        // 设置hash key 和value序列化模式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(jacksonSeial);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n```\n\n至于序列化,你可以自己搞,也可以像我这样交给RedisTemplate去搞,它有做封装,进行下配置即可(说实话配置有够多的= =)\n\n\n> 使用\n\n在test类中试试\n```java\n @Autowired\n    RedisTemplate<String, Object> redisTemplate;\n\n @Test\n public void testRedis() {\n     User userVo = new User();\n     userVo.setId(1);\n     userVo.setName(\"hello\");\n     ValueOperations<String, Object> operations = redisTemplate.opsForValue();\n     operations.set(\"user1\", userVo);\n\n    User cacheUser = (User) operations.get(\"user1\");\n    logger(cacheUser);\n }\n```\n\n# 3 参考\n\n[移除lettuce坑](https://www.concretepage.com/questions/599)\n[SpringBoot2中redis简单使用](https://www.devglan.com/spring-boot/spring-boot-redis-cache)\n[还算不错的redis使用分享贴,我部分代码直接摘抄了](https://www.cnblogs.com/superfj/p/9232482.html)","source":"_posts/spring-boot-2-0-use-jedis.md","raw":"---\ntitle: 当你不得不在SpringBoot2中使用jedis的时候\ntags: redis\ncategories: IT\ndate: 2019-08-15 12:14:50\n---\n\n# 1\n\n当我把上一个项目的代码功能模块,原封不动的移到某银行内网的一个小项目中去的时候,发现java7不支持使用Lettuce,爆了一大堆错(汗)\n\n看来Lettuce用了很多java8特性并且没有做兼容\n\n所以就google下, 最偷懒的方式就是改用jedis, 虽然它是线程不安全的, 但是自己封装点控制代码也无妨\n\n# 2\n\n> maven配置\n\n```\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>io.lettuce</groupId>\n\t\t\t<artifactId>lettuce-core</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n<dependency>\n\t<groupId>redis.clients</groupId>\n\t<artifactId>jedis</artifactId>\n</dependency>\n```\n\n**[注意]**: 建议用spring-boot-starter-data-redis, 因为看xml配置, spring-data-redis已经包含在starter里面了,别重复定义\n\n**[注意]**: 必须先移除lettuce依赖,不然会报错,感觉肯定是坑,因为官方给出的报错提示和解决方案根本不对应= =\n\n> 编程式配置\n\n```java\n@Bean\n    JedisConnectionFactory jedisConnectionFactory() {\n        RedisStandaloneConfiguration redisStandaloneConfiguration =\n                new RedisStandaloneConfiguration(hostName, port);\n        return new JedisConnectionFactory(redisStandaloneConfiguration);\n    }\n\n    @Bean\n    public RedisTemplate<String,Object> redisTemplate() {\n        RedisTemplate<String,Object>  template = new RedisTemplate<String,Object> ();\n        template.setConnectionFactory(jedisConnectionFactory());\n\n        //为RedisTemplate配置序列化策略,这样我就不用自己做序列化反序列化了\n\n        //使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）\n        Jackson2JsonRedisSerializer jacksonSeial = new Jackson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper om = new ObjectMapper();\n        // 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        // 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jacksonSeial.setObjectMapper(om);\n\n        // 值采用json序列化\n        template.setValueSerializer(jacksonSeial);\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n\n        // 设置hash key 和value序列化模式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(jacksonSeial);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n```\n\n至于序列化,你可以自己搞,也可以像我这样交给RedisTemplate去搞,它有做封装,进行下配置即可(说实话配置有够多的= =)\n\n\n> 使用\n\n在test类中试试\n```java\n @Autowired\n    RedisTemplate<String, Object> redisTemplate;\n\n @Test\n public void testRedis() {\n     User userVo = new User();\n     userVo.setId(1);\n     userVo.setName(\"hello\");\n     ValueOperations<String, Object> operations = redisTemplate.opsForValue();\n     operations.set(\"user1\", userVo);\n\n    User cacheUser = (User) operations.get(\"user1\");\n    logger(cacheUser);\n }\n```\n\n# 3 参考\n\n[移除lettuce坑](https://www.concretepage.com/questions/599)\n[SpringBoot2中redis简单使用](https://www.devglan.com/spring-boot/spring-boot-redis-cache)\n[还算不错的redis使用分享贴,我部分代码直接摘抄了](https://www.cnblogs.com/superfj/p/9232482.html)","slug":"spring-boot-2-0-use-jedis","published":1,"updated":"2019-08-15T04:36:01.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tt002wm6elrz3pyqx6","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>当我把上一个项目的代码功能模块,原封不动的移到某银行内网的一个小项目中去的时候,发现java7不支持使用Lettuce,爆了一大堆错(汗)</p>\n<p>看来Lettuce用了很多java8特性并且没有做兼容</p>\n<p>所以就google下, 最偷懒的方式就是改用jedis, 虽然它是线程不安全的, 但是自己封装点控制代码也无妨</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><blockquote>\n<p>maven配置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>[注意]</strong>: 建议用spring-boot-starter-data-redis, 因为看xml配置, spring-data-redis已经包含在starter里面了,别重复定义</p>\n<p><strong>[注意]</strong>: 必须先移除lettuce依赖,不然会报错,感觉肯定是坑,因为官方给出的报错提示和解决方案根本不对应= =</p>\n<blockquote>\n<p>编程式配置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">JedisConnectionFactory <span class=\"title\">jedisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisStandaloneConfiguration redisStandaloneConfiguration =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RedisStandaloneConfiguration(hostName, port);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JedisConnectionFactory(redisStandaloneConfiguration);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String,Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt;  template = <span class=\"keyword\">new</span> RedisTemplate&lt;String,Object&gt; ();</span><br><span class=\"line\">        template.setConnectionFactory(jedisConnectionFactory());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为RedisTemplate配置序列化策略,这样我就不用自己做序列化反序列化了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jacksonSeial = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        <span class=\"comment\">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jacksonSeial.setObjectMapper(om);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 值采用json序列化</span></span><br><span class=\"line\">        template.setValueSerializer(jacksonSeial);</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置hash key 和value序列化模式</span></span><br><span class=\"line\">        template.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">        template.setHashValueSerializer(jacksonSeial);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>至于序列化,你可以自己搞,也可以像我这样交给RedisTemplate去搞,它有做封装,进行下配置即可(说实话配置有够多的= =)</p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<p>在test类中试试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User userVo = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    userVo.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">    userVo.setName(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">    operations.set(<span class=\"string\">\"user1\"</span>, userVo);</span><br><span class=\"line\"></span><br><span class=\"line\">   User cacheUser = (User) operations.get(<span class=\"string\">\"user1\"</span>);</span><br><span class=\"line\">   logger(cacheUser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3 参考\"></a>3 参考</h1><p><a href=\"https://www.concretepage.com/questions/599\" target=\"_blank\" rel=\"noopener\">移除lettuce坑</a><br><a href=\"https://www.devglan.com/spring-boot/spring-boot-redis-cache\" target=\"_blank\" rel=\"noopener\">SpringBoot2中redis简单使用</a><br><a href=\"https://www.cnblogs.com/superfj/p/9232482.html\" target=\"_blank\" rel=\"noopener\">还算不错的redis使用分享贴,我部分代码直接摘抄了</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>当我把上一个项目的代码功能模块,原封不动的移到某银行内网的一个小项目中去的时候,发现java7不支持使用Lettuce,爆了一大堆错(汗)</p>\n<p>看来Lettuce用了很多java8特性并且没有做兼容</p>\n<p>所以就google下, 最偷懒的方式就是改用jedis, 虽然它是线程不安全的, 但是自己封装点控制代码也无妨</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><blockquote>\n<p>maven配置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;exclusions&gt;</span><br><span class=\"line\">\t\t&lt;exclusion&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;/exclusion&gt;</span><br><span class=\"line\">\t&lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>[注意]</strong>: 建议用spring-boot-starter-data-redis, 因为看xml配置, spring-data-redis已经包含在starter里面了,别重复定义</p>\n<p><strong>[注意]</strong>: 必须先移除lettuce依赖,不然会报错,感觉肯定是坑,因为官方给出的报错提示和解决方案根本不对应= =</p>\n<blockquote>\n<p>编程式配置</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">JedisConnectionFactory <span class=\"title\">jedisConnectionFactory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisStandaloneConfiguration redisStandaloneConfiguration =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> RedisStandaloneConfiguration(hostName, port);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JedisConnectionFactory(redisStandaloneConfiguration);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String,Object&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        RedisTemplate&lt;String,Object&gt;  template = <span class=\"keyword\">new</span> RedisTemplate&lt;String,Object&gt; ();</span><br><span class=\"line\">        template.setConnectionFactory(jedisConnectionFactory());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为RedisTemplate配置序列化策略,这样我就不用自己做序列化反序列化了</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer jacksonSeial = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span></span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        <span class=\"comment\">// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常</span></span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jacksonSeial.setObjectMapper(om);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 值采用json序列化</span></span><br><span class=\"line\">        template.setValueSerializer(jacksonSeial);</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class=\"line\">        template.setKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置hash key 和value序列化模式</span></span><br><span class=\"line\">        template.setHashKeySerializer(<span class=\"keyword\">new</span> StringRedisSerializer());</span><br><span class=\"line\">        template.setHashValueSerializer(jacksonSeial);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>至于序列化,你可以自己搞,也可以像我这样交给RedisTemplate去搞,它有做封装,进行下配置即可(说实话配置有够多的= =)</p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<p>在test类中试试<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">   RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRedis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User userVo = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    userVo.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">    userVo.setName(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    ValueOperations&lt;String, Object&gt; operations = redisTemplate.opsForValue();</span><br><span class=\"line\">    operations.set(<span class=\"string\">\"user1\"</span>, userVo);</span><br><span class=\"line\"></span><br><span class=\"line\">   User cacheUser = (User) operations.get(<span class=\"string\">\"user1\"</span>);</span><br><span class=\"line\">   logger(cacheUser);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3-参考\"><a href=\"#3-参考\" class=\"headerlink\" title=\"3 参考\"></a>3 参考</h1><p><a href=\"https://www.concretepage.com/questions/599\" target=\"_blank\" rel=\"noopener\">移除lettuce坑</a><br><a href=\"https://www.devglan.com/spring-boot/spring-boot-redis-cache\" target=\"_blank\" rel=\"noopener\">SpringBoot2中redis简单使用</a><br><a href=\"https://www.cnblogs.com/superfj/p/9232482.html\" target=\"_blank\" rel=\"noopener\">还算不错的redis使用分享贴,我部分代码直接摘抄了</a></p>\n"},{"title":"傻子也能理解的并发编程中的原子性(Java)","date":"2019-06-11T14:10:48.000Z","_content":"\n\n# 1\n\n线程A对变量a和b在进行如下操作：`读取A-读取B-修改A-修改B-写入A-写入B`\n\n线程B也同样的可以对变量a和b进行上述操作\n\n当线程A进行到`写入A`的时候，线程B是个急性子，抢占线程A，率先执行了`读取B`。\n\n这个过程就是一种线程安全问题的一种通俗解释。\n\n完成`读取A-读取B-修改A-修改B-写入A-写入B`这个段功能的程序在单线程下是正确的，在多线程下就因为不是`原子性`的导致其功能不正常，有时候产生非常异常的结果\n\n# 2\n\n如果线程A可以在一瞬间完成`读取A-读取B-修改A-修改B-写入A-写入B`这个过程，那么线程B就不会读取错误的b变量的数据。\n\n这种可以让线程A“一口气”完成不会被别人打断的过程，就是符合`原子性`的一个过程\n\n这就是`原子性`\n\n# 3\n\n但是把所有java代码都弄成`原子性`那肯定是不可能的，计算机一个时间内能处理的东西永远是有限的。如果没法达到`原子性`那么我们就必须使用一种策略去让这个过程看上去是符合`原子性`的。这个策略最简单的就是控制代码的执行顺序，我们只需要控制线程B会在A完成`读取A-读取B-修改A-修改B-写入A-写入B`之后才会执行读取代码，这样就保证了线程安全问题不会发生了。所以有了`加锁机制`\n\n# 4\n\n我刚刚阐述了`读取A-读取B-修改A-修改B-写入A-写入B`这个过程，必须是原子性的才能保证线程安全。\n\n现在我们在具体一点，假设`读取A`和`读取B`以及后面的每个小操作都是原子性的，比如AtomicLong这些原子类的修改操作，它们本身的crud操作是原子的。\n\n每个小操作都符合`原子性`是不是代表了这整个构成是符合`原子性`了呢？\n\n显然不是\n\n它仍然会产生线程安全问题，比如在`修改A`完成以后，失去操作原子性，所以线程B也开始执行`读取B`操作了。总之不要以为使用了线程安全类，你的所有代码就都是线程安全的！这总归都要去审查你代码的整体原子性出发的。就比如下面的例子：\n\n<img src=\"/images/tmpImage/原子性_1.png\">\n\n虽然它全部用了原子类来进行操作，但是各个操作之间不是原子性的，也就是说比如线程A在执行else语句里的`lastNumber.set(i)`完后，也许其他线程执行了if语句里的`lastFactorys.get()`方法，随后线程A才继续执行`lastFactors.set(factors)`方法更新factors！\n\n从这个逻辑过程中，线程安全问题就已经发生了。它破坏了`读取A-读取B-修改A-修改B-写入A-写入B`这个整体过程，在`写入A`完成以后其他线程去执行了`读取B`，导致A和B的状态不匹配了！真的是场大灾难！\n\n# 5\n\n本小节用了实例来讲述了`原子性`，从术语上直接解释什么是`原子性`是非常困难的，但是从这些示例里来说就会变的非常清晰\n","source":"_posts/并发编程中的原子性.md","raw":"---\ntitle: 傻子也能理解的并发编程中的原子性(Java)\ntags: java\ncategories: IT\ndate: 2019-06-11 22:10:48\n---\n\n\n# 1\n\n线程A对变量a和b在进行如下操作：`读取A-读取B-修改A-修改B-写入A-写入B`\n\n线程B也同样的可以对变量a和b进行上述操作\n\n当线程A进行到`写入A`的时候，线程B是个急性子，抢占线程A，率先执行了`读取B`。\n\n这个过程就是一种线程安全问题的一种通俗解释。\n\n完成`读取A-读取B-修改A-修改B-写入A-写入B`这个段功能的程序在单线程下是正确的，在多线程下就因为不是`原子性`的导致其功能不正常，有时候产生非常异常的结果\n\n# 2\n\n如果线程A可以在一瞬间完成`读取A-读取B-修改A-修改B-写入A-写入B`这个过程，那么线程B就不会读取错误的b变量的数据。\n\n这种可以让线程A“一口气”完成不会被别人打断的过程，就是符合`原子性`的一个过程\n\n这就是`原子性`\n\n# 3\n\n但是把所有java代码都弄成`原子性`那肯定是不可能的，计算机一个时间内能处理的东西永远是有限的。如果没法达到`原子性`那么我们就必须使用一种策略去让这个过程看上去是符合`原子性`的。这个策略最简单的就是控制代码的执行顺序，我们只需要控制线程B会在A完成`读取A-读取B-修改A-修改B-写入A-写入B`之后才会执行读取代码，这样就保证了线程安全问题不会发生了。所以有了`加锁机制`\n\n# 4\n\n我刚刚阐述了`读取A-读取B-修改A-修改B-写入A-写入B`这个过程，必须是原子性的才能保证线程安全。\n\n现在我们在具体一点，假设`读取A`和`读取B`以及后面的每个小操作都是原子性的，比如AtomicLong这些原子类的修改操作，它们本身的crud操作是原子的。\n\n每个小操作都符合`原子性`是不是代表了这整个构成是符合`原子性`了呢？\n\n显然不是\n\n它仍然会产生线程安全问题，比如在`修改A`完成以后，失去操作原子性，所以线程B也开始执行`读取B`操作了。总之不要以为使用了线程安全类，你的所有代码就都是线程安全的！这总归都要去审查你代码的整体原子性出发的。就比如下面的例子：\n\n<img src=\"/images/tmpImage/原子性_1.png\">\n\n虽然它全部用了原子类来进行操作，但是各个操作之间不是原子性的，也就是说比如线程A在执行else语句里的`lastNumber.set(i)`完后，也许其他线程执行了if语句里的`lastFactorys.get()`方法，随后线程A才继续执行`lastFactors.set(factors)`方法更新factors！\n\n从这个逻辑过程中，线程安全问题就已经发生了。它破坏了`读取A-读取B-修改A-修改B-写入A-写入B`这个整体过程，在`写入A`完成以后其他线程去执行了`读取B`，导致A和B的状态不匹配了！真的是场大灾难！\n\n# 5\n\n本小节用了实例来讲述了`原子性`，从术语上直接解释什么是`原子性`是非常困难的，但是从这些示例里来说就会变的非常清晰\n","slug":"并发编程中的原子性","published":1,"updated":"2019-06-11T14:25:59.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tu002zm6el4nurhhrv","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>线程A对变量a和b在进行如下操作：<code>读取A-读取B-修改A-修改B-写入A-写入B</code></p>\n<p>线程B也同样的可以对变量a和b进行上述操作</p>\n<p>当线程A进行到<code>写入A</code>的时候，线程B是个急性子，抢占线程A，率先执行了<code>读取B</code>。</p>\n<p>这个过程就是一种线程安全问题的一种通俗解释。</p>\n<p>完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个段功能的程序在单线程下是正确的，在多线程下就因为不是<code>原子性</code>的导致其功能不正常，有时候产生非常异常的结果</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>如果线程A可以在一瞬间完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个过程，那么线程B就不会读取错误的b变量的数据。</p>\n<p>这种可以让线程A“一口气”完成不会被别人打断的过程，就是符合<code>原子性</code>的一个过程</p>\n<p>这就是<code>原子性</code></p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>但是把所有java代码都弄成<code>原子性</code>那肯定是不可能的，计算机一个时间内能处理的东西永远是有限的。如果没法达到<code>原子性</code>那么我们就必须使用一种策略去让这个过程看上去是符合<code>原子性</code>的。这个策略最简单的就是控制代码的执行顺序，我们只需要控制线程B会在A完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>之后才会执行读取代码，这样就保证了线程安全问题不会发生了。所以有了<code>加锁机制</code></p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>我刚刚阐述了<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个过程，必须是原子性的才能保证线程安全。</p>\n<p>现在我们在具体一点，假设<code>读取A</code>和<code>读取B</code>以及后面的每个小操作都是原子性的，比如AtomicLong这些原子类的修改操作，它们本身的crud操作是原子的。</p>\n<p>每个小操作都符合<code>原子性</code>是不是代表了这整个构成是符合<code>原子性</code>了呢？</p>\n<p>显然不是</p>\n<p>它仍然会产生线程安全问题，比如在<code>修改A</code>完成以后，失去操作原子性，所以线程B也开始执行<code>读取B</code>操作了。总之不要以为使用了线程安全类，你的所有代码就都是线程安全的！这总归都要去审查你代码的整体原子性出发的。就比如下面的例子：</p>\n<p><img src=\"/images/tmpImage/原子性_1.png\"></p>\n<p>虽然它全部用了原子类来进行操作，但是各个操作之间不是原子性的，也就是说比如线程A在执行else语句里的<code>lastNumber.set(i)</code>完后，也许其他线程执行了if语句里的<code>lastFactorys.get()</code>方法，随后线程A才继续执行<code>lastFactors.set(factors)</code>方法更新factors！</p>\n<p>从这个逻辑过程中，线程安全问题就已经发生了。它破坏了<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个整体过程，在<code>写入A</code>完成以后其他线程去执行了<code>读取B</code>，导致A和B的状态不匹配了！真的是场大灾难！</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>本小节用了实例来讲述了<code>原子性</code>，从术语上直接解释什么是<code>原子性</code>是非常困难的，但是从这些示例里来说就会变的非常清晰</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>线程A对变量a和b在进行如下操作：<code>读取A-读取B-修改A-修改B-写入A-写入B</code></p>\n<p>线程B也同样的可以对变量a和b进行上述操作</p>\n<p>当线程A进行到<code>写入A</code>的时候，线程B是个急性子，抢占线程A，率先执行了<code>读取B</code>。</p>\n<p>这个过程就是一种线程安全问题的一种通俗解释。</p>\n<p>完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个段功能的程序在单线程下是正确的，在多线程下就因为不是<code>原子性</code>的导致其功能不正常，有时候产生非常异常的结果</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>如果线程A可以在一瞬间完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个过程，那么线程B就不会读取错误的b变量的数据。</p>\n<p>这种可以让线程A“一口气”完成不会被别人打断的过程，就是符合<code>原子性</code>的一个过程</p>\n<p>这就是<code>原子性</code></p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>但是把所有java代码都弄成<code>原子性</code>那肯定是不可能的，计算机一个时间内能处理的东西永远是有限的。如果没法达到<code>原子性</code>那么我们就必须使用一种策略去让这个过程看上去是符合<code>原子性</code>的。这个策略最简单的就是控制代码的执行顺序，我们只需要控制线程B会在A完成<code>读取A-读取B-修改A-修改B-写入A-写入B</code>之后才会执行读取代码，这样就保证了线程安全问题不会发生了。所以有了<code>加锁机制</code></p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>我刚刚阐述了<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个过程，必须是原子性的才能保证线程安全。</p>\n<p>现在我们在具体一点，假设<code>读取A</code>和<code>读取B</code>以及后面的每个小操作都是原子性的，比如AtomicLong这些原子类的修改操作，它们本身的crud操作是原子的。</p>\n<p>每个小操作都符合<code>原子性</code>是不是代表了这整个构成是符合<code>原子性</code>了呢？</p>\n<p>显然不是</p>\n<p>它仍然会产生线程安全问题，比如在<code>修改A</code>完成以后，失去操作原子性，所以线程B也开始执行<code>读取B</code>操作了。总之不要以为使用了线程安全类，你的所有代码就都是线程安全的！这总归都要去审查你代码的整体原子性出发的。就比如下面的例子：</p>\n<p><img src=\"/images/tmpImage/原子性_1.png\"></p>\n<p>虽然它全部用了原子类来进行操作，但是各个操作之间不是原子性的，也就是说比如线程A在执行else语句里的<code>lastNumber.set(i)</code>完后，也许其他线程执行了if语句里的<code>lastFactorys.get()</code>方法，随后线程A才继续执行<code>lastFactors.set(factors)</code>方法更新factors！</p>\n<p>从这个逻辑过程中，线程安全问题就已经发生了。它破坏了<code>读取A-读取B-修改A-修改B-写入A-写入B</code>这个整体过程，在<code>写入A</code>完成以后其他线程去执行了<code>读取B</code>，导致A和B的状态不匹配了！真的是场大灾难！</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>本小节用了实例来讲述了<code>原子性</code>，从术语上直接解释什么是<code>原子性</code>是非常困难的，但是从这些示例里来说就会变的非常清晰</p>\n"},{"title":"自由软件许可证杂谈","date":"2019-04-24T05:54:41.000Z","_content":"\n昨天刚回浙江老家，在家里闷着无聊的时候，无意间瞄到了shadowsocks的Apache自由软件许可证，一时觉得很好奇，脑海里没有这方面的了解，就开始在网上看起了这方面的知识。于是乎是到了该总结的时候了。\n\n我仅会在此文章讨论下计算机软件的相关话题，即不会讨论别的事物的版权等问题，顶多会用别的东西来做个比方。\n\n### 还是从copyright说起\n---\n\n在我国，copyright就是著作权或者说版权的象征<sup id=\"fnref:freesw-1\"><a class=\"footnote-ref\" href=\"#fn:freesw-1\" rel=\"footnote\">1</a></sup>，比如小说，音乐，美术，甚至配音作品（cv一般都是在一个事务所下工作的，所以很多cv的配音版权可能都是归属于一个事务所里，但是这个是纯属我自己的猜测，我暂时也不想再上网去看看有关这方面的知识，我只知道必须一个cv配一个角色，那么除非这个cv无法继续进行配音工作，不然不能让别的cv来代役）\n\n你也许觉得你的作品如果不发表到公共领域就不会受到著作权的保护，其实不然。其实只要你完成了一个作品，并且具有独创性，那么你就享有者著作权的保护。\n\n我们经常可以在一些网站的底部看到copyright xxxx-xxxx by xxx .这些字样就表明了作者在声明自己的著作权，同时如果你再不经过作者同意的情况下对作品进行转发，分发，修改或者销售，就会受到法律的制裁。\n\n一般来说一个拥有著作权的作者有权对自己的作品如果用语商业用途后对要使用自己作品的商人收取部分著作费。这些费用是支持和鼓励作者保持一个良好的创造力的方法。毕竟人都是这样，有奖励才会有动力继续做。（做自己喜欢的事情，本身就是一种奖励，所以我们都喜欢无私的为自己喜欢的事情做贡献）\n\n那么为什么还会有copyleft机制呢？如果说copyright是为了使得人类的创造力能够源远流长，不会乱流，那么copyleft的出现岂不是“助纣为虐”，帮助那些非法使用者们非法的使用别人辛辛苦苦的制作出来的作品。\n\n### copyleft和free software\n---\n\n其实copyleft的出现是和“自由软件”<sup id=\"fnref:freesw-2\"><a class=\"footnote-ref\" href=\"#fn:freesw-2\" rel=\"footnote\">2</a></sup>息息相关的。现在我们可能见到的比较多的就是“开源”“open source”这样的字样，比如我们的android系统就是（部分）开源系统，有很多大牛投入其中，并且研究出了很多类似android的衍生系统。\n\n软件是开源的，代表我们可以阅读源代码，但其实并不意味了我们可以对其进行任意的修改，复制，或者用着其他用途，开源的软件，依然享有著作权，你可以看到大大的copyright声明贴在最下方，或者一个项目的项目说明书之类的地方。\n\n那么，我说的自由软件和copyleft的关系呢？其实copyleft就是专门为自由软件而存在的。“自由软件”其实就是不仅“开源”而且“do what you want to do！”。可能说成做任意你想做的说法不是很合适，至于为什么不是很合适，我会在下文继续说明。\n\n是copyleft的软件，那么就是自由软件，您可以在获取这个软件后，对该软件进行任意的修改，分发，或者改进软件后使其变成更优秀的软件，但是你必须要让这个派生作品也是一个copyleft的软件，即自由软件，不能让其变成一个私有软件或者专有软件从而让使用这软件的人们感觉不自由，或者处于不自由的状态。\n\n如果说一个软件不是一个自由软件，那么也许就会像一个垄断一样，全世界只有你一个公司知道这个软件的源代码，你的用户对你的软件会产生极大的依赖性，从而导致你可以任意收取你想要的费用，使得你的财产越做越大！\n\n但是如果说全世界只剩下私有软件或者专有软件，那么我们作为用户的权利就会微乎其微，因为用户无法知道自己所使用的软件，是否在正确的工作。（我相信在看的读者，一定看到过一些恶意软件的新闻，比如在后台自动收集该台电脑的各项记录或者数据等，这种在背后做的恶意软件的产生和肆意妄为，都是因为用户对源代码的未知）\n\n从上述观点中，我们不难看出，如果赋予一个软件copyleft，那么这个软件就会是安全的，而且是可以健康成长的！而不会使得这个软件被不正当的人群拿去使坏，除非他们不怕坐牢。\n\n不过我们也从前面的讨论中发现，也许只是一个copyright或者copyleft无法适应软件的各方面变化需求，比如你有一个copyleft的软件，但是却希望别的人可以拿去自由使用，甚至可以拿去使用做商业用途或者做出闭源这样的做法。一般来说，用户可以通过询问作者，来获取这方面的权限，但是如果用户多，问得多，就会对作者的生活感到很大的困扰。所以就有了自由软件许可证书。目前有很多自由软件许可证书，比如GNU GPL，GNU LGPL，BSD，MIT，Apache许可证等。不同的许可证有不同的对该自由软件的要求。不过关于自由开源许可证的内容，我放到下一节来讲\n\n### 自由开源许可证\n---\n\n其实copyleft的创始人也是GNU项目的创始人，所以GNU的证书都是copyleft的，和Apache开源许可证一对比，最大的差别就是，GNU GPL等证书用户修改后不能闭源，要继续保持开源，即继续作为一个自由软件为社区社会作出贡献。\n\n你能看到现在的很多软件，都会有一个copyright说明，同时还有一个自由开源许可证的保护。copyright保护了作者的著作权，而自由开源许可证则保护了软件的自由。如果一个软件没有说明自己是基于哪个自由开源许可证的，那么该软件就是基于我们的著作权保护法，你不能随意对作品进行复制，分发，修改或者改进。自由开源许可证就像是软件的保护法，保护着软件的各项行为。\n\n而关于各类许可证的作用，在网上则有很多说明文档，我这里就不重复赘述，但是也并无妨碍我说一下很常见的许可证，比如Apache自由开源许可证。这个许可证的要求是很低的，它不要求修改后的源代码必须开源，但是它要求修改过的文件，必须放置版权说明。\n\n### 尾语\n\n我估摸着想讲的好像都已经讲完了。我写这篇文章的目的主要还是在于，防止自己再未来看到许可证的时候不会一脸呆滞，至少我了解过这方面的知识，我知道这些许可证和版权的区别！\n\n---\n<li id=\"fn:freesw-1\" />[1]可参见https://en.wikipedia.org/wiki/Copyright<a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\">&#8617;</a>\n<li id=\"fn:freesw-2\" />[2]可参见https://fsfs-zh.readthedocs.io/zh/latest/<a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\">&#8617;</a>","source":"_posts/自由软件许可证杂谈.md","raw":"---\ntitle: 自由软件许可证杂谈\ntags: Bugs\ncategories: 计算机\ndate: 2019-04-24 13:54:41\n---\n\n昨天刚回浙江老家，在家里闷着无聊的时候，无意间瞄到了shadowsocks的Apache自由软件许可证，一时觉得很好奇，脑海里没有这方面的了解，就开始在网上看起了这方面的知识。于是乎是到了该总结的时候了。\n\n我仅会在此文章讨论下计算机软件的相关话题，即不会讨论别的事物的版权等问题，顶多会用别的东西来做个比方。\n\n### 还是从copyright说起\n---\n\n在我国，copyright就是著作权或者说版权的象征<sup id=\"fnref:freesw-1\"><a class=\"footnote-ref\" href=\"#fn:freesw-1\" rel=\"footnote\">1</a></sup>，比如小说，音乐，美术，甚至配音作品（cv一般都是在一个事务所下工作的，所以很多cv的配音版权可能都是归属于一个事务所里，但是这个是纯属我自己的猜测，我暂时也不想再上网去看看有关这方面的知识，我只知道必须一个cv配一个角色，那么除非这个cv无法继续进行配音工作，不然不能让别的cv来代役）\n\n你也许觉得你的作品如果不发表到公共领域就不会受到著作权的保护，其实不然。其实只要你完成了一个作品，并且具有独创性，那么你就享有者著作权的保护。\n\n我们经常可以在一些网站的底部看到copyright xxxx-xxxx by xxx .这些字样就表明了作者在声明自己的著作权，同时如果你再不经过作者同意的情况下对作品进行转发，分发，修改或者销售，就会受到法律的制裁。\n\n一般来说一个拥有著作权的作者有权对自己的作品如果用语商业用途后对要使用自己作品的商人收取部分著作费。这些费用是支持和鼓励作者保持一个良好的创造力的方法。毕竟人都是这样，有奖励才会有动力继续做。（做自己喜欢的事情，本身就是一种奖励，所以我们都喜欢无私的为自己喜欢的事情做贡献）\n\n那么为什么还会有copyleft机制呢？如果说copyright是为了使得人类的创造力能够源远流长，不会乱流，那么copyleft的出现岂不是“助纣为虐”，帮助那些非法使用者们非法的使用别人辛辛苦苦的制作出来的作品。\n\n### copyleft和free software\n---\n\n其实copyleft的出现是和“自由软件”<sup id=\"fnref:freesw-2\"><a class=\"footnote-ref\" href=\"#fn:freesw-2\" rel=\"footnote\">2</a></sup>息息相关的。现在我们可能见到的比较多的就是“开源”“open source”这样的字样，比如我们的android系统就是（部分）开源系统，有很多大牛投入其中，并且研究出了很多类似android的衍生系统。\n\n软件是开源的，代表我们可以阅读源代码，但其实并不意味了我们可以对其进行任意的修改，复制，或者用着其他用途，开源的软件，依然享有著作权，你可以看到大大的copyright声明贴在最下方，或者一个项目的项目说明书之类的地方。\n\n那么，我说的自由软件和copyleft的关系呢？其实copyleft就是专门为自由软件而存在的。“自由软件”其实就是不仅“开源”而且“do what you want to do！”。可能说成做任意你想做的说法不是很合适，至于为什么不是很合适，我会在下文继续说明。\n\n是copyleft的软件，那么就是自由软件，您可以在获取这个软件后，对该软件进行任意的修改，分发，或者改进软件后使其变成更优秀的软件，但是你必须要让这个派生作品也是一个copyleft的软件，即自由软件，不能让其变成一个私有软件或者专有软件从而让使用这软件的人们感觉不自由，或者处于不自由的状态。\n\n如果说一个软件不是一个自由软件，那么也许就会像一个垄断一样，全世界只有你一个公司知道这个软件的源代码，你的用户对你的软件会产生极大的依赖性，从而导致你可以任意收取你想要的费用，使得你的财产越做越大！\n\n但是如果说全世界只剩下私有软件或者专有软件，那么我们作为用户的权利就会微乎其微，因为用户无法知道自己所使用的软件，是否在正确的工作。（我相信在看的读者，一定看到过一些恶意软件的新闻，比如在后台自动收集该台电脑的各项记录或者数据等，这种在背后做的恶意软件的产生和肆意妄为，都是因为用户对源代码的未知）\n\n从上述观点中，我们不难看出，如果赋予一个软件copyleft，那么这个软件就会是安全的，而且是可以健康成长的！而不会使得这个软件被不正当的人群拿去使坏，除非他们不怕坐牢。\n\n不过我们也从前面的讨论中发现，也许只是一个copyright或者copyleft无法适应软件的各方面变化需求，比如你有一个copyleft的软件，但是却希望别的人可以拿去自由使用，甚至可以拿去使用做商业用途或者做出闭源这样的做法。一般来说，用户可以通过询问作者，来获取这方面的权限，但是如果用户多，问得多，就会对作者的生活感到很大的困扰。所以就有了自由软件许可证书。目前有很多自由软件许可证书，比如GNU GPL，GNU LGPL，BSD，MIT，Apache许可证等。不同的许可证有不同的对该自由软件的要求。不过关于自由开源许可证的内容，我放到下一节来讲\n\n### 自由开源许可证\n---\n\n其实copyleft的创始人也是GNU项目的创始人，所以GNU的证书都是copyleft的，和Apache开源许可证一对比，最大的差别就是，GNU GPL等证书用户修改后不能闭源，要继续保持开源，即继续作为一个自由软件为社区社会作出贡献。\n\n你能看到现在的很多软件，都会有一个copyright说明，同时还有一个自由开源许可证的保护。copyright保护了作者的著作权，而自由开源许可证则保护了软件的自由。如果一个软件没有说明自己是基于哪个自由开源许可证的，那么该软件就是基于我们的著作权保护法，你不能随意对作品进行复制，分发，修改或者改进。自由开源许可证就像是软件的保护法，保护着软件的各项行为。\n\n而关于各类许可证的作用，在网上则有很多说明文档，我这里就不重复赘述，但是也并无妨碍我说一下很常见的许可证，比如Apache自由开源许可证。这个许可证的要求是很低的，它不要求修改后的源代码必须开源，但是它要求修改过的文件，必须放置版权说明。\n\n### 尾语\n\n我估摸着想讲的好像都已经讲完了。我写这篇文章的目的主要还是在于，防止自己再未来看到许可证的时候不会一脸呆滞，至少我了解过这方面的知识，我知道这些许可证和版权的区别！\n\n---\n<li id=\"fn:freesw-1\" />[1]可参见https://en.wikipedia.org/wiki/Copyright<a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\">&#8617;</a>\n<li id=\"fn:freesw-2\" />[2]可参见https://fsfs-zh.readthedocs.io/zh/latest/<a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\">&#8617;</a>","slug":"自由软件许可证杂谈","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tv0032m6elw0jzicaq","content":"<p>昨天刚回浙江老家，在家里闷着无聊的时候，无意间瞄到了shadowsocks的Apache自由软件许可证，一时觉得很好奇，脑海里没有这方面的了解，就开始在网上看起了这方面的知识。于是乎是到了该总结的时候了。</p>\n<p>我仅会在此文章讨论下计算机软件的相关话题，即不会讨论别的事物的版权等问题，顶多会用别的东西来做个比方。</p>\n<h3 id=\"还是从copyright说起\"><a href=\"#还是从copyright说起\" class=\"headerlink\" title=\"还是从copyright说起\"></a>还是从copyright说起</h3><hr>\n<p>在我国，copyright就是著作权或者说版权的象征<sup id=\"fnref:freesw-1\"><a class=\"footnote-ref\" href=\"#fn:freesw-1\" rel=\"footnote\">1</a></sup>，比如小说，音乐，美术，甚至配音作品（cv一般都是在一个事务所下工作的，所以很多cv的配音版权可能都是归属于一个事务所里，但是这个是纯属我自己的猜测，我暂时也不想再上网去看看有关这方面的知识，我只知道必须一个cv配一个角色，那么除非这个cv无法继续进行配音工作，不然不能让别的cv来代役）</p>\n<p>你也许觉得你的作品如果不发表到公共领域就不会受到著作权的保护，其实不然。其实只要你完成了一个作品，并且具有独创性，那么你就享有者著作权的保护。</p>\n<p>我们经常可以在一些网站的底部看到copyright xxxx-xxxx by xxx .这些字样就表明了作者在声明自己的著作权，同时如果你再不经过作者同意的情况下对作品进行转发，分发，修改或者销售，就会受到法律的制裁。</p>\n<p>一般来说一个拥有著作权的作者有权对自己的作品如果用语商业用途后对要使用自己作品的商人收取部分著作费。这些费用是支持和鼓励作者保持一个良好的创造力的方法。毕竟人都是这样，有奖励才会有动力继续做。（做自己喜欢的事情，本身就是一种奖励，所以我们都喜欢无私的为自己喜欢的事情做贡献）</p>\n<p>那么为什么还会有copyleft机制呢？如果说copyright是为了使得人类的创造力能够源远流长，不会乱流，那么copyleft的出现岂不是“助纣为虐”，帮助那些非法使用者们非法的使用别人辛辛苦苦的制作出来的作品。</p>\n<h3 id=\"copyleft和free-software\"><a href=\"#copyleft和free-software\" class=\"headerlink\" title=\"copyleft和free software\"></a>copyleft和free software</h3><hr>\n<p>其实copyleft的出现是和“自由软件”<sup id=\"fnref:freesw-2\"><a class=\"footnote-ref\" href=\"#fn:freesw-2\" rel=\"footnote\">2</a></sup>息息相关的。现在我们可能见到的比较多的就是“开源”“open source”这样的字样，比如我们的android系统就是（部分）开源系统，有很多大牛投入其中，并且研究出了很多类似android的衍生系统。</p>\n<p>软件是开源的，代表我们可以阅读源代码，但其实并不意味了我们可以对其进行任意的修改，复制，或者用着其他用途，开源的软件，依然享有著作权，你可以看到大大的copyright声明贴在最下方，或者一个项目的项目说明书之类的地方。</p>\n<p>那么，我说的自由软件和copyleft的关系呢？其实copyleft就是专门为自由软件而存在的。“自由软件”其实就是不仅“开源”而且“do what you want to do！”。可能说成做任意你想做的说法不是很合适，至于为什么不是很合适，我会在下文继续说明。</p>\n<p>是copyleft的软件，那么就是自由软件，您可以在获取这个软件后，对该软件进行任意的修改，分发，或者改进软件后使其变成更优秀的软件，但是你必须要让这个派生作品也是一个copyleft的软件，即自由软件，不能让其变成一个私有软件或者专有软件从而让使用这软件的人们感觉不自由，或者处于不自由的状态。</p>\n<p>如果说一个软件不是一个自由软件，那么也许就会像一个垄断一样，全世界只有你一个公司知道这个软件的源代码，你的用户对你的软件会产生极大的依赖性，从而导致你可以任意收取你想要的费用，使得你的财产越做越大！</p>\n<p>但是如果说全世界只剩下私有软件或者专有软件，那么我们作为用户的权利就会微乎其微，因为用户无法知道自己所使用的软件，是否在正确的工作。（我相信在看的读者，一定看到过一些恶意软件的新闻，比如在后台自动收集该台电脑的各项记录或者数据等，这种在背后做的恶意软件的产生和肆意妄为，都是因为用户对源代码的未知）</p>\n<p>从上述观点中，我们不难看出，如果赋予一个软件copyleft，那么这个软件就会是安全的，而且是可以健康成长的！而不会使得这个软件被不正当的人群拿去使坏，除非他们不怕坐牢。</p>\n<p>不过我们也从前面的讨论中发现，也许只是一个copyright或者copyleft无法适应软件的各方面变化需求，比如你有一个copyleft的软件，但是却希望别的人可以拿去自由使用，甚至可以拿去使用做商业用途或者做出闭源这样的做法。一般来说，用户可以通过询问作者，来获取这方面的权限，但是如果用户多，问得多，就会对作者的生活感到很大的困扰。所以就有了自由软件许可证书。目前有很多自由软件许可证书，比如GNU GPL，GNU LGPL，BSD，MIT，Apache许可证等。不同的许可证有不同的对该自由软件的要求。不过关于自由开源许可证的内容，我放到下一节来讲</p>\n<h3 id=\"自由开源许可证\"><a href=\"#自由开源许可证\" class=\"headerlink\" title=\"自由开源许可证\"></a>自由开源许可证</h3><hr>\n<p>其实copyleft的创始人也是GNU项目的创始人，所以GNU的证书都是copyleft的，和Apache开源许可证一对比，最大的差别就是，GNU GPL等证书用户修改后不能闭源，要继续保持开源，即继续作为一个自由软件为社区社会作出贡献。</p>\n<p>你能看到现在的很多软件，都会有一个copyright说明，同时还有一个自由开源许可证的保护。copyright保护了作者的著作权，而自由开源许可证则保护了软件的自由。如果一个软件没有说明自己是基于哪个自由开源许可证的，那么该软件就是基于我们的著作权保护法，你不能随意对作品进行复制，分发，修改或者改进。自由开源许可证就像是软件的保护法，保护着软件的各项行为。</p>\n<p>而关于各类许可证的作用，在网上则有很多说明文档，我这里就不重复赘述，但是也并无妨碍我说一下很常见的许可证，比如Apache自由开源许可证。这个许可证的要求是很低的，它不要求修改后的源代码必须开源，但是它要求修改过的文件，必须放置版权说明。</p>\n<h3 id=\"尾语\"><a href=\"#尾语\" class=\"headerlink\" title=\"尾语\"></a>尾语</h3><p>我估摸着想讲的好像都已经讲完了。我写这篇文章的目的主要还是在于，防止自己再未来看到许可证的时候不会一脸呆滞，至少我了解过这方面的知识，我知道这些许可证和版权的区别！</p>\n<hr>\n<p><li id=\"fn:freesw-1\">[1]可参见<a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Copyright</a><a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\">&#8617;</a></li></p>\n<p><li id=\"fn:freesw-2\">[2]可参见<a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">https://fsfs-zh.readthedocs.io/zh/latest/</a><a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\">&#8617;</a></li></p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天刚回浙江老家，在家里闷着无聊的时候，无意间瞄到了shadowsocks的Apache自由软件许可证，一时觉得很好奇，脑海里没有这方面的了解，就开始在网上看起了这方面的知识。于是乎是到了该总结的时候了。</p>\n<p>我仅会在此文章讨论下计算机软件的相关话题，即不会讨论别的事物的版权等问题，顶多会用别的东西来做个比方。</p>\n<h3 id=\"还是从copyright说起\"><a href=\"#还是从copyright说起\" class=\"headerlink\" title=\"还是从copyright说起\"></a>还是从copyright说起</h3><hr>\n<p>在我国，copyright就是著作权或者说版权的象征<sup id=\"fnref:freesw-1\"><a class=\"footnote-ref\" href=\"#fn:freesw-1\" rel=\"footnote\">1</a></sup>，比如小说，音乐，美术，甚至配音作品（cv一般都是在一个事务所下工作的，所以很多cv的配音版权可能都是归属于一个事务所里，但是这个是纯属我自己的猜测，我暂时也不想再上网去看看有关这方面的知识，我只知道必须一个cv配一个角色，那么除非这个cv无法继续进行配音工作，不然不能让别的cv来代役）</p>\n<p>你也许觉得你的作品如果不发表到公共领域就不会受到著作权的保护，其实不然。其实只要你完成了一个作品，并且具有独创性，那么你就享有者著作权的保护。</p>\n<p>我们经常可以在一些网站的底部看到copyright xxxx-xxxx by xxx .这些字样就表明了作者在声明自己的著作权，同时如果你再不经过作者同意的情况下对作品进行转发，分发，修改或者销售，就会受到法律的制裁。</p>\n<p>一般来说一个拥有著作权的作者有权对自己的作品如果用语商业用途后对要使用自己作品的商人收取部分著作费。这些费用是支持和鼓励作者保持一个良好的创造力的方法。毕竟人都是这样，有奖励才会有动力继续做。（做自己喜欢的事情，本身就是一种奖励，所以我们都喜欢无私的为自己喜欢的事情做贡献）</p>\n<p>那么为什么还会有copyleft机制呢？如果说copyright是为了使得人类的创造力能够源远流长，不会乱流，那么copyleft的出现岂不是“助纣为虐”，帮助那些非法使用者们非法的使用别人辛辛苦苦的制作出来的作品。</p>\n<h3 id=\"copyleft和free-software\"><a href=\"#copyleft和free-software\" class=\"headerlink\" title=\"copyleft和free software\"></a>copyleft和free software</h3><hr>\n<p>其实copyleft的出现是和“自由软件”<sup id=\"fnref:freesw-2\"><a class=\"footnote-ref\" href=\"#fn:freesw-2\" rel=\"footnote\">2</a></sup>息息相关的。现在我们可能见到的比较多的就是“开源”“open source”这样的字样，比如我们的android系统就是（部分）开源系统，有很多大牛投入其中，并且研究出了很多类似android的衍生系统。</p>\n<p>软件是开源的，代表我们可以阅读源代码，但其实并不意味了我们可以对其进行任意的修改，复制，或者用着其他用途，开源的软件，依然享有著作权，你可以看到大大的copyright声明贴在最下方，或者一个项目的项目说明书之类的地方。</p>\n<p>那么，我说的自由软件和copyleft的关系呢？其实copyleft就是专门为自由软件而存在的。“自由软件”其实就是不仅“开源”而且“do what you want to do！”。可能说成做任意你想做的说法不是很合适，至于为什么不是很合适，我会在下文继续说明。</p>\n<p>是copyleft的软件，那么就是自由软件，您可以在获取这个软件后，对该软件进行任意的修改，分发，或者改进软件后使其变成更优秀的软件，但是你必须要让这个派生作品也是一个copyleft的软件，即自由软件，不能让其变成一个私有软件或者专有软件从而让使用这软件的人们感觉不自由，或者处于不自由的状态。</p>\n<p>如果说一个软件不是一个自由软件，那么也许就会像一个垄断一样，全世界只有你一个公司知道这个软件的源代码，你的用户对你的软件会产生极大的依赖性，从而导致你可以任意收取你想要的费用，使得你的财产越做越大！</p>\n<p>但是如果说全世界只剩下私有软件或者专有软件，那么我们作为用户的权利就会微乎其微，因为用户无法知道自己所使用的软件，是否在正确的工作。（我相信在看的读者，一定看到过一些恶意软件的新闻，比如在后台自动收集该台电脑的各项记录或者数据等，这种在背后做的恶意软件的产生和肆意妄为，都是因为用户对源代码的未知）</p>\n<p>从上述观点中，我们不难看出，如果赋予一个软件copyleft，那么这个软件就会是安全的，而且是可以健康成长的！而不会使得这个软件被不正当的人群拿去使坏，除非他们不怕坐牢。</p>\n<p>不过我们也从前面的讨论中发现，也许只是一个copyright或者copyleft无法适应软件的各方面变化需求，比如你有一个copyleft的软件，但是却希望别的人可以拿去自由使用，甚至可以拿去使用做商业用途或者做出闭源这样的做法。一般来说，用户可以通过询问作者，来获取这方面的权限，但是如果用户多，问得多，就会对作者的生活感到很大的困扰。所以就有了自由软件许可证书。目前有很多自由软件许可证书，比如GNU GPL，GNU LGPL，BSD，MIT，Apache许可证等。不同的许可证有不同的对该自由软件的要求。不过关于自由开源许可证的内容，我放到下一节来讲</p>\n<h3 id=\"自由开源许可证\"><a href=\"#自由开源许可证\" class=\"headerlink\" title=\"自由开源许可证\"></a>自由开源许可证</h3><hr>\n<p>其实copyleft的创始人也是GNU项目的创始人，所以GNU的证书都是copyleft的，和Apache开源许可证一对比，最大的差别就是，GNU GPL等证书用户修改后不能闭源，要继续保持开源，即继续作为一个自由软件为社区社会作出贡献。</p>\n<p>你能看到现在的很多软件，都会有一个copyright说明，同时还有一个自由开源许可证的保护。copyright保护了作者的著作权，而自由开源许可证则保护了软件的自由。如果一个软件没有说明自己是基于哪个自由开源许可证的，那么该软件就是基于我们的著作权保护法，你不能随意对作品进行复制，分发，修改或者改进。自由开源许可证就像是软件的保护法，保护着软件的各项行为。</p>\n<p>而关于各类许可证的作用，在网上则有很多说明文档，我这里就不重复赘述，但是也并无妨碍我说一下很常见的许可证，比如Apache自由开源许可证。这个许可证的要求是很低的，它不要求修改后的源代码必须开源，但是它要求修改过的文件，必须放置版权说明。</p>\n<h3 id=\"尾语\"><a href=\"#尾语\" class=\"headerlink\" title=\"尾语\"></a>尾语</h3><p>我估摸着想讲的好像都已经讲完了。我写这篇文章的目的主要还是在于，防止自己再未来看到许可证的时候不会一脸呆滞，至少我了解过这方面的知识，我知道这些许可证和版权的区别！</p>\n<hr>\n<p><li id=\"fn:freesw-1\">[1]可参见<a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Copyright</a><a href=\"https://en.wikipedia.org/wiki/Copyright\" target=\"_blank\">&#8617;</a></li></p>\n<p><li id=\"fn:freesw-2\">[2]可参见<a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\" rel=\"noopener\">https://fsfs-zh.readthedocs.io/zh/latest/</a><a href=\"https://fsfs-zh.readthedocs.io/zh/latest/\" target=\"_blank\">&#8617;</a></li></p>\n"},{"title":"我的字符编码总结","date":"2019-04-24T05:51:21.000Z","_content":"\n刚开始接触mac osx这类系统的时候，使用default的zip解压，很容易出现乱码问题。每次我使用默认设置解压一个压缩文件的时候，如果这个文件来自一个中国人的windows电脑的话，十有八九肯定是乱码，想都不用想！ 一开始我还没有使用［The Unarchiver］这款软件的时候，用着各种不爽，出现次数多了，火气就起来了（信不信我砸了你，就是这种感觉）\n\n不过，生气归生气，还是要研究下为什么会出现这种问题的！所以，随后我查阅了好多网上的资料，也看了一些写的比较好的blog学习了下，算是将困扰我很久的字符编码问题给解决了（弄懂一个东西后还真是感觉心情舒畅啊＝v＝）\n\n其实mac是一直采用utf-8的字符编码，而一般我们中文环境下的windows系统是采用gbk作为默认的字符编码的（现在应该最新的是gb18030，全称叫China National Chinese）。看到这里如果没能反应过来乱码和这两个东西有什么关系的话，没关系，因为接下来我就回来解释下为什么了！\n\n## 先从二进制说起\n\n---\n我们都知道，计算机里使用的都是二进制码，即0，1这两个数字。我们常说的一个字节（byte），其实代表了一个八位（bit）的二进制数字。比如数字32，我们就可以很容易的得出它的二进制表示，\n\n```\n\n0010 0000\n\n1 * 2^5 = 32;\n//有关进制之间的互相转换，这个我就不在这里提及了，网上搜一大堆呢，自己学去\n```\n\n\n可以看到十进制数32，刚好可以由一个八位的二进制数表示（其实只要六位，前两位的0都没有用到，不过八位刚好凑成一个字节的长度，所以我这里这么说）\n所以我们在电脑上看到的数字32，在计算机来看，按照上面的这里换算编码的话，就是0010 0000这一串东西了。\n\n## ASCII码\n\n---\nASCII码是比较简单的一种编码，它就是用八位的二进制数来表示一些字符的，我们可以知道一个八位的二进制，可以有2^8种，即256种。\n\n```\n0000 0000\n0000 0001\n0000 0010\n0000 0100\n0000 1000\n.\n.\n.\n1111 1111\n```\n\n--\n从0000 0000到1111 1111，256种情况，可以分别代表256种字符。\n\n不过，当时这玩意就是做给英文操作系统用的，哪里需要256种，128种其实就够了。所以ASCII码的第一位都是0，这样就把种数变成了128种。\n\n>控制字符\n\nASCII的前32个加上第127个，代表的都是控制符号，这些符号主要用于一些特殊情况，我们作为使用者是不怎么会用到的，这里不会细讲，真的很想了解的同学，please google一下\n\n>可显示字符\n\n既然前32个都用来作为控制符号用，那么其他的当然是为我们所用了，比如26个个英文字母，abcdefg.....都有对应的ASCII码。（对于程序员来说，知道A是65，a是97，应该是比较重要的哦＝v＝）\n\n不管怎么说，ASCII码，这货能干的活仅限于美国佬的computer。如果说要用它来表示我们博大精深的中文汉字，256种哪能够呢。哈哈哈哈\n\n所以我们接下来来讲讲和中文汉字编码有关的字符编码方式\n\n## Unicode字符编码\n\n---\n再说中文汉字的字符编码之前，先说说Unicode这个字符编码吧！\n\n把Unicode说成是一个字符编码是不对的，Unicode其实是字符编码的一个国际标准，其实现方式有很多种，比如utf-8,utf-16,utf-32。\n\nUnicode使用了16位的二进制数，所以理论上是可以表示2^16次（65536种），这么多基本满足了各类语言对不同符号的需求。\n\n不过有时候确实16位也不够，那么我们就32位吧，就是4个字节，2^32，这么多总可以了吧，事实上，确实是够了。\n\n不过当变成32位的时候，又出现了一些问题，比如我们只是简单的表示一个英文字母a，我们如果用32位来表示的话，前面不都是0吗，这些有必要存储吗？没必要\n\n所以为了让这些0可以去掉，来节省我们的存储空间，所以Unicode的实现方式就有好多种了。\n\n接下来我们重点就来看看utf-8，这是一个互联网时代通用的unicode实现方式，如果大家都统一用utf8的话，相信乱码问题也会少很多呢\n\n## utf-8\n\n---\n\n>那年我们的网站制作过程全程采用utf8真是太好了！gbk？gb18030？那是什么，我不知道，啊哈哈哈哈\n\nutf8的出现原因是这样的。比如我们要表示一个英文单词a的时候，只需要八位就可以了，那么使用16位的Unicode来表示，前八位不就都变成0，然而这些0是没有意义的，所以当我们仍然采用Unicode的16位进行传输一些英文单词的时候，要传输的内容不就多了一倍，而且这多出来的一倍还特么的是一堆没用的零蛋！\n\n咳咳，所以说我们要缩短用Unicode表示的英文单词的字符长度！所以就有了utf-8\n\nutf-8是Unicode在传输的时候使用的一种实现方式！（注意不要以为utf8是一个字符集，错！它只是encoding层次的！utf8的二进制数可以转换回Unicode形式，然后查找Unicode字符集来转译成我们看到的字符！）\n\n下面我展示一下utf8的编码规则：\n\n```\nUnicode符号范围 | UTF-8编码方式\n(十六进制) | （二进制）\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n```\n\n1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n2）对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下\n的没有提及的二进制位，全部为这个符号的unicode码。\n\n以上两点就是utf－8的规则！是不是很简单！\n\n不过不要被其表面的简单所蒙骗了，Unicode虽然好用，不过你如果是一名web开发人员的话，就一定会在意流量问题！\n\n如果从流量问题角度出发！如果你使用utf8，那么对于中文来说，你的流量会增加50%。因为大部分常用的中文，使用两个字节就可以表示了，如果采用utf8的话，utf8按上面的规则，一个中文字会变成3个字节，这不就多了一个字节的空间了吗！\n\n还有另一个问题！关于现在有些网站仍在使用的gbk，这个怎么说呢，应该算是一个历史遗留问题了吧。我相信对于开发人员来说，一定更喜欢utf8，毕竟省事！（不过从流量角度出发，gbk还是有优势的！不过多出50%的流量）\n\n在utf8后还有utf16，utf32，可以理解为是对不同情况下的utf8的拓展\n\n## 所以最开始说的乱码问题\n\n---\n\nmac电脑默认采用utf8，而很多中文windows系统的文件采用gbk，一个两字节，一个1～3字节，有自己的算法，所以在mac电脑上解压的zip文件默认用Unicode（USC－2）或者utf8 或者utf16le等等（大端be，小端le）来进行解压的时候，自然而然就变成了乱码了！","source":"_posts/我的字符编码总结.md","raw":"---\ntitle: 我的字符编码总结\ntags: 编码\ncategories: IT\ndate: 2019-04-24 13:51:21\n---\n\n刚开始接触mac osx这类系统的时候，使用default的zip解压，很容易出现乱码问题。每次我使用默认设置解压一个压缩文件的时候，如果这个文件来自一个中国人的windows电脑的话，十有八九肯定是乱码，想都不用想！ 一开始我还没有使用［The Unarchiver］这款软件的时候，用着各种不爽，出现次数多了，火气就起来了（信不信我砸了你，就是这种感觉）\n\n不过，生气归生气，还是要研究下为什么会出现这种问题的！所以，随后我查阅了好多网上的资料，也看了一些写的比较好的blog学习了下，算是将困扰我很久的字符编码问题给解决了（弄懂一个东西后还真是感觉心情舒畅啊＝v＝）\n\n其实mac是一直采用utf-8的字符编码，而一般我们中文环境下的windows系统是采用gbk作为默认的字符编码的（现在应该最新的是gb18030，全称叫China National Chinese）。看到这里如果没能反应过来乱码和这两个东西有什么关系的话，没关系，因为接下来我就回来解释下为什么了！\n\n## 先从二进制说起\n\n---\n我们都知道，计算机里使用的都是二进制码，即0，1这两个数字。我们常说的一个字节（byte），其实代表了一个八位（bit）的二进制数字。比如数字32，我们就可以很容易的得出它的二进制表示，\n\n```\n\n0010 0000\n\n1 * 2^5 = 32;\n//有关进制之间的互相转换，这个我就不在这里提及了，网上搜一大堆呢，自己学去\n```\n\n\n可以看到十进制数32，刚好可以由一个八位的二进制数表示（其实只要六位，前两位的0都没有用到，不过八位刚好凑成一个字节的长度，所以我这里这么说）\n所以我们在电脑上看到的数字32，在计算机来看，按照上面的这里换算编码的话，就是0010 0000这一串东西了。\n\n## ASCII码\n\n---\nASCII码是比较简单的一种编码，它就是用八位的二进制数来表示一些字符的，我们可以知道一个八位的二进制，可以有2^8种，即256种。\n\n```\n0000 0000\n0000 0001\n0000 0010\n0000 0100\n0000 1000\n.\n.\n.\n1111 1111\n```\n\n--\n从0000 0000到1111 1111，256种情况，可以分别代表256种字符。\n\n不过，当时这玩意就是做给英文操作系统用的，哪里需要256种，128种其实就够了。所以ASCII码的第一位都是0，这样就把种数变成了128种。\n\n>控制字符\n\nASCII的前32个加上第127个，代表的都是控制符号，这些符号主要用于一些特殊情况，我们作为使用者是不怎么会用到的，这里不会细讲，真的很想了解的同学，please google一下\n\n>可显示字符\n\n既然前32个都用来作为控制符号用，那么其他的当然是为我们所用了，比如26个个英文字母，abcdefg.....都有对应的ASCII码。（对于程序员来说，知道A是65，a是97，应该是比较重要的哦＝v＝）\n\n不管怎么说，ASCII码，这货能干的活仅限于美国佬的computer。如果说要用它来表示我们博大精深的中文汉字，256种哪能够呢。哈哈哈哈\n\n所以我们接下来来讲讲和中文汉字编码有关的字符编码方式\n\n## Unicode字符编码\n\n---\n再说中文汉字的字符编码之前，先说说Unicode这个字符编码吧！\n\n把Unicode说成是一个字符编码是不对的，Unicode其实是字符编码的一个国际标准，其实现方式有很多种，比如utf-8,utf-16,utf-32。\n\nUnicode使用了16位的二进制数，所以理论上是可以表示2^16次（65536种），这么多基本满足了各类语言对不同符号的需求。\n\n不过有时候确实16位也不够，那么我们就32位吧，就是4个字节，2^32，这么多总可以了吧，事实上，确实是够了。\n\n不过当变成32位的时候，又出现了一些问题，比如我们只是简单的表示一个英文字母a，我们如果用32位来表示的话，前面不都是0吗，这些有必要存储吗？没必要\n\n所以为了让这些0可以去掉，来节省我们的存储空间，所以Unicode的实现方式就有好多种了。\n\n接下来我们重点就来看看utf-8，这是一个互联网时代通用的unicode实现方式，如果大家都统一用utf8的话，相信乱码问题也会少很多呢\n\n## utf-8\n\n---\n\n>那年我们的网站制作过程全程采用utf8真是太好了！gbk？gb18030？那是什么，我不知道，啊哈哈哈哈\n\nutf8的出现原因是这样的。比如我们要表示一个英文单词a的时候，只需要八位就可以了，那么使用16位的Unicode来表示，前八位不就都变成0，然而这些0是没有意义的，所以当我们仍然采用Unicode的16位进行传输一些英文单词的时候，要传输的内容不就多了一倍，而且这多出来的一倍还特么的是一堆没用的零蛋！\n\n咳咳，所以说我们要缩短用Unicode表示的英文单词的字符长度！所以就有了utf-8\n\nutf-8是Unicode在传输的时候使用的一种实现方式！（注意不要以为utf8是一个字符集，错！它只是encoding层次的！utf8的二进制数可以转换回Unicode形式，然后查找Unicode字符集来转译成我们看到的字符！）\n\n下面我展示一下utf8的编码规则：\n\n```\nUnicode符号范围 | UTF-8编码方式\n(十六进制) | （二进制）\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n```\n\n1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n2）对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下\n的没有提及的二进制位，全部为这个符号的unicode码。\n\n以上两点就是utf－8的规则！是不是很简单！\n\n不过不要被其表面的简单所蒙骗了，Unicode虽然好用，不过你如果是一名web开发人员的话，就一定会在意流量问题！\n\n如果从流量问题角度出发！如果你使用utf8，那么对于中文来说，你的流量会增加50%。因为大部分常用的中文，使用两个字节就可以表示了，如果采用utf8的话，utf8按上面的规则，一个中文字会变成3个字节，这不就多了一个字节的空间了吗！\n\n还有另一个问题！关于现在有些网站仍在使用的gbk，这个怎么说呢，应该算是一个历史遗留问题了吧。我相信对于开发人员来说，一定更喜欢utf8，毕竟省事！（不过从流量角度出发，gbk还是有优势的！不过多出50%的流量）\n\n在utf8后还有utf16，utf32，可以理解为是对不同情况下的utf8的拓展\n\n## 所以最开始说的乱码问题\n\n---\n\nmac电脑默认采用utf8，而很多中文windows系统的文件采用gbk，一个两字节，一个1～3字节，有自己的算法，所以在mac电脑上解压的zip文件默认用Unicode（USC－2）或者utf8 或者utf16le等等（大端be，小端le）来进行解压的时候，自然而然就变成了乱码了！","slug":"我的字符编码总结","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tw0035m6elyxnwctrk","content":"<p>刚开始接触mac osx这类系统的时候，使用default的zip解压，很容易出现乱码问题。每次我使用默认设置解压一个压缩文件的时候，如果这个文件来自一个中国人的windows电脑的话，十有八九肯定是乱码，想都不用想！ 一开始我还没有使用［The Unarchiver］这款软件的时候，用着各种不爽，出现次数多了，火气就起来了（信不信我砸了你，就是这种感觉）</p>\n<p>不过，生气归生气，还是要研究下为什么会出现这种问题的！所以，随后我查阅了好多网上的资料，也看了一些写的比较好的blog学习了下，算是将困扰我很久的字符编码问题给解决了（弄懂一个东西后还真是感觉心情舒畅啊＝v＝）</p>\n<p>其实mac是一直采用utf-8的字符编码，而一般我们中文环境下的windows系统是采用gbk作为默认的字符编码的（现在应该最新的是gb18030，全称叫China National Chinese）。看到这里如果没能反应过来乱码和这两个东西有什么关系的话，没关系，因为接下来我就回来解释下为什么了！</p>\n<h2 id=\"先从二进制说起\"><a href=\"#先从二进制说起\" class=\"headerlink\" title=\"先从二进制说起\"></a>先从二进制说起</h2><hr>\n<p>我们都知道，计算机里使用的都是二进制码，即0，1这两个数字。我们常说的一个字节（byte），其实代表了一个八位（bit）的二进制数字。比如数字32，我们就可以很容易的得出它的二进制表示，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0010 0000</span><br><span class=\"line\"></span><br><span class=\"line\">1 * 2^5 = 32;</span><br><span class=\"line\">//有关进制之间的互相转换，这个我就不在这里提及了，网上搜一大堆呢，自己学去</span><br></pre></td></tr></table></figure>\n<p>可以看到十进制数32，刚好可以由一个八位的二进制数表示（其实只要六位，前两位的0都没有用到，不过八位刚好凑成一个字节的长度，所以我这里这么说）<br>所以我们在电脑上看到的数字32，在计算机来看，按照上面的这里换算编码的话，就是0010 0000这一串东西了。</p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><hr>\n<p>ASCII码是比较简单的一种编码，它就是用八位的二进制数来表示一些字符的，我们可以知道一个八位的二进制，可以有2^8种，即256种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 0000</span><br><span class=\"line\">0000 0001</span><br><span class=\"line\">0000 0010</span><br><span class=\"line\">0000 0100</span><br><span class=\"line\">0000 1000</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">1111 1111</span><br></pre></td></tr></table></figure>\n<p>–<br>从0000 0000到1111 1111，256种情况，可以分别代表256种字符。</p>\n<p>不过，当时这玩意就是做给英文操作系统用的，哪里需要256种，128种其实就够了。所以ASCII码的第一位都是0，这样就把种数变成了128种。</p>\n<blockquote>\n<p>控制字符</p>\n</blockquote>\n<p>ASCII的前32个加上第127个，代表的都是控制符号，这些符号主要用于一些特殊情况，我们作为使用者是不怎么会用到的，这里不会细讲，真的很想了解的同学，please google一下</p>\n<blockquote>\n<p>可显示字符</p>\n</blockquote>\n<p>既然前32个都用来作为控制符号用，那么其他的当然是为我们所用了，比如26个个英文字母，abcdefg…..都有对应的ASCII码。（对于程序员来说，知道A是65，a是97，应该是比较重要的哦＝v＝）</p>\n<p>不管怎么说，ASCII码，这货能干的活仅限于美国佬的computer。如果说要用它来表示我们博大精深的中文汉字，256种哪能够呢。哈哈哈哈</p>\n<p>所以我们接下来来讲讲和中文汉字编码有关的字符编码方式</p>\n<h2 id=\"Unicode字符编码\"><a href=\"#Unicode字符编码\" class=\"headerlink\" title=\"Unicode字符编码\"></a>Unicode字符编码</h2><hr>\n<p>再说中文汉字的字符编码之前，先说说Unicode这个字符编码吧！</p>\n<p>把Unicode说成是一个字符编码是不对的，Unicode其实是字符编码的一个国际标准，其实现方式有很多种，比如utf-8,utf-16,utf-32。</p>\n<p>Unicode使用了16位的二进制数，所以理论上是可以表示2^16次（65536种），这么多基本满足了各类语言对不同符号的需求。</p>\n<p>不过有时候确实16位也不够，那么我们就32位吧，就是4个字节，2^32，这么多总可以了吧，事实上，确实是够了。</p>\n<p>不过当变成32位的时候，又出现了一些问题，比如我们只是简单的表示一个英文字母a，我们如果用32位来表示的话，前面不都是0吗，这些有必要存储吗？没必要</p>\n<p>所以为了让这些0可以去掉，来节省我们的存储空间，所以Unicode的实现方式就有好多种了。</p>\n<p>接下来我们重点就来看看utf-8，这是一个互联网时代通用的unicode实现方式，如果大家都统一用utf8的话，相信乱码问题也会少很多呢</p>\n<h2 id=\"utf-8\"><a href=\"#utf-8\" class=\"headerlink\" title=\"utf-8\"></a>utf-8</h2><hr>\n<blockquote>\n<p>那年我们的网站制作过程全程采用utf8真是太好了！gbk？gb18030？那是什么，我不知道，啊哈哈哈哈</p>\n</blockquote>\n<p>utf8的出现原因是这样的。比如我们要表示一个英文单词a的时候，只需要八位就可以了，那么使用16位的Unicode来表示，前八位不就都变成0，然而这些0是没有意义的，所以当我们仍然采用Unicode的16位进行传输一些英文单词的时候，要传输的内容不就多了一倍，而且这多出来的一倍还特么的是一堆没用的零蛋！</p>\n<p>咳咳，所以说我们要缩短用Unicode表示的英文单词的字符长度！所以就有了utf-8</p>\n<p>utf-8是Unicode在传输的时候使用的一种实现方式！（注意不要以为utf8是一个字符集，错！它只是encoding层次的！utf8的二进制数可以转换回Unicode形式，然后查找Unicode字符集来转译成我们看到的字符！）</p>\n<p>下面我展示一下utf8的编码规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unicode符号范围 | UTF-8编码方式</span><br><span class=\"line\">(十六进制) | （二进制）</span><br><span class=\"line\">--------------------+---------------------------------------------</span><br><span class=\"line\">0000 0000-0000 007F | 0xxxxxxx</span><br><span class=\"line\">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class=\"line\">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class=\"line\">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure>\n<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下<br>的没有提及的二进制位，全部为这个符号的unicode码。</p>\n<p>以上两点就是utf－8的规则！是不是很简单！</p>\n<p>不过不要被其表面的简单所蒙骗了，Unicode虽然好用，不过你如果是一名web开发人员的话，就一定会在意流量问题！</p>\n<p>如果从流量问题角度出发！如果你使用utf8，那么对于中文来说，你的流量会增加50%。因为大部分常用的中文，使用两个字节就可以表示了，如果采用utf8的话，utf8按上面的规则，一个中文字会变成3个字节，这不就多了一个字节的空间了吗！</p>\n<p>还有另一个问题！关于现在有些网站仍在使用的gbk，这个怎么说呢，应该算是一个历史遗留问题了吧。我相信对于开发人员来说，一定更喜欢utf8，毕竟省事！（不过从流量角度出发，gbk还是有优势的！不过多出50%的流量）</p>\n<p>在utf8后还有utf16，utf32，可以理解为是对不同情况下的utf8的拓展</p>\n<h2 id=\"所以最开始说的乱码问题\"><a href=\"#所以最开始说的乱码问题\" class=\"headerlink\" title=\"所以最开始说的乱码问题\"></a>所以最开始说的乱码问题</h2><hr>\n<p>mac电脑默认采用utf8，而很多中文windows系统的文件采用gbk，一个两字节，一个1～3字节，有自己的算法，所以在mac电脑上解压的zip文件默认用Unicode（USC－2）或者utf8 或者utf16le等等（大端be，小端le）来进行解压的时候，自然而然就变成了乱码了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始接触mac osx这类系统的时候，使用default的zip解压，很容易出现乱码问题。每次我使用默认设置解压一个压缩文件的时候，如果这个文件来自一个中国人的windows电脑的话，十有八九肯定是乱码，想都不用想！ 一开始我还没有使用［The Unarchiver］这款软件的时候，用着各种不爽，出现次数多了，火气就起来了（信不信我砸了你，就是这种感觉）</p>\n<p>不过，生气归生气，还是要研究下为什么会出现这种问题的！所以，随后我查阅了好多网上的资料，也看了一些写的比较好的blog学习了下，算是将困扰我很久的字符编码问题给解决了（弄懂一个东西后还真是感觉心情舒畅啊＝v＝）</p>\n<p>其实mac是一直采用utf-8的字符编码，而一般我们中文环境下的windows系统是采用gbk作为默认的字符编码的（现在应该最新的是gb18030，全称叫China National Chinese）。看到这里如果没能反应过来乱码和这两个东西有什么关系的话，没关系，因为接下来我就回来解释下为什么了！</p>\n<h2 id=\"先从二进制说起\"><a href=\"#先从二进制说起\" class=\"headerlink\" title=\"先从二进制说起\"></a>先从二进制说起</h2><hr>\n<p>我们都知道，计算机里使用的都是二进制码，即0，1这两个数字。我们常说的一个字节（byte），其实代表了一个八位（bit）的二进制数字。比如数字32，我们就可以很容易的得出它的二进制表示，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">0010 0000</span><br><span class=\"line\"></span><br><span class=\"line\">1 * 2^5 = 32;</span><br><span class=\"line\">//有关进制之间的互相转换，这个我就不在这里提及了，网上搜一大堆呢，自己学去</span><br></pre></td></tr></table></figure>\n<p>可以看到十进制数32，刚好可以由一个八位的二进制数表示（其实只要六位，前两位的0都没有用到，不过八位刚好凑成一个字节的长度，所以我这里这么说）<br>所以我们在电脑上看到的数字32，在计算机来看，按照上面的这里换算编码的话，就是0010 0000这一串东西了。</p>\n<h2 id=\"ASCII码\"><a href=\"#ASCII码\" class=\"headerlink\" title=\"ASCII码\"></a>ASCII码</h2><hr>\n<p>ASCII码是比较简单的一种编码，它就是用八位的二进制数来表示一些字符的，我们可以知道一个八位的二进制，可以有2^8种，即256种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000 0000</span><br><span class=\"line\">0000 0001</span><br><span class=\"line\">0000 0010</span><br><span class=\"line\">0000 0100</span><br><span class=\"line\">0000 1000</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">1111 1111</span><br></pre></td></tr></table></figure>\n<p>–<br>从0000 0000到1111 1111，256种情况，可以分别代表256种字符。</p>\n<p>不过，当时这玩意就是做给英文操作系统用的，哪里需要256种，128种其实就够了。所以ASCII码的第一位都是0，这样就把种数变成了128种。</p>\n<blockquote>\n<p>控制字符</p>\n</blockquote>\n<p>ASCII的前32个加上第127个，代表的都是控制符号，这些符号主要用于一些特殊情况，我们作为使用者是不怎么会用到的，这里不会细讲，真的很想了解的同学，please google一下</p>\n<blockquote>\n<p>可显示字符</p>\n</blockquote>\n<p>既然前32个都用来作为控制符号用，那么其他的当然是为我们所用了，比如26个个英文字母，abcdefg…..都有对应的ASCII码。（对于程序员来说，知道A是65，a是97，应该是比较重要的哦＝v＝）</p>\n<p>不管怎么说，ASCII码，这货能干的活仅限于美国佬的computer。如果说要用它来表示我们博大精深的中文汉字，256种哪能够呢。哈哈哈哈</p>\n<p>所以我们接下来来讲讲和中文汉字编码有关的字符编码方式</p>\n<h2 id=\"Unicode字符编码\"><a href=\"#Unicode字符编码\" class=\"headerlink\" title=\"Unicode字符编码\"></a>Unicode字符编码</h2><hr>\n<p>再说中文汉字的字符编码之前，先说说Unicode这个字符编码吧！</p>\n<p>把Unicode说成是一个字符编码是不对的，Unicode其实是字符编码的一个国际标准，其实现方式有很多种，比如utf-8,utf-16,utf-32。</p>\n<p>Unicode使用了16位的二进制数，所以理论上是可以表示2^16次（65536种），这么多基本满足了各类语言对不同符号的需求。</p>\n<p>不过有时候确实16位也不够，那么我们就32位吧，就是4个字节，2^32，这么多总可以了吧，事实上，确实是够了。</p>\n<p>不过当变成32位的时候，又出现了一些问题，比如我们只是简单的表示一个英文字母a，我们如果用32位来表示的话，前面不都是0吗，这些有必要存储吗？没必要</p>\n<p>所以为了让这些0可以去掉，来节省我们的存储空间，所以Unicode的实现方式就有好多种了。</p>\n<p>接下来我们重点就来看看utf-8，这是一个互联网时代通用的unicode实现方式，如果大家都统一用utf8的话，相信乱码问题也会少很多呢</p>\n<h2 id=\"utf-8\"><a href=\"#utf-8\" class=\"headerlink\" title=\"utf-8\"></a>utf-8</h2><hr>\n<blockquote>\n<p>那年我们的网站制作过程全程采用utf8真是太好了！gbk？gb18030？那是什么，我不知道，啊哈哈哈哈</p>\n</blockquote>\n<p>utf8的出现原因是这样的。比如我们要表示一个英文单词a的时候，只需要八位就可以了，那么使用16位的Unicode来表示，前八位不就都变成0，然而这些0是没有意义的，所以当我们仍然采用Unicode的16位进行传输一些英文单词的时候，要传输的内容不就多了一倍，而且这多出来的一倍还特么的是一堆没用的零蛋！</p>\n<p>咳咳，所以说我们要缩短用Unicode表示的英文单词的字符长度！所以就有了utf-8</p>\n<p>utf-8是Unicode在传输的时候使用的一种实现方式！（注意不要以为utf8是一个字符集，错！它只是encoding层次的！utf8的二进制数可以转换回Unicode形式，然后查找Unicode字符集来转译成我们看到的字符！）</p>\n<p>下面我展示一下utf8的编码规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unicode符号范围 | UTF-8编码方式</span><br><span class=\"line\">(十六进制) | （二进制）</span><br><span class=\"line\">--------------------+---------------------------------------------</span><br><span class=\"line\">0000 0000-0000 007F | 0xxxxxxx</span><br><span class=\"line\">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class=\"line\">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class=\"line\">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure>\n<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下<br>的没有提及的二进制位，全部为这个符号的unicode码。</p>\n<p>以上两点就是utf－8的规则！是不是很简单！</p>\n<p>不过不要被其表面的简单所蒙骗了，Unicode虽然好用，不过你如果是一名web开发人员的话，就一定会在意流量问题！</p>\n<p>如果从流量问题角度出发！如果你使用utf8，那么对于中文来说，你的流量会增加50%。因为大部分常用的中文，使用两个字节就可以表示了，如果采用utf8的话，utf8按上面的规则，一个中文字会变成3个字节，这不就多了一个字节的空间了吗！</p>\n<p>还有另一个问题！关于现在有些网站仍在使用的gbk，这个怎么说呢，应该算是一个历史遗留问题了吧。我相信对于开发人员来说，一定更喜欢utf8，毕竟省事！（不过从流量角度出发，gbk还是有优势的！不过多出50%的流量）</p>\n<p>在utf8后还有utf16，utf32，可以理解为是对不同情况下的utf8的拓展</p>\n<h2 id=\"所以最开始说的乱码问题\"><a href=\"#所以最开始说的乱码问题\" class=\"headerlink\" title=\"所以最开始说的乱码问题\"></a>所以最开始说的乱码问题</h2><hr>\n<p>mac电脑默认采用utf8，而很多中文windows系统的文件采用gbk，一个两字节，一个1～3字节，有自己的算法，所以在mac电脑上解压的zip文件默认用Unicode（USC－2）或者utf8 或者utf16le等等（大端be，小端le）来进行解压的时候，自然而然就变成了乱码了！</p>\n"},{"title":"番茄工作法的有用论","date":"2019-06-05T10:12:08.000Z","_content":"\n## 1\n\n在大学的时候，听说过番茄工作法，不觉得好用所以没怎么使用这种工作方式。\n现在过了好多年，最近开始用起了这个方法。\n以前我自己可以埋头学习，1个小时以上，但是现在不行，因为现在我的生活需要关注的东西太多了。所以我至少需要每隔一段时间就回复QQ消息，回复微信消息，甚至回复其他的社交媒体消息。\n同时出于做善事的目的，我已经接触了不少刚上大学的软件学生，给予了他们一些自己的学习经验和总结，平时也会去回复他们的问题。\n种种因素导致我发现我现在的注意力容易分散，每过一小段时间，我就会想着有没有什么事情我还没有交待。这种不知道什么时候养成的习惯，前段时间困扰了我挺久，直到我想到了番茄工作法。\n\n## 2\n\n番茄工作法对于我这种情况可以说是如鱼得水，我真正的第一次感受到了这确实是一种可以广而告之的工作方式。\n25分钟不长不短，足以让我写完一段比较复杂的工作任务，剩下的5分钟可以对这25分钟的工作做一次回顾，就好比自己写完一串代码后，翻回去看一看写的整体怎么样。这5分钟的整理对自己的一个心理疏通可以起到很重要的作用。因为你输出了一定程度的工作结果而不去检查的时候，你的内心就会开始起怀疑心，总感觉心里不太踏实。\n这5分钟也完全可以拿去刷刷qq和微信，推特。看看此时此刻其他人在干什么，会产生极强的社交存在感。\n\n不过唯一的问题就是5分钟也许太短，一下子就过去，不过这个就因人而异了。目前对我来说5分钟刚好。\n\n## 3\n\n番茄工作法还有一个特点就是，时间到的时候会有一次提示音。这让我一瞬间会联想到了小时候的下课铃声。所以番茄工作法本身就非常切合我们从小就养成的生活习惯。有时候一个难以解决的问题，与其不停的埋头研究，还不如利用番茄工作法，达到身心的平衡，你会发现你的脑子转起来会比平时更稳定，更有逻辑性\n\n## 4\n\n以后抽空再试试别的番茄工作法并写一篇分享文章也不错，今天先到这","source":"_posts/番茄工作法的有用论.md","raw":"---\ntitle: 番茄工作法的有用论\ntags: 随笔\ncategories: 生活\ndate: 2019-06-05 18:12:08\n---\n\n## 1\n\n在大学的时候，听说过番茄工作法，不觉得好用所以没怎么使用这种工作方式。\n现在过了好多年，最近开始用起了这个方法。\n以前我自己可以埋头学习，1个小时以上，但是现在不行，因为现在我的生活需要关注的东西太多了。所以我至少需要每隔一段时间就回复QQ消息，回复微信消息，甚至回复其他的社交媒体消息。\n同时出于做善事的目的，我已经接触了不少刚上大学的软件学生，给予了他们一些自己的学习经验和总结，平时也会去回复他们的问题。\n种种因素导致我发现我现在的注意力容易分散，每过一小段时间，我就会想着有没有什么事情我还没有交待。这种不知道什么时候养成的习惯，前段时间困扰了我挺久，直到我想到了番茄工作法。\n\n## 2\n\n番茄工作法对于我这种情况可以说是如鱼得水，我真正的第一次感受到了这确实是一种可以广而告之的工作方式。\n25分钟不长不短，足以让我写完一段比较复杂的工作任务，剩下的5分钟可以对这25分钟的工作做一次回顾，就好比自己写完一串代码后，翻回去看一看写的整体怎么样。这5分钟的整理对自己的一个心理疏通可以起到很重要的作用。因为你输出了一定程度的工作结果而不去检查的时候，你的内心就会开始起怀疑心，总感觉心里不太踏实。\n这5分钟也完全可以拿去刷刷qq和微信，推特。看看此时此刻其他人在干什么，会产生极强的社交存在感。\n\n不过唯一的问题就是5分钟也许太短，一下子就过去，不过这个就因人而异了。目前对我来说5分钟刚好。\n\n## 3\n\n番茄工作法还有一个特点就是，时间到的时候会有一次提示音。这让我一瞬间会联想到了小时候的下课铃声。所以番茄工作法本身就非常切合我们从小就养成的生活习惯。有时候一个难以解决的问题，与其不停的埋头研究，还不如利用番茄工作法，达到身心的平衡，你会发现你的脑子转起来会比平时更稳定，更有逻辑性\n\n## 4\n\n以后抽空再试试别的番茄工作法并写一篇分享文章也不错，今天先到这","slug":"番茄工作法的有用论","published":1,"updated":"2019-06-05T10:28:29.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tx0038m6el5wf0ry0f","content":"<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>在大学的时候，听说过番茄工作法，不觉得好用所以没怎么使用这种工作方式。<br>现在过了好多年，最近开始用起了这个方法。<br>以前我自己可以埋头学习，1个小时以上，但是现在不行，因为现在我的生活需要关注的东西太多了。所以我至少需要每隔一段时间就回复QQ消息，回复微信消息，甚至回复其他的社交媒体消息。<br>同时出于做善事的目的，我已经接触了不少刚上大学的软件学生，给予了他们一些自己的学习经验和总结，平时也会去回复他们的问题。<br>种种因素导致我发现我现在的注意力容易分散，每过一小段时间，我就会想着有没有什么事情我还没有交待。这种不知道什么时候养成的习惯，前段时间困扰了我挺久，直到我想到了番茄工作法。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>番茄工作法对于我这种情况可以说是如鱼得水，我真正的第一次感受到了这确实是一种可以广而告之的工作方式。<br>25分钟不长不短，足以让我写完一段比较复杂的工作任务，剩下的5分钟可以对这25分钟的工作做一次回顾，就好比自己写完一串代码后，翻回去看一看写的整体怎么样。这5分钟的整理对自己的一个心理疏通可以起到很重要的作用。因为你输出了一定程度的工作结果而不去检查的时候，你的内心就会开始起怀疑心，总感觉心里不太踏实。<br>这5分钟也完全可以拿去刷刷qq和微信，推特。看看此时此刻其他人在干什么，会产生极强的社交存在感。</p>\n<p>不过唯一的问题就是5分钟也许太短，一下子就过去，不过这个就因人而异了。目前对我来说5分钟刚好。</p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>番茄工作法还有一个特点就是，时间到的时候会有一次提示音。这让我一瞬间会联想到了小时候的下课铃声。所以番茄工作法本身就非常切合我们从小就养成的生活习惯。有时候一个难以解决的问题，与其不停的埋头研究，还不如利用番茄工作法，达到身心的平衡，你会发现你的脑子转起来会比平时更稳定，更有逻辑性</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>以后抽空再试试别的番茄工作法并写一篇分享文章也不错，今天先到这</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>在大学的时候，听说过番茄工作法，不觉得好用所以没怎么使用这种工作方式。<br>现在过了好多年，最近开始用起了这个方法。<br>以前我自己可以埋头学习，1个小时以上，但是现在不行，因为现在我的生活需要关注的东西太多了。所以我至少需要每隔一段时间就回复QQ消息，回复微信消息，甚至回复其他的社交媒体消息。<br>同时出于做善事的目的，我已经接触了不少刚上大学的软件学生，给予了他们一些自己的学习经验和总结，平时也会去回复他们的问题。<br>种种因素导致我发现我现在的注意力容易分散，每过一小段时间，我就会想着有没有什么事情我还没有交待。这种不知道什么时候养成的习惯，前段时间困扰了我挺久，直到我想到了番茄工作法。</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>番茄工作法对于我这种情况可以说是如鱼得水，我真正的第一次感受到了这确实是一种可以广而告之的工作方式。<br>25分钟不长不短，足以让我写完一段比较复杂的工作任务，剩下的5分钟可以对这25分钟的工作做一次回顾，就好比自己写完一串代码后，翻回去看一看写的整体怎么样。这5分钟的整理对自己的一个心理疏通可以起到很重要的作用。因为你输出了一定程度的工作结果而不去检查的时候，你的内心就会开始起怀疑心，总感觉心里不太踏实。<br>这5分钟也完全可以拿去刷刷qq和微信，推特。看看此时此刻其他人在干什么，会产生极强的社交存在感。</p>\n<p>不过唯一的问题就是5分钟也许太短，一下子就过去，不过这个就因人而异了。目前对我来说5分钟刚好。</p>\n<h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h2><p>番茄工作法还有一个特点就是，时间到的时候会有一次提示音。这让我一瞬间会联想到了小时候的下课铃声。所以番茄工作法本身就非常切合我们从小就养成的生活习惯。有时候一个难以解决的问题，与其不停的埋头研究，还不如利用番茄工作法，达到身心的平衡，你会发现你的脑子转起来会比平时更稳定，更有逻辑性</p>\n<h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h2><p>以后抽空再试试别的番茄工作法并写一篇分享文章也不错，今天先到这</p>\n"},{"title":"踩坑的Bug总集","date":"2019-04-24T05:56:48.000Z","_content":"\n\n主要纪录我面向Google编程失败后自己解决的部分值得纪录问题，为LTS版本，长期更新\n\n## Java Exceptions\n\n---\n\n### 1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.\n\n\n第一次遇到这种java异常，看字面意思，找不到这样的方法的错误。\n\n哇 当时看到这个错误 第一个反应就是 我是不是没导这个jar包？ 然后我排查了一次jar包后发现，明明就有，所以我就非常的无奈，一边吐槽着垃圾Eclipse 一边无奈的各种网上搜解决方案\n\n很显然，大部分回答都是，checkout your jar！ \n\n但是我检查了jar包 然后海点进去检查了此jar包的对应的此方法，都是存在的 \n\n同时我也没有使用maven 不存在maven方面的问题 \n\n所以我就开始心急如焚，因为我发现自己解决不了这个问题 面向google编程也即将失效\n\n就在我快要崩溃的时候，看到有一个人说，会不会是jar包冲突？\n\n我瞬间就反应过来，还真说不定。因为我搭建这个项目的时候，跟着教程无脑导入了大量的jar包，也许就是这个问题\n\n于是，我使用了eclispse的类搜索功能。我一搜ThreadPoolAsynchronousRunner。。\n\n发现居然有两个结果\n\n好吧 同名类。。。。\n\n于是我删除了其中一个。。。\n\n运行后 异常消失，一切正常。\n\n###### 总结：\n在java项目中导入jar包乱导入 没有自己去一个个分析每个包的作用导致的jar包冲突的问题。 就好比现实中，有病乱投医，什么药都吃。也表示我吗以后着手做事情的时候，一定要把自己的工具的作用了解清楚再做后续的事情。\n\n\n\n## Mysql Exception\n\n---\n\n### 1.  the right syntax to use near \"xxx\"\n\n当你看到sql报错\n```\nYou have an error in your SQL syntax; check the manual that corresponds to >your MySQL server version for the right syntax to use near 'desc, name) >values (2, 'Test town desc.', 'Test town')' at line 1\n```\n\n类似这样的错误\n\n第一反应便是 你使用了mysql的保留字作为了你的数据库表名或者列名","source":"_posts/踩坑的Bug总集.md","raw":"---\ntitle: 踩坑的Bug总集\ntags: Bugs\ncategories: IT\ndate: 2019-04-24 13:56:48\n---\n\n\n主要纪录我面向Google编程失败后自己解决的部分值得纪录问题，为LTS版本，长期更新\n\n## Java Exceptions\n\n---\n\n### 1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.\n\n\n第一次遇到这种java异常，看字面意思，找不到这样的方法的错误。\n\n哇 当时看到这个错误 第一个反应就是 我是不是没导这个jar包？ 然后我排查了一次jar包后发现，明明就有，所以我就非常的无奈，一边吐槽着垃圾Eclipse 一边无奈的各种网上搜解决方案\n\n很显然，大部分回答都是，checkout your jar！ \n\n但是我检查了jar包 然后海点进去检查了此jar包的对应的此方法，都是存在的 \n\n同时我也没有使用maven 不存在maven方面的问题 \n\n所以我就开始心急如焚，因为我发现自己解决不了这个问题 面向google编程也即将失效\n\n就在我快要崩溃的时候，看到有一个人说，会不会是jar包冲突？\n\n我瞬间就反应过来，还真说不定。因为我搭建这个项目的时候，跟着教程无脑导入了大量的jar包，也许就是这个问题\n\n于是，我使用了eclispse的类搜索功能。我一搜ThreadPoolAsynchronousRunner。。\n\n发现居然有两个结果\n\n好吧 同名类。。。。\n\n于是我删除了其中一个。。。\n\n运行后 异常消失，一切正常。\n\n###### 总结：\n在java项目中导入jar包乱导入 没有自己去一个个分析每个包的作用导致的jar包冲突的问题。 就好比现实中，有病乱投医，什么药都吃。也表示我吗以后着手做事情的时候，一定要把自己的工具的作用了解清楚再做后续的事情。\n\n\n\n## Mysql Exception\n\n---\n\n### 1.  the right syntax to use near \"xxx\"\n\n当你看到sql报错\n```\nYou have an error in your SQL syntax; check the manual that corresponds to >your MySQL server version for the right syntax to use near 'desc, name) >values (2, 'Test town desc.', 'Test town')' at line 1\n```\n\n类似这样的错误\n\n第一反应便是 你使用了mysql的保留字作为了你的数据库表名或者列名","slug":"踩坑的Bug总集","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tx003bm6elmqsmriqf","content":"<p>主要纪录我面向Google编程失败后自己解决的部分值得纪录问题，为LTS版本，长期更新</p>\n<h2 id=\"Java-Exceptions\"><a href=\"#Java-Exceptions\" class=\"headerlink\" title=\"Java Exceptions\"></a>Java Exceptions</h2><hr>\n<h3 id=\"1-java-lang-NoSuchMethodError-com-mchange-v2-async-ThreadPoolAsynchronousRunner\"><a href=\"#1-java-lang-NoSuchMethodError-com-mchange-v2-async-ThreadPoolAsynchronousRunner\" class=\"headerlink\" title=\"1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.\"></a>1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.</h3><p>第一次遇到这种java异常，看字面意思，找不到这样的方法的错误。</p>\n<p>哇 当时看到这个错误 第一个反应就是 我是不是没导这个jar包？ 然后我排查了一次jar包后发现，明明就有，所以我就非常的无奈，一边吐槽着垃圾Eclipse 一边无奈的各种网上搜解决方案</p>\n<p>很显然，大部分回答都是，checkout your jar！ </p>\n<p>但是我检查了jar包 然后海点进去检查了此jar包的对应的此方法，都是存在的 </p>\n<p>同时我也没有使用maven 不存在maven方面的问题 </p>\n<p>所以我就开始心急如焚，因为我发现自己解决不了这个问题 面向google编程也即将失效</p>\n<p>就在我快要崩溃的时候，看到有一个人说，会不会是jar包冲突？</p>\n<p>我瞬间就反应过来，还真说不定。因为我搭建这个项目的时候，跟着教程无脑导入了大量的jar包，也许就是这个问题</p>\n<p>于是，我使用了eclispse的类搜索功能。我一搜ThreadPoolAsynchronousRunner。。</p>\n<p>发现居然有两个结果</p>\n<p>好吧 同名类。。。。</p>\n<p>于是我删除了其中一个。。。</p>\n<p>运行后 异常消失，一切正常。</p>\n<h6 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h6><p>在java项目中导入jar包乱导入 没有自己去一个个分析每个包的作用导致的jar包冲突的问题。 就好比现实中，有病乱投医，什么药都吃。也表示我吗以后着手做事情的时候，一定要把自己的工具的作用了解清楚再做后续的事情。</p>\n<h2 id=\"Mysql-Exception\"><a href=\"#Mysql-Exception\" class=\"headerlink\" title=\"Mysql Exception\"></a>Mysql Exception</h2><hr>\n<h3 id=\"1-the-right-syntax-to-use-near-“xxx”\"><a href=\"#1-the-right-syntax-to-use-near-“xxx”\" class=\"headerlink\" title=\"1.  the right syntax to use near “xxx”\"></a>1.  the right syntax to use near “xxx”</h3><p>当你看到sql报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to &gt;your MySQL server version for the right syntax to use near &apos;desc, name) &gt;values (2, &apos;Test town desc.&apos;, &apos;Test town&apos;)&apos; at line 1</span><br></pre></td></tr></table></figure></p>\n<p>类似这样的错误</p>\n<p>第一反应便是 你使用了mysql的保留字作为了你的数据库表名或者列名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要纪录我面向Google编程失败后自己解决的部分值得纪录问题，为LTS版本，长期更新</p>\n<h2 id=\"Java-Exceptions\"><a href=\"#Java-Exceptions\" class=\"headerlink\" title=\"Java Exceptions\"></a>Java Exceptions</h2><hr>\n<h3 id=\"1-java-lang-NoSuchMethodError-com-mchange-v2-async-ThreadPoolAsynchronousRunner\"><a href=\"#1-java-lang-NoSuchMethodError-com-mchange-v2-async-ThreadPoolAsynchronousRunner\" class=\"headerlink\" title=\"1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.\"></a>1.java.lang.NoSuchMethodError: com.mchange.v2.async.ThreadPoolAsynchronousRunner.</h3><p>第一次遇到这种java异常，看字面意思，找不到这样的方法的错误。</p>\n<p>哇 当时看到这个错误 第一个反应就是 我是不是没导这个jar包？ 然后我排查了一次jar包后发现，明明就有，所以我就非常的无奈，一边吐槽着垃圾Eclipse 一边无奈的各种网上搜解决方案</p>\n<p>很显然，大部分回答都是，checkout your jar！ </p>\n<p>但是我检查了jar包 然后海点进去检查了此jar包的对应的此方法，都是存在的 </p>\n<p>同时我也没有使用maven 不存在maven方面的问题 </p>\n<p>所以我就开始心急如焚，因为我发现自己解决不了这个问题 面向google编程也即将失效</p>\n<p>就在我快要崩溃的时候，看到有一个人说，会不会是jar包冲突？</p>\n<p>我瞬间就反应过来，还真说不定。因为我搭建这个项目的时候，跟着教程无脑导入了大量的jar包，也许就是这个问题</p>\n<p>于是，我使用了eclispse的类搜索功能。我一搜ThreadPoolAsynchronousRunner。。</p>\n<p>发现居然有两个结果</p>\n<p>好吧 同名类。。。。</p>\n<p>于是我删除了其中一个。。。</p>\n<p>运行后 异常消失，一切正常。</p>\n<h6 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h6><p>在java项目中导入jar包乱导入 没有自己去一个个分析每个包的作用导致的jar包冲突的问题。 就好比现实中，有病乱投医，什么药都吃。也表示我吗以后着手做事情的时候，一定要把自己的工具的作用了解清楚再做后续的事情。</p>\n<h2 id=\"Mysql-Exception\"><a href=\"#Mysql-Exception\" class=\"headerlink\" title=\"Mysql Exception\"></a>Mysql Exception</h2><hr>\n<h3 id=\"1-the-right-syntax-to-use-near-“xxx”\"><a href=\"#1-the-right-syntax-to-use-near-“xxx”\" class=\"headerlink\" title=\"1.  the right syntax to use near “xxx”\"></a>1.  the right syntax to use near “xxx”</h3><p>当你看到sql报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You have an error in your SQL syntax; check the manual that corresponds to &gt;your MySQL server version for the right syntax to use near &apos;desc, name) &gt;values (2, &apos;Test town desc.&apos;, &apos;Test town&apos;)&apos; at line 1</span><br></pre></td></tr></table></figure></p>\n<p>类似这样的错误</p>\n<p>第一反应便是 你使用了mysql的保留字作为了你的数据库表名或者列名</p>\n"},{"title":"ubuntu18.04设置lock-screen存在的一个坑","date":"2019-08-24T16:31:24.000Z","_content":"\n\n当你在用使用ubuntu18.04的时候, 你发现背景图片(backgroud),锁屏背景图片(lock-screen)还有输入密码时候的背景图片(login-screen)是分开的,也就是说需要分开设置\n\n而设置背景图片可以直接通过右键\"Set As WallPaper\"来快速修改, 但是锁屏背景图片(也就是lock-screen)最快捷的方法就是在Settings->backgroud->lock screen进行修改,\n\n在弹出来的对话框内, 有系统自带的图片, 你也可以选择自己的图片, 但是存在一个问题, ubuntu会将你Picture根目录下的图片显示出来供你选择, 但是它会忽略由系统截图工具产生的图片\n\nubuntu后台会有如下日志打印:\n\n```\n(gnome-control-center:5886): background-cc-panel-DEBUG: 00:24:13.369: Ignored URL 'file:///home/zazalu/Pictures/xxx.png' as it's a screenshot from gnome-screenshot\n\n```\n\n这个设定我觉得问题很大....而且不会做任何有效提示.... 使用者会感觉非常懵逼(比如我)\n\n","source":"_posts/why-i-cannot-see-all-pics-in-pictures-panel-when-i-set-lock-screen.md","raw":"---\ntitle: ubuntu18.04设置lock-screen存在的一个坑\ntags: Bugs\ncategories: 计算机\ndate: 2019-08-25 00:31:24\n---\n\n\n当你在用使用ubuntu18.04的时候, 你发现背景图片(backgroud),锁屏背景图片(lock-screen)还有输入密码时候的背景图片(login-screen)是分开的,也就是说需要分开设置\n\n而设置背景图片可以直接通过右键\"Set As WallPaper\"来快速修改, 但是锁屏背景图片(也就是lock-screen)最快捷的方法就是在Settings->backgroud->lock screen进行修改,\n\n在弹出来的对话框内, 有系统自带的图片, 你也可以选择自己的图片, 但是存在一个问题, ubuntu会将你Picture根目录下的图片显示出来供你选择, 但是它会忽略由系统截图工具产生的图片\n\nubuntu后台会有如下日志打印:\n\n```\n(gnome-control-center:5886): background-cc-panel-DEBUG: 00:24:13.369: Ignored URL 'file:///home/zazalu/Pictures/xxx.png' as it's a screenshot from gnome-screenshot\n\n```\n\n这个设定我觉得问题很大....而且不会做任何有效提示.... 使用者会感觉非常懵逼(比如我)\n\n","slug":"why-i-cannot-see-all-pics-in-pictures-panel-when-i-set-lock-screen","published":1,"updated":"2019-08-24T16:37:54.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9tz003fm6eletlcv4hx","content":"<p>当你在用使用ubuntu18.04的时候, 你发现背景图片(backgroud),锁屏背景图片(lock-screen)还有输入密码时候的背景图片(login-screen)是分开的,也就是说需要分开设置</p>\n<p>而设置背景图片可以直接通过右键”Set As WallPaper”来快速修改, 但是锁屏背景图片(也就是lock-screen)最快捷的方法就是在Settings-&gt;backgroud-&gt;lock screen进行修改,</p>\n<p>在弹出来的对话框内, 有系统自带的图片, 你也可以选择自己的图片, 但是存在一个问题, ubuntu会将你Picture根目录下的图片显示出来供你选择, 但是它会忽略由系统截图工具产生的图片</p>\n<p>ubuntu后台会有如下日志打印:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gnome-control-center:5886): background-cc-panel-DEBUG: 00:24:13.369: Ignored URL &apos;file:///home/zazalu/Pictures/xxx.png&apos; as it&apos;s a screenshot from gnome-screenshot</span><br></pre></td></tr></table></figure>\n<p>这个设定我觉得问题很大….而且不会做任何有效提示…. 使用者会感觉非常懵逼(比如我)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当你在用使用ubuntu18.04的时候, 你发现背景图片(backgroud),锁屏背景图片(lock-screen)还有输入密码时候的背景图片(login-screen)是分开的,也就是说需要分开设置</p>\n<p>而设置背景图片可以直接通过右键”Set As WallPaper”来快速修改, 但是锁屏背景图片(也就是lock-screen)最快捷的方法就是在Settings-&gt;backgroud-&gt;lock screen进行修改,</p>\n<p>在弹出来的对话框内, 有系统自带的图片, 你也可以选择自己的图片, 但是存在一个问题, ubuntu会将你Picture根目录下的图片显示出来供你选择, 但是它会忽略由系统截图工具产生的图片</p>\n<p>ubuntu后台会有如下日志打印:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gnome-control-center:5886): background-cc-panel-DEBUG: 00:24:13.369: Ignored URL &apos;file:///home/zazalu/Pictures/xxx.png&apos; as it&apos;s a screenshot from gnome-screenshot</span><br></pre></td></tr></table></figure>\n<p>这个设定我觉得问题很大….而且不会做任何有效提示…. 使用者会感觉非常懵逼(比如我)</p>\n"},{"title":"Java的字符编码问题一语道破(GBK,UTF-8,ISO-8859-1)","date":"2019-06-15T11:21:15.000Z","_content":"\n# 0\n\n如果你是纯小白，那么请先阅读[我的编码总结](https://zazalu.space/2019/04/24/%E6%88%91%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/)，对编码有了最基础的认识后，进行本篇文章的阅读，我可以保证你可以对Java这块会出现的编码的问题都可以自行一一解决，而且不需要借助google或者百度，全部都可以自己思考解决\n\n# 1 \n\n我们从一个Java乱码的实例来抛出这个问题。\n\n实例场景：\n>要求使用Java读取一个 GBK 格式的文件，使用BufferedReader的readLine读取后发现控制台输出乱码\n\nGBK文件内容如下图所示\n<img src=\"/images/tmpImage/Java_Character_1.png\">\n\n在使用Java程序读取之前，我们先来分析这个文件的二进制内容，这里先向再看这篇文章的人特别强调一点，那就是分析乱码的时候，请务必从二进制出发！虽然你会发现控制台，数据库，文件的内容输出根据编码情况变来变去的，搞的你天花乱坠，但是二进制文件是万变不离其宗的！\n\n我们使用linux的hexdump来获取二进制数据\n```s\nzazalu@zazalu-ThinkPad-E480:~/app/JavaProjectWithIDEA/MySpider/src/main/resources$ hd gbktest.txt \n00000000  49 61 6d be fd c9 bd                              |Iam....|\n00000007\n```\n\n得到了`49 61 6d be fd c9 bd`，这是我们这个文件的十六进制表示，随后我们逐个转换为二进制如下(不足8位的我在最前面补0了，8bit = 1byte)\n```txt\n49       61       6d       be       fd       c9       bd \n01001001 01100001 01101101 10111110 11111101 11001001 10111101 \n```\n**[注意]**: 可以对照[这张码表](http://tools.jb51.net/table/gbk_table)来看看hexdump程序对不对，我自己对照过了，`君`是`befd`，山是`c9bd`，没问题。前面的英文直接对照ASCII码表即可，都吻合！\n\n到这里我们就知道了`Iam君山`这句话的GBK二进制数据表示就是`01001001 01100001 01101101 10111110 11111101 11001001 10111101`\n\n# 2\n\n接下来我们使用BufferedReader的readLine来读取这个片段，来重现一种乱码出现的情况！\n\njava程序如下：\n```java\nFile file = new File(\"gbktest.txt\");\ntry(BufferedReader bufferedReader = new BufferedReader(new FileReader(file))){\n    String s = \"\";\n    while ( (s = bufferedReader.readLine()) != null ){\n        System.out.println(s);//控制台输出 Iam��ɽ\n    }\n}\n```\n\n这个程序读取gbktest.txt的内容并且打印到了标准输出上，也就是控制台上。\n\n为了方便后续的讨论，我将这个程序在执行过程中存在的不同版本的字节流命名如下：\n1. gbktest.txt本身的字节流，一串GBK字节流，二进制表示如下：`01001001 01100001 01101101 10111110 11111101 11001001 10111101`，我们称它为`GBK流`\n\n2. BufferedReader使用readLine获得到了一串字符串据s，Java的字符串内部使用Unicode编码（内码）存储，我们称它为`Unicode流`\n\n3. 控制台获取s的内容打印到标准输出上的字节流，由于标准输出我这边是UTF-8编码，所以我们称它为`UTF-8流`\n\n为了理解第三节的讨论，你必须要对下面的知识点有清醒的认识\n\n1. java的String内部使用16位空间存储字符，也就是Unicode字符\n2. UTF-8不会一口气转换成GBK，中间必须使用Unicode字符来过渡\n\n# 3\n\n接下来我一步步来透彻的讲解这些代码发生了什么\n\n1. bufferedReader.readLine()，bufferedReader内部默认使用UTF-8编码来读取，比对Unicode表来转换字节到字符（网上可以查到），使用read，一次只读取一个字节，最后拼成一串char数组返回，所以按照它的读取规则，我们的`GBK流`会被如下解析\n\n```txt\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n  |\n  V\n对照UTF-8表，发现是I，然后在Unicode的总表上查阅I字符怎么表示，最终填入char[0] = 'U+0049' 也就是'I'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n            |\n            V\n对照UTF-8表，发现是a，然后在Unicode的总表上查阅a字符怎么表示，最终填入char[1] = 'U+0061' 也就是'a'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                     |\n                     V\n    对照UTF-8表，发现是m，然后在Unicode的总表上查阅m字符怎么表示，最终填入char[2] = 'U+006D' 也就是'm'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                              |\n                              V\n    对照UTF-8表，发现不对，UTF-8码表规则不允许用10开头！(UTF-8码表规则在下面附上，请自己比对)\n    针对这种情况，转换规则里存在一种机制，会把不允许的字节全部自动变成一个叫\"[置换字符](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\"的东西！UTF-8的置换字符为�，在Unicode总表上查出来，所以char[3] = 'U+FFFD' 也就是'�'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                                       |\n                                       V\n    对照UTF-8表，和上面情况一样，发现不允许11111开头！所以char[4] = 'U+FFFD' 也就是'�'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                                                |       |\n                                                V       V\n    对照UTF-8表，发现是第一个字节110开头第二个字节10开头，符合utf-8双字节表示的情况！所以一口气读取2个字节，转换成Unicode码为`U+027D`.所以char[5] = 'U+027D' 也就是'ɽ'\n\n```\n```txt\nUnicode符号范围 | UTF-8编码方式\n(十六进制) | （二进制）\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n```\n\n所以综上所述，我们的String s的内容的Unicode码为`U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D`\n\n这串Unicode的码就是我们读取后java底层保存的真正内容！也就是`Iam��ɽ`\n\n从这里我们其实已经得到了答案，那就是BUfferedReader的这种读取方式直接就把我们的`源文件流`内容完全变掉了，变成了一串新的东西，错就错在它读取的时候按照UTF-8的规则来转换，把本来应该双字节双字节为单位读取的二进制数据，'翻译'成了另一个样子！\n\n# 4\n\n那么我们现在的关键问题是，这串Unicode码能不能通过简单的方式转换为没有乱码的样子？\n\n在网上流行的方法会让你这么做：\n```java\nSystem.out.println(new String(s.getBytes(\"ISO-8859-1\"),\"GBK\"));//这个在一些例子里可以成功实现快速转换，但是在我们这个例子是行不通的！为什么？下面解释\n```\n\n类比到我们这个例子里，也许就是这么做\n```java\nSystem.out.println(new String(s.getBytes(\"UTF-8\"),\"GBK\"));//输出 Iam锟斤拷山\n```\n\n可以看到输出变成了'Iam锟斤拷山'，和我们本来的意思不一样了！所以它虽然看上去变成中文了，但是实际上依旧是乱码！下面依旧一步步来给你解释为什么会这样！\n\n首先`s.getBytes(\"UTF-8\")`，这个代码的意思是将字符串s的Unicode码（内码）转换为UTF-8码，返回一个byte[]，如下\n```\n由于UTF-8很多是三字节的，用二进制表示会太长不已阅读，这里就用十六进制表示下，你可以自己转\nUnicode:\nU+0049 U+0061 U+006D U+FFFD U+FFFD U+027D\n\n使用UTF-8码表翻译Unicode，得到如下二进制数据：\n01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101\n```\n所以我们得到的byte数组内容就是`01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101`\n\n其次`new String(s.getBytes(\"UTF-8\"),\"GBK\")`的第二个参数会用GBK的字节读取规则来转换这个byte[]，把它变成Unicode码最后存在字符串s中，如下所示：\n```\nbyte[]:\n01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101\n\n先转换为GBK\n0049 0061 006D EFBF BDEF BFBD C9BD\n\n然后转换为Unicode存储至String中\nI    a    m    锟   斤   拷   山\n```\n\n所以我们通过这个方式转换后，得到了输出为`Iam锟斤拷山`\n\n**[小节]**: 所以单纯使用`System.out.println(new String(s.getBytes(\"UTF-8\"),\"GBK\"));`这种方式来教别人转换是有点误导向的。这种方式的本来意思就是用前者的编码将Unicode转换为UTF-8格式的Byte[]，然后再用GBK的码表把这个Byte数组转换为Unicode！ 这个过程的作用简直就是搞笑！这个代码也是让我哭笑不得。但是也有些情况用这个代码可以实现快速的转换，比如`System.out.println(new String(s.getBytes(\"ISO-8859-1\"),\"GBK\"));`，这是因为ISO-8859-1是8位的编码格式，它正好把一个中文对半拆分成了2个字符，由于是对半的，所以转换为byte数组的时候，结果是一样的，就可以歪打正着的还原回去了！真的哭笑不得\n\n# 5\n\n本次的编码课题就到此结束了，有问题的小伙伴可以在下面评论，看不多评论是因为你没有使用科学上网工具\n\n参考：[GBK码表](http://tools.jb51.net/table/gbk_table)\n参考：[Unicode字符对应所有的编码如何表示的网站，很好用](https://www.fileformat.info/info/unicode/char/fffd/index.htm)\n参考：[在线进制转换工具](https://tool.oschina.net/hexconvert)\n参考：[Unicode码表](https://zh.wikibooks.org/wiki/Unicode/%E5%AD%97%E7%AC%A6%E5%8F%82%E8%80%83/0000-0FFF)\n参考：[UTF-8码表](https://en.wikipedia.org/wiki/UTF-8)\n\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","source":"_posts/Java的字符编码问题一语道破-GBK-UTF等常用编码.md","raw":"---\ntitle: 'Java的字符编码问题一语道破(GBK,UTF-8,ISO-8859-1)'\ntags: 编码\ncategories: IT\ndate: 2019-06-15 19:21:15\n---\n\n# 0\n\n如果你是纯小白，那么请先阅读[我的编码总结](https://zazalu.space/2019/04/24/%E6%88%91%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/)，对编码有了最基础的认识后，进行本篇文章的阅读，我可以保证你可以对Java这块会出现的编码的问题都可以自行一一解决，而且不需要借助google或者百度，全部都可以自己思考解决\n\n# 1 \n\n我们从一个Java乱码的实例来抛出这个问题。\n\n实例场景：\n>要求使用Java读取一个 GBK 格式的文件，使用BufferedReader的readLine读取后发现控制台输出乱码\n\nGBK文件内容如下图所示\n<img src=\"/images/tmpImage/Java_Character_1.png\">\n\n在使用Java程序读取之前，我们先来分析这个文件的二进制内容，这里先向再看这篇文章的人特别强调一点，那就是分析乱码的时候，请务必从二进制出发！虽然你会发现控制台，数据库，文件的内容输出根据编码情况变来变去的，搞的你天花乱坠，但是二进制文件是万变不离其宗的！\n\n我们使用linux的hexdump来获取二进制数据\n```s\nzazalu@zazalu-ThinkPad-E480:~/app/JavaProjectWithIDEA/MySpider/src/main/resources$ hd gbktest.txt \n00000000  49 61 6d be fd c9 bd                              |Iam....|\n00000007\n```\n\n得到了`49 61 6d be fd c9 bd`，这是我们这个文件的十六进制表示，随后我们逐个转换为二进制如下(不足8位的我在最前面补0了，8bit = 1byte)\n```txt\n49       61       6d       be       fd       c9       bd \n01001001 01100001 01101101 10111110 11111101 11001001 10111101 \n```\n**[注意]**: 可以对照[这张码表](http://tools.jb51.net/table/gbk_table)来看看hexdump程序对不对，我自己对照过了，`君`是`befd`，山是`c9bd`，没问题。前面的英文直接对照ASCII码表即可，都吻合！\n\n到这里我们就知道了`Iam君山`这句话的GBK二进制数据表示就是`01001001 01100001 01101101 10111110 11111101 11001001 10111101`\n\n# 2\n\n接下来我们使用BufferedReader的readLine来读取这个片段，来重现一种乱码出现的情况！\n\njava程序如下：\n```java\nFile file = new File(\"gbktest.txt\");\ntry(BufferedReader bufferedReader = new BufferedReader(new FileReader(file))){\n    String s = \"\";\n    while ( (s = bufferedReader.readLine()) != null ){\n        System.out.println(s);//控制台输出 Iam��ɽ\n    }\n}\n```\n\n这个程序读取gbktest.txt的内容并且打印到了标准输出上，也就是控制台上。\n\n为了方便后续的讨论，我将这个程序在执行过程中存在的不同版本的字节流命名如下：\n1. gbktest.txt本身的字节流，一串GBK字节流，二进制表示如下：`01001001 01100001 01101101 10111110 11111101 11001001 10111101`，我们称它为`GBK流`\n\n2. BufferedReader使用readLine获得到了一串字符串据s，Java的字符串内部使用Unicode编码（内码）存储，我们称它为`Unicode流`\n\n3. 控制台获取s的内容打印到标准输出上的字节流，由于标准输出我这边是UTF-8编码，所以我们称它为`UTF-8流`\n\n为了理解第三节的讨论，你必须要对下面的知识点有清醒的认识\n\n1. java的String内部使用16位空间存储字符，也就是Unicode字符\n2. UTF-8不会一口气转换成GBK，中间必须使用Unicode字符来过渡\n\n# 3\n\n接下来我一步步来透彻的讲解这些代码发生了什么\n\n1. bufferedReader.readLine()，bufferedReader内部默认使用UTF-8编码来读取，比对Unicode表来转换字节到字符（网上可以查到），使用read，一次只读取一个字节，最后拼成一串char数组返回，所以按照它的读取规则，我们的`GBK流`会被如下解析\n\n```txt\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n  |\n  V\n对照UTF-8表，发现是I，然后在Unicode的总表上查阅I字符怎么表示，最终填入char[0] = 'U+0049' 也就是'I'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n            |\n            V\n对照UTF-8表，发现是a，然后在Unicode的总表上查阅a字符怎么表示，最终填入char[1] = 'U+0061' 也就是'a'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                     |\n                     V\n    对照UTF-8表，发现是m，然后在Unicode的总表上查阅m字符怎么表示，最终填入char[2] = 'U+006D' 也就是'm'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                              |\n                              V\n    对照UTF-8表，发现不对，UTF-8码表规则不允许用10开头！(UTF-8码表规则在下面附上，请自己比对)\n    针对这种情况，转换规则里存在一种机制，会把不允许的字节全部自动变成一个叫\"[置换字符](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character\"的东西！UTF-8的置换字符为�，在Unicode总表上查出来，所以char[3] = 'U+FFFD' 也就是'�'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                                       |\n                                       V\n    对照UTF-8表，和上面情况一样，发现不允许11111开头！所以char[4] = 'U+FFFD' 也就是'�'\n\n01001001 01100001 01101101 10111110 11111101 11001001 10111101\n                                                |       |\n                                                V       V\n    对照UTF-8表，发现是第一个字节110开头第二个字节10开头，符合utf-8双字节表示的情况！所以一口气读取2个字节，转换成Unicode码为`U+027D`.所以char[5] = 'U+027D' 也就是'ɽ'\n\n```\n```txt\nUnicode符号范围 | UTF-8编码方式\n(十六进制) | （二进制）\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n```\n\n所以综上所述，我们的String s的内容的Unicode码为`U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D`\n\n这串Unicode的码就是我们读取后java底层保存的真正内容！也就是`Iam��ɽ`\n\n从这里我们其实已经得到了答案，那就是BUfferedReader的这种读取方式直接就把我们的`源文件流`内容完全变掉了，变成了一串新的东西，错就错在它读取的时候按照UTF-8的规则来转换，把本来应该双字节双字节为单位读取的二进制数据，'翻译'成了另一个样子！\n\n# 4\n\n那么我们现在的关键问题是，这串Unicode码能不能通过简单的方式转换为没有乱码的样子？\n\n在网上流行的方法会让你这么做：\n```java\nSystem.out.println(new String(s.getBytes(\"ISO-8859-1\"),\"GBK\"));//这个在一些例子里可以成功实现快速转换，但是在我们这个例子是行不通的！为什么？下面解释\n```\n\n类比到我们这个例子里，也许就是这么做\n```java\nSystem.out.println(new String(s.getBytes(\"UTF-8\"),\"GBK\"));//输出 Iam锟斤拷山\n```\n\n可以看到输出变成了'Iam锟斤拷山'，和我们本来的意思不一样了！所以它虽然看上去变成中文了，但是实际上依旧是乱码！下面依旧一步步来给你解释为什么会这样！\n\n首先`s.getBytes(\"UTF-8\")`，这个代码的意思是将字符串s的Unicode码（内码）转换为UTF-8码，返回一个byte[]，如下\n```\n由于UTF-8很多是三字节的，用二进制表示会太长不已阅读，这里就用十六进制表示下，你可以自己转\nUnicode:\nU+0049 U+0061 U+006D U+FFFD U+FFFD U+027D\n\n使用UTF-8码表翻译Unicode，得到如下二进制数据：\n01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101\n```\n所以我们得到的byte数组内容就是`01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101`\n\n其次`new String(s.getBytes(\"UTF-8\"),\"GBK\")`的第二个参数会用GBK的字节读取规则来转换这个byte[]，把它变成Unicode码最后存在字符串s中，如下所示：\n```\nbyte[]:\n01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101\n\n先转换为GBK\n0049 0061 006D EFBF BDEF BFBD C9BD\n\n然后转换为Unicode存储至String中\nI    a    m    锟   斤   拷   山\n```\n\n所以我们通过这个方式转换后，得到了输出为`Iam锟斤拷山`\n\n**[小节]**: 所以单纯使用`System.out.println(new String(s.getBytes(\"UTF-8\"),\"GBK\"));`这种方式来教别人转换是有点误导向的。这种方式的本来意思就是用前者的编码将Unicode转换为UTF-8格式的Byte[]，然后再用GBK的码表把这个Byte数组转换为Unicode！ 这个过程的作用简直就是搞笑！这个代码也是让我哭笑不得。但是也有些情况用这个代码可以实现快速的转换，比如`System.out.println(new String(s.getBytes(\"ISO-8859-1\"),\"GBK\"));`，这是因为ISO-8859-1是8位的编码格式，它正好把一个中文对半拆分成了2个字符，由于是对半的，所以转换为byte数组的时候，结果是一样的，就可以歪打正着的还原回去了！真的哭笑不得\n\n# 5\n\n本次的编码课题就到此结束了，有问题的小伙伴可以在下面评论，看不多评论是因为你没有使用科学上网工具\n\n参考：[GBK码表](http://tools.jb51.net/table/gbk_table)\n参考：[Unicode字符对应所有的编码如何表示的网站，很好用](https://www.fileformat.info/info/unicode/char/fffd/index.htm)\n参考：[在线进制转换工具](https://tool.oschina.net/hexconvert)\n参考：[Unicode码表](https://zh.wikibooks.org/wiki/Unicode/%E5%AD%97%E7%AC%A6%E5%8F%82%E8%80%83/0000-0FFF)\n参考：[UTF-8码表](https://en.wikipedia.org/wiki/UTF-8)\n\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","slug":"Java的字符编码问题一语道破-GBK-UTF等常用编码","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9uo004nm6elxnquz3ga","content":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>如果你是纯小白，那么请先阅读<a href=\"https://zazalu.space/2019/04/24/%E6%88%91%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/\">我的编码总结</a>，对编码有了最基础的认识后，进行本篇文章的阅读，我可以保证你可以对Java这块会出现的编码的问题都可以自行一一解决，而且不需要借助google或者百度，全部都可以自己思考解决</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>我们从一个Java乱码的实例来抛出这个问题。</p>\n<p>实例场景：</p>\n<blockquote>\n<p>要求使用Java读取一个 GBK 格式的文件，使用BufferedReader的readLine读取后发现控制台输出乱码</p>\n</blockquote>\n<p>GBK文件内容如下图所示<br><img src=\"/images/tmpImage/Java_Character_1.png\"></p>\n<p>在使用Java程序读取之前，我们先来分析这个文件的二进制内容，这里先向再看这篇文章的人特别强调一点，那就是分析乱码的时候，请务必从二进制出发！虽然你会发现控制台，数据库，文件的内容输出根据编码情况变来变去的，搞的你天花乱坠，但是二进制文件是万变不离其宗的！</p>\n<p>我们使用linux的hexdump来获取二进制数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zazalu@zazalu-ThinkPad-E480:~/app/JavaProjectWithIDEA/MySpider/src/main/resources$ hd gbktest.txt </span><br><span class=\"line\">00000000  49 61 6d be fd c9 bd                              |Iam....|</span><br><span class=\"line\">00000007</span><br></pre></td></tr></table></figure></p>\n<p>得到了<code>49 61 6d be fd c9 bd</code>，这是我们这个文件的十六进制表示，随后我们逐个转换为二进制如下(不足8位的我在最前面补0了，8bit = 1byte)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">49       61       6d       be       fd       c9       bd </span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br></pre></td></tr></table></figure></p>\n<p><strong>[注意]</strong>: 可以对照<a href=\"http://tools.jb51.net/table/gbk_table\" target=\"_blank\" rel=\"noopener\">这张码表</a>来看看hexdump程序对不对，我自己对照过了，<code>君</code>是<code>befd</code>，山是<code>c9bd</code>，没问题。前面的英文直接对照ASCII码表即可，都吻合！</p>\n<p>到这里我们就知道了<code>Iam君山</code>这句话的GBK二进制数据表示就是<code>01001001 01100001 01101101 10111110 11111101 11001001 10111101</code></p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>接下来我们使用BufferedReader的readLine来读取这个片段，来重现一种乱码出现的情况！</p>\n<p>java程序如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"gbktest.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span>(BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(file)))&#123;</span><br><span class=\"line\">    String s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( (s = bufferedReader.readLine()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        System.out.println(s);<span class=\"comment\">//控制台输出 Iam��ɽ</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个程序读取gbktest.txt的内容并且打印到了标准输出上，也就是控制台上。</p>\n<p>为了方便后续的讨论，我将这个程序在执行过程中存在的不同版本的字节流命名如下：</p>\n<ol>\n<li><p>gbktest.txt本身的字节流，一串GBK字节流，二进制表示如下：<code>01001001 01100001 01101101 10111110 11111101 11001001 10111101</code>，我们称它为<code>GBK流</code></p>\n</li>\n<li><p>BufferedReader使用readLine获得到了一串字符串据s，Java的字符串内部使用Unicode编码（内码）存储，我们称它为<code>Unicode流</code></p>\n</li>\n<li><p>控制台获取s的内容打印到标准输出上的字节流，由于标准输出我这边是UTF-8编码，所以我们称它为<code>UTF-8流</code></p>\n</li>\n</ol>\n<p>为了理解第三节的讨论，你必须要对下面的知识点有清醒的认识</p>\n<ol>\n<li>java的String内部使用16位空间存储字符，也就是Unicode字符</li>\n<li>UTF-8不会一口气转换成GBK，中间必须使用Unicode字符来过渡</li>\n</ol>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>接下来我一步步来透彻的讲解这些代码发生了什么</p>\n<ol>\n<li>bufferedReader.readLine()，bufferedReader内部默认使用UTF-8编码来读取，比对Unicode表来转换字节到字符（网上可以查到），使用read，一次只读取一个字节，最后拼成一串char数组返回，所以按照它的读取规则，我们的<code>GBK流</code>会被如下解析</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">  |</span><br><span class=\"line\">  V</span><br><span class=\"line\">对照UTF-8表，发现是I，然后在Unicode的总表上查阅I字符怎么表示，最终填入char[0] = &apos;U+0049&apos; 也就是&apos;I&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">            |</span><br><span class=\"line\">            V</span><br><span class=\"line\">对照UTF-8表，发现是a，然后在Unicode的总表上查阅a字符怎么表示，最终填入char[1] = &apos;U+0061&apos; 也就是&apos;a&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                     |</span><br><span class=\"line\">                     V</span><br><span class=\"line\">    对照UTF-8表，发现是m，然后在Unicode的总表上查阅m字符怎么表示，最终填入char[2] = &apos;U+006D&apos; 也就是&apos;m&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                              |</span><br><span class=\"line\">                              V</span><br><span class=\"line\">    对照UTF-8表，发现不对，UTF-8码表规则不允许用10开头！(UTF-8码表规则在下面附上，请自己比对)</span><br><span class=\"line\">    针对这种情况，转换规则里存在一种机制，会把不允许的字节全部自动变成一个叫&quot;[置换字符](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character&quot;的东西！UTF-8的置换字符为�，在Unicode总表上查出来，所以char[3] = &apos;U+FFFD&apos; 也就是&apos;�&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                                       |</span><br><span class=\"line\">                                       V</span><br><span class=\"line\">    对照UTF-8表，和上面情况一样，发现不允许11111开头！所以char[4] = &apos;U+FFFD&apos; 也就是&apos;�&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                                                |       |</span><br><span class=\"line\">                                                V       V</span><br><span class=\"line\">    对照UTF-8表，发现是第一个字节110开头第二个字节10开头，符合utf-8双字节表示的情况！所以一口气读取2个字节，转换成Unicode码为`U+027D`.所以char[5] = &apos;U+027D&apos; 也就是&apos;ɽ&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unicode符号范围 | UTF-8编码方式</span><br><span class=\"line\">(十六进制) | （二进制）</span><br><span class=\"line\">--------------------+---------------------------------------------</span><br><span class=\"line\">0000 0000-0000 007F | 0xxxxxxx</span><br><span class=\"line\">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class=\"line\">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class=\"line\">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure>\n<p>所以综上所述，我们的String s的内容的Unicode码为<code>U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D</code></p>\n<p>这串Unicode的码就是我们读取后java底层保存的真正内容！也就是<code>Iam��ɽ</code></p>\n<p>从这里我们其实已经得到了答案，那就是BUfferedReader的这种读取方式直接就把我们的<code>源文件流</code>内容完全变掉了，变成了一串新的东西，错就错在它读取的时候按照UTF-8的规则来转换，把本来应该双字节双字节为单位读取的二进制数据，’翻译’成了另一个样子！</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>那么我们现在的关键问题是，这串Unicode码能不能通过简单的方式转换为没有乱码的样子？</p>\n<p>在网上流行的方法会让你这么做：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"ISO-8859-1\"</span>),<span class=\"string\">\"GBK\"</span>));<span class=\"comment\">//这个在一些例子里可以成功实现快速转换，但是在我们这个例子是行不通的！为什么？下面解释</span></span><br></pre></td></tr></table></figure></p>\n<p>类比到我们这个例子里，也许就是这么做<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"UTF-8\"</span>),<span class=\"string\">\"GBK\"</span>));<span class=\"comment\">//输出 Iam锟斤拷山</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到输出变成了’Iam锟斤拷山’，和我们本来的意思不一样了！所以它虽然看上去变成中文了，但是实际上依旧是乱码！下面依旧一步步来给你解释为什么会这样！</p>\n<p>首先<code>s.getBytes(&quot;UTF-8&quot;)</code>，这个代码的意思是将字符串s的Unicode码（内码）转换为UTF-8码，返回一个byte[]，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于UTF-8很多是三字节的，用二进制表示会太长不已阅读，这里就用十六进制表示下，你可以自己转</span><br><span class=\"line\">Unicode:</span><br><span class=\"line\">U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D</span><br><span class=\"line\"></span><br><span class=\"line\">使用UTF-8码表翻译Unicode，得到如下二进制数据：</span><br><span class=\"line\">01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</span><br></pre></td></tr></table></figure></p>\n<p>所以我们得到的byte数组内容就是<code>01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</code></p>\n<p>其次<code>new String(s.getBytes(&quot;UTF-8&quot;),&quot;GBK&quot;)</code>的第二个参数会用GBK的字节读取规则来转换这个byte[]，把它变成Unicode码最后存在字符串s中，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[]:</span><br><span class=\"line\">01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</span><br><span class=\"line\"></span><br><span class=\"line\">先转换为GBK</span><br><span class=\"line\">0049 0061 006D EFBF BDEF BFBD C9BD</span><br><span class=\"line\"></span><br><span class=\"line\">然后转换为Unicode存储至String中</span><br><span class=\"line\">I    a    m    锟   斤   拷   山</span><br></pre></td></tr></table></figure></p>\n<p>所以我们通过这个方式转换后，得到了输出为<code>Iam锟斤拷山</code></p>\n<p><strong>[小节]</strong>: 所以单纯使用<code>System.out.println(new String(s.getBytes(&quot;UTF-8&quot;),&quot;GBK&quot;));</code>这种方式来教别人转换是有点误导向的。这种方式的本来意思就是用前者的编码将Unicode转换为UTF-8格式的Byte[]，然后再用GBK的码表把这个Byte数组转换为Unicode！ 这个过程的作用简直就是搞笑！这个代码也是让我哭笑不得。但是也有些情况用这个代码可以实现快速的转换，比如<code>System.out.println(new String(s.getBytes(&quot;ISO-8859-1&quot;),&quot;GBK&quot;));</code>，这是因为ISO-8859-1是8位的编码格式，它正好把一个中文对半拆分成了2个字符，由于是对半的，所以转换为byte数组的时候，结果是一样的，就可以歪打正着的还原回去了！真的哭笑不得</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>本次的编码课题就到此结束了，有问题的小伙伴可以在下面评论，看不多评论是因为你没有使用科学上网工具</p>\n<p>参考：<a href=\"http://tools.jb51.net/table/gbk_table\" target=\"_blank\" rel=\"noopener\">GBK码表</a><br>参考：<a href=\"https://www.fileformat.info/info/unicode/char/fffd/index.htm\" target=\"_blank\" rel=\"noopener\">Unicode字符对应所有的编码如何表示的网站，很好用</a><br>参考：<a href=\"https://tool.oschina.net/hexconvert\" target=\"_blank\" rel=\"noopener\">在线进制转换工具</a><br>参考：<a href=\"https://zh.wikibooks.org/wiki/Unicode/%E5%AD%97%E7%AC%A6%E5%8F%82%E8%80%83/0000-0FFF\" target=\"_blank\" rel=\"noopener\">Unicode码表</a><br>参考：<a href=\"https://en.wikipedia.org/wiki/UTF-8\" target=\"_blank\" rel=\"noopener\">UTF-8码表</a></p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h1><p>如果你是纯小白，那么请先阅读<a href=\"https://zazalu.space/2019/04/24/%E6%88%91%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%80%BB%E7%BB%93/\">我的编码总结</a>，对编码有了最基础的认识后，进行本篇文章的阅读，我可以保证你可以对Java这块会出现的编码的问题都可以自行一一解决，而且不需要借助google或者百度，全部都可以自己思考解决</p>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>我们从一个Java乱码的实例来抛出这个问题。</p>\n<p>实例场景：</p>\n<blockquote>\n<p>要求使用Java读取一个 GBK 格式的文件，使用BufferedReader的readLine读取后发现控制台输出乱码</p>\n</blockquote>\n<p>GBK文件内容如下图所示<br><img src=\"/images/tmpImage/Java_Character_1.png\"></p>\n<p>在使用Java程序读取之前，我们先来分析这个文件的二进制内容，这里先向再看这篇文章的人特别强调一点，那就是分析乱码的时候，请务必从二进制出发！虽然你会发现控制台，数据库，文件的内容输出根据编码情况变来变去的，搞的你天花乱坠，但是二进制文件是万变不离其宗的！</p>\n<p>我们使用linux的hexdump来获取二进制数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zazalu@zazalu-ThinkPad-E480:~/app/JavaProjectWithIDEA/MySpider/src/main/resources$ hd gbktest.txt </span><br><span class=\"line\">00000000  49 61 6d be fd c9 bd                              |Iam....|</span><br><span class=\"line\">00000007</span><br></pre></td></tr></table></figure></p>\n<p>得到了<code>49 61 6d be fd c9 bd</code>，这是我们这个文件的十六进制表示，随后我们逐个转换为二进制如下(不足8位的我在最前面补0了，8bit = 1byte)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">49       61       6d       be       fd       c9       bd </span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br></pre></td></tr></table></figure></p>\n<p><strong>[注意]</strong>: 可以对照<a href=\"http://tools.jb51.net/table/gbk_table\" target=\"_blank\" rel=\"noopener\">这张码表</a>来看看hexdump程序对不对，我自己对照过了，<code>君</code>是<code>befd</code>，山是<code>c9bd</code>，没问题。前面的英文直接对照ASCII码表即可，都吻合！</p>\n<p>到这里我们就知道了<code>Iam君山</code>这句话的GBK二进制数据表示就是<code>01001001 01100001 01101101 10111110 11111101 11001001 10111101</code></p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>接下来我们使用BufferedReader的readLine来读取这个片段，来重现一种乱码出现的情况！</p>\n<p>java程序如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"gbktest.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">try</span>(BufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(file)))&#123;</span><br><span class=\"line\">    String s = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( (s = bufferedReader.readLine()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">        System.out.println(s);<span class=\"comment\">//控制台输出 Iam��ɽ</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个程序读取gbktest.txt的内容并且打印到了标准输出上，也就是控制台上。</p>\n<p>为了方便后续的讨论，我将这个程序在执行过程中存在的不同版本的字节流命名如下：</p>\n<ol>\n<li><p>gbktest.txt本身的字节流，一串GBK字节流，二进制表示如下：<code>01001001 01100001 01101101 10111110 11111101 11001001 10111101</code>，我们称它为<code>GBK流</code></p>\n</li>\n<li><p>BufferedReader使用readLine获得到了一串字符串据s，Java的字符串内部使用Unicode编码（内码）存储，我们称它为<code>Unicode流</code></p>\n</li>\n<li><p>控制台获取s的内容打印到标准输出上的字节流，由于标准输出我这边是UTF-8编码，所以我们称它为<code>UTF-8流</code></p>\n</li>\n</ol>\n<p>为了理解第三节的讨论，你必须要对下面的知识点有清醒的认识</p>\n<ol>\n<li>java的String内部使用16位空间存储字符，也就是Unicode字符</li>\n<li>UTF-8不会一口气转换成GBK，中间必须使用Unicode字符来过渡</li>\n</ol>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>接下来我一步步来透彻的讲解这些代码发生了什么</p>\n<ol>\n<li>bufferedReader.readLine()，bufferedReader内部默认使用UTF-8编码来读取，比对Unicode表来转换字节到字符（网上可以查到），使用read，一次只读取一个字节，最后拼成一串char数组返回，所以按照它的读取规则，我们的<code>GBK流</code>会被如下解析</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">  |</span><br><span class=\"line\">  V</span><br><span class=\"line\">对照UTF-8表，发现是I，然后在Unicode的总表上查阅I字符怎么表示，最终填入char[0] = &apos;U+0049&apos; 也就是&apos;I&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">            |</span><br><span class=\"line\">            V</span><br><span class=\"line\">对照UTF-8表，发现是a，然后在Unicode的总表上查阅a字符怎么表示，最终填入char[1] = &apos;U+0061&apos; 也就是&apos;a&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                     |</span><br><span class=\"line\">                     V</span><br><span class=\"line\">    对照UTF-8表，发现是m，然后在Unicode的总表上查阅m字符怎么表示，最终填入char[2] = &apos;U+006D&apos; 也就是&apos;m&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                              |</span><br><span class=\"line\">                              V</span><br><span class=\"line\">    对照UTF-8表，发现不对，UTF-8码表规则不允许用10开头！(UTF-8码表规则在下面附上，请自己比对)</span><br><span class=\"line\">    针对这种情况，转换规则里存在一种机制，会把不允许的字节全部自动变成一个叫&quot;[置换字符](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character&quot;的东西！UTF-8的置换字符为�，在Unicode总表上查出来，所以char[3] = &apos;U+FFFD&apos; 也就是&apos;�&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                                       |</span><br><span class=\"line\">                                       V</span><br><span class=\"line\">    对照UTF-8表，和上面情况一样，发现不允许11111开头！所以char[4] = &apos;U+FFFD&apos; 也就是&apos;�&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">01001001 01100001 01101101 10111110 11111101 11001001 10111101</span><br><span class=\"line\">                                                |       |</span><br><span class=\"line\">                                                V       V</span><br><span class=\"line\">    对照UTF-8表，发现是第一个字节110开头第二个字节10开头，符合utf-8双字节表示的情况！所以一口气读取2个字节，转换成Unicode码为`U+027D`.所以char[5] = &apos;U+027D&apos; 也就是&apos;ɽ&apos;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Unicode符号范围 | UTF-8编码方式</span><br><span class=\"line\">(十六进制) | （二进制）</span><br><span class=\"line\">--------------------+---------------------------------------------</span><br><span class=\"line\">0000 0000-0000 007F | 0xxxxxxx</span><br><span class=\"line\">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class=\"line\">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class=\"line\">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure>\n<p>所以综上所述，我们的String s的内容的Unicode码为<code>U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D</code></p>\n<p>这串Unicode的码就是我们读取后java底层保存的真正内容！也就是<code>Iam��ɽ</code></p>\n<p>从这里我们其实已经得到了答案，那就是BUfferedReader的这种读取方式直接就把我们的<code>源文件流</code>内容完全变掉了，变成了一串新的东西，错就错在它读取的时候按照UTF-8的规则来转换，把本来应该双字节双字节为单位读取的二进制数据，’翻译’成了另一个样子！</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>那么我们现在的关键问题是，这串Unicode码能不能通过简单的方式转换为没有乱码的样子？</p>\n<p>在网上流行的方法会让你这么做：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"ISO-8859-1\"</span>),<span class=\"string\">\"GBK\"</span>));<span class=\"comment\">//这个在一些例子里可以成功实现快速转换，但是在我们这个例子是行不通的！为什么？下面解释</span></span><br></pre></td></tr></table></figure></p>\n<p>类比到我们这个例子里，也许就是这么做<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"keyword\">new</span> String(s.getBytes(<span class=\"string\">\"UTF-8\"</span>),<span class=\"string\">\"GBK\"</span>));<span class=\"comment\">//输出 Iam锟斤拷山</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到输出变成了’Iam锟斤拷山’，和我们本来的意思不一样了！所以它虽然看上去变成中文了，但是实际上依旧是乱码！下面依旧一步步来给你解释为什么会这样！</p>\n<p>首先<code>s.getBytes(&quot;UTF-8&quot;)</code>，这个代码的意思是将字符串s的Unicode码（内码）转换为UTF-8码，返回一个byte[]，如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">由于UTF-8很多是三字节的，用二进制表示会太长不已阅读，这里就用十六进制表示下，你可以自己转</span><br><span class=\"line\">Unicode:</span><br><span class=\"line\">U+0049 U+0061 U+006D U+FFFD U+FFFD U+027D</span><br><span class=\"line\"></span><br><span class=\"line\">使用UTF-8码表翻译Unicode，得到如下二进制数据：</span><br><span class=\"line\">01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</span><br></pre></td></tr></table></figure></p>\n<p>所以我们得到的byte数组内容就是<code>01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</code></p>\n<p>其次<code>new String(s.getBytes(&quot;UTF-8&quot;),&quot;GBK&quot;)</code>的第二个参数会用GBK的字节读取规则来转换这个byte[]，把它变成Unicode码最后存在字符串s中，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">byte[]:</span><br><span class=\"line\">01001001 01100001 11001001 11101111 10111111 10111101 11101111 10111111 10111101 11001001 10111101</span><br><span class=\"line\"></span><br><span class=\"line\">先转换为GBK</span><br><span class=\"line\">0049 0061 006D EFBF BDEF BFBD C9BD</span><br><span class=\"line\"></span><br><span class=\"line\">然后转换为Unicode存储至String中</span><br><span class=\"line\">I    a    m    锟   斤   拷   山</span><br></pre></td></tr></table></figure></p>\n<p>所以我们通过这个方式转换后，得到了输出为<code>Iam锟斤拷山</code></p>\n<p><strong>[小节]</strong>: 所以单纯使用<code>System.out.println(new String(s.getBytes(&quot;UTF-8&quot;),&quot;GBK&quot;));</code>这种方式来教别人转换是有点误导向的。这种方式的本来意思就是用前者的编码将Unicode转换为UTF-8格式的Byte[]，然后再用GBK的码表把这个Byte数组转换为Unicode！ 这个过程的作用简直就是搞笑！这个代码也是让我哭笑不得。但是也有些情况用这个代码可以实现快速的转换，比如<code>System.out.println(new String(s.getBytes(&quot;ISO-8859-1&quot;),&quot;GBK&quot;));</code>，这是因为ISO-8859-1是8位的编码格式，它正好把一个中文对半拆分成了2个字符，由于是对半的，所以转换为byte数组的时候，结果是一样的，就可以歪打正着的还原回去了！真的哭笑不得</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>本次的编码课题就到此结束了，有问题的小伙伴可以在下面评论，看不多评论是因为你没有使用科学上网工具</p>\n<p>参考：<a href=\"http://tools.jb51.net/table/gbk_table\" target=\"_blank\" rel=\"noopener\">GBK码表</a><br>参考：<a href=\"https://www.fileformat.info/info/unicode/char/fffd/index.htm\" target=\"_blank\" rel=\"noopener\">Unicode字符对应所有的编码如何表示的网站，很好用</a><br>参考：<a href=\"https://tool.oschina.net/hexconvert\" target=\"_blank\" rel=\"noopener\">在线进制转换工具</a><br>参考：<a href=\"https://zh.wikibooks.org/wiki/Unicode/%E5%AD%97%E7%AC%A6%E5%8F%82%E8%80%83/0000-0FFF\" target=\"_blank\" rel=\"noopener\">Unicode码表</a><br>参考：<a href=\"https://en.wikipedia.org/wiki/UTF-8\" target=\"_blank\" rel=\"noopener\">UTF-8码表</a></p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>"},{"title":"Servlet的总结","date":"2019-04-24T05:52:41.000Z","_content":"\n一篇对JavaWeb的Servlet的个人理解（2019-06-24 对本文进行了一定修改，追求下时效性）\n\n<!-- more -->\n## 什么是Servlet\n\n---\n\nservlet是运行在web服务器上的小型Java程序（即服务器端的小应用程序），servlet通常通过HTTP接收和响应来自web客户端的要求\n\n我所熟知的是关于httpservlet的使用。不要觉得知道了http servlet，但是却不知道https的相关使用。其实https只是http的一层安全包装而已，底层使用的还是一样的东西。所以并没有https servlet这个说法\n\n本文不会阐述servlet的使用。因为会使用和懂是两码事，比如你知道枪如何使用，但是你知道枪的内部运行原理吗？\n\n所以本节将努力的将Servlet的工作原理解释清楚，希望学习web开发的读者也可以用心去理解，虽然不需要你去掌握，但至少理解是必要的。\n\n## Tomcat基本知识\n\n---\n对于学习web开发的我们来说，tomcat那是再熟悉不过的东西了。简单来说，tomcat就是一种servlet容器，就好比手枪，手枪有很多种，tomcat就像一种手枪，里面装的“子弹“就是我们要讲的servlet。这小节我会阐述下什么是tomcat，tomcat怎么样，tomcat能干什么\n\n作为web开发人员来说，知道tomcat，那么肯定也知道apache。\n\nTomcat现在是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。由Apache、Sun 和其他一些公司及个人共同开发而成。\n\nTomcat的特点\n\n* 免费，开源，清凉，很适合我们学习人员的使用。\n* 它内含了一个单独的Http服务器，它也可以被视作一个单独的Web服务器。但是如果说只是将Tomcat用于单独的web服务器，那么在一些有速度和事务处理有要求的情况下来说是不利的，他没有其它完备的web服务器功能那么牛逼，比如（Apache服务器？）所以Tomcat常常会讲其中的Servlet引擎配合其它web服务器使用。\n* Tomcat实现了对Servlet和JavaServer Page（JSP）的支持，所以Tomcat内部有一个Jsp编译器（Jsper模块），用以将JSP编译成一个Servlet。这里就不得不说JSP的九大隐含对象了，request，response，pageContext，session，application，config，out，page，exception\n\nTomcat简单来说就是可以作为一个简易的web服务器，你可以将你的站点放置在Tomcat上，由Tomcat进行管理。\n## Tomcat的总体架构\n\n---\n讲完了Tomcat的一些基本知识，接下来说说Tomcat的总体架构\n\n一个好的软件是需要非常模块化的，tomcat也不例外，我们先了解了Tomcat的总体架构，那么再对其中的一部分一部分进行分析，我想作为一个web开发人员，你掌握了这些，也可算是合格的一员了。\n\n先给出一张tomcat容器模型图\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image001.gif %}\n\n可以看到一个tomcat下可以有很多个Service服务。\n\nService可以说是一个接口，实现它的标准类是StandardService\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image002.png %}\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image003.png %}\n\n所以说一个Service服务，其实就是一个StandardService的实例进程。\n\n那么我们可以说说一个StandardService在干嘛呢？从上图的方法名就可以知道，比如setContainer,setServer,addConnector（这些Container和Connector后面会重点讲，先别急）\n这些方法其实可以说是对Container和Connector等相关初始化工作\n\n是的，Service其实就是Container和Connector的一个外部包装，专门负责Container和Connector之间的管理。比如一个Connector要将request和response传递给Container，就是需要Service的帮忙。\n\n那么Service由谁来管理呢？ 233，也许你会脱口而出，“由tomcat管理”。哈哈，tomcat其实只是一个名字而已，真正管理Service的肯定也是代码呢。\n\n细心的同学应该会发现，之前有一个setServer方法，那么Server是谁呢？ 我想聪明的你肯定猜到了，对Server就是管理Service的。Server类中有一个addService方法，用于添加Service。\n\nok，说到这里，我想大家应该对Server和Service有了大致的了解，那么接下来就来说说有关Service内部的事情。\n\n---\n\n我们知道Service里面包含有Container和Connector，简单来说Connector是负责接收浏览器的发过来的 tcp 连接请求\n，然后将其信息封装为Request和Response，将其传递给Container处理（在一个子线程中执行Container，主线程依旧等待新的tcp请求）\n\nok，我想大家应该知道Container和Connector之间的关系了吧，那么接下来说说Connector是如何工作的\n\nTomcat5 中默认的 Connector 是 Coyote，这个 Connector 是可以选择替换的.（至今也仍然在使用Coyote，此外是可以替换的，也说明了Tomcat模块化很好。是的，模块好真的很不错！其实减轻了不少开发人员的负担，可以更好的分配工作）\n\n###### 首先呢Connector如何接受tcp请求？ \n\n嗯，交给Socket呗，不多讲了\n\n###### 其次呢Connector是如何管理多个请求的？多线程体现在哪里？\n\n你可以理解为一个while循环，检测一个信号量，如果有请求来了，会改变这个信号量，从而进入while循环内部，然后就会进行一次有关操作了。\n\n同时主线程继续等待，等待新的请求进来。\n\n###### Connector如何处理一次请求的\n\nConnector处理一次请求，靠的是两个类的运作，HttpConnector和HttpProcessor\n\nHttpConnector用于等待新的请求，有新的请求后，就会转交给HttpProcessor处理，HttpProcessor的process方法，会将tcp请求的信息封装为对应的Request和Response实例\n\n最后这个Request和Response就会转递给Container，而转递的任务就是之前讲的Service的工作了。\n\n---\n\n理解了Connector的工作原理后，我们就来讲讲Container的工作原理吧\n\n我们还是先来看看container容器的内部模型图\n\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image002.jpg %}\n\n可以看到一个Container内部有Engine，Host，Context还有Wrapper。ok，还是简单之上，我们其实不需要了解的很细，只要知道其每个部分都在干什么就行了\n\n###### Engine容器\n首先一个Container里有一个Engine容器，这个容器比较简单，它只定义了一些基本的关联关系，初始化和它相关联的组件，以及一些事件的监听。一个简单的Servlet，也许根本不需要Engine这一层的管理\n\n---\n###### Host容器\n从英文单词上看就知道，host代表主机，不过host容器可以有多个，所以如果对web开发比较熟悉的人，应该就知道了，host其实就代表虚拟主机的意思。对，所以说其实一个host容器就代表一个站点哦！ 比方说，我想再建立一个站点，但是我不需要再去找一个web服务器重新设置我的站点，我只需要建立一个虚拟主机，虽然url看上去不一样，但是其实请求都是有同一个container再处理数据哦。\n\n---\n###### Context容器\nContext代表Servlet的Context，它具备了Servlet运行的基本环境，理论上只要有Context就能运行Servlet了。简单的Tomcat可以没有Engine和Host。\n\n所以简单来说，Context用于管理Servlet！\n\n---\n###### Wrapper容器\nWrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。\n\n所以说一个Context容器里可以有很多个Wrapper，我们每次在web.xml中注册一个Servlet的时候，就会相应的建立一个Wrapper哦\n\n---\n\n## Servlet的工作原理\n\n---\n\n##### Servlet的初始化流程\n\n我们之前有提到Context容器就是Servlet的居住地，里面的Wrapper就代表一个Servlet。（ps：Wrapper只是一层Servlet的封装，为了将Servlet和tomcat分开，因为tomcat是tomcat，而servlet则是另一个领域模块，意思就是说，也许今后会有更厉害的servlet改装版本，然后这个改装版本就可以直接装入wrapper类中，体现了低耦合，高内聚）\n\n要执行一个Servlet的相关方法前，我们肯定要先实例化Servlet，由Context容器来实例化Servlet，那么我们就先从Conetxt的初始化讲起\n\nContext容器的初始化可以看两大部分\n\n1.ContextConfig 的 init 方法将会主要完成以下工作：\n\n* 创建用于解析 xml 配置文件的 contextDigester 对象\n* 读取默认 context.xml 配置文件，如果存在解析它\n* 读取默认 Host 配置文件，如果存在解析它\n* 读取默认 Context 自身的配置文件，如果存在解析它\n* 设置 Context 的 DocBase\n\n2.ContextConfig 的 init 方法完成后，Context 容器的会执行 startInternal 方法，这个方法启动逻辑比较复杂，主要包括如下几个部分：\n\n* 创建读取资源文件的对象\n* 创建 ClassLoader 对象\n* 设置应用的工作目录\n* 启动相关的辅助类如：logger、realm、resources 等\n* 修改启动状态，通知感兴趣的观察者（Web 应用的配置）\n子容器的初始化\n* 获取 ServletContext 并设置必要的参数\n* 初始化“load on startup”的 Servlet\n\n这其中是很复杂的，但是我现在主要任务是让大家理解总体脉络，细节部分也不是我们应该掌握的\n\n既然Context容器的初始化工作完了，那么接下来就要解析一个web应用了。我们知道一个web应用的一个重要的配置文件叫web.xml。所以说，接下来Context容器就会去解析web.xml文件，有Servlet就想应的调用wrapper的相关方法，初始化，创建Servlet等。所以说 Context 容器才是真正运行 Servlet 的 Servlet 容器。一个 Web 应用对应一个 Context 容器。\n\n###### Servlet实例\n\n上文所讲的，我们就已经做完了所有Servlet的初始化工作，接下来我们就要在应用启动的时候，实例化对应的Servlet了。Tomcat在实例化Servlet的时候，是按照有需求再实例化的逻辑的。不过其实这样是不好的，因为如果一个servlet的内容过去庞大的话，在初始化的时候就会需要大量的时间，那么这个初始化时间对于使用这个wen应用的客户来说就是一个blank的盲等待，过场的等待会让客户很生气的，毕竟电脑上的等待10秒，相当于等地铁30分钟呢。所以说，我们要尽量设置load-on-startup属性，这个属性设置后，Context容器就会在Tomcat启动的时候对相应的Servlet进行一次实例化\n\nServlet实例化的工作由Wrapper完成，Wrapper简单的调用Servlet的init方法，对Servlet进行初始化。（当然这里还可能初始化的是一个jspServlet，不过道理一样，不多说了）\n\n---\n\n## Servlet的体系结构\n\n---\n\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image010.jpg %}\n\n从上图可以看到，和Servlet有关的类有ServletRequest，ServletResponse，ServletConfig，ServletContext\n\nRequest和Response我们就不多说了，这个学过Servlet的使用后就一定会接触的\n\nServletConfig，可以说是具有这个Servlet的相关配置信息的类\n\n而ServletConetxt，则有这个Servlet所寄居的Contetx容器的相关信息，具体信息都请查阅相关API接口\n\n---\n\n## Servlet如何工作\n\n---\n一个请求到来后，如何知道这个请求要去哪个Servlet里进行相关操作呢？\n\n这个分配去向的任务很简单\n\n将url解析，映射到对应的Container容器，Container容器获取到的request里带有mappingData属性，这个属性是mapper类根据这次请求的 hostnane 和 contextpath 将 host 和 context 容器设置到 Request 的 mappingData 属性中的。所以request进入到Conetxt容器里时候，就会知道自己该去哪个wrapper里了！\n\n---\n\n## 总结\n\nServlet的所有工作流程已经总结完毕，有对其中部分不理解的地方，可以对这个部分进行google的关键字搜索了解更多的知识！\n\n参考：\n* https://www.ibm.com/developerworks/cn/java/j-lo-servlet/\n* https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\n* http://www.tqcto.com/article/web/51385.html\n\n---\n\n## 后续补充\n---\n\nServlet的核心基础内容，可以在我的icloud云上看我以前写的笔记\n\n下面介绍一些Sevlet的最新技术变化，虽然我们现在javaWeb的开发早已经不直接使用Sevlet了都用MVC框架代替，但是MVC框架底层依旧还是在操作我们的Servlet，所以关注一下是没有坏处的，有助于理解Web的MVC框架背后实现原理\n\n---\n\nServlet 3.0 新特性介绍，基于jdk 1.6（）\n\n1. 异步处理支持，原本的Sevlet是堵塞的，有了异步处理支持后，可以使用Servlet的官方API来做到异步处理支持。当然使用你自己实现的异步处理也完全没问题\n\n2. 新增的注解支持，比如@WebServlet，@WebInitParam等等，都是为了简化xml配置文件为目的的\n\n3. 可插性支持，引入了称之为“Web 模块部署描述符片段“的 web-fragment.xml 部署描述文件，这个文件放置在Jar包的META-INF 目录下。为什么说是可插性支持呢？因为你可以自己写一堆Servlet文件，就可以把他们打包起来，然后把它们的xml配置信息写到web-fragment.xml里，生成一个jar包。这个jar包就可以插到任何Servlet的程序中被正常使用了，jar包内的servlet配置不需要重新写到当前项目的xml中，Servlet3.0会自动扫描jar包内的 web-fragment.xml\n\n4. ServletContext 的性能增强\n\n5. HttpServletRequest 对文件上传的支持，使用\n\n```\nPart getPart(String name)\nCollection<Part> getParts()\n```\n\n就可以轻松获取文件数据，Part还提供了一些好用的api，方便你处理这些文件，不过form表单仍然要求是 multipart/form-data的\n\nServlet 3.0 的新特性参考：https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html\nServlet 3.0 的新特性参考：https://www.cnblogs.com/davenkin/p/async-servlet.html\n\n---\n\nServlet 3.1 新特性介绍，jdk1.7\n\n0. 编程式配置，使用java代码的格式来配置web.xml，一种现在流行的配置方式，继承javax.servlet.ServletContextListener接口，还可以使得这个Java配置类可插拔\n\n1. Non-blocking I/O, \n非堵塞的I/O，在使用I/O进行网络数据读取的时候，加入了几个回调函数\n```\n onDataAvailable - 在数据没有阻塞，已经完全准备好可以读取的时候调用。\n onAllDataRead - 所有数据读取完成后调用。\n onError - 请求中发生错误的时候调用。\n```\n这样我们就可以在回调函数里，开启I/O进行读取，这样就不会堵塞当前线程的执行\n\n参考：https://www.cnblogs.com/davenkin/p/async-servlet.html\n\n2. 支持HTTP protocol upgrade mechanism \n\n客户端可以发起握手协议的升级，最常见的从HTTP / 1.1 升级到HTTP/2 甚至WebSocket \n\nhttps://cloud.tencent.com/developer/section/1189838\n\n---\n\nServlet 4.0新特性介绍，jdk1.8\n\n主要是实现了对HTTP/2的全面支持\n\n1. 服务器推送\n\n2. 全新的URL映射匹配方式\n\n参考：https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html\n\n\n\n\n\n","source":"_posts/Servlet的总结.md","raw":"---\ntitle: Servlet的总结\ntags: JavaWeb\ncategories: IT\ndate: 2019-04-24 13:52:41\n---\n\n一篇对JavaWeb的Servlet的个人理解（2019-06-24 对本文进行了一定修改，追求下时效性）\n\n<!-- more -->\n## 什么是Servlet\n\n---\n\nservlet是运行在web服务器上的小型Java程序（即服务器端的小应用程序），servlet通常通过HTTP接收和响应来自web客户端的要求\n\n我所熟知的是关于httpservlet的使用。不要觉得知道了http servlet，但是却不知道https的相关使用。其实https只是http的一层安全包装而已，底层使用的还是一样的东西。所以并没有https servlet这个说法\n\n本文不会阐述servlet的使用。因为会使用和懂是两码事，比如你知道枪如何使用，但是你知道枪的内部运行原理吗？\n\n所以本节将努力的将Servlet的工作原理解释清楚，希望学习web开发的读者也可以用心去理解，虽然不需要你去掌握，但至少理解是必要的。\n\n## Tomcat基本知识\n\n---\n对于学习web开发的我们来说，tomcat那是再熟悉不过的东西了。简单来说，tomcat就是一种servlet容器，就好比手枪，手枪有很多种，tomcat就像一种手枪，里面装的“子弹“就是我们要讲的servlet。这小节我会阐述下什么是tomcat，tomcat怎么样，tomcat能干什么\n\n作为web开发人员来说，知道tomcat，那么肯定也知道apache。\n\nTomcat现在是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。由Apache、Sun 和其他一些公司及个人共同开发而成。\n\nTomcat的特点\n\n* 免费，开源，清凉，很适合我们学习人员的使用。\n* 它内含了一个单独的Http服务器，它也可以被视作一个单独的Web服务器。但是如果说只是将Tomcat用于单独的web服务器，那么在一些有速度和事务处理有要求的情况下来说是不利的，他没有其它完备的web服务器功能那么牛逼，比如（Apache服务器？）所以Tomcat常常会讲其中的Servlet引擎配合其它web服务器使用。\n* Tomcat实现了对Servlet和JavaServer Page（JSP）的支持，所以Tomcat内部有一个Jsp编译器（Jsper模块），用以将JSP编译成一个Servlet。这里就不得不说JSP的九大隐含对象了，request，response，pageContext，session，application，config，out，page，exception\n\nTomcat简单来说就是可以作为一个简易的web服务器，你可以将你的站点放置在Tomcat上，由Tomcat进行管理。\n## Tomcat的总体架构\n\n---\n讲完了Tomcat的一些基本知识，接下来说说Tomcat的总体架构\n\n一个好的软件是需要非常模块化的，tomcat也不例外，我们先了解了Tomcat的总体架构，那么再对其中的一部分一部分进行分析，我想作为一个web开发人员，你掌握了这些，也可算是合格的一员了。\n\n先给出一张tomcat容器模型图\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image001.gif %}\n\n可以看到一个tomcat下可以有很多个Service服务。\n\nService可以说是一个接口，实现它的标准类是StandardService\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image002.png %}\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image003.png %}\n\n所以说一个Service服务，其实就是一个StandardService的实例进程。\n\n那么我们可以说说一个StandardService在干嘛呢？从上图的方法名就可以知道，比如setContainer,setServer,addConnector（这些Container和Connector后面会重点讲，先别急）\n这些方法其实可以说是对Container和Connector等相关初始化工作\n\n是的，Service其实就是Container和Connector的一个外部包装，专门负责Container和Connector之间的管理。比如一个Connector要将request和response传递给Container，就是需要Service的帮忙。\n\n那么Service由谁来管理呢？ 233，也许你会脱口而出，“由tomcat管理”。哈哈，tomcat其实只是一个名字而已，真正管理Service的肯定也是代码呢。\n\n细心的同学应该会发现，之前有一个setServer方法，那么Server是谁呢？ 我想聪明的你肯定猜到了，对Server就是管理Service的。Server类中有一个addService方法，用于添加Service。\n\nok，说到这里，我想大家应该对Server和Service有了大致的了解，那么接下来就来说说有关Service内部的事情。\n\n---\n\n我们知道Service里面包含有Container和Connector，简单来说Connector是负责接收浏览器的发过来的 tcp 连接请求\n，然后将其信息封装为Request和Response，将其传递给Container处理（在一个子线程中执行Container，主线程依旧等待新的tcp请求）\n\nok，我想大家应该知道Container和Connector之间的关系了吧，那么接下来说说Connector是如何工作的\n\nTomcat5 中默认的 Connector 是 Coyote，这个 Connector 是可以选择替换的.（至今也仍然在使用Coyote，此外是可以替换的，也说明了Tomcat模块化很好。是的，模块好真的很不错！其实减轻了不少开发人员的负担，可以更好的分配工作）\n\n###### 首先呢Connector如何接受tcp请求？ \n\n嗯，交给Socket呗，不多讲了\n\n###### 其次呢Connector是如何管理多个请求的？多线程体现在哪里？\n\n你可以理解为一个while循环，检测一个信号量，如果有请求来了，会改变这个信号量，从而进入while循环内部，然后就会进行一次有关操作了。\n\n同时主线程继续等待，等待新的请求进来。\n\n###### Connector如何处理一次请求的\n\nConnector处理一次请求，靠的是两个类的运作，HttpConnector和HttpProcessor\n\nHttpConnector用于等待新的请求，有新的请求后，就会转交给HttpProcessor处理，HttpProcessor的process方法，会将tcp请求的信息封装为对应的Request和Response实例\n\n最后这个Request和Response就会转递给Container，而转递的任务就是之前讲的Service的工作了。\n\n---\n\n理解了Connector的工作原理后，我们就来讲讲Container的工作原理吧\n\n我们还是先来看看container容器的内部模型图\n\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image002.jpg %}\n\n可以看到一个Container内部有Engine，Host，Context还有Wrapper。ok，还是简单之上，我们其实不需要了解的很细，只要知道其每个部分都在干什么就行了\n\n###### Engine容器\n首先一个Container里有一个Engine容器，这个容器比较简单，它只定义了一些基本的关联关系，初始化和它相关联的组件，以及一些事件的监听。一个简单的Servlet，也许根本不需要Engine这一层的管理\n\n---\n###### Host容器\n从英文单词上看就知道，host代表主机，不过host容器可以有多个，所以如果对web开发比较熟悉的人，应该就知道了，host其实就代表虚拟主机的意思。对，所以说其实一个host容器就代表一个站点哦！ 比方说，我想再建立一个站点，但是我不需要再去找一个web服务器重新设置我的站点，我只需要建立一个虚拟主机，虽然url看上去不一样，但是其实请求都是有同一个container再处理数据哦。\n\n---\n###### Context容器\nContext代表Servlet的Context，它具备了Servlet运行的基本环境，理论上只要有Context就能运行Servlet了。简单的Tomcat可以没有Engine和Host。\n\n所以简单来说，Context用于管理Servlet！\n\n---\n###### Wrapper容器\nWrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。\n\n所以说一个Context容器里可以有很多个Wrapper，我们每次在web.xml中注册一个Servlet的时候，就会相应的建立一个Wrapper哦\n\n---\n\n## Servlet的工作原理\n\n---\n\n##### Servlet的初始化流程\n\n我们之前有提到Context容器就是Servlet的居住地，里面的Wrapper就代表一个Servlet。（ps：Wrapper只是一层Servlet的封装，为了将Servlet和tomcat分开，因为tomcat是tomcat，而servlet则是另一个领域模块，意思就是说，也许今后会有更厉害的servlet改装版本，然后这个改装版本就可以直接装入wrapper类中，体现了低耦合，高内聚）\n\n要执行一个Servlet的相关方法前，我们肯定要先实例化Servlet，由Context容器来实例化Servlet，那么我们就先从Conetxt的初始化讲起\n\nContext容器的初始化可以看两大部分\n\n1.ContextConfig 的 init 方法将会主要完成以下工作：\n\n* 创建用于解析 xml 配置文件的 contextDigester 对象\n* 读取默认 context.xml 配置文件，如果存在解析它\n* 读取默认 Host 配置文件，如果存在解析它\n* 读取默认 Context 自身的配置文件，如果存在解析它\n* 设置 Context 的 DocBase\n\n2.ContextConfig 的 init 方法完成后，Context 容器的会执行 startInternal 方法，这个方法启动逻辑比较复杂，主要包括如下几个部分：\n\n* 创建读取资源文件的对象\n* 创建 ClassLoader 对象\n* 设置应用的工作目录\n* 启动相关的辅助类如：logger、realm、resources 等\n* 修改启动状态，通知感兴趣的观察者（Web 应用的配置）\n子容器的初始化\n* 获取 ServletContext 并设置必要的参数\n* 初始化“load on startup”的 Servlet\n\n这其中是很复杂的，但是我现在主要任务是让大家理解总体脉络，细节部分也不是我们应该掌握的\n\n既然Context容器的初始化工作完了，那么接下来就要解析一个web应用了。我们知道一个web应用的一个重要的配置文件叫web.xml。所以说，接下来Context容器就会去解析web.xml文件，有Servlet就想应的调用wrapper的相关方法，初始化，创建Servlet等。所以说 Context 容器才是真正运行 Servlet 的 Servlet 容器。一个 Web 应用对应一个 Context 容器。\n\n###### Servlet实例\n\n上文所讲的，我们就已经做完了所有Servlet的初始化工作，接下来我们就要在应用启动的时候，实例化对应的Servlet了。Tomcat在实例化Servlet的时候，是按照有需求再实例化的逻辑的。不过其实这样是不好的，因为如果一个servlet的内容过去庞大的话，在初始化的时候就会需要大量的时间，那么这个初始化时间对于使用这个wen应用的客户来说就是一个blank的盲等待，过场的等待会让客户很生气的，毕竟电脑上的等待10秒，相当于等地铁30分钟呢。所以说，我们要尽量设置load-on-startup属性，这个属性设置后，Context容器就会在Tomcat启动的时候对相应的Servlet进行一次实例化\n\nServlet实例化的工作由Wrapper完成，Wrapper简单的调用Servlet的init方法，对Servlet进行初始化。（当然这里还可能初始化的是一个jspServlet，不过道理一样，不多说了）\n\n---\n\n## Servlet的体系结构\n\n---\n\n{% img https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image010.jpg %}\n\n从上图可以看到，和Servlet有关的类有ServletRequest，ServletResponse，ServletConfig，ServletContext\n\nRequest和Response我们就不多说了，这个学过Servlet的使用后就一定会接触的\n\nServletConfig，可以说是具有这个Servlet的相关配置信息的类\n\n而ServletConetxt，则有这个Servlet所寄居的Contetx容器的相关信息，具体信息都请查阅相关API接口\n\n---\n\n## Servlet如何工作\n\n---\n一个请求到来后，如何知道这个请求要去哪个Servlet里进行相关操作呢？\n\n这个分配去向的任务很简单\n\n将url解析，映射到对应的Container容器，Container容器获取到的request里带有mappingData属性，这个属性是mapper类根据这次请求的 hostnane 和 contextpath 将 host 和 context 容器设置到 Request 的 mappingData 属性中的。所以request进入到Conetxt容器里时候，就会知道自己该去哪个wrapper里了！\n\n---\n\n## 总结\n\nServlet的所有工作流程已经总结完毕，有对其中部分不理解的地方，可以对这个部分进行google的关键字搜索了解更多的知识！\n\n参考：\n* https://www.ibm.com/developerworks/cn/java/j-lo-servlet/\n* https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\n* http://www.tqcto.com/article/web/51385.html\n\n---\n\n## 后续补充\n---\n\nServlet的核心基础内容，可以在我的icloud云上看我以前写的笔记\n\n下面介绍一些Sevlet的最新技术变化，虽然我们现在javaWeb的开发早已经不直接使用Sevlet了都用MVC框架代替，但是MVC框架底层依旧还是在操作我们的Servlet，所以关注一下是没有坏处的，有助于理解Web的MVC框架背后实现原理\n\n---\n\nServlet 3.0 新特性介绍，基于jdk 1.6（）\n\n1. 异步处理支持，原本的Sevlet是堵塞的，有了异步处理支持后，可以使用Servlet的官方API来做到异步处理支持。当然使用你自己实现的异步处理也完全没问题\n\n2. 新增的注解支持，比如@WebServlet，@WebInitParam等等，都是为了简化xml配置文件为目的的\n\n3. 可插性支持，引入了称之为“Web 模块部署描述符片段“的 web-fragment.xml 部署描述文件，这个文件放置在Jar包的META-INF 目录下。为什么说是可插性支持呢？因为你可以自己写一堆Servlet文件，就可以把他们打包起来，然后把它们的xml配置信息写到web-fragment.xml里，生成一个jar包。这个jar包就可以插到任何Servlet的程序中被正常使用了，jar包内的servlet配置不需要重新写到当前项目的xml中，Servlet3.0会自动扫描jar包内的 web-fragment.xml\n\n4. ServletContext 的性能增强\n\n5. HttpServletRequest 对文件上传的支持，使用\n\n```\nPart getPart(String name)\nCollection<Part> getParts()\n```\n\n就可以轻松获取文件数据，Part还提供了一些好用的api，方便你处理这些文件，不过form表单仍然要求是 multipart/form-data的\n\nServlet 3.0 的新特性参考：https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html\nServlet 3.0 的新特性参考：https://www.cnblogs.com/davenkin/p/async-servlet.html\n\n---\n\nServlet 3.1 新特性介绍，jdk1.7\n\n0. 编程式配置，使用java代码的格式来配置web.xml，一种现在流行的配置方式，继承javax.servlet.ServletContextListener接口，还可以使得这个Java配置类可插拔\n\n1. Non-blocking I/O, \n非堵塞的I/O，在使用I/O进行网络数据读取的时候，加入了几个回调函数\n```\n onDataAvailable - 在数据没有阻塞，已经完全准备好可以读取的时候调用。\n onAllDataRead - 所有数据读取完成后调用。\n onError - 请求中发生错误的时候调用。\n```\n这样我们就可以在回调函数里，开启I/O进行读取，这样就不会堵塞当前线程的执行\n\n参考：https://www.cnblogs.com/davenkin/p/async-servlet.html\n\n2. 支持HTTP protocol upgrade mechanism \n\n客户端可以发起握手协议的升级，最常见的从HTTP / 1.1 升级到HTTP/2 甚至WebSocket \n\nhttps://cloud.tencent.com/developer/section/1189838\n\n---\n\nServlet 4.0新特性介绍，jdk1.8\n\n主要是实现了对HTTP/2的全面支持\n\n1. 服务器推送\n\n2. 全新的URL映射匹配方式\n\n参考：https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html\n\n\n\n\n\n","slug":"Servlet的总结","published":1,"updated":"2019-06-24T09:06:16.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9up004pm6eln6sg4xdi","content":"<p>一篇对JavaWeb的Servlet的个人理解（2019-06-24 对本文进行了一定修改，追求下时效性）</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是Servlet\"><a href=\"#什么是Servlet\" class=\"headerlink\" title=\"什么是Servlet\"></a>什么是Servlet</h2><hr>\n<p>servlet是运行在web服务器上的小型Java程序（即服务器端的小应用程序），servlet通常通过HTTP接收和响应来自web客户端的要求</p>\n<p>我所熟知的是关于httpservlet的使用。不要觉得知道了http servlet，但是却不知道https的相关使用。其实https只是http的一层安全包装而已，底层使用的还是一样的东西。所以并没有https servlet这个说法</p>\n<p>本文不会阐述servlet的使用。因为会使用和懂是两码事，比如你知道枪如何使用，但是你知道枪的内部运行原理吗？</p>\n<p>所以本节将努力的将Servlet的工作原理解释清楚，希望学习web开发的读者也可以用心去理解，虽然不需要你去掌握，但至少理解是必要的。</p>\n<h2 id=\"Tomcat基本知识\"><a href=\"#Tomcat基本知识\" class=\"headerlink\" title=\"Tomcat基本知识\"></a>Tomcat基本知识</h2><hr>\n<p>对于学习web开发的我们来说，tomcat那是再熟悉不过的东西了。简单来说，tomcat就是一种servlet容器，就好比手枪，手枪有很多种，tomcat就像一种手枪，里面装的“子弹“就是我们要讲的servlet。这小节我会阐述下什么是tomcat，tomcat怎么样，tomcat能干什么</p>\n<p>作为web开发人员来说，知道tomcat，那么肯定也知道apache。</p>\n<p>Tomcat现在是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。由Apache、Sun 和其他一些公司及个人共同开发而成。</p>\n<p>Tomcat的特点</p>\n<ul>\n<li>免费，开源，清凉，很适合我们学习人员的使用。</li>\n<li>它内含了一个单独的Http服务器，它也可以被视作一个单独的Web服务器。但是如果说只是将Tomcat用于单独的web服务器，那么在一些有速度和事务处理有要求的情况下来说是不利的，他没有其它完备的web服务器功能那么牛逼，比如（Apache服务器？）所以Tomcat常常会讲其中的Servlet引擎配合其它web服务器使用。</li>\n<li>Tomcat实现了对Servlet和JavaServer Page（JSP）的支持，所以Tomcat内部有一个Jsp编译器（Jsper模块），用以将JSP编译成一个Servlet。这里就不得不说JSP的九大隐含对象了，request，response，pageContext，session，application，config，out，page，exception</li>\n</ul>\n<p>Tomcat简单来说就是可以作为一个简易的web服务器，你可以将你的站点放置在Tomcat上，由Tomcat进行管理。</p>\n<h2 id=\"Tomcat的总体架构\"><a href=\"#Tomcat的总体架构\" class=\"headerlink\" title=\"Tomcat的总体架构\"></a>Tomcat的总体架构</h2><hr>\n<p>讲完了Tomcat的一些基本知识，接下来说说Tomcat的总体架构</p>\n<p>一个好的软件是需要非常模块化的，tomcat也不例外，我们先了解了Tomcat的总体架构，那么再对其中的一部分一部分进行分析，我想作为一个web开发人员，你掌握了这些，也可算是合格的一员了。</p>\n<p>先给出一张tomcat容器模型图<br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image001.gif\"></p>\n<p>可以看到一个tomcat下可以有很多个Service服务。</p>\n<p>Service可以说是一个接口，实现它的标准类是StandardService<br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image002.png\"><br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image003.png\"></p>\n<p>所以说一个Service服务，其实就是一个StandardService的实例进程。</p>\n<p>那么我们可以说说一个StandardService在干嘛呢？从上图的方法名就可以知道，比如setContainer,setServer,addConnector（这些Container和Connector后面会重点讲，先别急）<br>这些方法其实可以说是对Container和Connector等相关初始化工作</p>\n<p>是的，Service其实就是Container和Connector的一个外部包装，专门负责Container和Connector之间的管理。比如一个Connector要将request和response传递给Container，就是需要Service的帮忙。</p>\n<p>那么Service由谁来管理呢？ 233，也许你会脱口而出，“由tomcat管理”。哈哈，tomcat其实只是一个名字而已，真正管理Service的肯定也是代码呢。</p>\n<p>细心的同学应该会发现，之前有一个setServer方法，那么Server是谁呢？ 我想聪明的你肯定猜到了，对Server就是管理Service的。Server类中有一个addService方法，用于添加Service。</p>\n<p>ok，说到这里，我想大家应该对Server和Service有了大致的了解，那么接下来就来说说有关Service内部的事情。</p>\n<hr>\n<p>我们知道Service里面包含有Container和Connector，简单来说Connector是负责接收浏览器的发过来的 tcp 连接请求<br>，然后将其信息封装为Request和Response，将其传递给Container处理（在一个子线程中执行Container，主线程依旧等待新的tcp请求）</p>\n<p>ok，我想大家应该知道Container和Connector之间的关系了吧，那么接下来说说Connector是如何工作的</p>\n<p>Tomcat5 中默认的 Connector 是 Coyote，这个 Connector 是可以选择替换的.（至今也仍然在使用Coyote，此外是可以替换的，也说明了Tomcat模块化很好。是的，模块好真的很不错！其实减轻了不少开发人员的负担，可以更好的分配工作）</p>\n<h6 id=\"首先呢Connector如何接受tcp请求？\"><a href=\"#首先呢Connector如何接受tcp请求？\" class=\"headerlink\" title=\"首先呢Connector如何接受tcp请求？\"></a>首先呢Connector如何接受tcp请求？</h6><p>嗯，交给Socket呗，不多讲了</p>\n<h6 id=\"其次呢Connector是如何管理多个请求的？多线程体现在哪里？\"><a href=\"#其次呢Connector是如何管理多个请求的？多线程体现在哪里？\" class=\"headerlink\" title=\"其次呢Connector是如何管理多个请求的？多线程体现在哪里？\"></a>其次呢Connector是如何管理多个请求的？多线程体现在哪里？</h6><p>你可以理解为一个while循环，检测一个信号量，如果有请求来了，会改变这个信号量，从而进入while循环内部，然后就会进行一次有关操作了。</p>\n<p>同时主线程继续等待，等待新的请求进来。</p>\n<h6 id=\"Connector如何处理一次请求的\"><a href=\"#Connector如何处理一次请求的\" class=\"headerlink\" title=\"Connector如何处理一次请求的\"></a>Connector如何处理一次请求的</h6><p>Connector处理一次请求，靠的是两个类的运作，HttpConnector和HttpProcessor</p>\n<p>HttpConnector用于等待新的请求，有新的请求后，就会转交给HttpProcessor处理，HttpProcessor的process方法，会将tcp请求的信息封装为对应的Request和Response实例</p>\n<p>最后这个Request和Response就会转递给Container，而转递的任务就是之前讲的Service的工作了。</p>\n<hr>\n<p>理解了Connector的工作原理后，我们就来讲讲Container的工作原理吧</p>\n<p>我们还是先来看看container容器的内部模型图</p>\n<img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image002.jpg\">\n<p>可以看到一个Container内部有Engine，Host，Context还有Wrapper。ok，还是简单之上，我们其实不需要了解的很细，只要知道其每个部分都在干什么就行了</p>\n<h6 id=\"Engine容器\"><a href=\"#Engine容器\" class=\"headerlink\" title=\"Engine容器\"></a>Engine容器</h6><p>首先一个Container里有一个Engine容器，这个容器比较简单，它只定义了一些基本的关联关系，初始化和它相关联的组件，以及一些事件的监听。一个简单的Servlet，也许根本不需要Engine这一层的管理</p>\n<hr>\n<h6 id=\"Host容器\"><a href=\"#Host容器\" class=\"headerlink\" title=\"Host容器\"></a>Host容器</h6><p>从英文单词上看就知道，host代表主机，不过host容器可以有多个，所以如果对web开发比较熟悉的人，应该就知道了，host其实就代表虚拟主机的意思。对，所以说其实一个host容器就代表一个站点哦！ 比方说，我想再建立一个站点，但是我不需要再去找一个web服务器重新设置我的站点，我只需要建立一个虚拟主机，虽然url看上去不一样，但是其实请求都是有同一个container再处理数据哦。</p>\n<hr>\n<h6 id=\"Context容器\"><a href=\"#Context容器\" class=\"headerlink\" title=\"Context容器\"></a>Context容器</h6><p>Context代表Servlet的Context，它具备了Servlet运行的基本环境，理论上只要有Context就能运行Servlet了。简单的Tomcat可以没有Engine和Host。</p>\n<p>所以简单来说，Context用于管理Servlet！</p>\n<hr>\n<h6 id=\"Wrapper容器\"><a href=\"#Wrapper容器\" class=\"headerlink\" title=\"Wrapper容器\"></a>Wrapper容器</h6><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。</p>\n<p>所以说一个Context容器里可以有很多个Wrapper，我们每次在web.xml中注册一个Servlet的时候，就会相应的建立一个Wrapper哦</p>\n<hr>\n<h2 id=\"Servlet的工作原理\"><a href=\"#Servlet的工作原理\" class=\"headerlink\" title=\"Servlet的工作原理\"></a>Servlet的工作原理</h2><hr>\n<h5 id=\"Servlet的初始化流程\"><a href=\"#Servlet的初始化流程\" class=\"headerlink\" title=\"Servlet的初始化流程\"></a>Servlet的初始化流程</h5><p>我们之前有提到Context容器就是Servlet的居住地，里面的Wrapper就代表一个Servlet。（ps：Wrapper只是一层Servlet的封装，为了将Servlet和tomcat分开，因为tomcat是tomcat，而servlet则是另一个领域模块，意思就是说，也许今后会有更厉害的servlet改装版本，然后这个改装版本就可以直接装入wrapper类中，体现了低耦合，高内聚）</p>\n<p>要执行一个Servlet的相关方法前，我们肯定要先实例化Servlet，由Context容器来实例化Servlet，那么我们就先从Conetxt的初始化讲起</p>\n<p>Context容器的初始化可以看两大部分</p>\n<p>1.ContextConfig 的 init 方法将会主要完成以下工作：</p>\n<ul>\n<li>创建用于解析 xml 配置文件的 contextDigester 对象</li>\n<li>读取默认 context.xml 配置文件，如果存在解析它</li>\n<li>读取默认 Host 配置文件，如果存在解析它</li>\n<li>读取默认 Context 自身的配置文件，如果存在解析它</li>\n<li>设置 Context 的 DocBase</li>\n</ul>\n<p>2.ContextConfig 的 init 方法完成后，Context 容器的会执行 startInternal 方法，这个方法启动逻辑比较复杂，主要包括如下几个部分：</p>\n<ul>\n<li>创建读取资源文件的对象</li>\n<li>创建 ClassLoader 对象</li>\n<li>设置应用的工作目录</li>\n<li>启动相关的辅助类如：logger、realm、resources 等</li>\n<li>修改启动状态，通知感兴趣的观察者（Web 应用的配置）<br>子容器的初始化</li>\n<li>获取 ServletContext 并设置必要的参数</li>\n<li>初始化“load on startup”的 Servlet</li>\n</ul>\n<p>这其中是很复杂的，但是我现在主要任务是让大家理解总体脉络，细节部分也不是我们应该掌握的</p>\n<p>既然Context容器的初始化工作完了，那么接下来就要解析一个web应用了。我们知道一个web应用的一个重要的配置文件叫web.xml。所以说，接下来Context容器就会去解析web.xml文件，有Servlet就想应的调用wrapper的相关方法，初始化，创建Servlet等。所以说 Context 容器才是真正运行 Servlet 的 Servlet 容器。一个 Web 应用对应一个 Context 容器。</p>\n<h6 id=\"Servlet实例\"><a href=\"#Servlet实例\" class=\"headerlink\" title=\"Servlet实例\"></a>Servlet实例</h6><p>上文所讲的，我们就已经做完了所有Servlet的初始化工作，接下来我们就要在应用启动的时候，实例化对应的Servlet了。Tomcat在实例化Servlet的时候，是按照有需求再实例化的逻辑的。不过其实这样是不好的，因为如果一个servlet的内容过去庞大的话，在初始化的时候就会需要大量的时间，那么这个初始化时间对于使用这个wen应用的客户来说就是一个blank的盲等待，过场的等待会让客户很生气的，毕竟电脑上的等待10秒，相当于等地铁30分钟呢。所以说，我们要尽量设置load-on-startup属性，这个属性设置后，Context容器就会在Tomcat启动的时候对相应的Servlet进行一次实例化</p>\n<p>Servlet实例化的工作由Wrapper完成，Wrapper简单的调用Servlet的init方法，对Servlet进行初始化。（当然这里还可能初始化的是一个jspServlet，不过道理一样，不多说了）</p>\n<hr>\n<h2 id=\"Servlet的体系结构\"><a href=\"#Servlet的体系结构\" class=\"headerlink\" title=\"Servlet的体系结构\"></a>Servlet的体系结构</h2><hr>\n<img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image010.jpg\">\n<p>从上图可以看到，和Servlet有关的类有ServletRequest，ServletResponse，ServletConfig，ServletContext</p>\n<p>Request和Response我们就不多说了，这个学过Servlet的使用后就一定会接触的</p>\n<p>ServletConfig，可以说是具有这个Servlet的相关配置信息的类</p>\n<p>而ServletConetxt，则有这个Servlet所寄居的Contetx容器的相关信息，具体信息都请查阅相关API接口</p>\n<hr>\n<h2 id=\"Servlet如何工作\"><a href=\"#Servlet如何工作\" class=\"headerlink\" title=\"Servlet如何工作\"></a>Servlet如何工作</h2><hr>\n<p>一个请求到来后，如何知道这个请求要去哪个Servlet里进行相关操作呢？</p>\n<p>这个分配去向的任务很简单</p>\n<p>将url解析，映射到对应的Container容器，Container容器获取到的request里带有mappingData属性，这个属性是mapper类根据这次请求的 hostnane 和 contextpath 将 host 和 context 容器设置到 Request 的 mappingData 属性中的。所以request进入到Conetxt容器里时候，就会知道自己该去哪个wrapper里了！</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Servlet的所有工作流程已经总结完毕，有对其中部分不理解的地方，可以对这个部分进行google的关键字搜索了解更多的知识！</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-servlet/</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/</a></li>\n<li><a href=\"http://www.tqcto.com/article/web/51385.html\" target=\"_blank\" rel=\"noopener\">http://www.tqcto.com/article/web/51385.html</a></li>\n</ul>\n<hr>\n<h2 id=\"后续补充\"><a href=\"#后续补充\" class=\"headerlink\" title=\"后续补充\"></a>后续补充</h2><hr>\n<p>Servlet的核心基础内容，可以在我的icloud云上看我以前写的笔记</p>\n<p>下面介绍一些Sevlet的最新技术变化，虽然我们现在javaWeb的开发早已经不直接使用Sevlet了都用MVC框架代替，但是MVC框架底层依旧还是在操作我们的Servlet，所以关注一下是没有坏处的，有助于理解Web的MVC框架背后实现原理</p>\n<hr>\n<p>Servlet 3.0 新特性介绍，基于jdk 1.6（）</p>\n<ol>\n<li><p>异步处理支持，原本的Sevlet是堵塞的，有了异步处理支持后，可以使用Servlet的官方API来做到异步处理支持。当然使用你自己实现的异步处理也完全没问题</p>\n</li>\n<li><p>新增的注解支持，比如@WebServlet，@WebInitParam等等，都是为了简化xml配置文件为目的的</p>\n</li>\n<li><p>可插性支持，引入了称之为“Web 模块部署描述符片段“的 web-fragment.xml 部署描述文件，这个文件放置在Jar包的META-INF 目录下。为什么说是可插性支持呢？因为你可以自己写一堆Servlet文件，就可以把他们打包起来，然后把它们的xml配置信息写到web-fragment.xml里，生成一个jar包。这个jar包就可以插到任何Servlet的程序中被正常使用了，jar包内的servlet配置不需要重新写到当前项目的xml中，Servlet3.0会自动扫描jar包内的 web-fragment.xml</p>\n</li>\n<li><p>ServletContext 的性能增强</p>\n</li>\n<li><p>HttpServletRequest 对文件上传的支持，使用</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Part getPart(String name)</span><br><span class=\"line\">Collection&lt;Part&gt; getParts()</span><br></pre></td></tr></table></figure>\n<p>就可以轻松获取文件数据，Part还提供了一些好用的api，方便你处理这些文件，不过form表单仍然要求是 multipart/form-data的</p>\n<p>Servlet 3.0 的新特性参考：<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html</a><br>Servlet 3.0 的新特性参考：<a href=\"https://www.cnblogs.com/davenkin/p/async-servlet.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/davenkin/p/async-servlet.html</a></p>\n<hr>\n<p>Servlet 3.1 新特性介绍，jdk1.7</p>\n<ol start=\"0\">\n<li><p>编程式配置，使用java代码的格式来配置web.xml，一种现在流行的配置方式，继承javax.servlet.ServletContextListener接口，还可以使得这个Java配置类可插拔</p>\n</li>\n<li><p>Non-blocking I/O,<br>非堵塞的I/O，在使用I/O进行网络数据读取的时候，加入了几个回调函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onDataAvailable - 在数据没有阻塞，已经完全准备好可以读取的时候调用。</span><br><span class=\"line\">onAllDataRead - 所有数据读取完成后调用。</span><br><span class=\"line\">onError - 请求中发生错误的时候调用。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样我们就可以在回调函数里，开启I/O进行读取，这样就不会堵塞当前线程的执行</p>\n<p>参考：<a href=\"https://www.cnblogs.com/davenkin/p/async-servlet.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/davenkin/p/async-servlet.html</a></p>\n<ol start=\"2\">\n<li>支持HTTP protocol upgrade mechanism </li>\n</ol>\n<p>客户端可以发起握手协议的升级，最常见的从HTTP / 1.1 升级到HTTP/2 甚至WebSocket </p>\n<p><a href=\"https://cloud.tencent.com/developer/section/1189838\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/section/1189838</a></p>\n<hr>\n<p>Servlet 4.0新特性介绍，jdk1.8</p>\n<p>主要是实现了对HTTP/2的全面支持</p>\n<ol>\n<li><p>服务器推送</p>\n</li>\n<li><p>全新的URL映射匹配方式</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html</a></p>\n","site":{"data":{}},"excerpt":"<p>一篇对JavaWeb的Servlet的个人理解（2019-06-24 对本文进行了一定修改，追求下时效性）</p>","more":"<h2 id=\"什么是Servlet\"><a href=\"#什么是Servlet\" class=\"headerlink\" title=\"什么是Servlet\"></a>什么是Servlet</h2><hr>\n<p>servlet是运行在web服务器上的小型Java程序（即服务器端的小应用程序），servlet通常通过HTTP接收和响应来自web客户端的要求</p>\n<p>我所熟知的是关于httpservlet的使用。不要觉得知道了http servlet，但是却不知道https的相关使用。其实https只是http的一层安全包装而已，底层使用的还是一样的东西。所以并没有https servlet这个说法</p>\n<p>本文不会阐述servlet的使用。因为会使用和懂是两码事，比如你知道枪如何使用，但是你知道枪的内部运行原理吗？</p>\n<p>所以本节将努力的将Servlet的工作原理解释清楚，希望学习web开发的读者也可以用心去理解，虽然不需要你去掌握，但至少理解是必要的。</p>\n<h2 id=\"Tomcat基本知识\"><a href=\"#Tomcat基本知识\" class=\"headerlink\" title=\"Tomcat基本知识\"></a>Tomcat基本知识</h2><hr>\n<p>对于学习web开发的我们来说，tomcat那是再熟悉不过的东西了。简单来说，tomcat就是一种servlet容器，就好比手枪，手枪有很多种，tomcat就像一种手枪，里面装的“子弹“就是我们要讲的servlet。这小节我会阐述下什么是tomcat，tomcat怎么样，tomcat能干什么</p>\n<p>作为web开发人员来说，知道tomcat，那么肯定也知道apache。</p>\n<p>Tomcat现在是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目。由Apache、Sun 和其他一些公司及个人共同开发而成。</p>\n<p>Tomcat的特点</p>\n<ul>\n<li>免费，开源，清凉，很适合我们学习人员的使用。</li>\n<li>它内含了一个单独的Http服务器，它也可以被视作一个单独的Web服务器。但是如果说只是将Tomcat用于单独的web服务器，那么在一些有速度和事务处理有要求的情况下来说是不利的，他没有其它完备的web服务器功能那么牛逼，比如（Apache服务器？）所以Tomcat常常会讲其中的Servlet引擎配合其它web服务器使用。</li>\n<li>Tomcat实现了对Servlet和JavaServer Page（JSP）的支持，所以Tomcat内部有一个Jsp编译器（Jsper模块），用以将JSP编译成一个Servlet。这里就不得不说JSP的九大隐含对象了，request，response，pageContext，session，application，config，out，page，exception</li>\n</ul>\n<p>Tomcat简单来说就是可以作为一个简易的web服务器，你可以将你的站点放置在Tomcat上，由Tomcat进行管理。</p>\n<h2 id=\"Tomcat的总体架构\"><a href=\"#Tomcat的总体架构\" class=\"headerlink\" title=\"Tomcat的总体架构\"></a>Tomcat的总体架构</h2><hr>\n<p>讲完了Tomcat的一些基本知识，接下来说说Tomcat的总体架构</p>\n<p>一个好的软件是需要非常模块化的，tomcat也不例外，我们先了解了Tomcat的总体架构，那么再对其中的一部分一部分进行分析，我想作为一个web开发人员，你掌握了这些，也可算是合格的一员了。</p>\n<p>先给出一张tomcat容器模型图<br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image001.gif\"></p>\n<p>可以看到一个tomcat下可以有很多个Service服务。</p>\n<p>Service可以说是一个接口，实现它的标准类是StandardService<br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image002.png\"><br><img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/image003.png\"></p>\n<p>所以说一个Service服务，其实就是一个StandardService的实例进程。</p>\n<p>那么我们可以说说一个StandardService在干嘛呢？从上图的方法名就可以知道，比如setContainer,setServer,addConnector（这些Container和Connector后面会重点讲，先别急）<br>这些方法其实可以说是对Container和Connector等相关初始化工作</p>\n<p>是的，Service其实就是Container和Connector的一个外部包装，专门负责Container和Connector之间的管理。比如一个Connector要将request和response传递给Container，就是需要Service的帮忙。</p>\n<p>那么Service由谁来管理呢？ 233，也许你会脱口而出，“由tomcat管理”。哈哈，tomcat其实只是一个名字而已，真正管理Service的肯定也是代码呢。</p>\n<p>细心的同学应该会发现，之前有一个setServer方法，那么Server是谁呢？ 我想聪明的你肯定猜到了，对Server就是管理Service的。Server类中有一个addService方法，用于添加Service。</p>\n<p>ok，说到这里，我想大家应该对Server和Service有了大致的了解，那么接下来就来说说有关Service内部的事情。</p>\n<hr>\n<p>我们知道Service里面包含有Container和Connector，简单来说Connector是负责接收浏览器的发过来的 tcp 连接请求<br>，然后将其信息封装为Request和Response，将其传递给Container处理（在一个子线程中执行Container，主线程依旧等待新的tcp请求）</p>\n<p>ok，我想大家应该知道Container和Connector之间的关系了吧，那么接下来说说Connector是如何工作的</p>\n<p>Tomcat5 中默认的 Connector 是 Coyote，这个 Connector 是可以选择替换的.（至今也仍然在使用Coyote，此外是可以替换的，也说明了Tomcat模块化很好。是的，模块好真的很不错！其实减轻了不少开发人员的负担，可以更好的分配工作）</p>\n<h6 id=\"首先呢Connector如何接受tcp请求？\"><a href=\"#首先呢Connector如何接受tcp请求？\" class=\"headerlink\" title=\"首先呢Connector如何接受tcp请求？\"></a>首先呢Connector如何接受tcp请求？</h6><p>嗯，交给Socket呗，不多讲了</p>\n<h6 id=\"其次呢Connector是如何管理多个请求的？多线程体现在哪里？\"><a href=\"#其次呢Connector是如何管理多个请求的？多线程体现在哪里？\" class=\"headerlink\" title=\"其次呢Connector是如何管理多个请求的？多线程体现在哪里？\"></a>其次呢Connector是如何管理多个请求的？多线程体现在哪里？</h6><p>你可以理解为一个while循环，检测一个信号量，如果有请求来了，会改变这个信号量，从而进入while循环内部，然后就会进行一次有关操作了。</p>\n<p>同时主线程继续等待，等待新的请求进来。</p>\n<h6 id=\"Connector如何处理一次请求的\"><a href=\"#Connector如何处理一次请求的\" class=\"headerlink\" title=\"Connector如何处理一次请求的\"></a>Connector如何处理一次请求的</h6><p>Connector处理一次请求，靠的是两个类的运作，HttpConnector和HttpProcessor</p>\n<p>HttpConnector用于等待新的请求，有新的请求后，就会转交给HttpProcessor处理，HttpProcessor的process方法，会将tcp请求的信息封装为对应的Request和Response实例</p>\n<p>最后这个Request和Response就会转递给Container，而转递的任务就是之前讲的Service的工作了。</p>\n<hr>\n<p>理解了Connector的工作原理后，我们就来讲讲Container的工作原理吧</p>\n<p>我们还是先来看看container容器的内部模型图</p>\n<img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image002.jpg\">\n<p>可以看到一个Container内部有Engine，Host，Context还有Wrapper。ok，还是简单之上，我们其实不需要了解的很细，只要知道其每个部分都在干什么就行了</p>\n<h6 id=\"Engine容器\"><a href=\"#Engine容器\" class=\"headerlink\" title=\"Engine容器\"></a>Engine容器</h6><p>首先一个Container里有一个Engine容器，这个容器比较简单，它只定义了一些基本的关联关系，初始化和它相关联的组件，以及一些事件的监听。一个简单的Servlet，也许根本不需要Engine这一层的管理</p>\n<hr>\n<h6 id=\"Host容器\"><a href=\"#Host容器\" class=\"headerlink\" title=\"Host容器\"></a>Host容器</h6><p>从英文单词上看就知道，host代表主机，不过host容器可以有多个，所以如果对web开发比较熟悉的人，应该就知道了，host其实就代表虚拟主机的意思。对，所以说其实一个host容器就代表一个站点哦！ 比方说，我想再建立一个站点，但是我不需要再去找一个web服务器重新设置我的站点，我只需要建立一个虚拟主机，虽然url看上去不一样，但是其实请求都是有同一个container再处理数据哦。</p>\n<hr>\n<h6 id=\"Context容器\"><a href=\"#Context容器\" class=\"headerlink\" title=\"Context容器\"></a>Context容器</h6><p>Context代表Servlet的Context，它具备了Servlet运行的基本环境，理论上只要有Context就能运行Servlet了。简单的Tomcat可以没有Engine和Host。</p>\n<p>所以简单来说，Context用于管理Servlet！</p>\n<hr>\n<h6 id=\"Wrapper容器\"><a href=\"#Wrapper容器\" class=\"headerlink\" title=\"Wrapper容器\"></a>Wrapper容器</h6><p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。Wrapper 是最底层的容器，它没有子容器了，所以调用它的 addChild 将会报错。</p>\n<p>所以说一个Context容器里可以有很多个Wrapper，我们每次在web.xml中注册一个Servlet的时候，就会相应的建立一个Wrapper哦</p>\n<hr>\n<h2 id=\"Servlet的工作原理\"><a href=\"#Servlet的工作原理\" class=\"headerlink\" title=\"Servlet的工作原理\"></a>Servlet的工作原理</h2><hr>\n<h5 id=\"Servlet的初始化流程\"><a href=\"#Servlet的初始化流程\" class=\"headerlink\" title=\"Servlet的初始化流程\"></a>Servlet的初始化流程</h5><p>我们之前有提到Context容器就是Servlet的居住地，里面的Wrapper就代表一个Servlet。（ps：Wrapper只是一层Servlet的封装，为了将Servlet和tomcat分开，因为tomcat是tomcat，而servlet则是另一个领域模块，意思就是说，也许今后会有更厉害的servlet改装版本，然后这个改装版本就可以直接装入wrapper类中，体现了低耦合，高内聚）</p>\n<p>要执行一个Servlet的相关方法前，我们肯定要先实例化Servlet，由Context容器来实例化Servlet，那么我们就先从Conetxt的初始化讲起</p>\n<p>Context容器的初始化可以看两大部分</p>\n<p>1.ContextConfig 的 init 方法将会主要完成以下工作：</p>\n<ul>\n<li>创建用于解析 xml 配置文件的 contextDigester 对象</li>\n<li>读取默认 context.xml 配置文件，如果存在解析它</li>\n<li>读取默认 Host 配置文件，如果存在解析它</li>\n<li>读取默认 Context 自身的配置文件，如果存在解析它</li>\n<li>设置 Context 的 DocBase</li>\n</ul>\n<p>2.ContextConfig 的 init 方法完成后，Context 容器的会执行 startInternal 方法，这个方法启动逻辑比较复杂，主要包括如下几个部分：</p>\n<ul>\n<li>创建读取资源文件的对象</li>\n<li>创建 ClassLoader 对象</li>\n<li>设置应用的工作目录</li>\n<li>启动相关的辅助类如：logger、realm、resources 等</li>\n<li>修改启动状态，通知感兴趣的观察者（Web 应用的配置）<br>子容器的初始化</li>\n<li>获取 ServletContext 并设置必要的参数</li>\n<li>初始化“load on startup”的 Servlet</li>\n</ul>\n<p>这其中是很复杂的，但是我现在主要任务是让大家理解总体脉络，细节部分也不是我们应该掌握的</p>\n<p>既然Context容器的初始化工作完了，那么接下来就要解析一个web应用了。我们知道一个web应用的一个重要的配置文件叫web.xml。所以说，接下来Context容器就会去解析web.xml文件，有Servlet就想应的调用wrapper的相关方法，初始化，创建Servlet等。所以说 Context 容器才是真正运行 Servlet 的 Servlet 容器。一个 Web 应用对应一个 Context 容器。</p>\n<h6 id=\"Servlet实例\"><a href=\"#Servlet实例\" class=\"headerlink\" title=\"Servlet实例\"></a>Servlet实例</h6><p>上文所讲的，我们就已经做完了所有Servlet的初始化工作，接下来我们就要在应用启动的时候，实例化对应的Servlet了。Tomcat在实例化Servlet的时候，是按照有需求再实例化的逻辑的。不过其实这样是不好的，因为如果一个servlet的内容过去庞大的话，在初始化的时候就会需要大量的时间，那么这个初始化时间对于使用这个wen应用的客户来说就是一个blank的盲等待，过场的等待会让客户很生气的，毕竟电脑上的等待10秒，相当于等地铁30分钟呢。所以说，我们要尽量设置load-on-startup属性，这个属性设置后，Context容器就会在Tomcat启动的时候对相应的Servlet进行一次实例化</p>\n<p>Servlet实例化的工作由Wrapper完成，Wrapper简单的调用Servlet的init方法，对Servlet进行初始化。（当然这里还可能初始化的是一个jspServlet，不过道理一样，不多说了）</p>\n<hr>\n<h2 id=\"Servlet的体系结构\"><a href=\"#Servlet的体系结构\" class=\"headerlink\" title=\"Servlet的体系结构\"></a>Servlet的体系结构</h2><hr>\n<img src=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/image010.jpg\">\n<p>从上图可以看到，和Servlet有关的类有ServletRequest，ServletResponse，ServletConfig，ServletContext</p>\n<p>Request和Response我们就不多说了，这个学过Servlet的使用后就一定会接触的</p>\n<p>ServletConfig，可以说是具有这个Servlet的相关配置信息的类</p>\n<p>而ServletConetxt，则有这个Servlet所寄居的Contetx容器的相关信息，具体信息都请查阅相关API接口</p>\n<hr>\n<h2 id=\"Servlet如何工作\"><a href=\"#Servlet如何工作\" class=\"headerlink\" title=\"Servlet如何工作\"></a>Servlet如何工作</h2><hr>\n<p>一个请求到来后，如何知道这个请求要去哪个Servlet里进行相关操作呢？</p>\n<p>这个分配去向的任务很简单</p>\n<p>将url解析，映射到对应的Container容器，Container容器获取到的request里带有mappingData属性，这个属性是mapper类根据这次请求的 hostnane 和 contextpath 将 host 和 context 容器设置到 Request 的 mappingData 属性中的。所以request进入到Conetxt容器里时候，就会知道自己该去哪个wrapper里了！</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Servlet的所有工作流程已经总结完毕，有对其中部分不理解的地方，可以对这个部分进行google的关键字搜索了解更多的知识！</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-servlet/</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/</a></li>\n<li><a href=\"http://www.tqcto.com/article/web/51385.html\" target=\"_blank\" rel=\"noopener\">http://www.tqcto.com/article/web/51385.html</a></li>\n</ul>\n<hr>\n<h2 id=\"后续补充\"><a href=\"#后续补充\" class=\"headerlink\" title=\"后续补充\"></a>后续补充</h2><hr>\n<p>Servlet的核心基础内容，可以在我的icloud云上看我以前写的笔记</p>\n<p>下面介绍一些Sevlet的最新技术变化，虽然我们现在javaWeb的开发早已经不直接使用Sevlet了都用MVC框架代替，但是MVC框架底层依旧还是在操作我们的Servlet，所以关注一下是没有坏处的，有助于理解Web的MVC框架背后实现原理</p>\n<hr>\n<p>Servlet 3.0 新特性介绍，基于jdk 1.6（）</p>\n<ol>\n<li><p>异步处理支持，原本的Sevlet是堵塞的，有了异步处理支持后，可以使用Servlet的官方API来做到异步处理支持。当然使用你自己实现的异步处理也完全没问题</p>\n</li>\n<li><p>新增的注解支持，比如@WebServlet，@WebInitParam等等，都是为了简化xml配置文件为目的的</p>\n</li>\n<li><p>可插性支持，引入了称之为“Web 模块部署描述符片段“的 web-fragment.xml 部署描述文件，这个文件放置在Jar包的META-INF 目录下。为什么说是可插性支持呢？因为你可以自己写一堆Servlet文件，就可以把他们打包起来，然后把它们的xml配置信息写到web-fragment.xml里，生成一个jar包。这个jar包就可以插到任何Servlet的程序中被正常使用了，jar包内的servlet配置不需要重新写到当前项目的xml中，Servlet3.0会自动扫描jar包内的 web-fragment.xml</p>\n</li>\n<li><p>ServletContext 的性能增强</p>\n</li>\n<li><p>HttpServletRequest 对文件上传的支持，使用</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Part getPart(String name)</span><br><span class=\"line\">Collection&lt;Part&gt; getParts()</span><br></pre></td></tr></table></figure>\n<p>就可以轻松获取文件数据，Part还提供了一些好用的api，方便你处理这些文件，不过form表单仍然要求是 multipart/form-data的</p>\n<p>Servlet 3.0 的新特性参考：<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/index.html</a><br>Servlet 3.0 的新特性参考：<a href=\"https://www.cnblogs.com/davenkin/p/async-servlet.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/davenkin/p/async-servlet.html</a></p>\n<hr>\n<p>Servlet 3.1 新特性介绍，jdk1.7</p>\n<ol start=\"0\">\n<li><p>编程式配置，使用java代码的格式来配置web.xml，一种现在流行的配置方式，继承javax.servlet.ServletContextListener接口，还可以使得这个Java配置类可插拔</p>\n</li>\n<li><p>Non-blocking I/O,<br>非堵塞的I/O，在使用I/O进行网络数据读取的时候，加入了几个回调函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onDataAvailable - 在数据没有阻塞，已经完全准备好可以读取的时候调用。</span><br><span class=\"line\">onAllDataRead - 所有数据读取完成后调用。</span><br><span class=\"line\">onError - 请求中发生错误的时候调用。</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样我们就可以在回调函数里，开启I/O进行读取，这样就不会堵塞当前线程的执行</p>\n<p>参考：<a href=\"https://www.cnblogs.com/davenkin/p/async-servlet.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/davenkin/p/async-servlet.html</a></p>\n<ol start=\"2\">\n<li>支持HTTP protocol upgrade mechanism </li>\n</ol>\n<p>客户端可以发起握手协议的升级，最常见的从HTTP / 1.1 升级到HTTP/2 甚至WebSocket </p>\n<p><a href=\"https://cloud.tencent.com/developer/section/1189838\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/section/1189838</a></p>\n<hr>\n<p>Servlet 4.0新特性介绍，jdk1.8</p>\n<p>主要是实现了对HTTP/2的全面支持</p>\n<ol>\n<li><p>服务器推送</p>\n</li>\n<li><p>全新的URL映射匹配方式</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-javaee8-servlet4/index.html</a></p>"},{"title":"面对涉及金额计算的需求,我该如何应对(一)?","date":"2019-09-25T03:30:22.000Z","_content":"\n## 前言\n\n本文主要讨论作为JavaWeb应用程序员, 当接手涉及金额计算需求的时候, 如何确保金额计算, 金额保存, 金额显示不失真! \n\n如果你是其他语言的应用程序员, 本文内容可能不会立马对你有用, 但是相关知识的涉及在语言间的作用一般是想通的, 你也可以拿来作为参考\n\n接下来我们开始正题\n\n## 先聊聊Java层面出现的精度问题是什么\n\n对于刚上手Java的新人来说, 涉及数字的计算, 最容易想到的是int和double(由于float的取值范围小于double, 在不是对内存要求非常苛刻的条件下, 我们一般都是用double的), 如果整数就用int, 如果带有小数就用double.\n\n但是很快的, 你会发现double的计算结果往往不符合真正的数学计算结果, 比如执行以下代码:\n```java\nSystem.out.println(0.1 + 0.2);\n```\n这个结果是0.30000000000000004, 而不是0.3\n\n这是怎么回事呢? \n\n### double类型计算陷阱\n\n如果想要理解这种现象, 我们首先要明确一个大前提, 就是计算机是如何存储`0.1`,`0.2`这些值的\n\n对计算机原理有一定了解的话, 你一定不难理解其实这些数在计算机上真正是用二进制的形式来存储的, 不仅是这些float和double这些浮点数, int值其实也是. \n\n这时候你可能又会冒出一个问题, 为什么同样都是二进制存储, int值的计算从来不会存在精度问题, 而float和double缺会存在.\n\n这就要涉及到他们转换为二进制的过程中是否有截断的问题了.\n\nfloat和double转换为二进制表示有一个非常致命的问题就是: \n\n>就像十进制无法用有限位表示1/3一样, 二进制也无法用有限的位数来表示部分浮点数, 比如0.1\n\n下面将0.1和0.2转为2进制表示。\n\n0.1\n0.10 * 2 = 0.20 未进位 0\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n无限循环...\n二进制表示0.1:\n0.00011001100110011001100110011001100110011001100110011001...\n科学记数表示：\n1.1001100110011001100110011001100110011001100110011001... * 2^-4\n\n可以看到二进制表示0.1 实际上是一个无限循环的二进制数, 既然是无线循环, 这就代表了无法用有限的空间去存储到计算机的存储容器上, 所以计算机必须对其进行截断, 最终导致在计算机上存储0.1的二进制数只存储了其中的23位(float)或者52位(double).\n\n我想看到这里的你也许已经明白了float和double的计算失去精度的原理了, 不过为了延伸阅读, 我认为我们也应该对一个标准有一定的概念(你应该对我上面说的23位和52位提出疑问,为什么是23位,为什么是52位,而这些都与IEEE754二进制浮点数标准有关)\n\n### IEEE754标准\n\n绝大多数的编程语言都遵循了IEEE754标准进行浮点数的运算,\n\n简单来说, 该标准定义了一个浮点数的表示方式为:\n\n```\n值 = 符号位 + 指数位偏移 + 尾数位\n```\n\n而我们上文中提到的一长串二进制数据,就是存储在尾数位上的(当然会做一些必要的转换,不是原封不动的), 因为该标准规定了尾数位的长度, float是23位, double是52位, 所以超过的部分都会被四舍五入进行抹除, 从而导致了精度问题的发生.\n\n\n### 关于浮点数运算精度问题其他想说的\n\n想必一般智商的人看我上面的总结, 已经可以非常容易理解精度问题发生的根源, 但是我还是想声明的是, 实际上这块领域还是需要有一定的数学基础, 数学不好的人可能会看的头晕, 并且网上针对这一块有很深入研究的论文存在, 我在阅读它们的时候由于数学知识匮乏,所以更深层次的东西没法进行总结,也不敢乱说.如果您有兴趣,则请自己通过搜索引擎进行更深入的探讨. 不过这也不代表我上面的描述是非真实的说法, 我上面的说法可以说是最通俗的说法来让我们理解为啥会出现精度问题\n\n## Java层面使用BigInteger和BigDecimal来完成高精度计算\n\n在Java社区中, 我们已经达成了共识, 如果希望自己所做的运算不会损失精度, 可以使用BigInteger或者BigDecimal类来做运算处理.\n\n先提出质疑是, 必须需要使用这两个类来操作吗?\n\n答案是: 不是必须的\n\n只不过编写JDK的大神们已经呕心沥血帮我们完成了这两个完美的大数运算类, 我们岂有不用之理? 当然如果你的能力够厉害, 你也完全可以自己来实现高精度计算类\n\n### 从BigInteger说起\n\n由于BigDecimal底层有用到BigInteger, 在BigDecimal类实现第一行就出现如下代码:\n\n```java\n/**\n     * The unscaled value of this BigDecimal, as returned by {@link\n     * #unscaledValue}.\n     *\n     * @serial\n     * @see #unscaledValue\n     */\n    private final BigInteger intVal;\n```\n\n所以我们如果想了解它们的秘密的话, 还是从BigInteger说起.\n\n我尝试着自己阅读BigInteger源码, 但是太多的数学术语还是打败了我, 代码写的简直可以堪称神级, 所以本文对BigInteger的描述是结合java doc+网上的博文+自己看了部分源码后的总结, 我会努力保证其正确性, 从而让读者对BigInteger有个基本认识, 而不是懵里懵懂\n\n#### 首先BigInteger是什么?\n\n官方说明是的说明是它是`Immutable arbitrary-precision integers. `\n\n意思就是说它是可变任意精度整数. 可能这种说法有些平时学习不好的同学已经开始懵逼了. 那我就举个例子来说把.\n\n在Java的世界中, 所有基本数据类型都有取值范围, 取值范围的多少取决于它们底层可用多少位去存储数据. 比如我们常用的byte是由8位二进制数据组成, int类型是由32位数据类型组成, 更直观点, 请看下面的说明\n\n```java\nSystem.out.println(Integer.toBinaryString(1231231231)); // 1001001011000110001100011111111\n```\n\n可以看到1231231231十进制数字就是1001001011000110001100011111111的二进制数字, 只不过这里是31位,因为还有一位是符号位没有显示出来\n\n但是现实生活中我们可能要使用更大的数去做各种计算, 这时候, java的基本数据类型不够用了怎么办, 所以就有了BigInteger. 它可以表示任意长度的十进制整数, 不过由于太长的十进制整数是不科学且无意义的, 所以BigInteger内部使用了好几个常量去专门做了一些控制. 目前来看官方文档的说明里, BigInteger可表示的范围为:`-2的Integer.MAX_VALUE次方 (不可兼) 到 +2的Integer.MAX_VALUE次方 (不可兼)`, 不可兼的意思是不包括边界值的意思. Integer.MAX_VALUE的值是2的31次方-1, 可以想象这个范围已经是超级大的! 一般的计算器都已经无法显示这个数值呢. \n\n#### BigInteger是如何做到可以存储任意精度的整数的\n\n俗话说, 一个人干不了, 就两个人一起干. BigInteger的底层原理抽象来看其实也符合这句俗话的道理.\n\n一个BigInteger代表的值是使用int[]来存储的, 源码中域定义如下:\n```java\n/**\n * mag是BigInteger的magnitude, 遵照Big-endian顺序. 每个数字都有对应的一种mag的表示, 同时数字0对应的mag是空数组\n * \n */\nfinal int[] mag;\n```\n\n举个例子来说, 比如你有一个数字 `18927348347389543834934878` , 那么就会分成三部分分别存储至int[]数组里, 最终底层是这样存放的\n`18927348 | 347389543 | 834934878`\n\n从这个例子中, 我们可以观察到:\n1. 每组最多存储长度是9, 为什么是9? 因为2的31次方-1的数值(2147483647)对应是一个长度为10的数字, 如果采用10长度的话, 会溢出int的最大取值范围; 并且在BIgInteger的add方法内,有直接做加法运算,两个9位的相加肯定不会溢出;\n2. 由于java中数组的最大长度也是2147483647(实际大小会根据dk版本有点不同,因为部分位会被挪用去存储数组的元信息),所以最大可存储的数字长度是9*2147483647, 这是个相当可怕的长度.....肯定够你用\n\n除此之外, BigInteger还有个小点就是, 它将符号位单独拿出来表示, 源码中域定义如下:\n```java\n/**\n * BigInteger的符号位, -1是代表负的,0代表0,1代表正的. 要注意的是 如果是数字0 则这个signum也必须是0 不能是1 \n * (这是为了确保每个BigInteger都有唯一的表示)\n * @serial\n */\nfinal int signum;\n```\n\n#### BigInteger是怎么做运算的\n\n这个我暂时就不予乱谈, 先贴个源码:\n```java\nprivate static int[] add(int[] x, int[] y) {\n        // If x is shorter, swap the two arrays\n        if (x.length < y.length) {\n            int[] tmp = x;\n            x = y;\n            y = tmp;\n        }\n\n        int xIndex = x.length;\n        int yIndex = y.length;\n        int result[] = new int[xIndex];\n        long sum = 0;\n        if (yIndex == 1) {\n            sum = (x[--xIndex] & LONG_MASK) + (y[0] & LONG_MASK) ;\n            result[xIndex] = (int)sum;\n        } else {\n            // Add common parts of both numbers\n            while (yIndex > 0) {\n                sum = (x[--xIndex] & LONG_MASK) +\n                      (y[--yIndex] & LONG_MASK) + (sum >>> 32);\n                result[xIndex] = (int)sum;\n            }\n        }\n        // Copy remainder of longer number while carry propagation is required\n        boolean carry = (sum >>> 32 != 0);\n        while (xIndex > 0 && carry)\n            carry = ((result[--xIndex] = x[xIndex] + 1) == 0);\n\n        // Copy remainder of longer number\n        while (xIndex > 0)\n            result[--xIndex] = x[xIndex];\n\n        // Grow result if necessary\n        if (carry) {\n            int bigger[] = new int[result.length + 1];\n            System.arraycopy(result, 0, bigger, 1, result.length);\n            bigger[0] = 0x01;\n            return bigger;\n        }\n       \n```\n\n我没有特别看明白(菜鸡如我~), 但是我感觉其实就是分组相加, 然后有进位则做进位处理, 如果我猜测的不对, 欢迎留言\n\n### BigDecimal大显神威\n\n我们前面已经说明了一些BigInteger的知识, 现在我们已经有了相当的知识储备来学习BigDecimal的实现原理了.\n\n#### BigDecimal是什么\n\nBigDecimal represents an immutable arbitrary-precision signed decimal number.\nbigdecimal表示一个不可变的任意精度有符号十进制数。\n\n从这句话中我们可以知道的最切题的信息就是它是支持任意精度! 所以说BigDecimal是不存在double那样,在底层存储的时候把超出的位数抹掉从而导致精度问题.\n\nBigDecimal相比于BigInteger来说,最大的区别就是它支持带小数的十进制数\n\n#### 那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?\n\nBigDecimal由两部分来支持数据存储:\n\n1. Unscaled value – an arbitrary precision integer, 一个任意精度整数, 由BigInteger作支持\n\n```java\n/**\n * 利用BigInteger存储任意精度整数\n */\nprivate final BigInteger intVal;\n```\n\n2. Scale – a 32-bit integer representing the number of digits to the right of the decimal point, 用一个int类型存储小数位数(scale)\n\n```java\n /**\n  * int类型来存储位数\n  */\nprivate final int scale;\n```\n\n我们举个例子, 比如数字3.14, 那么其intVal就是314, 其scale就是2, 可以从下面的代码示例中同样验证这个结论\n\n```java\nBigDecimal bd = new BigDecimal(\"3.14\");//利用String构造器构造,后面会再讲\nSystem.out.println(bd.unscaledValue());//314\nSystem.out.println(bd.scale());//2\n```\n\n所以BigDecimal利用了BigInteger来支持任意精度的表示, 同时使用一个scale域来保存小数位数, 两者结合, 就可以完美的保存一个任意精度的十进制数\n\n#### BigDecimal的常见陷阱\n\n本文不是API文档, 所以我不会一一列举BigDecimal的常见方法, 不过BigDecimal在使用上有一部分坑是需要我们稍加留意的.\n\n1. 首先是不使用`BigDecimal(double val)`构造器, 为什么?\n\n我们查阅这个构造器源码, 会发现其调用了`Double.doubleToLongBits()`, 看到这里我们其实已经可以得到答案了, 为了证明我说的没问题, 下面贴出构造器调用源码:\n\n```java\npublic BigDecimal(double val, MathContext mc) {\n    if (Double.isInfinite(val) || Double.isNaN(val))\n        throw new NumberFormatException(\"Infinite or NaN\");\n    // Translate the double into sign, exponent and significand, according\n    // to the formulae in JLS, Section 20.10.22.\n    long valBits = Double.doubleToLongBits(val);\n    int sign = ((valBits >> 63) == 0 ? 1 : -1);\n    int exponent = (int) ((valBits >> 52) & 0x7ffL);\n    long significand = (exponent == 0\n            ? (valBits & ((1L << 52) - 1)) << 1\n            : (valBits & ((1L << 52) - 1)) | (1L << 52));\n    exponent -= 1075;\n\n    // 下面过长省略\n```\n\n从第6行可以看到, 此构造器明确使用了`Double.doubleToLongBits(val)`返回的`valBits`来生成BigDecimal,\n\n我们来窥探下这个`valBits`的内容,\n\n```java\nSystem.out.println(Double.doubleToLongBits(0.1d));\n//4591870180066957722\nSystem.out.println(Long.toBinaryString(Double.doubleToLongBits(0.1d)))\n//11111110111001100110011001100110011001100110011001100110011010\n```\n\n我们从第二个打印结果中看出, 获取到的二进制数据是一个有限精度的数字, 而浮点数存储0.1的时候,是一种无限循环的表示情况,这在上文中我们也提及了. 所以我们已经可以断定, BigDecimal在这里会使用一个已经失去精度的数值来生成Bigdecimal,最终导致我们打印这个Bigdecimal的时候,获得的不是0.1,而是0.1000000000000000055511151231257827021181583404541015625这样的值, 从而又产生了精度问题!\n\n所以这就是为什么不推荐使用`BigDecimal(double val)`构造器的原因,因为它依旧会产生精度问题.\n\n一般的, 我们可以使用`BigDecimal.valueOf(double val)`或者`BigDecimal(String val)`来构造.\n\n`BigDecimal.valueOf(double val)`内部会先调用Double的toString方法, 所以不会产生精度问题\n\n2. 其次是谨慎使用`compareTo`和`equals`方法\n\n如果你想比较两个Bigdecimal的值大小, 使用`compareTo`, 因为它会忽略scale, 所以1.00和1.0是相等的\n\n如果你想完全比较两个Bigdecimal的是否相同, 使用`equals`, 比如1.00和1.0通过此方法比较是不等的\n\n## 未完待续\n\n本章主要讲解了java层面上如何做好高精度计算, 下一章我们会继续讨论数据库层面上以及前端层面上如何正确的进行展示\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/java-amount-calculation.md","raw":"---\ntitle: 面对涉及金额计算的需求,我该如何应对(一)?\ntags: Java高精度计算\ncategories: IT\ndate: 2019-09-25 11:30:22\n---\n\n## 前言\n\n本文主要讨论作为JavaWeb应用程序员, 当接手涉及金额计算需求的时候, 如何确保金额计算, 金额保存, 金额显示不失真! \n\n如果你是其他语言的应用程序员, 本文内容可能不会立马对你有用, 但是相关知识的涉及在语言间的作用一般是想通的, 你也可以拿来作为参考\n\n接下来我们开始正题\n\n## 先聊聊Java层面出现的精度问题是什么\n\n对于刚上手Java的新人来说, 涉及数字的计算, 最容易想到的是int和double(由于float的取值范围小于double, 在不是对内存要求非常苛刻的条件下, 我们一般都是用double的), 如果整数就用int, 如果带有小数就用double.\n\n但是很快的, 你会发现double的计算结果往往不符合真正的数学计算结果, 比如执行以下代码:\n```java\nSystem.out.println(0.1 + 0.2);\n```\n这个结果是0.30000000000000004, 而不是0.3\n\n这是怎么回事呢? \n\n### double类型计算陷阱\n\n如果想要理解这种现象, 我们首先要明确一个大前提, 就是计算机是如何存储`0.1`,`0.2`这些值的\n\n对计算机原理有一定了解的话, 你一定不难理解其实这些数在计算机上真正是用二进制的形式来存储的, 不仅是这些float和double这些浮点数, int值其实也是. \n\n这时候你可能又会冒出一个问题, 为什么同样都是二进制存储, int值的计算从来不会存在精度问题, 而float和double缺会存在.\n\n这就要涉及到他们转换为二进制的过程中是否有截断的问题了.\n\nfloat和double转换为二进制表示有一个非常致命的问题就是: \n\n>就像十进制无法用有限位表示1/3一样, 二进制也无法用有限的位数来表示部分浮点数, 比如0.1\n\n下面将0.1和0.2转为2进制表示。\n\n0.1\n0.10 * 2 = 0.20 未进位 0\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n0.40 * 2 = 0.80 未进位 0\n0.80 * 2 = 1.60 进位 1\n0.60 * 2 = 1.20 进位 1\n0.20 * 2 = 0.40 未进位 0\n无限循环...\n二进制表示0.1:\n0.00011001100110011001100110011001100110011001100110011001...\n科学记数表示：\n1.1001100110011001100110011001100110011001100110011001... * 2^-4\n\n可以看到二进制表示0.1 实际上是一个无限循环的二进制数, 既然是无线循环, 这就代表了无法用有限的空间去存储到计算机的存储容器上, 所以计算机必须对其进行截断, 最终导致在计算机上存储0.1的二进制数只存储了其中的23位(float)或者52位(double).\n\n我想看到这里的你也许已经明白了float和double的计算失去精度的原理了, 不过为了延伸阅读, 我认为我们也应该对一个标准有一定的概念(你应该对我上面说的23位和52位提出疑问,为什么是23位,为什么是52位,而这些都与IEEE754二进制浮点数标准有关)\n\n### IEEE754标准\n\n绝大多数的编程语言都遵循了IEEE754标准进行浮点数的运算,\n\n简单来说, 该标准定义了一个浮点数的表示方式为:\n\n```\n值 = 符号位 + 指数位偏移 + 尾数位\n```\n\n而我们上文中提到的一长串二进制数据,就是存储在尾数位上的(当然会做一些必要的转换,不是原封不动的), 因为该标准规定了尾数位的长度, float是23位, double是52位, 所以超过的部分都会被四舍五入进行抹除, 从而导致了精度问题的发生.\n\n\n### 关于浮点数运算精度问题其他想说的\n\n想必一般智商的人看我上面的总结, 已经可以非常容易理解精度问题发生的根源, 但是我还是想声明的是, 实际上这块领域还是需要有一定的数学基础, 数学不好的人可能会看的头晕, 并且网上针对这一块有很深入研究的论文存在, 我在阅读它们的时候由于数学知识匮乏,所以更深层次的东西没法进行总结,也不敢乱说.如果您有兴趣,则请自己通过搜索引擎进行更深入的探讨. 不过这也不代表我上面的描述是非真实的说法, 我上面的说法可以说是最通俗的说法来让我们理解为啥会出现精度问题\n\n## Java层面使用BigInteger和BigDecimal来完成高精度计算\n\n在Java社区中, 我们已经达成了共识, 如果希望自己所做的运算不会损失精度, 可以使用BigInteger或者BigDecimal类来做运算处理.\n\n先提出质疑是, 必须需要使用这两个类来操作吗?\n\n答案是: 不是必须的\n\n只不过编写JDK的大神们已经呕心沥血帮我们完成了这两个完美的大数运算类, 我们岂有不用之理? 当然如果你的能力够厉害, 你也完全可以自己来实现高精度计算类\n\n### 从BigInteger说起\n\n由于BigDecimal底层有用到BigInteger, 在BigDecimal类实现第一行就出现如下代码:\n\n```java\n/**\n     * The unscaled value of this BigDecimal, as returned by {@link\n     * #unscaledValue}.\n     *\n     * @serial\n     * @see #unscaledValue\n     */\n    private final BigInteger intVal;\n```\n\n所以我们如果想了解它们的秘密的话, 还是从BigInteger说起.\n\n我尝试着自己阅读BigInteger源码, 但是太多的数学术语还是打败了我, 代码写的简直可以堪称神级, 所以本文对BigInteger的描述是结合java doc+网上的博文+自己看了部分源码后的总结, 我会努力保证其正确性, 从而让读者对BigInteger有个基本认识, 而不是懵里懵懂\n\n#### 首先BigInteger是什么?\n\n官方说明是的说明是它是`Immutable arbitrary-precision integers. `\n\n意思就是说它是可变任意精度整数. 可能这种说法有些平时学习不好的同学已经开始懵逼了. 那我就举个例子来说把.\n\n在Java的世界中, 所有基本数据类型都有取值范围, 取值范围的多少取决于它们底层可用多少位去存储数据. 比如我们常用的byte是由8位二进制数据组成, int类型是由32位数据类型组成, 更直观点, 请看下面的说明\n\n```java\nSystem.out.println(Integer.toBinaryString(1231231231)); // 1001001011000110001100011111111\n```\n\n可以看到1231231231十进制数字就是1001001011000110001100011111111的二进制数字, 只不过这里是31位,因为还有一位是符号位没有显示出来\n\n但是现实生活中我们可能要使用更大的数去做各种计算, 这时候, java的基本数据类型不够用了怎么办, 所以就有了BigInteger. 它可以表示任意长度的十进制整数, 不过由于太长的十进制整数是不科学且无意义的, 所以BigInteger内部使用了好几个常量去专门做了一些控制. 目前来看官方文档的说明里, BigInteger可表示的范围为:`-2的Integer.MAX_VALUE次方 (不可兼) 到 +2的Integer.MAX_VALUE次方 (不可兼)`, 不可兼的意思是不包括边界值的意思. Integer.MAX_VALUE的值是2的31次方-1, 可以想象这个范围已经是超级大的! 一般的计算器都已经无法显示这个数值呢. \n\n#### BigInteger是如何做到可以存储任意精度的整数的\n\n俗话说, 一个人干不了, 就两个人一起干. BigInteger的底层原理抽象来看其实也符合这句俗话的道理.\n\n一个BigInteger代表的值是使用int[]来存储的, 源码中域定义如下:\n```java\n/**\n * mag是BigInteger的magnitude, 遵照Big-endian顺序. 每个数字都有对应的一种mag的表示, 同时数字0对应的mag是空数组\n * \n */\nfinal int[] mag;\n```\n\n举个例子来说, 比如你有一个数字 `18927348347389543834934878` , 那么就会分成三部分分别存储至int[]数组里, 最终底层是这样存放的\n`18927348 | 347389543 | 834934878`\n\n从这个例子中, 我们可以观察到:\n1. 每组最多存储长度是9, 为什么是9? 因为2的31次方-1的数值(2147483647)对应是一个长度为10的数字, 如果采用10长度的话, 会溢出int的最大取值范围; 并且在BIgInteger的add方法内,有直接做加法运算,两个9位的相加肯定不会溢出;\n2. 由于java中数组的最大长度也是2147483647(实际大小会根据dk版本有点不同,因为部分位会被挪用去存储数组的元信息),所以最大可存储的数字长度是9*2147483647, 这是个相当可怕的长度.....肯定够你用\n\n除此之外, BigInteger还有个小点就是, 它将符号位单独拿出来表示, 源码中域定义如下:\n```java\n/**\n * BigInteger的符号位, -1是代表负的,0代表0,1代表正的. 要注意的是 如果是数字0 则这个signum也必须是0 不能是1 \n * (这是为了确保每个BigInteger都有唯一的表示)\n * @serial\n */\nfinal int signum;\n```\n\n#### BigInteger是怎么做运算的\n\n这个我暂时就不予乱谈, 先贴个源码:\n```java\nprivate static int[] add(int[] x, int[] y) {\n        // If x is shorter, swap the two arrays\n        if (x.length < y.length) {\n            int[] tmp = x;\n            x = y;\n            y = tmp;\n        }\n\n        int xIndex = x.length;\n        int yIndex = y.length;\n        int result[] = new int[xIndex];\n        long sum = 0;\n        if (yIndex == 1) {\n            sum = (x[--xIndex] & LONG_MASK) + (y[0] & LONG_MASK) ;\n            result[xIndex] = (int)sum;\n        } else {\n            // Add common parts of both numbers\n            while (yIndex > 0) {\n                sum = (x[--xIndex] & LONG_MASK) +\n                      (y[--yIndex] & LONG_MASK) + (sum >>> 32);\n                result[xIndex] = (int)sum;\n            }\n        }\n        // Copy remainder of longer number while carry propagation is required\n        boolean carry = (sum >>> 32 != 0);\n        while (xIndex > 0 && carry)\n            carry = ((result[--xIndex] = x[xIndex] + 1) == 0);\n\n        // Copy remainder of longer number\n        while (xIndex > 0)\n            result[--xIndex] = x[xIndex];\n\n        // Grow result if necessary\n        if (carry) {\n            int bigger[] = new int[result.length + 1];\n            System.arraycopy(result, 0, bigger, 1, result.length);\n            bigger[0] = 0x01;\n            return bigger;\n        }\n       \n```\n\n我没有特别看明白(菜鸡如我~), 但是我感觉其实就是分组相加, 然后有进位则做进位处理, 如果我猜测的不对, 欢迎留言\n\n### BigDecimal大显神威\n\n我们前面已经说明了一些BigInteger的知识, 现在我们已经有了相当的知识储备来学习BigDecimal的实现原理了.\n\n#### BigDecimal是什么\n\nBigDecimal represents an immutable arbitrary-precision signed decimal number.\nbigdecimal表示一个不可变的任意精度有符号十进制数。\n\n从这句话中我们可以知道的最切题的信息就是它是支持任意精度! 所以说BigDecimal是不存在double那样,在底层存储的时候把超出的位数抹掉从而导致精度问题.\n\nBigDecimal相比于BigInteger来说,最大的区别就是它支持带小数的十进制数\n\n#### 那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?\n\nBigDecimal由两部分来支持数据存储:\n\n1. Unscaled value – an arbitrary precision integer, 一个任意精度整数, 由BigInteger作支持\n\n```java\n/**\n * 利用BigInteger存储任意精度整数\n */\nprivate final BigInteger intVal;\n```\n\n2. Scale – a 32-bit integer representing the number of digits to the right of the decimal point, 用一个int类型存储小数位数(scale)\n\n```java\n /**\n  * int类型来存储位数\n  */\nprivate final int scale;\n```\n\n我们举个例子, 比如数字3.14, 那么其intVal就是314, 其scale就是2, 可以从下面的代码示例中同样验证这个结论\n\n```java\nBigDecimal bd = new BigDecimal(\"3.14\");//利用String构造器构造,后面会再讲\nSystem.out.println(bd.unscaledValue());//314\nSystem.out.println(bd.scale());//2\n```\n\n所以BigDecimal利用了BigInteger来支持任意精度的表示, 同时使用一个scale域来保存小数位数, 两者结合, 就可以完美的保存一个任意精度的十进制数\n\n#### BigDecimal的常见陷阱\n\n本文不是API文档, 所以我不会一一列举BigDecimal的常见方法, 不过BigDecimal在使用上有一部分坑是需要我们稍加留意的.\n\n1. 首先是不使用`BigDecimal(double val)`构造器, 为什么?\n\n我们查阅这个构造器源码, 会发现其调用了`Double.doubleToLongBits()`, 看到这里我们其实已经可以得到答案了, 为了证明我说的没问题, 下面贴出构造器调用源码:\n\n```java\npublic BigDecimal(double val, MathContext mc) {\n    if (Double.isInfinite(val) || Double.isNaN(val))\n        throw new NumberFormatException(\"Infinite or NaN\");\n    // Translate the double into sign, exponent and significand, according\n    // to the formulae in JLS, Section 20.10.22.\n    long valBits = Double.doubleToLongBits(val);\n    int sign = ((valBits >> 63) == 0 ? 1 : -1);\n    int exponent = (int) ((valBits >> 52) & 0x7ffL);\n    long significand = (exponent == 0\n            ? (valBits & ((1L << 52) - 1)) << 1\n            : (valBits & ((1L << 52) - 1)) | (1L << 52));\n    exponent -= 1075;\n\n    // 下面过长省略\n```\n\n从第6行可以看到, 此构造器明确使用了`Double.doubleToLongBits(val)`返回的`valBits`来生成BigDecimal,\n\n我们来窥探下这个`valBits`的内容,\n\n```java\nSystem.out.println(Double.doubleToLongBits(0.1d));\n//4591870180066957722\nSystem.out.println(Long.toBinaryString(Double.doubleToLongBits(0.1d)))\n//11111110111001100110011001100110011001100110011001100110011010\n```\n\n我们从第二个打印结果中看出, 获取到的二进制数据是一个有限精度的数字, 而浮点数存储0.1的时候,是一种无限循环的表示情况,这在上文中我们也提及了. 所以我们已经可以断定, BigDecimal在这里会使用一个已经失去精度的数值来生成Bigdecimal,最终导致我们打印这个Bigdecimal的时候,获得的不是0.1,而是0.1000000000000000055511151231257827021181583404541015625这样的值, 从而又产生了精度问题!\n\n所以这就是为什么不推荐使用`BigDecimal(double val)`构造器的原因,因为它依旧会产生精度问题.\n\n一般的, 我们可以使用`BigDecimal.valueOf(double val)`或者`BigDecimal(String val)`来构造.\n\n`BigDecimal.valueOf(double val)`内部会先调用Double的toString方法, 所以不会产生精度问题\n\n2. 其次是谨慎使用`compareTo`和`equals`方法\n\n如果你想比较两个Bigdecimal的值大小, 使用`compareTo`, 因为它会忽略scale, 所以1.00和1.0是相等的\n\n如果你想完全比较两个Bigdecimal的是否相同, 使用`equals`, 比如1.00和1.0通过此方法比较是不等的\n\n## 未完待续\n\n本章主要讲解了java层面上如何做好高精度计算, 下一章我们会继续讨论数据库层面上以及前端层面上如何正确的进行展示\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"java-amount-calculation","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9uq004rm6el8oxg7sp6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文主要讨论作为JavaWeb应用程序员, 当接手涉及金额计算需求的时候, 如何确保金额计算, 金额保存, 金额显示不失真! </p>\n<p>如果你是其他语言的应用程序员, 本文内容可能不会立马对你有用, 但是相关知识的涉及在语言间的作用一般是想通的, 你也可以拿来作为参考</p>\n<p>接下来我们开始正题</p>\n<h2 id=\"先聊聊Java层面出现的精度问题是什么\"><a href=\"#先聊聊Java层面出现的精度问题是什么\" class=\"headerlink\" title=\"先聊聊Java层面出现的精度问题是什么\"></a>先聊聊Java层面出现的精度问题是什么</h2><p>对于刚上手Java的新人来说, 涉及数字的计算, 最容易想到的是int和double(由于float的取值范围小于double, 在不是对内存要求非常苛刻的条件下, 我们一般都是用double的), 如果整数就用int, 如果带有小数就用double.</p>\n<p>但是很快的, 你会发现double的计算结果往往不符合真正的数学计算结果, 比如执行以下代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个结果是0.30000000000000004, 而不是0.3</p>\n<p>这是怎么回事呢? </p>\n<h3 id=\"double类型计算陷阱\"><a href=\"#double类型计算陷阱\" class=\"headerlink\" title=\"double类型计算陷阱\"></a>double类型计算陷阱</h3><p>如果想要理解这种现象, 我们首先要明确一个大前提, 就是计算机是如何存储<code>0.1</code>,<code>0.2</code>这些值的</p>\n<p>对计算机原理有一定了解的话, 你一定不难理解其实这些数在计算机上真正是用二进制的形式来存储的, 不仅是这些float和double这些浮点数, int值其实也是. </p>\n<p>这时候你可能又会冒出一个问题, 为什么同样都是二进制存储, int值的计算从来不会存在精度问题, 而float和double缺会存在.</p>\n<p>这就要涉及到他们转换为二进制的过程中是否有截断的问题了.</p>\n<p>float和double转换为二进制表示有一个非常致命的问题就是: </p>\n<blockquote>\n<p>就像十进制无法用有限位表示1/3一样, 二进制也无法用有限的位数来表示部分浮点数, 比如0.1</p>\n</blockquote>\n<p>下面将0.1和0.2转为2进制表示。</p>\n<p>0.1<br>0.10 <em> 2 = 0.20 未进位 0<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>无限循环…<br>二进制表示0.1:<br>0.00011001100110011001100110011001100110011001100110011001…<br>科学记数表示：<br>1.1001100110011001100110011001100110011001100110011001… * 2^-4</p>\n<p>可以看到二进制表示0.1 实际上是一个无限循环的二进制数, 既然是无线循环, 这就代表了无法用有限的空间去存储到计算机的存储容器上, 所以计算机必须对其进行截断, 最终导致在计算机上存储0.1的二进制数只存储了其中的23位(float)或者52位(double).</p>\n<p>我想看到这里的你也许已经明白了float和double的计算失去精度的原理了, 不过为了延伸阅读, 我认为我们也应该对一个标准有一定的概念(你应该对我上面说的23位和52位提出疑问,为什么是23位,为什么是52位,而这些都与IEEE754二进制浮点数标准有关)</p>\n<h3 id=\"IEEE754标准\"><a href=\"#IEEE754标准\" class=\"headerlink\" title=\"IEEE754标准\"></a>IEEE754标准</h3><p>绝大多数的编程语言都遵循了IEEE754标准进行浮点数的运算,</p>\n<p>简单来说, 该标准定义了一个浮点数的表示方式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值 = 符号位 + 指数位偏移 + 尾数位</span><br></pre></td></tr></table></figure>\n<p>而我们上文中提到的一长串二进制数据,就是存储在尾数位上的(当然会做一些必要的转换,不是原封不动的), 因为该标准规定了尾数位的长度, float是23位, double是52位, 所以超过的部分都会被四舍五入进行抹除, 从而导致了精度问题的发生.</p>\n<h3 id=\"关于浮点数运算精度问题其他想说的\"><a href=\"#关于浮点数运算精度问题其他想说的\" class=\"headerlink\" title=\"关于浮点数运算精度问题其他想说的\"></a>关于浮点数运算精度问题其他想说的</h3><p>想必一般智商的人看我上面的总结, 已经可以非常容易理解精度问题发生的根源, 但是我还是想声明的是, 实际上这块领域还是需要有一定的数学基础, 数学不好的人可能会看的头晕, 并且网上针对这一块有很深入研究的论文存在, 我在阅读它们的时候由于数学知识匮乏,所以更深层次的东西没法进行总结,也不敢乱说.如果您有兴趣,则请自己通过搜索引擎进行更深入的探讨. 不过这也不代表我上面的描述是非真实的说法, 我上面的说法可以说是最通俗的说法来让我们理解为啥会出现精度问题</p>\n<h2 id=\"Java层面使用BigInteger和BigDecimal来完成高精度计算\"><a href=\"#Java层面使用BigInteger和BigDecimal来完成高精度计算\" class=\"headerlink\" title=\"Java层面使用BigInteger和BigDecimal来完成高精度计算\"></a>Java层面使用BigInteger和BigDecimal来完成高精度计算</h2><p>在Java社区中, 我们已经达成了共识, 如果希望自己所做的运算不会损失精度, 可以使用BigInteger或者BigDecimal类来做运算处理.</p>\n<p>先提出质疑是, 必须需要使用这两个类来操作吗?</p>\n<p>答案是: 不是必须的</p>\n<p>只不过编写JDK的大神们已经呕心沥血帮我们完成了这两个完美的大数运算类, 我们岂有不用之理? 当然如果你的能力够厉害, 你也完全可以自己来实现高精度计算类</p>\n<h3 id=\"从BigInteger说起\"><a href=\"#从BigInteger说起\" class=\"headerlink\" title=\"从BigInteger说起\"></a>从BigInteger说起</h3><p>由于BigDecimal底层有用到BigInteger, 在BigDecimal类实现第一行就出现如下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The unscaled value of this BigDecimal, as returned by &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\">     * #unscaledValue&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #unscaledValue</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BigInteger intVal;</span><br></pre></td></tr></table></figure>\n<p>所以我们如果想了解它们的秘密的话, 还是从BigInteger说起.</p>\n<p>我尝试着自己阅读BigInteger源码, 但是太多的数学术语还是打败了我, 代码写的简直可以堪称神级, 所以本文对BigInteger的描述是结合java doc+网上的博文+自己看了部分源码后的总结, 我会努力保证其正确性, 从而让读者对BigInteger有个基本认识, 而不是懵里懵懂</p>\n<h4 id=\"首先BigInteger是什么\"><a href=\"#首先BigInteger是什么\" class=\"headerlink\" title=\"首先BigInteger是什么?\"></a>首先BigInteger是什么?</h4><p>官方说明是的说明是它是<code>Immutable arbitrary-precision integers.</code></p>\n<p>意思就是说它是可变任意精度整数. 可能这种说法有些平时学习不好的同学已经开始懵逼了. 那我就举个例子来说把.</p>\n<p>在Java的世界中, 所有基本数据类型都有取值范围, 取值范围的多少取决于它们底层可用多少位去存储数据. 比如我们常用的byte是由8位二进制数据组成, int类型是由32位数据类型组成, 更直观点, 请看下面的说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Integer.toBinaryString(<span class=\"number\">1231231231</span>)); <span class=\"comment\">// 1001001011000110001100011111111</span></span><br></pre></td></tr></table></figure>\n<p>可以看到1231231231十进制数字就是1001001011000110001100011111111的二进制数字, 只不过这里是31位,因为还有一位是符号位没有显示出来</p>\n<p>但是现实生活中我们可能要使用更大的数去做各种计算, 这时候, java的基本数据类型不够用了怎么办, 所以就有了BigInteger. 它可以表示任意长度的十进制整数, 不过由于太长的十进制整数是不科学且无意义的, 所以BigInteger内部使用了好几个常量去专门做了一些控制. 目前来看官方文档的说明里, BigInteger可表示的范围为:<code>-2的Integer.MAX_VALUE次方 (不可兼) 到 +2的Integer.MAX_VALUE次方 (不可兼)</code>, 不可兼的意思是不包括边界值的意思. Integer.MAX_VALUE的值是2的31次方-1, 可以想象这个范围已经是超级大的! 一般的计算器都已经无法显示这个数值呢. </p>\n<h4 id=\"BigInteger是如何做到可以存储任意精度的整数的\"><a href=\"#BigInteger是如何做到可以存储任意精度的整数的\" class=\"headerlink\" title=\"BigInteger是如何做到可以存储任意精度的整数的\"></a>BigInteger是如何做到可以存储任意精度的整数的</h4><p>俗话说, 一个人干不了, 就两个人一起干. BigInteger的底层原理抽象来看其实也符合这句俗话的道理.</p>\n<p>一个BigInteger代表的值是使用int[]来存储的, 源码中域定义如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * mag是BigInteger的magnitude, 遵照Big-endian顺序. 每个数字都有对应的一种mag的表示, 同时数字0对应的mag是空数组</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] mag;</span><br></pre></td></tr></table></figure></p>\n<p>举个例子来说, 比如你有一个数字 <code>18927348347389543834934878</code> , 那么就会分成三部分分别存储至int[]数组里, 最终底层是这样存放的<br><code>18927348 | 347389543 | 834934878</code></p>\n<p>从这个例子中, 我们可以观察到:</p>\n<ol>\n<li>每组最多存储长度是9, 为什么是9? 因为2的31次方-1的数值(2147483647)对应是一个长度为10的数字, 如果采用10长度的话, 会溢出int的最大取值范围; 并且在BIgInteger的add方法内,有直接做加法运算,两个9位的相加肯定不会溢出;</li>\n<li>由于java中数组的最大长度也是2147483647(实际大小会根据dk版本有点不同,因为部分位会被挪用去存储数组的元信息),所以最大可存储的数字长度是9*2147483647, 这是个相当可怕的长度…..肯定够你用</li>\n</ol>\n<p>除此之外, BigInteger还有个小点就是, 它将符号位单独拿出来表示, 源码中域定义如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * BigInteger的符号位, -1是代表负的,0代表0,1代表正的. 要注意的是 如果是数字0 则这个signum也必须是0 不能是1 </span></span><br><span class=\"line\"><span class=\"comment\"> * (这是为了确保每个BigInteger都有唯一的表示)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> signum;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"BigInteger是怎么做运算的\"><a href=\"#BigInteger是怎么做运算的\" class=\"headerlink\" title=\"BigInteger是怎么做运算的\"></a>BigInteger是怎么做运算的</h4><p>这个我暂时就不予乱谈, 先贴个源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] add(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span>[] y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If x is shorter, swap the two arrays</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.length &lt; y.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] tmp = x;</span><br><span class=\"line\">            x = y;</span><br><span class=\"line\">            y = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> xIndex = x.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yIndex = y.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[xIndex];</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (yIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum = (x[--xIndex] &amp; LONG_MASK) + (y[<span class=\"number\">0</span>] &amp; LONG_MASK) ;</span><br><span class=\"line\">            result[xIndex] = (<span class=\"keyword\">int</span>)sum;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Add common parts of both numbers</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (yIndex &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum = (x[--xIndex] &amp; LONG_MASK) +</span><br><span class=\"line\">                      (y[--yIndex] &amp; LONG_MASK) + (sum &gt;&gt;&gt; <span class=\"number\">32</span>);</span><br><span class=\"line\">                result[xIndex] = (<span class=\"keyword\">int</span>)sum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Copy remainder of longer number while carry propagation is required</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> carry = (sum &gt;&gt;&gt; <span class=\"number\">32</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (xIndex &gt; <span class=\"number\">0</span> &amp;&amp; carry)</span><br><span class=\"line\">            carry = ((result[--xIndex] = x[xIndex] + <span class=\"number\">1</span>) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Copy remainder of longer number</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (xIndex &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            result[--xIndex] = x[xIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Grow result if necessary</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bigger[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[result.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">            System.arraycopy(result, <span class=\"number\">0</span>, bigger, <span class=\"number\">1</span>, result.length);</span><br><span class=\"line\">            bigger[<span class=\"number\">0</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bigger;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我没有特别看明白(菜鸡如我~), 但是我感觉其实就是分组相加, 然后有进位则做进位处理, 如果我猜测的不对, 欢迎留言</p>\n<h3 id=\"BigDecimal大显神威\"><a href=\"#BigDecimal大显神威\" class=\"headerlink\" title=\"BigDecimal大显神威\"></a>BigDecimal大显神威</h3><p>我们前面已经说明了一些BigInteger的知识, 现在我们已经有了相当的知识储备来学习BigDecimal的实现原理了.</p>\n<h4 id=\"BigDecimal是什么\"><a href=\"#BigDecimal是什么\" class=\"headerlink\" title=\"BigDecimal是什么\"></a>BigDecimal是什么</h4><p>BigDecimal represents an immutable arbitrary-precision signed decimal number.<br>bigdecimal表示一个不可变的任意精度有符号十进制数。</p>\n<p>从这句话中我们可以知道的最切题的信息就是它是支持任意精度! 所以说BigDecimal是不存在double那样,在底层存储的时候把超出的位数抹掉从而导致精度问题.</p>\n<p>BigDecimal相比于BigInteger来说,最大的区别就是它支持带小数的十进制数</p>\n<h4 id=\"那么BigDecimal是怎么做到任意精度-怎么做到支持带小数的\"><a href=\"#那么BigDecimal是怎么做到任意精度-怎么做到支持带小数的\" class=\"headerlink\" title=\"那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?\"></a>那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?</h4><p>BigDecimal由两部分来支持数据存储:</p>\n<ol>\n<li>Unscaled value – an arbitrary precision integer, 一个任意精度整数, 由BigInteger作支持</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用BigInteger存储任意精度整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BigInteger intVal;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Scale – a 32-bit integer representing the number of digits to the right of the decimal point, 用一个int类型存储小数位数(scale)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * int类型来存储位数</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scale;</span><br></pre></td></tr></table></figure>\n<p>我们举个例子, 比如数字3.14, 那么其intVal就是314, 其scale就是2, 可以从下面的代码示例中同样验证这个结论</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal bd = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"3.14\"</span>);<span class=\"comment\">//利用String构造器构造,后面会再讲</span></span><br><span class=\"line\">System.out.println(bd.unscaledValue());<span class=\"comment\">//314</span></span><br><span class=\"line\">System.out.println(bd.scale());<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>所以BigDecimal利用了BigInteger来支持任意精度的表示, 同时使用一个scale域来保存小数位数, 两者结合, 就可以完美的保存一个任意精度的十进制数</p>\n<h4 id=\"BigDecimal的常见陷阱\"><a href=\"#BigDecimal的常见陷阱\" class=\"headerlink\" title=\"BigDecimal的常见陷阱\"></a>BigDecimal的常见陷阱</h4><p>本文不是API文档, 所以我不会一一列举BigDecimal的常见方法, 不过BigDecimal在使用上有一部分坑是需要我们稍加留意的.</p>\n<ol>\n<li>首先是不使用<code>BigDecimal(double val)</code>构造器, 为什么?</li>\n</ol>\n<p>我们查阅这个构造器源码, 会发现其调用了<code>Double.doubleToLongBits()</code>, 看到这里我们其实已经可以得到答案了, 为了证明我说的没问题, 下面贴出构造器调用源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BigDecimal</span><span class=\"params\">(<span class=\"keyword\">double</span> val, MathContext mc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Double.isInfinite(val) || Double.isNaN(val))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(<span class=\"string\">\"Infinite or NaN\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Translate the double into sign, exponent and significand, according</span></span><br><span class=\"line\">    <span class=\"comment\">// to the formulae in JLS, Section 20.10.22.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> valBits = Double.doubleToLongBits(val);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = ((valBits &gt;&gt; <span class=\"number\">63</span>) == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = (<span class=\"keyword\">int</span>) ((valBits &gt;&gt; <span class=\"number\">52</span>) &amp; <span class=\"number\">0x7ffL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> significand = (exponent == <span class=\"number\">0</span></span><br><span class=\"line\">            ? (valBits &amp; ((<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">            : (valBits &amp; ((<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)) | (<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>));</span><br><span class=\"line\">    exponent -= <span class=\"number\">1075</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面过长省略</span></span><br></pre></td></tr></table></figure>\n<p>从第6行可以看到, 此构造器明确使用了<code>Double.doubleToLongBits(val)</code>返回的<code>valBits</code>来生成BigDecimal,</p>\n<p>我们来窥探下这个<code>valBits</code>的内容,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Double.doubleToLongBits(<span class=\"number\">0.1</span>d));</span><br><span class=\"line\"><span class=\"comment\">//4591870180066957722</span></span><br><span class=\"line\">System.out.println(Long.toBinaryString(Double.doubleToLongBits(<span class=\"number\">0.1</span>d)))</span><br><span class=\"line\"><span class=\"comment\">//11111110111001100110011001100110011001100110011001100110011010</span></span><br></pre></td></tr></table></figure>\n<p>我们从第二个打印结果中看出, 获取到的二进制数据是一个有限精度的数字, 而浮点数存储0.1的时候,是一种无限循环的表示情况,这在上文中我们也提及了. 所以我们已经可以断定, BigDecimal在这里会使用一个已经失去精度的数值来生成Bigdecimal,最终导致我们打印这个Bigdecimal的时候,获得的不是0.1,而是0.1000000000000000055511151231257827021181583404541015625这样的值, 从而又产生了精度问题!</p>\n<p>所以这就是为什么不推荐使用<code>BigDecimal(double val)</code>构造器的原因,因为它依旧会产生精度问题.</p>\n<p>一般的, 我们可以使用<code>BigDecimal.valueOf(double val)</code>或者<code>BigDecimal(String val)</code>来构造.</p>\n<p><code>BigDecimal.valueOf(double val)</code>内部会先调用Double的toString方法, 所以不会产生精度问题</p>\n<ol start=\"2\">\n<li>其次是谨慎使用<code>compareTo</code>和<code>equals</code>方法</li>\n</ol>\n<p>如果你想比较两个Bigdecimal的值大小, 使用<code>compareTo</code>, 因为它会忽略scale, 所以1.00和1.0是相等的</p>\n<p>如果你想完全比较两个Bigdecimal的是否相同, 使用<code>equals</code>, 比如1.00和1.0通过此方法比较是不等的</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本章主要讲解了java层面上如何做好高精度计算, 下一章我们会继续讨论数据库层面上以及前端层面上如何正确的进行展示</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文主要讨论作为JavaWeb应用程序员, 当接手涉及金额计算需求的时候, 如何确保金额计算, 金额保存, 金额显示不失真! </p>\n<p>如果你是其他语言的应用程序员, 本文内容可能不会立马对你有用, 但是相关知识的涉及在语言间的作用一般是想通的, 你也可以拿来作为参考</p>\n<p>接下来我们开始正题</p>\n<h2 id=\"先聊聊Java层面出现的精度问题是什么\"><a href=\"#先聊聊Java层面出现的精度问题是什么\" class=\"headerlink\" title=\"先聊聊Java层面出现的精度问题是什么\"></a>先聊聊Java层面出现的精度问题是什么</h2><p>对于刚上手Java的新人来说, 涉及数字的计算, 最容易想到的是int和double(由于float的取值范围小于double, 在不是对内存要求非常苛刻的条件下, 我们一般都是用double的), 如果整数就用int, 如果带有小数就用double.</p>\n<p>但是很快的, 你会发现double的计算结果往往不符合真正的数学计算结果, 比如执行以下代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这个结果是0.30000000000000004, 而不是0.3</p>\n<p>这是怎么回事呢? </p>\n<h3 id=\"double类型计算陷阱\"><a href=\"#double类型计算陷阱\" class=\"headerlink\" title=\"double类型计算陷阱\"></a>double类型计算陷阱</h3><p>如果想要理解这种现象, 我们首先要明确一个大前提, 就是计算机是如何存储<code>0.1</code>,<code>0.2</code>这些值的</p>\n<p>对计算机原理有一定了解的话, 你一定不难理解其实这些数在计算机上真正是用二进制的形式来存储的, 不仅是这些float和double这些浮点数, int值其实也是. </p>\n<p>这时候你可能又会冒出一个问题, 为什么同样都是二进制存储, int值的计算从来不会存在精度问题, 而float和double缺会存在.</p>\n<p>这就要涉及到他们转换为二进制的过程中是否有截断的问题了.</p>\n<p>float和double转换为二进制表示有一个非常致命的问题就是: </p>\n<blockquote>\n<p>就像十进制无法用有限位表示1/3一样, 二进制也无法用有限的位数来表示部分浮点数, 比如0.1</p>\n</blockquote>\n<p>下面将0.1和0.2转为2进制表示。</p>\n<p>0.1<br>0.10 <em> 2 = 0.20 未进位 0<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>0.40 <em> 2 = 0.80 未进位 0<br>0.80 </em> 2 = 1.60 进位 1<br>0.60 <em> 2 = 1.20 进位 1<br>0.20 </em> 2 = 0.40 未进位 0<br>无限循环…<br>二进制表示0.1:<br>0.00011001100110011001100110011001100110011001100110011001…<br>科学记数表示：<br>1.1001100110011001100110011001100110011001100110011001… * 2^-4</p>\n<p>可以看到二进制表示0.1 实际上是一个无限循环的二进制数, 既然是无线循环, 这就代表了无法用有限的空间去存储到计算机的存储容器上, 所以计算机必须对其进行截断, 最终导致在计算机上存储0.1的二进制数只存储了其中的23位(float)或者52位(double).</p>\n<p>我想看到这里的你也许已经明白了float和double的计算失去精度的原理了, 不过为了延伸阅读, 我认为我们也应该对一个标准有一定的概念(你应该对我上面说的23位和52位提出疑问,为什么是23位,为什么是52位,而这些都与IEEE754二进制浮点数标准有关)</p>\n<h3 id=\"IEEE754标准\"><a href=\"#IEEE754标准\" class=\"headerlink\" title=\"IEEE754标准\"></a>IEEE754标准</h3><p>绝大多数的编程语言都遵循了IEEE754标准进行浮点数的运算,</p>\n<p>简单来说, 该标准定义了一个浮点数的表示方式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值 = 符号位 + 指数位偏移 + 尾数位</span><br></pre></td></tr></table></figure>\n<p>而我们上文中提到的一长串二进制数据,就是存储在尾数位上的(当然会做一些必要的转换,不是原封不动的), 因为该标准规定了尾数位的长度, float是23位, double是52位, 所以超过的部分都会被四舍五入进行抹除, 从而导致了精度问题的发生.</p>\n<h3 id=\"关于浮点数运算精度问题其他想说的\"><a href=\"#关于浮点数运算精度问题其他想说的\" class=\"headerlink\" title=\"关于浮点数运算精度问题其他想说的\"></a>关于浮点数运算精度问题其他想说的</h3><p>想必一般智商的人看我上面的总结, 已经可以非常容易理解精度问题发生的根源, 但是我还是想声明的是, 实际上这块领域还是需要有一定的数学基础, 数学不好的人可能会看的头晕, 并且网上针对这一块有很深入研究的论文存在, 我在阅读它们的时候由于数学知识匮乏,所以更深层次的东西没法进行总结,也不敢乱说.如果您有兴趣,则请自己通过搜索引擎进行更深入的探讨. 不过这也不代表我上面的描述是非真实的说法, 我上面的说法可以说是最通俗的说法来让我们理解为啥会出现精度问题</p>\n<h2 id=\"Java层面使用BigInteger和BigDecimal来完成高精度计算\"><a href=\"#Java层面使用BigInteger和BigDecimal来完成高精度计算\" class=\"headerlink\" title=\"Java层面使用BigInteger和BigDecimal来完成高精度计算\"></a>Java层面使用BigInteger和BigDecimal来完成高精度计算</h2><p>在Java社区中, 我们已经达成了共识, 如果希望自己所做的运算不会损失精度, 可以使用BigInteger或者BigDecimal类来做运算处理.</p>\n<p>先提出质疑是, 必须需要使用这两个类来操作吗?</p>\n<p>答案是: 不是必须的</p>\n<p>只不过编写JDK的大神们已经呕心沥血帮我们完成了这两个完美的大数运算类, 我们岂有不用之理? 当然如果你的能力够厉害, 你也完全可以自己来实现高精度计算类</p>\n<h3 id=\"从BigInteger说起\"><a href=\"#从BigInteger说起\" class=\"headerlink\" title=\"从BigInteger说起\"></a>从BigInteger说起</h3><p>由于BigDecimal底层有用到BigInteger, 在BigDecimal类实现第一行就出现如下代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The unscaled value of this BigDecimal, as returned by &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\">     * #unscaledValue&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #unscaledValue</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BigInteger intVal;</span><br></pre></td></tr></table></figure>\n<p>所以我们如果想了解它们的秘密的话, 还是从BigInteger说起.</p>\n<p>我尝试着自己阅读BigInteger源码, 但是太多的数学术语还是打败了我, 代码写的简直可以堪称神级, 所以本文对BigInteger的描述是结合java doc+网上的博文+自己看了部分源码后的总结, 我会努力保证其正确性, 从而让读者对BigInteger有个基本认识, 而不是懵里懵懂</p>\n<h4 id=\"首先BigInteger是什么\"><a href=\"#首先BigInteger是什么\" class=\"headerlink\" title=\"首先BigInteger是什么?\"></a>首先BigInteger是什么?</h4><p>官方说明是的说明是它是<code>Immutable arbitrary-precision integers.</code></p>\n<p>意思就是说它是可变任意精度整数. 可能这种说法有些平时学习不好的同学已经开始懵逼了. 那我就举个例子来说把.</p>\n<p>在Java的世界中, 所有基本数据类型都有取值范围, 取值范围的多少取决于它们底层可用多少位去存储数据. 比如我们常用的byte是由8位二进制数据组成, int类型是由32位数据类型组成, 更直观点, 请看下面的说明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Integer.toBinaryString(<span class=\"number\">1231231231</span>)); <span class=\"comment\">// 1001001011000110001100011111111</span></span><br></pre></td></tr></table></figure>\n<p>可以看到1231231231十进制数字就是1001001011000110001100011111111的二进制数字, 只不过这里是31位,因为还有一位是符号位没有显示出来</p>\n<p>但是现实生活中我们可能要使用更大的数去做各种计算, 这时候, java的基本数据类型不够用了怎么办, 所以就有了BigInteger. 它可以表示任意长度的十进制整数, 不过由于太长的十进制整数是不科学且无意义的, 所以BigInteger内部使用了好几个常量去专门做了一些控制. 目前来看官方文档的说明里, BigInteger可表示的范围为:<code>-2的Integer.MAX_VALUE次方 (不可兼) 到 +2的Integer.MAX_VALUE次方 (不可兼)</code>, 不可兼的意思是不包括边界值的意思. Integer.MAX_VALUE的值是2的31次方-1, 可以想象这个范围已经是超级大的! 一般的计算器都已经无法显示这个数值呢. </p>\n<h4 id=\"BigInteger是如何做到可以存储任意精度的整数的\"><a href=\"#BigInteger是如何做到可以存储任意精度的整数的\" class=\"headerlink\" title=\"BigInteger是如何做到可以存储任意精度的整数的\"></a>BigInteger是如何做到可以存储任意精度的整数的</h4><p>俗话说, 一个人干不了, 就两个人一起干. BigInteger的底层原理抽象来看其实也符合这句俗话的道理.</p>\n<p>一个BigInteger代表的值是使用int[]来存储的, 源码中域定义如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * mag是BigInteger的magnitude, 遵照Big-endian顺序. 每个数字都有对应的一种mag的表示, 同时数字0对应的mag是空数组</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] mag;</span><br></pre></td></tr></table></figure></p>\n<p>举个例子来说, 比如你有一个数字 <code>18927348347389543834934878</code> , 那么就会分成三部分分别存储至int[]数组里, 最终底层是这样存放的<br><code>18927348 | 347389543 | 834934878</code></p>\n<p>从这个例子中, 我们可以观察到:</p>\n<ol>\n<li>每组最多存储长度是9, 为什么是9? 因为2的31次方-1的数值(2147483647)对应是一个长度为10的数字, 如果采用10长度的话, 会溢出int的最大取值范围; 并且在BIgInteger的add方法内,有直接做加法运算,两个9位的相加肯定不会溢出;</li>\n<li>由于java中数组的最大长度也是2147483647(实际大小会根据dk版本有点不同,因为部分位会被挪用去存储数组的元信息),所以最大可存储的数字长度是9*2147483647, 这是个相当可怕的长度…..肯定够你用</li>\n</ol>\n<p>除此之外, BigInteger还有个小点就是, 它将符号位单独拿出来表示, 源码中域定义如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * BigInteger的符号位, -1是代表负的,0代表0,1代表正的. 要注意的是 如果是数字0 则这个signum也必须是0 不能是1 </span></span><br><span class=\"line\"><span class=\"comment\"> * (这是为了确保每个BigInteger都有唯一的表示)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@serial</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> signum;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"BigInteger是怎么做运算的\"><a href=\"#BigInteger是怎么做运算的\" class=\"headerlink\" title=\"BigInteger是怎么做运算的\"></a>BigInteger是怎么做运算的</h4><p>这个我暂时就不予乱谈, 先贴个源码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] add(<span class=\"keyword\">int</span>[] x, <span class=\"keyword\">int</span>[] y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If x is shorter, swap the two arrays</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x.length &lt; y.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] tmp = x;</span><br><span class=\"line\">            x = y;</span><br><span class=\"line\">            y = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> xIndex = x.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> yIndex = y.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[xIndex];</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (yIndex == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum = (x[--xIndex] &amp; LONG_MASK) + (y[<span class=\"number\">0</span>] &amp; LONG_MASK) ;</span><br><span class=\"line\">            result[xIndex] = (<span class=\"keyword\">int</span>)sum;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Add common parts of both numbers</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (yIndex &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum = (x[--xIndex] &amp; LONG_MASK) +</span><br><span class=\"line\">                      (y[--yIndex] &amp; LONG_MASK) + (sum &gt;&gt;&gt; <span class=\"number\">32</span>);</span><br><span class=\"line\">                result[xIndex] = (<span class=\"keyword\">int</span>)sum;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Copy remainder of longer number while carry propagation is required</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> carry = (sum &gt;&gt;&gt; <span class=\"number\">32</span> != <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (xIndex &gt; <span class=\"number\">0</span> &amp;&amp; carry)</span><br><span class=\"line\">            carry = ((result[--xIndex] = x[xIndex] + <span class=\"number\">1</span>) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Copy remainder of longer number</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (xIndex &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            result[--xIndex] = x[xIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Grow result if necessary</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bigger[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[result.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">            System.arraycopy(result, <span class=\"number\">0</span>, bigger, <span class=\"number\">1</span>, result.length);</span><br><span class=\"line\">            bigger[<span class=\"number\">0</span>] = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bigger;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我没有特别看明白(菜鸡如我~), 但是我感觉其实就是分组相加, 然后有进位则做进位处理, 如果我猜测的不对, 欢迎留言</p>\n<h3 id=\"BigDecimal大显神威\"><a href=\"#BigDecimal大显神威\" class=\"headerlink\" title=\"BigDecimal大显神威\"></a>BigDecimal大显神威</h3><p>我们前面已经说明了一些BigInteger的知识, 现在我们已经有了相当的知识储备来学习BigDecimal的实现原理了.</p>\n<h4 id=\"BigDecimal是什么\"><a href=\"#BigDecimal是什么\" class=\"headerlink\" title=\"BigDecimal是什么\"></a>BigDecimal是什么</h4><p>BigDecimal represents an immutable arbitrary-precision signed decimal number.<br>bigdecimal表示一个不可变的任意精度有符号十进制数。</p>\n<p>从这句话中我们可以知道的最切题的信息就是它是支持任意精度! 所以说BigDecimal是不存在double那样,在底层存储的时候把超出的位数抹掉从而导致精度问题.</p>\n<p>BigDecimal相比于BigInteger来说,最大的区别就是它支持带小数的十进制数</p>\n<h4 id=\"那么BigDecimal是怎么做到任意精度-怎么做到支持带小数的\"><a href=\"#那么BigDecimal是怎么做到任意精度-怎么做到支持带小数的\" class=\"headerlink\" title=\"那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?\"></a>那么BigDecimal是怎么做到任意精度,怎么做到支持带小数的?</h4><p>BigDecimal由两部分来支持数据存储:</p>\n<ol>\n<li>Unscaled value – an arbitrary precision integer, 一个任意精度整数, 由BigInteger作支持</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用BigInteger存储任意精度整数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BigInteger intVal;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Scale – a 32-bit integer representing the number of digits to the right of the decimal point, 用一个int类型存储小数位数(scale)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * int类型来存储位数</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> scale;</span><br></pre></td></tr></table></figure>\n<p>我们举个例子, 比如数字3.14, 那么其intVal就是314, 其scale就是2, 可以从下面的代码示例中同样验证这个结论</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigDecimal bd = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"3.14\"</span>);<span class=\"comment\">//利用String构造器构造,后面会再讲</span></span><br><span class=\"line\">System.out.println(bd.unscaledValue());<span class=\"comment\">//314</span></span><br><span class=\"line\">System.out.println(bd.scale());<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>所以BigDecimal利用了BigInteger来支持任意精度的表示, 同时使用一个scale域来保存小数位数, 两者结合, 就可以完美的保存一个任意精度的十进制数</p>\n<h4 id=\"BigDecimal的常见陷阱\"><a href=\"#BigDecimal的常见陷阱\" class=\"headerlink\" title=\"BigDecimal的常见陷阱\"></a>BigDecimal的常见陷阱</h4><p>本文不是API文档, 所以我不会一一列举BigDecimal的常见方法, 不过BigDecimal在使用上有一部分坑是需要我们稍加留意的.</p>\n<ol>\n<li>首先是不使用<code>BigDecimal(double val)</code>构造器, 为什么?</li>\n</ol>\n<p>我们查阅这个构造器源码, 会发现其调用了<code>Double.doubleToLongBits()</code>, 看到这里我们其实已经可以得到答案了, 为了证明我说的没问题, 下面贴出构造器调用源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BigDecimal</span><span class=\"params\">(<span class=\"keyword\">double</span> val, MathContext mc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Double.isInfinite(val) || Double.isNaN(val))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(<span class=\"string\">\"Infinite or NaN\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Translate the double into sign, exponent and significand, according</span></span><br><span class=\"line\">    <span class=\"comment\">// to the formulae in JLS, Section 20.10.22.</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> valBits = Double.doubleToLongBits(val);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sign = ((valBits &gt;&gt; <span class=\"number\">63</span>) == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> exponent = (<span class=\"keyword\">int</span>) ((valBits &gt;&gt; <span class=\"number\">52</span>) &amp; <span class=\"number\">0x7ffL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> significand = (exponent == <span class=\"number\">0</span></span><br><span class=\"line\">            ? (valBits &amp; ((<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">            : (valBits &amp; ((<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>) - <span class=\"number\">1</span>)) | (<span class=\"number\">1L</span> &lt;&lt; <span class=\"number\">52</span>));</span><br><span class=\"line\">    exponent -= <span class=\"number\">1075</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面过长省略</span></span><br></pre></td></tr></table></figure>\n<p>从第6行可以看到, 此构造器明确使用了<code>Double.doubleToLongBits(val)</code>返回的<code>valBits</code>来生成BigDecimal,</p>\n<p>我们来窥探下这个<code>valBits</code>的内容,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Double.doubleToLongBits(<span class=\"number\">0.1</span>d));</span><br><span class=\"line\"><span class=\"comment\">//4591870180066957722</span></span><br><span class=\"line\">System.out.println(Long.toBinaryString(Double.doubleToLongBits(<span class=\"number\">0.1</span>d)))</span><br><span class=\"line\"><span class=\"comment\">//11111110111001100110011001100110011001100110011001100110011010</span></span><br></pre></td></tr></table></figure>\n<p>我们从第二个打印结果中看出, 获取到的二进制数据是一个有限精度的数字, 而浮点数存储0.1的时候,是一种无限循环的表示情况,这在上文中我们也提及了. 所以我们已经可以断定, BigDecimal在这里会使用一个已经失去精度的数值来生成Bigdecimal,最终导致我们打印这个Bigdecimal的时候,获得的不是0.1,而是0.1000000000000000055511151231257827021181583404541015625这样的值, 从而又产生了精度问题!</p>\n<p>所以这就是为什么不推荐使用<code>BigDecimal(double val)</code>构造器的原因,因为它依旧会产生精度问题.</p>\n<p>一般的, 我们可以使用<code>BigDecimal.valueOf(double val)</code>或者<code>BigDecimal(String val)</code>来构造.</p>\n<p><code>BigDecimal.valueOf(double val)</code>内部会先调用Double的toString方法, 所以不会产生精度问题</p>\n<ol start=\"2\">\n<li>其次是谨慎使用<code>compareTo</code>和<code>equals</code>方法</li>\n</ol>\n<p>如果你想比较两个Bigdecimal的值大小, 使用<code>compareTo</code>, 因为它会忽略scale, 所以1.00和1.0是相等的</p>\n<p>如果你想完全比较两个Bigdecimal的是否相同, 使用<code>equals</code>, 比如1.00和1.0通过此方法比较是不等的</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><p>本章主要讲解了java层面上如何做好高精度计算, 下一章我们会继续讨论数据库层面上以及前端层面上如何正确的进行展示</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"函数式编程范式初探-第一天","date":"2019-10-20T07:45:40.000Z","_content":"\n## 前言\n\n最近在翻阅一些技术论坛的时候, 常常能看到有人提及函数式编程(FunctionalProgramming), 说他可以简化我们的代码, 提高我们的代码生产力以及降低出错的几率.\n\n作为一个希望提高开发效率的半吊子程序员来说, 我觉得这应该是一个非常有利的'武器', 值得去学习, 吸收其中的一些精华思想, 如果能看到可以开花结果的那一天, 那就再好不过了.\n\n本文为自我学习总结文章, 正确性不保证, 我更推荐您阅读`<<函数式编程思维>>[美]Neal Ford著`这种不错的书籍\n\n本文主要使用js和java来说明, 因为这两个是我目前工作的常用语言, 对我自己的好处最大. 如果你想享受更好的函数式编程体验, 可以试试`Clojure`或者`Scala`\n\n\n## 是什么为什么\n\n我这人对一个技术的起源不是非常感兴趣, 所以我不想多费时间减少函数式编程的历史, 我想直接从函数式编程最常用的技术点讲起, 来让我快速的了解它\n\n### 以函数为抽象单元\n\n我们在面向对象编程中, 一般都会认为一个类Object是一个抽象单元, 比如在Java中(一门完全以面向对象为基础的编程语言), 我们都要从编写类开始.\n\n而函数式编程的第一个特点就是, 它把函数视为抽象单元, 我们可以传递函数, 以函数作为参数, 大家看看下面的例子:\n\n```javascript\nlet input = ['1','2','3'];\n\nfunction listForEach(list,operate){\n    for (const key in list) {\n        operate(key);\n    }\n}\n\nfunction consoleKey(key){\n    //do something.\n    console.log(key);\n}\n\nlistForEach(input, consoleKey);\n```\n\n这里我用Js实现了一段代码, 这段代码会依次打印数组中的值. 这里的最大特点就是consoleKey是个函数, 并且我们将其作为listForEach的参数传入了. 所以对于listForEach而言, for循环内部具体执行什么逻辑, 是可以由具体传入了什么函数决定的. 这里函数就是一个抽象的单元, 可以根据我们的需要进行任意的替换.\n\n\n我写完这个例子后产生了一些疑问, 因为在我看来, 这就是简单的一个抽象化调用而已, 在我还没学习函数式编程语言之前, 我也经常会写这样的代码, 并且我当时觉得这样的写法也并没有简化多少. 这个问题, 我也自己在不断的考虑, 最后我觉得这是一种比较主观的问题, 不同人对于代码复杂度有不同的判断, 有些人觉得几百行的crud代码一点也不复杂, 因为分解一下, 代码内容其实就只有crud罢了; 而可能有些人则会觉得, 这些代码就像屎山一样, 难以下手.\n\n还记得我最早接触编程的时候, 学的是c, 所以当时写的都是命令式的代码. 那么如果按照命令式的写法, 我上面的例子会怎么写呢? 如下是我的按照命令式的写法改写的例子:\n\n```javascript\nlet input = ['1','2','3'];\n\nfor (const key in list) {\n    console.log(key);\n}\n```\n\n嗯? 怎么感觉命令式的写法更加的简单? 在这里确实是这样的没错. 但是没够多久, 项目经理要求先判断下元素是否为空, 这时候对于函数式编程来说, 写法是新增一个函数抽象, 然后替换我们传入的函数, 就像下面这样:\n\n```javascript\n//...原函数省略\nfunction consoleKeyNotNull(key){\n    //检查是否为null\n    if(key){\n        console.log(key);\n    }\n}\n\nlistForEach(input, consoleKeyNotNull);\n```\n\n我们需要改的是新增一个consoleKeyNotNull函数, 以及修改传入的函数即可. 这样的写法符合软件开发的开闭原则, 我们没有去修改原来的函数代码.\n\n相同的修改放到命令式语法上就有点棘手了, 因为你需要修改源代码, 并且如果项目经理突然变卦让你把控制去掉, 你又得自己改回去, 这种需求如果不断的堆积, 对代码的维护会造成不小的压力.\n\n此外,由于是函数, 所以一般来说都会给函数一个命名, 所以我们在查阅这些代码的时候, 如果函数命名特别贴切的话, 会一下子提高阅读源码的速度, 我觉得这也是函数式的一个小特点\n\n此外,我们可能还需要了解下一种说法, 那就是这种使用函数的函数, 我们一般就叫做`高阶函数`, 一个更加高大上的说法:) \n\n### 纯函数\n\n函数式编程的另一个特点是, 要求函数针对同一个输入有一个相同的输出, 这个概念就和我们小时候学的方程式很类似, 比如方程`x + y`, 对于给定的输入x和y, 我们可以得出固定的答案. 函数式编程也极大的推崇这个特点. 因为这个特点可以提高我们这个函数的复用性\n\n试想一下, 如果一个函数是纯函数, 那么任何需要用到它的地方, 都可以放心大胆的使用它, 并且有时候我们可以不对其进行单元测试, 这样对于测试来说, 相当于减少了不稳定要素, 而不稳定要素的减少, 肯定会减少代码bug的出现. 因为很多时候bug都是因为不稳定要素的过多, 导致程序员无法一口气把所有的情况都考虑到而产生的.\n\n对于纯函数, 我能想到的例子还是很多的, 比如`sin(x)`,`abs(x)`,`sqrt(x)`, 这些函数对于我们的指定的输入, 总是会返回同一个结果. \n\n不过个人认为完全纯函数是不可能实现的, 因为在实际的开发过程中, 我们面对的是更为复杂的业务场景, 不稳定要素非常多, 比如超时问题,网络问题等等, 所以我觉得函数式编程作为一个编程范式, 它的作用仍然没有面向对象那么重要. 但是在针对一些算法, 一些小的场景下, 使用函数式编程范式, 确实是可以提高一定的生产力\n\n### lambda表达式\n\n在函数式编程中, lambda表达式是我们的常见的家伙. 由于函数式编程就是一直在写函数, 所以对于一些不需要函数名的场景, lambda表达式可以发挥出简化代码, 提高可读性的作用\n\nlambda表达式的语法也许不同语言不一致, 但是几乎都如出一辙, 下面我用java语言来演示一些:\n\n```java\n//传统写法\nnew Thread(new Runnable() {\n      public void run() {\n        System.out.println(\"Anonymous\");\n      }\n    }).start();\n\n//使用lambda表达式\nnew Thread(\n      () -> System.out.println(\"lambda\")\n    ).start();\n```\n\n可以看到, lambda表达式的作用其实就是省略到了很多不必要的语法, 只剩下我们真正关心的东西, 比如`()`代表这个方法没有形参, `->`是lambda表达式的核心语法符号, 有表示产出的含义. 最后的`System.out.println(\"lambda\")` 就是方法体, 由于单行, 所以这里省略了花括号\n\n怎么样? 是不是非常简洁? 不过这只是lambda表达式的初探, 我后续会对其进行详细的说明, 本文主要阐述FP的核心概念, 并不会对具体语法做过多说明\n\nlambda表达式为函数的编写提供了一种更易读的方式, 支持函数式编程的语言, 都有提供lambda表达式功能, 它是函数式编程之所以简洁的其中一个原因!\n\n### Stream && 将控制权交给语言/运行时\n\n最能体会到函数式编程乐趣的方式, 其实就是使用Stream.\n\nStream内置了大量的函数操作, 使得我们可以借助这些函数来完成各种操作, 最有名的三大函数就是map/filter/reduce\n\n我会在后续进行Stream的总结(不过是只针对java的), 我们可以从Stream的这些函数操作中, 深刻的体会到函数式编程的魅力! 我给一个简单的Stream的例子吧:\n\n\n比如我们需要随机展示 5 至 20 之间不重复的整数并进行排序, 那么传统的方式可能是下面这样的:\n\n```java\nimport java.util.*;\npublic class ImperativeRandoms {\n    public static void main(String[] args) {\n        Random rand = new Random(47);\n        SortedSet<Integer> rints = new TreeSet<>();\n        while(rints.size() < 7) {\n            int r = rand.nextint(20);\n            if(r < 5) continue;\n            rints.add(r);\n        }\n        System.out.println(rints);\n    }\n}\n```\n\n而函数式编程&流后,代码可以变得异常的简单:\n\n```java\nimport java.util.*;\npublic class Randoms {\n    public static void main(String[] args) {\n        new Random(47)\n            .ints(5, 20)\n            .distinct()\n            .limit(7)\n            .sorted()\n            .forEach(n -> System.out.println(n););\n    }\n}\n```\n\n怎么样? 这里我们借助了StreamAPI中的各种函数为我们达到了我们要做的目的, 整体代码看上去犹如读一句话一样流畅, 先ints获取数据源, 然后distinct一下排除重复, 然后我们坐下limit限制, 然后再sorted以下让其有序, 最后forEach一下, forEach的内容就是对每个元素进行打印!\n\n总而言之, 函数式编程的实现会看上去非常的有可读性, 而传统的写法则需要对java语法有一定基础, 才有能力去编写出能用的代码. 不得不说其实这种声明式的写法很大程度上又是对开发人员技术要求的降低, 但是不代表我们不需要去了解其内部的原理. 在这里所有的操作都被移交给了运行时, 不需要我们亲自编写for循环,编写控制代码. \n\n## 总结\n\n本文对函数式编程进行一个基础性的表述, 下一章我会使用java语言, 详细的说明java的函数式编程支持语法, ","source":"_posts/learn-FP.md","raw":"---\ntitle: 函数式编程范式初探-第一天\ntags: FunctionalProgramming\ncategories: IT\ndate: 2019-10-20 15:45:40\n---\n\n## 前言\n\n最近在翻阅一些技术论坛的时候, 常常能看到有人提及函数式编程(FunctionalProgramming), 说他可以简化我们的代码, 提高我们的代码生产力以及降低出错的几率.\n\n作为一个希望提高开发效率的半吊子程序员来说, 我觉得这应该是一个非常有利的'武器', 值得去学习, 吸收其中的一些精华思想, 如果能看到可以开花结果的那一天, 那就再好不过了.\n\n本文为自我学习总结文章, 正确性不保证, 我更推荐您阅读`<<函数式编程思维>>[美]Neal Ford著`这种不错的书籍\n\n本文主要使用js和java来说明, 因为这两个是我目前工作的常用语言, 对我自己的好处最大. 如果你想享受更好的函数式编程体验, 可以试试`Clojure`或者`Scala`\n\n\n## 是什么为什么\n\n我这人对一个技术的起源不是非常感兴趣, 所以我不想多费时间减少函数式编程的历史, 我想直接从函数式编程最常用的技术点讲起, 来让我快速的了解它\n\n### 以函数为抽象单元\n\n我们在面向对象编程中, 一般都会认为一个类Object是一个抽象单元, 比如在Java中(一门完全以面向对象为基础的编程语言), 我们都要从编写类开始.\n\n而函数式编程的第一个特点就是, 它把函数视为抽象单元, 我们可以传递函数, 以函数作为参数, 大家看看下面的例子:\n\n```javascript\nlet input = ['1','2','3'];\n\nfunction listForEach(list,operate){\n    for (const key in list) {\n        operate(key);\n    }\n}\n\nfunction consoleKey(key){\n    //do something.\n    console.log(key);\n}\n\nlistForEach(input, consoleKey);\n```\n\n这里我用Js实现了一段代码, 这段代码会依次打印数组中的值. 这里的最大特点就是consoleKey是个函数, 并且我们将其作为listForEach的参数传入了. 所以对于listForEach而言, for循环内部具体执行什么逻辑, 是可以由具体传入了什么函数决定的. 这里函数就是一个抽象的单元, 可以根据我们的需要进行任意的替换.\n\n\n我写完这个例子后产生了一些疑问, 因为在我看来, 这就是简单的一个抽象化调用而已, 在我还没学习函数式编程语言之前, 我也经常会写这样的代码, 并且我当时觉得这样的写法也并没有简化多少. 这个问题, 我也自己在不断的考虑, 最后我觉得这是一种比较主观的问题, 不同人对于代码复杂度有不同的判断, 有些人觉得几百行的crud代码一点也不复杂, 因为分解一下, 代码内容其实就只有crud罢了; 而可能有些人则会觉得, 这些代码就像屎山一样, 难以下手.\n\n还记得我最早接触编程的时候, 学的是c, 所以当时写的都是命令式的代码. 那么如果按照命令式的写法, 我上面的例子会怎么写呢? 如下是我的按照命令式的写法改写的例子:\n\n```javascript\nlet input = ['1','2','3'];\n\nfor (const key in list) {\n    console.log(key);\n}\n```\n\n嗯? 怎么感觉命令式的写法更加的简单? 在这里确实是这样的没错. 但是没够多久, 项目经理要求先判断下元素是否为空, 这时候对于函数式编程来说, 写法是新增一个函数抽象, 然后替换我们传入的函数, 就像下面这样:\n\n```javascript\n//...原函数省略\nfunction consoleKeyNotNull(key){\n    //检查是否为null\n    if(key){\n        console.log(key);\n    }\n}\n\nlistForEach(input, consoleKeyNotNull);\n```\n\n我们需要改的是新增一个consoleKeyNotNull函数, 以及修改传入的函数即可. 这样的写法符合软件开发的开闭原则, 我们没有去修改原来的函数代码.\n\n相同的修改放到命令式语法上就有点棘手了, 因为你需要修改源代码, 并且如果项目经理突然变卦让你把控制去掉, 你又得自己改回去, 这种需求如果不断的堆积, 对代码的维护会造成不小的压力.\n\n此外,由于是函数, 所以一般来说都会给函数一个命名, 所以我们在查阅这些代码的时候, 如果函数命名特别贴切的话, 会一下子提高阅读源码的速度, 我觉得这也是函数式的一个小特点\n\n此外,我们可能还需要了解下一种说法, 那就是这种使用函数的函数, 我们一般就叫做`高阶函数`, 一个更加高大上的说法:) \n\n### 纯函数\n\n函数式编程的另一个特点是, 要求函数针对同一个输入有一个相同的输出, 这个概念就和我们小时候学的方程式很类似, 比如方程`x + y`, 对于给定的输入x和y, 我们可以得出固定的答案. 函数式编程也极大的推崇这个特点. 因为这个特点可以提高我们这个函数的复用性\n\n试想一下, 如果一个函数是纯函数, 那么任何需要用到它的地方, 都可以放心大胆的使用它, 并且有时候我们可以不对其进行单元测试, 这样对于测试来说, 相当于减少了不稳定要素, 而不稳定要素的减少, 肯定会减少代码bug的出现. 因为很多时候bug都是因为不稳定要素的过多, 导致程序员无法一口气把所有的情况都考虑到而产生的.\n\n对于纯函数, 我能想到的例子还是很多的, 比如`sin(x)`,`abs(x)`,`sqrt(x)`, 这些函数对于我们的指定的输入, 总是会返回同一个结果. \n\n不过个人认为完全纯函数是不可能实现的, 因为在实际的开发过程中, 我们面对的是更为复杂的业务场景, 不稳定要素非常多, 比如超时问题,网络问题等等, 所以我觉得函数式编程作为一个编程范式, 它的作用仍然没有面向对象那么重要. 但是在针对一些算法, 一些小的场景下, 使用函数式编程范式, 确实是可以提高一定的生产力\n\n### lambda表达式\n\n在函数式编程中, lambda表达式是我们的常见的家伙. 由于函数式编程就是一直在写函数, 所以对于一些不需要函数名的场景, lambda表达式可以发挥出简化代码, 提高可读性的作用\n\nlambda表达式的语法也许不同语言不一致, 但是几乎都如出一辙, 下面我用java语言来演示一些:\n\n```java\n//传统写法\nnew Thread(new Runnable() {\n      public void run() {\n        System.out.println(\"Anonymous\");\n      }\n    }).start();\n\n//使用lambda表达式\nnew Thread(\n      () -> System.out.println(\"lambda\")\n    ).start();\n```\n\n可以看到, lambda表达式的作用其实就是省略到了很多不必要的语法, 只剩下我们真正关心的东西, 比如`()`代表这个方法没有形参, `->`是lambda表达式的核心语法符号, 有表示产出的含义. 最后的`System.out.println(\"lambda\")` 就是方法体, 由于单行, 所以这里省略了花括号\n\n怎么样? 是不是非常简洁? 不过这只是lambda表达式的初探, 我后续会对其进行详细的说明, 本文主要阐述FP的核心概念, 并不会对具体语法做过多说明\n\nlambda表达式为函数的编写提供了一种更易读的方式, 支持函数式编程的语言, 都有提供lambda表达式功能, 它是函数式编程之所以简洁的其中一个原因!\n\n### Stream && 将控制权交给语言/运行时\n\n最能体会到函数式编程乐趣的方式, 其实就是使用Stream.\n\nStream内置了大量的函数操作, 使得我们可以借助这些函数来完成各种操作, 最有名的三大函数就是map/filter/reduce\n\n我会在后续进行Stream的总结(不过是只针对java的), 我们可以从Stream的这些函数操作中, 深刻的体会到函数式编程的魅力! 我给一个简单的Stream的例子吧:\n\n\n比如我们需要随机展示 5 至 20 之间不重复的整数并进行排序, 那么传统的方式可能是下面这样的:\n\n```java\nimport java.util.*;\npublic class ImperativeRandoms {\n    public static void main(String[] args) {\n        Random rand = new Random(47);\n        SortedSet<Integer> rints = new TreeSet<>();\n        while(rints.size() < 7) {\n            int r = rand.nextint(20);\n            if(r < 5) continue;\n            rints.add(r);\n        }\n        System.out.println(rints);\n    }\n}\n```\n\n而函数式编程&流后,代码可以变得异常的简单:\n\n```java\nimport java.util.*;\npublic class Randoms {\n    public static void main(String[] args) {\n        new Random(47)\n            .ints(5, 20)\n            .distinct()\n            .limit(7)\n            .sorted()\n            .forEach(n -> System.out.println(n););\n    }\n}\n```\n\n怎么样? 这里我们借助了StreamAPI中的各种函数为我们达到了我们要做的目的, 整体代码看上去犹如读一句话一样流畅, 先ints获取数据源, 然后distinct一下排除重复, 然后我们坐下limit限制, 然后再sorted以下让其有序, 最后forEach一下, forEach的内容就是对每个元素进行打印!\n\n总而言之, 函数式编程的实现会看上去非常的有可读性, 而传统的写法则需要对java语法有一定基础, 才有能力去编写出能用的代码. 不得不说其实这种声明式的写法很大程度上又是对开发人员技术要求的降低, 但是不代表我们不需要去了解其内部的原理. 在这里所有的操作都被移交给了运行时, 不需要我们亲自编写for循环,编写控制代码. \n\n## 总结\n\n本文对函数式编程进行一个基础性的表述, 下一章我会使用java语言, 详细的说明java的函数式编程支持语法, ","slug":"learn-FP","published":1,"updated":"2019-10-20T09:48:44.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9us004tm6el5i7f0i8h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在翻阅一些技术论坛的时候, 常常能看到有人提及函数式编程(FunctionalProgramming), 说他可以简化我们的代码, 提高我们的代码生产力以及降低出错的几率.</p>\n<p>作为一个希望提高开发效率的半吊子程序员来说, 我觉得这应该是一个非常有利的’武器’, 值得去学习, 吸收其中的一些精华思想, 如果能看到可以开花结果的那一天, 那就再好不过了.</p>\n<p>本文为自我学习总结文章, 正确性不保证, 我更推荐您阅读<code>&lt;&lt;函数式编程思维&gt;&gt;[美]Neal Ford著</code>这种不错的书籍</p>\n<p>本文主要使用js和java来说明, 因为这两个是我目前工作的常用语言, 对我自己的好处最大. 如果你想享受更好的函数式编程体验, 可以试试<code>Clojure</code>或者<code>Scala</code></p>\n<h2 id=\"是什么为什么\"><a href=\"#是什么为什么\" class=\"headerlink\" title=\"是什么为什么\"></a>是什么为什么</h2><p>我这人对一个技术的起源不是非常感兴趣, 所以我不想多费时间减少函数式编程的历史, 我想直接从函数式编程最常用的技术点讲起, 来让我快速的了解它</p>\n<h3 id=\"以函数为抽象单元\"><a href=\"#以函数为抽象单元\" class=\"headerlink\" title=\"以函数为抽象单元\"></a>以函数为抽象单元</h3><p>我们在面向对象编程中, 一般都会认为一个类Object是一个抽象单元, 比如在Java中(一门完全以面向对象为基础的编程语言), 我们都要从编写类开始.</p>\n<p>而函数式编程的第一个特点就是, 它把函数视为抽象单元, 我们可以传递函数, 以函数作为参数, 大家看看下面的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listForEach</span>(<span class=\"params\">list,operate</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">        operate(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleKey</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something.</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listForEach(input, consoleKey);</span><br></pre></td></tr></table></figure>\n<p>这里我用Js实现了一段代码, 这段代码会依次打印数组中的值. 这里的最大特点就是consoleKey是个函数, 并且我们将其作为listForEach的参数传入了. 所以对于listForEach而言, for循环内部具体执行什么逻辑, 是可以由具体传入了什么函数决定的. 这里函数就是一个抽象的单元, 可以根据我们的需要进行任意的替换.</p>\n<p>我写完这个例子后产生了一些疑问, 因为在我看来, 这就是简单的一个抽象化调用而已, 在我还没学习函数式编程语言之前, 我也经常会写这样的代码, 并且我当时觉得这样的写法也并没有简化多少. 这个问题, 我也自己在不断的考虑, 最后我觉得这是一种比较主观的问题, 不同人对于代码复杂度有不同的判断, 有些人觉得几百行的crud代码一点也不复杂, 因为分解一下, 代码内容其实就只有crud罢了; 而可能有些人则会觉得, 这些代码就像屎山一样, 难以下手.</p>\n<p>还记得我最早接触编程的时候, 学的是c, 所以当时写的都是命令式的代码. 那么如果按照命令式的写法, 我上面的例子会怎么写呢? 如下是我的按照命令式的写法改写的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯? 怎么感觉命令式的写法更加的简单? 在这里确实是这样的没错. 但是没够多久, 项目经理要求先判断下元素是否为空, 这时候对于函数式编程来说, 写法是新增一个函数抽象, 然后替换我们传入的函数, 就像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...原函数省略</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleKeyNotNull</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listForEach(input, consoleKeyNotNull);</span><br></pre></td></tr></table></figure>\n<p>我们需要改的是新增一个consoleKeyNotNull函数, 以及修改传入的函数即可. 这样的写法符合软件开发的开闭原则, 我们没有去修改原来的函数代码.</p>\n<p>相同的修改放到命令式语法上就有点棘手了, 因为你需要修改源代码, 并且如果项目经理突然变卦让你把控制去掉, 你又得自己改回去, 这种需求如果不断的堆积, 对代码的维护会造成不小的压力.</p>\n<p>此外,由于是函数, 所以一般来说都会给函数一个命名, 所以我们在查阅这些代码的时候, 如果函数命名特别贴切的话, 会一下子提高阅读源码的速度, 我觉得这也是函数式的一个小特点</p>\n<p>此外,我们可能还需要了解下一种说法, 那就是这种使用函数的函数, 我们一般就叫做<code>高阶函数</code>, 一个更加高大上的说法:) </p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>函数式编程的另一个特点是, 要求函数针对同一个输入有一个相同的输出, 这个概念就和我们小时候学的方程式很类似, 比如方程<code>x + y</code>, 对于给定的输入x和y, 我们可以得出固定的答案. 函数式编程也极大的推崇这个特点. 因为这个特点可以提高我们这个函数的复用性</p>\n<p>试想一下, 如果一个函数是纯函数, 那么任何需要用到它的地方, 都可以放心大胆的使用它, 并且有时候我们可以不对其进行单元测试, 这样对于测试来说, 相当于减少了不稳定要素, 而不稳定要素的减少, 肯定会减少代码bug的出现. 因为很多时候bug都是因为不稳定要素的过多, 导致程序员无法一口气把所有的情况都考虑到而产生的.</p>\n<p>对于纯函数, 我能想到的例子还是很多的, 比如<code>sin(x)</code>,<code>abs(x)</code>,<code>sqrt(x)</code>, 这些函数对于我们的指定的输入, 总是会返回同一个结果. </p>\n<p>不过个人认为完全纯函数是不可能实现的, 因为在实际的开发过程中, 我们面对的是更为复杂的业务场景, 不稳定要素非常多, 比如超时问题,网络问题等等, 所以我觉得函数式编程作为一个编程范式, 它的作用仍然没有面向对象那么重要. 但是在针对一些算法, 一些小的场景下, 使用函数式编程范式, 确实是可以提高一定的生产力</p>\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><p>在函数式编程中, lambda表达式是我们的常见的家伙. 由于函数式编程就是一直在写函数, 所以对于一些不需要函数名的场景, lambda表达式可以发挥出简化代码, 提高可读性的作用</p>\n<p>lambda表达式的语法也许不同语言不一致, 但是几乎都如出一辙, 下面我用java语言来演示一些:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传统写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Anonymous\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">      () -&gt; System.out.println(<span class=\"string\">\"lambda\"</span>)</span><br><span class=\"line\">    ).start();</span><br></pre></td></tr></table></figure>\n<p>可以看到, lambda表达式的作用其实就是省略到了很多不必要的语法, 只剩下我们真正关心的东西, 比如<code>()</code>代表这个方法没有形参, <code>-&gt;</code>是lambda表达式的核心语法符号, 有表示产出的含义. 最后的<code>System.out.println(&quot;lambda&quot;)</code> 就是方法体, 由于单行, 所以这里省略了花括号</p>\n<p>怎么样? 是不是非常简洁? 不过这只是lambda表达式的初探, 我后续会对其进行详细的说明, 本文主要阐述FP的核心概念, 并不会对具体语法做过多说明</p>\n<p>lambda表达式为函数的编写提供了一种更易读的方式, 支持函数式编程的语言, 都有提供lambda表达式功能, 它是函数式编程之所以简洁的其中一个原因!</p>\n<h3 id=\"Stream-amp-amp-将控制权交给语言-运行时\"><a href=\"#Stream-amp-amp-将控制权交给语言-运行时\" class=\"headerlink\" title=\"Stream &amp;&amp; 将控制权交给语言/运行时\"></a>Stream &amp;&amp; 将控制权交给语言/运行时</h3><p>最能体会到函数式编程乐趣的方式, 其实就是使用Stream.</p>\n<p>Stream内置了大量的函数操作, 使得我们可以借助这些函数来完成各种操作, 最有名的三大函数就是map/filter/reduce</p>\n<p>我会在后续进行Stream的总结(不过是只针对java的), 我们可以从Stream的这些函数操作中, 深刻的体会到函数式编程的魅力! 我给一个简单的Stream的例子吧:</p>\n<p>比如我们需要随机展示 5 至 20 之间不重复的整数并进行排序, 那么传统的方式可能是下面这样的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImperativeRandoms</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Random rand = <span class=\"keyword\">new</span> Random(<span class=\"number\">47</span>);</span><br><span class=\"line\">        SortedSet&lt;Integer&gt; rints = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rints.size() &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = rand.nextint(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; <span class=\"number\">5</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            rints.add(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(rints);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而函数式编程&amp;流后,代码可以变得异常的简单:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Randoms</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Random(<span class=\"number\">47</span>)</span><br><span class=\"line\">            .ints(<span class=\"number\">5</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">            .distinct()</span><br><span class=\"line\">            .limit(<span class=\"number\">7</span>)</span><br><span class=\"line\">            .sorted()</span><br><span class=\"line\">            .forEach(n -&gt; System.out.println(n););</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>怎么样? 这里我们借助了StreamAPI中的各种函数为我们达到了我们要做的目的, 整体代码看上去犹如读一句话一样流畅, 先ints获取数据源, 然后distinct一下排除重复, 然后我们坐下limit限制, 然后再sorted以下让其有序, 最后forEach一下, forEach的内容就是对每个元素进行打印!</p>\n<p>总而言之, 函数式编程的实现会看上去非常的有可读性, 而传统的写法则需要对java语法有一定基础, 才有能力去编写出能用的代码. 不得不说其实这种声明式的写法很大程度上又是对开发人员技术要求的降低, 但是不代表我们不需要去了解其内部的原理. 在这里所有的操作都被移交给了运行时, 不需要我们亲自编写for循环,编写控制代码. </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文对函数式编程进行一个基础性的表述, 下一章我会使用java语言, 详细的说明java的函数式编程支持语法, </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在翻阅一些技术论坛的时候, 常常能看到有人提及函数式编程(FunctionalProgramming), 说他可以简化我们的代码, 提高我们的代码生产力以及降低出错的几率.</p>\n<p>作为一个希望提高开发效率的半吊子程序员来说, 我觉得这应该是一个非常有利的’武器’, 值得去学习, 吸收其中的一些精华思想, 如果能看到可以开花结果的那一天, 那就再好不过了.</p>\n<p>本文为自我学习总结文章, 正确性不保证, 我更推荐您阅读<code>&lt;&lt;函数式编程思维&gt;&gt;[美]Neal Ford著</code>这种不错的书籍</p>\n<p>本文主要使用js和java来说明, 因为这两个是我目前工作的常用语言, 对我自己的好处最大. 如果你想享受更好的函数式编程体验, 可以试试<code>Clojure</code>或者<code>Scala</code></p>\n<h2 id=\"是什么为什么\"><a href=\"#是什么为什么\" class=\"headerlink\" title=\"是什么为什么\"></a>是什么为什么</h2><p>我这人对一个技术的起源不是非常感兴趣, 所以我不想多费时间减少函数式编程的历史, 我想直接从函数式编程最常用的技术点讲起, 来让我快速的了解它</p>\n<h3 id=\"以函数为抽象单元\"><a href=\"#以函数为抽象单元\" class=\"headerlink\" title=\"以函数为抽象单元\"></a>以函数为抽象单元</h3><p>我们在面向对象编程中, 一般都会认为一个类Object是一个抽象单元, 比如在Java中(一门完全以面向对象为基础的编程语言), 我们都要从编写类开始.</p>\n<p>而函数式编程的第一个特点就是, 它把函数视为抽象单元, 我们可以传递函数, 以函数作为参数, 大家看看下面的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listForEach</span>(<span class=\"params\">list,operate</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">        operate(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleKey</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something.</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listForEach(input, consoleKey);</span><br></pre></td></tr></table></figure>\n<p>这里我用Js实现了一段代码, 这段代码会依次打印数组中的值. 这里的最大特点就是consoleKey是个函数, 并且我们将其作为listForEach的参数传入了. 所以对于listForEach而言, for循环内部具体执行什么逻辑, 是可以由具体传入了什么函数决定的. 这里函数就是一个抽象的单元, 可以根据我们的需要进行任意的替换.</p>\n<p>我写完这个例子后产生了一些疑问, 因为在我看来, 这就是简单的一个抽象化调用而已, 在我还没学习函数式编程语言之前, 我也经常会写这样的代码, 并且我当时觉得这样的写法也并没有简化多少. 这个问题, 我也自己在不断的考虑, 最后我觉得这是一种比较主观的问题, 不同人对于代码复杂度有不同的判断, 有些人觉得几百行的crud代码一点也不复杂, 因为分解一下, 代码内容其实就只有crud罢了; 而可能有些人则会觉得, 这些代码就像屎山一样, 难以下手.</p>\n<p>还记得我最早接触编程的时候, 学的是c, 所以当时写的都是命令式的代码. 那么如果按照命令式的写法, 我上面的例子会怎么写呢? 如下是我的按照命令式的写法改写的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"string\">'1'</span>,<span class=\"string\">'2'</span>,<span class=\"string\">'3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯? 怎么感觉命令式的写法更加的简单? 在这里确实是这样的没错. 但是没够多久, 项目经理要求先判断下元素是否为空, 这时候对于函数式编程来说, 写法是新增一个函数抽象, 然后替换我们传入的函数, 就像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...原函数省略</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleKeyNotNull</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//检查是否为null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">listForEach(input, consoleKeyNotNull);</span><br></pre></td></tr></table></figure>\n<p>我们需要改的是新增一个consoleKeyNotNull函数, 以及修改传入的函数即可. 这样的写法符合软件开发的开闭原则, 我们没有去修改原来的函数代码.</p>\n<p>相同的修改放到命令式语法上就有点棘手了, 因为你需要修改源代码, 并且如果项目经理突然变卦让你把控制去掉, 你又得自己改回去, 这种需求如果不断的堆积, 对代码的维护会造成不小的压力.</p>\n<p>此外,由于是函数, 所以一般来说都会给函数一个命名, 所以我们在查阅这些代码的时候, 如果函数命名特别贴切的话, 会一下子提高阅读源码的速度, 我觉得这也是函数式的一个小特点</p>\n<p>此外,我们可能还需要了解下一种说法, 那就是这种使用函数的函数, 我们一般就叫做<code>高阶函数</code>, 一个更加高大上的说法:) </p>\n<h3 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h3><p>函数式编程的另一个特点是, 要求函数针对同一个输入有一个相同的输出, 这个概念就和我们小时候学的方程式很类似, 比如方程<code>x + y</code>, 对于给定的输入x和y, 我们可以得出固定的答案. 函数式编程也极大的推崇这个特点. 因为这个特点可以提高我们这个函数的复用性</p>\n<p>试想一下, 如果一个函数是纯函数, 那么任何需要用到它的地方, 都可以放心大胆的使用它, 并且有时候我们可以不对其进行单元测试, 这样对于测试来说, 相当于减少了不稳定要素, 而不稳定要素的减少, 肯定会减少代码bug的出现. 因为很多时候bug都是因为不稳定要素的过多, 导致程序员无法一口气把所有的情况都考虑到而产生的.</p>\n<p>对于纯函数, 我能想到的例子还是很多的, 比如<code>sin(x)</code>,<code>abs(x)</code>,<code>sqrt(x)</code>, 这些函数对于我们的指定的输入, 总是会返回同一个结果. </p>\n<p>不过个人认为完全纯函数是不可能实现的, 因为在实际的开发过程中, 我们面对的是更为复杂的业务场景, 不稳定要素非常多, 比如超时问题,网络问题等等, 所以我觉得函数式编程作为一个编程范式, 它的作用仍然没有面向对象那么重要. 但是在针对一些算法, 一些小的场景下, 使用函数式编程范式, 确实是可以提高一定的生产力</p>\n<h3 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a>lambda表达式</h3><p>在函数式编程中, lambda表达式是我们的常见的家伙. 由于函数式编程就是一直在写函数, 所以对于一些不需要函数名的场景, lambda表达式可以发挥出简化代码, 提高可读性的作用</p>\n<p>lambda表达式的语法也许不同语言不一致, 但是几乎都如出一辙, 下面我用java语言来演示一些:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传统写法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Anonymous\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">      () -&gt; System.out.println(<span class=\"string\">\"lambda\"</span>)</span><br><span class=\"line\">    ).start();</span><br></pre></td></tr></table></figure>\n<p>可以看到, lambda表达式的作用其实就是省略到了很多不必要的语法, 只剩下我们真正关心的东西, 比如<code>()</code>代表这个方法没有形参, <code>-&gt;</code>是lambda表达式的核心语法符号, 有表示产出的含义. 最后的<code>System.out.println(&quot;lambda&quot;)</code> 就是方法体, 由于单行, 所以这里省略了花括号</p>\n<p>怎么样? 是不是非常简洁? 不过这只是lambda表达式的初探, 我后续会对其进行详细的说明, 本文主要阐述FP的核心概念, 并不会对具体语法做过多说明</p>\n<p>lambda表达式为函数的编写提供了一种更易读的方式, 支持函数式编程的语言, 都有提供lambda表达式功能, 它是函数式编程之所以简洁的其中一个原因!</p>\n<h3 id=\"Stream-amp-amp-将控制权交给语言-运行时\"><a href=\"#Stream-amp-amp-将控制权交给语言-运行时\" class=\"headerlink\" title=\"Stream &amp;&amp; 将控制权交给语言/运行时\"></a>Stream &amp;&amp; 将控制权交给语言/运行时</h3><p>最能体会到函数式编程乐趣的方式, 其实就是使用Stream.</p>\n<p>Stream内置了大量的函数操作, 使得我们可以借助这些函数来完成各种操作, 最有名的三大函数就是map/filter/reduce</p>\n<p>我会在后续进行Stream的总结(不过是只针对java的), 我们可以从Stream的这些函数操作中, 深刻的体会到函数式编程的魅力! 我给一个简单的Stream的例子吧:</p>\n<p>比如我们需要随机展示 5 至 20 之间不重复的整数并进行排序, 那么传统的方式可能是下面这样的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImperativeRandoms</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Random rand = <span class=\"keyword\">new</span> Random(<span class=\"number\">47</span>);</span><br><span class=\"line\">        SortedSet&lt;Integer&gt; rints = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rints.size() &lt; <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r = rand.nextint(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; <span class=\"number\">5</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            rints.add(r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(rints);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而函数式编程&amp;流后,代码可以变得异常的简单:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Randoms</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Random(<span class=\"number\">47</span>)</span><br><span class=\"line\">            .ints(<span class=\"number\">5</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">            .distinct()</span><br><span class=\"line\">            .limit(<span class=\"number\">7</span>)</span><br><span class=\"line\">            .sorted()</span><br><span class=\"line\">            .forEach(n -&gt; System.out.println(n););</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>怎么样? 这里我们借助了StreamAPI中的各种函数为我们达到了我们要做的目的, 整体代码看上去犹如读一句话一样流畅, 先ints获取数据源, 然后distinct一下排除重复, 然后我们坐下limit限制, 然后再sorted以下让其有序, 最后forEach一下, forEach的内容就是对每个元素进行打印!</p>\n<p>总而言之, 函数式编程的实现会看上去非常的有可读性, 而传统的写法则需要对java语法有一定基础, 才有能力去编写出能用的代码. 不得不说其实这种声明式的写法很大程度上又是对开发人员技术要求的降低, 但是不代表我们不需要去了解其内部的原理. 在这里所有的操作都被移交给了运行时, 不需要我们亲自编写for循环,编写控制代码. </p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文对函数式编程进行一个基础性的表述, 下一章我会使用java语言, 详细的说明java的函数式编程支持语法, </p>\n"},{"title":"冷静对待你遇到的所有Java内存异常","date":"2019-09-17T08:16:02.000Z","_content":"\n## 被人说烂的Java内存模型\n\nJava内存模型的相关资料在网上实在是太多了,不管是过时的还是不过时的,网络上充斥的学习资料,比如各类研究Java内存模型的博文,也随着Java的发展,渐渐失去了其内容的准确性.\n\n要在那么多网络资料中找到对Java内存模型最新最全的说法,估计最好的方式只有翻阅Oracle的文档了!(字体大小太不舒服了!)\n\n我最近也不停的查阅和总结了不少网上的资料,不过由于类似资料实在太多,所以不打算重复的说明这个被人说烂的Java内存模型\n\n## 从各种OOM异常出发来零距离的理解Java内存模型\n\n对于大脑来说, 大脑更喜欢问题, 而不是从陈述开始.\n\n本文会从平时工作中可能会遇到的OOM异常出发,来一步步的深入理解我们所熟知的Java内存模型,从而哪怕可以更加理解一点这些方面的编程思想和设计精髓, 也是一个不小的进步\n\n## java.lang.StackOverFlowError\n\n### 这个Stack是什么鬼东西\n\nStack是个栈, 是一种数据结构, 会占用一块内存空间\n\n### Java在哪些地方会使用Stack来存储数据\n\n1. 最常见的就是虚拟机栈, 它是专门为java Method执行服务的一块内存, 每个方法调用都会往这个栈中压入一个栈帧(stackFrame), 由于方法可以互调,迭代,所以使用栈模型来服务Java Method是很适合的一种数据结构模型\n\n2. 别忘了还有一个本地方法栈, 它是专门为java的底层native方法执行服务的一块内存. 然而由于native方法都是术语jdk内部的测试稳定的程序,所以作为应用java开发人员的我们,一般是不可能遇到这个层面抛出的这个异常,同时我也几乎可以判断这种方法是不会直接抛出java.lang.StackOverFlowError异常的,所以我们可以缩小我们的关注范围,把抛出这个异常的原因全部指向于虚拟机栈即可\n\n### 这种异常是如何发生的?\n\n我们知道每调用一次Java Method,就会往虚拟机栈中压入一个栈帧,在方法结束之前都不会出栈. 所以可以直接推理出在一个java线程运行过程中,如果同时调用的方法过多(比如递归的调用一个方法),就会出现这个异常\n\n事实上,除了恶性递归或者虚拟机栈可用内存过小的情况下, 也很难触发这种异常, 所以一般来说遇到这种异常几乎是可以直接断定程序中存在恶性递归导致的.\n\n这类问题在实际开发中遇到的并不多, 反而是在做一些算法问题的时候, 由于自己的疏忽从而引发不可预知的恶性递归\n\n### 一个简单的Demo复现这种异常\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Main.main(null);\n    }\n}\n```\n上述代码就会报StackOverFlowError, 因为main方法会被不停的循环执行, 直到超出虚拟机栈能够承受的大小\n\n### 相关JVM参数\n\n-Xss, 正常取值128K~256K, 如果仍然不够可以进行加大, 这个选项对性能影响比较大，需要严格的测试哦\n\n## java.lang.OutOfMemoryError: Java heap space\n\n这个异常表示, Java程序运行过程中遭遇了内存超限问题, 根本原因是Java的堆(Heap)内存超限\n\n### Java常用的内存空间对应计算机硬件是哪些组件?\n\n1. 寄存器(比如每个Java线程独享程序计数器(Program Counter Register))\n2. RAM(也就是我们常说的内存,java中的虚拟机栈,堆内存都用的这块)\n\n### 什么是Java的堆内存(Heap)\n\n这就涉及了Java的运行时内存模型了~ \n\n我就简单来说下吧~\n\n一个JVM进程运行后, 会有一个主线程去运行我们写的Java程序, 那么每一个这种线程都拥有两大块内存空间\n\n- 线程共享内存空间\n    - 堆(Heap, 所有java的对象实例和数组,jdk8后还存放了字符串常量池和类静态变量)\n    - 方法区(存放类元数据,符号引用,静态常量,jdk8后HotSpot将其从永久代移动到了Metaspace)\n- 线程独享内存空间\n    - 虚拟机栈(为Java方法提供的一块内存空间,内部有栈帧组成)\n    - 本地方法栈(为Java的native方法)\n    - 程序计数器(PC寄存器,记录执行行号)\n\n所以Java的堆内存就是JVM中设定的一块专门存储所有java的对象实例和数组,jdk8后甚至包括字符串常量池和类静态变量的内存区域\n\n### 这种异常是如何发生的?\n\n如果是1.7以前, Java堆溢出的问题根源是简单的, 就是运行时存在的对象实例和数组太多了!\n\n但是在1.8后, 由于还存放了字符串常量, 所以出现异常还有一种可能就是 interned Strings 过多导致的哦!\n\n### 最小复现Demo\n\n执行前最好先修改下JVM参数,防止等待时间过长\nJVM参数:\n-Xms20m\n-Xmx20m\n-XX:MetaspaceSize=10m\n-XX:MaxMetaspaceSize=10m\n-XX:-UseGCOverheadLimit\n\nJVM参数说明: 限制堆大小20M,方便快速报错! 由于我用的是jdk8,所以限制了元空间的大小为10m,说实话在这个情况下没啥用哈哈哈哈哈哈哈(就是觉得加上去舒服才加的,不信我说的你可以自己google)!最后一个参数-XX:-UseGCOverheadLimit这个有必要加一下. 因为我的demo程序属于那种恶意的程序,所以一次GC几乎没办法清理任何对象实例,因为他们都在被占用着! 所以必须使用这个参数来防止GC检测出我的这种恶意程序,从而正常的提示堆溢出的错误而不是GC Overhead limit exceeded错误(这个错误会在后面细讲)\n\n1. 普通的对象实例爆掉堆内存\n\n```java\npublic static void main(String[] args) {\n        List<Object> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(new Object());\n        }\n    }\n```\n\n2. interned Strings过多爆掉堆内存(有待考证此代码的准确性,请不要盲目相信,要有自己的想法)\n\n```java\npublic static void main(String[] args) {\n        List<String> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(String.valueOf(i++).intern());\n        }\n    }\n```\n\n代码说明: 这串代码会每次生成一个新的interned String, 也就是数字递增对应的String表示, 所以最终爆掉内存, 证明了是interned Strings爆掉了内存, 相同的代码在jkd1.7以前是不会报堆内存溢出的, 请注意\n\n\n### 相关JVM参数\n\n-Xms : 初始堆大小\n-Xmx : 最大堆大小\n\n### 如何处理?\n\n查看jvm快照,分析占用内存大的对象是哪些, 然后定位到代码位置, 最后进行优化\n\n我一般使用visualVM来查看这类问题\n\n## java.lang.OutOfMemoryError: GC Overhead limit exceeded\n\n这个异常表示您的Java程序在运行的时候, 98%的时间都在执行GC回收, 但是每次回收只回收不到2%的空间!\n\n换句话说,其实这个异常往往是抛出java.lang.OutOfMemoryError: Java heap space异常的前兆! 因为Java程序每次都GC回收只能回收一点点内存空间,而你的程序却仍然在不停的产生新的对象实例, 这无疑导致了两种可能结果: \n1. 不停的进行GC\n2. 直接超出的堆内存大小\n\n这个问题还有一些细节需要我们去掌握,我们先从下面的例子来看吧\n\n###  最小复现Demo\n```java\npublic static void main(String args[]) throws Exception {\n        Map map = System.getProperties();\n        Random r = new Random();\n        while (true) {\n            map.put(r.nextInt(), \"value\");\n        }\n    }\n```\n\n代码说明:  这段代码不停的往map中加入新的key-value,导致map大小不断变大! 当到达堆内存顶点的时候,GC发生, 但是清理完毕后,JVM发现清理前后的堆内存大小改变很小,不到2%; 这时候程序继续运行,继续往map中加数据!GC又发生了!又只清理不到2%! 如此不停的循环, 最后JVM得出了一个判断! 你的Java程序在占用CPU进行运算的时间里,98%的时间都特么的在垃圾回收,而每次GC居然只能回收堆内存的2%空间, 这肯定是代码存在问题,于是抛出了这个异常. 如果这个时候,你断定不是自己的代码问题, 使用JVM参数-XX:-UseGCOverheadLimit来关闭这种检查! 然后你就会发现你的程序抛出了堆溢出异常! 为什么呢? 因为堆内存不断的被占满,最终导致最后一次加入新的int的时候, 堆内存空间直接不足了!\n\n### 这个异常一般如何处理\n\n和堆溢出的解决方式一致\n\n### 相关JVM参数\n\n-XX:-UseGCOverheadLimit\n\n## java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\n\n只存在于jdk1.8以前的java程序中! 这个异常表示,永久代大小不够!\n\n### 什么是Permgen\n\n是HotSpot在jdk1.8以前存在的一个区域,用于实现方法区\n\n### 什么时候会产生这个错误以及如何解决\n\n由于是实现方法区的地方, 所以肯定是类元信息或者常量（jdk1.7后部分常量已经挪到堆中），静态常量和JIT即时编译器编译后的代码等数据太多导致大小不够\n\n乍一看也许你会头晕! 不过没关系, 根据我两年的开发经验, 我碰到过的唯一一次Permgen space问题是因为SpringIoC容器一口气加载了过多的Bean导致的!\n\n所以正常来说, 直接扩大这个区域的大小即可!\n\n比如使用如下JVM参数扩大:\n-XX:MaxNewSize=xxxm -XX:MaxPermSize=xxxm\n\n### 最小复现Demo\n\n运行要求: jdk版本 <= 1.6\n\n```java\nimport javassist.ClassPool;\n\npublic class MicroGenerator {\n  public static void main(String[] args) throws Exception {\n    for (int i = 0; i < 100_000_000; i++) {\n      generate(\"eu.plumbr.demo.Generated\" + i);\n    }\n  }\n\n  public static Class generate(String name) throws Exception {\n    ClassPool pool = ClassPool.getDefault();\n    return pool.makeClass(name).toClass();\n  }\n}\n```\n\n借助了javassist来不停的加载新的class,直至爆掉永久代区域\n\n### 相关JVM参数\n\n-XX:PermSize=xxxm \n-XX:MaxPermSize=xxxm\n\n## java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\n\n这个异常表示: Metaspace的空间不足导致OOM异常发生\n\n### 什么是Metaspace\n\n有些不太专注JVM知识的小伙伴可能对Metaspace是陌生的, 因为这玩意是jdk8开始才正式登场的一块内存区域. 它专门用于替代原来的永久代, 且存在于本地内存中, 所以它的最大内存理论就是你电脑的最大内存. 和永久代不一样的是, 它可以进行自我扩容, 直到达到规定的MaxMetaspaceSize或者到达本机的最大可用内存为止. \n\nMetaspace接替了永久代的任务, 方法区的内容全部转移到此处(除了字符串常量池被挪到了堆中)\n\n不过相比于永久代, Metaspace进行GC的时候, 稍微改变了一点规则, Metaspace中类元数据是否需要回收是根据类加载器死活来来决定的, 这不同于永久代的, 只要类引用消失就会被回收. 这种规则会产生一些问题: \n\n1. https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit\n2. https://zhuanlan.zhihu.com/p/25634935\n\n\n所以在jdk8后使用反射,动态代理等会生成class对象的方法, 一定要小心MetaSpace是否会对其进行回收, 如果不会, 则需要进行相应的优化处理\n\n### 为什么要移除永久代\n\n1. 方法区大小难以设定，容易发生内存溢出。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出\n\n2. GC复杂且效率低。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。\n\n3. 促进HotSpot JVM与JRockit VM的融合。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。\n\n### 最小复现Demo\n\n```java\n\n/**\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n */\npublic class MetaSpaceOOMTest {\n\n    public static void main(String[] args) {\n        while (true) {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(OOMObject.class);\n            enhancer.setUseCache(false);\n            enhancer.setCallback(new MethodInterceptor() {\n                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                    return proxy.invokeSuper(obj, args);\n                }\n            });\n            //无限创建动态代理，生成Class对象\n            enhancer.create();\n        }\n    }\n\n    static class OOMObject {\n\n    }\n}\n```\n\n### 如何解决这类异常\n\n1. 增大MetaSpace的最大空间大小\n\n2. 类似检查永久代异常一样的处理方式, 检查dump文件, 查看哪些类加载存在异常\n\n### 相关JVM参数\n\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n\n## java.lang.OutOfMemoryError: Unable to create new native thread\n\n这个异常表示,JVM无法再创建新的线程了!JVM能够创建的线程数是有限制的,\n\n### 复现demo\n```java\npublic class TestNativeOutOfMemoryError {  \n  \n    public static void main(String[] args) {  \n  \n        for (int i = 0;; i++) {  \n            System.out.println(\"i = \" + i);  \n            new Thread(new HoldThread()).start();  \n        }  \n    }  \n  \n}  \n  \nclass HoldThread extends Thread {  \n    CountDownLatch cdl = new CountDownLatch(1);  \n  \n    public HoldThread() {  \n        this.setDaemon(true);  \n    }  \n  \n    public void run() {  \n        try {  \n            cdl.await();  \n        } catch (InterruptedException e) {  \n        }  \n    }  \n}  \n```\n\n### 解决方案\n\n1. 去用线程池!\n\n2. 检查代码是否存在bug在不停的生成新线程!\n\n3. 如果确实需要那么多线程,那就修改OS和JVM的参数设置,并且加大你的硬件内存容量!\n\n## java.lang.OutOfMemoryError: request size bytes for reason \n\n如果你看到了这个异常, 说明你的OS内存不够用了, JVM想本地操作系统申请内存被拒绝, 导致JVM进程无法继续运行! 发生这个问题的原因一般是你的Java程序需要的内存容量超过了操作系统可提供给JVM的最大内存容量, 连swap内存都没了\n\n## java.lang.OutOfMemoryError: Requested array size exceeds VM\n\n当你正准备创建一个超过虚拟机允许的大小的数组时，这条错误就会出现在你眼前!\n\n\n\n## 尾\n\n本文对java常见的OOM异常做了总结说明,同时对于涉及的Java内存模型进行了说明,希望可以在日后遇到类似问题的时候可以沉着冷静,不慌不忙的来排查问题\n\n参考:\nhttps://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\nhttps://juejin.im/post/5ca02d046fb9a05e6a086cb7\nhttps://zhuanlan.zhihu.com/p/25634935\nhttps://www.zhihu.com/question/39990490/answer/369690291\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","source":"_posts/java-memory-error-solution-Theoretically.md","raw":"---\ntitle: 冷静对待你遇到的所有Java内存异常\ntags: JVM\ncategories: IT\ndate: 2019-09-17 16:16:02\n---\n\n## 被人说烂的Java内存模型\n\nJava内存模型的相关资料在网上实在是太多了,不管是过时的还是不过时的,网络上充斥的学习资料,比如各类研究Java内存模型的博文,也随着Java的发展,渐渐失去了其内容的准确性.\n\n要在那么多网络资料中找到对Java内存模型最新最全的说法,估计最好的方式只有翻阅Oracle的文档了!(字体大小太不舒服了!)\n\n我最近也不停的查阅和总结了不少网上的资料,不过由于类似资料实在太多,所以不打算重复的说明这个被人说烂的Java内存模型\n\n## 从各种OOM异常出发来零距离的理解Java内存模型\n\n对于大脑来说, 大脑更喜欢问题, 而不是从陈述开始.\n\n本文会从平时工作中可能会遇到的OOM异常出发,来一步步的深入理解我们所熟知的Java内存模型,从而哪怕可以更加理解一点这些方面的编程思想和设计精髓, 也是一个不小的进步\n\n## java.lang.StackOverFlowError\n\n### 这个Stack是什么鬼东西\n\nStack是个栈, 是一种数据结构, 会占用一块内存空间\n\n### Java在哪些地方会使用Stack来存储数据\n\n1. 最常见的就是虚拟机栈, 它是专门为java Method执行服务的一块内存, 每个方法调用都会往这个栈中压入一个栈帧(stackFrame), 由于方法可以互调,迭代,所以使用栈模型来服务Java Method是很适合的一种数据结构模型\n\n2. 别忘了还有一个本地方法栈, 它是专门为java的底层native方法执行服务的一块内存. 然而由于native方法都是术语jdk内部的测试稳定的程序,所以作为应用java开发人员的我们,一般是不可能遇到这个层面抛出的这个异常,同时我也几乎可以判断这种方法是不会直接抛出java.lang.StackOverFlowError异常的,所以我们可以缩小我们的关注范围,把抛出这个异常的原因全部指向于虚拟机栈即可\n\n### 这种异常是如何发生的?\n\n我们知道每调用一次Java Method,就会往虚拟机栈中压入一个栈帧,在方法结束之前都不会出栈. 所以可以直接推理出在一个java线程运行过程中,如果同时调用的方法过多(比如递归的调用一个方法),就会出现这个异常\n\n事实上,除了恶性递归或者虚拟机栈可用内存过小的情况下, 也很难触发这种异常, 所以一般来说遇到这种异常几乎是可以直接断定程序中存在恶性递归导致的.\n\n这类问题在实际开发中遇到的并不多, 反而是在做一些算法问题的时候, 由于自己的疏忽从而引发不可预知的恶性递归\n\n### 一个简单的Demo复现这种异常\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Main.main(null);\n    }\n}\n```\n上述代码就会报StackOverFlowError, 因为main方法会被不停的循环执行, 直到超出虚拟机栈能够承受的大小\n\n### 相关JVM参数\n\n-Xss, 正常取值128K~256K, 如果仍然不够可以进行加大, 这个选项对性能影响比较大，需要严格的测试哦\n\n## java.lang.OutOfMemoryError: Java heap space\n\n这个异常表示, Java程序运行过程中遭遇了内存超限问题, 根本原因是Java的堆(Heap)内存超限\n\n### Java常用的内存空间对应计算机硬件是哪些组件?\n\n1. 寄存器(比如每个Java线程独享程序计数器(Program Counter Register))\n2. RAM(也就是我们常说的内存,java中的虚拟机栈,堆内存都用的这块)\n\n### 什么是Java的堆内存(Heap)\n\n这就涉及了Java的运行时内存模型了~ \n\n我就简单来说下吧~\n\n一个JVM进程运行后, 会有一个主线程去运行我们写的Java程序, 那么每一个这种线程都拥有两大块内存空间\n\n- 线程共享内存空间\n    - 堆(Heap, 所有java的对象实例和数组,jdk8后还存放了字符串常量池和类静态变量)\n    - 方法区(存放类元数据,符号引用,静态常量,jdk8后HotSpot将其从永久代移动到了Metaspace)\n- 线程独享内存空间\n    - 虚拟机栈(为Java方法提供的一块内存空间,内部有栈帧组成)\n    - 本地方法栈(为Java的native方法)\n    - 程序计数器(PC寄存器,记录执行行号)\n\n所以Java的堆内存就是JVM中设定的一块专门存储所有java的对象实例和数组,jdk8后甚至包括字符串常量池和类静态变量的内存区域\n\n### 这种异常是如何发生的?\n\n如果是1.7以前, Java堆溢出的问题根源是简单的, 就是运行时存在的对象实例和数组太多了!\n\n但是在1.8后, 由于还存放了字符串常量, 所以出现异常还有一种可能就是 interned Strings 过多导致的哦!\n\n### 最小复现Demo\n\n执行前最好先修改下JVM参数,防止等待时间过长\nJVM参数:\n-Xms20m\n-Xmx20m\n-XX:MetaspaceSize=10m\n-XX:MaxMetaspaceSize=10m\n-XX:-UseGCOverheadLimit\n\nJVM参数说明: 限制堆大小20M,方便快速报错! 由于我用的是jdk8,所以限制了元空间的大小为10m,说实话在这个情况下没啥用哈哈哈哈哈哈哈(就是觉得加上去舒服才加的,不信我说的你可以自己google)!最后一个参数-XX:-UseGCOverheadLimit这个有必要加一下. 因为我的demo程序属于那种恶意的程序,所以一次GC几乎没办法清理任何对象实例,因为他们都在被占用着! 所以必须使用这个参数来防止GC检测出我的这种恶意程序,从而正常的提示堆溢出的错误而不是GC Overhead limit exceeded错误(这个错误会在后面细讲)\n\n1. 普通的对象实例爆掉堆内存\n\n```java\npublic static void main(String[] args) {\n        List<Object> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(new Object());\n        }\n    }\n```\n\n2. interned Strings过多爆掉堆内存(有待考证此代码的准确性,请不要盲目相信,要有自己的想法)\n\n```java\npublic static void main(String[] args) {\n        List<String> list = new ArrayList();\n        int i = 0;\n        while(true){\n            list.add(String.valueOf(i++).intern());\n        }\n    }\n```\n\n代码说明: 这串代码会每次生成一个新的interned String, 也就是数字递增对应的String表示, 所以最终爆掉内存, 证明了是interned Strings爆掉了内存, 相同的代码在jkd1.7以前是不会报堆内存溢出的, 请注意\n\n\n### 相关JVM参数\n\n-Xms : 初始堆大小\n-Xmx : 最大堆大小\n\n### 如何处理?\n\n查看jvm快照,分析占用内存大的对象是哪些, 然后定位到代码位置, 最后进行优化\n\n我一般使用visualVM来查看这类问题\n\n## java.lang.OutOfMemoryError: GC Overhead limit exceeded\n\n这个异常表示您的Java程序在运行的时候, 98%的时间都在执行GC回收, 但是每次回收只回收不到2%的空间!\n\n换句话说,其实这个异常往往是抛出java.lang.OutOfMemoryError: Java heap space异常的前兆! 因为Java程序每次都GC回收只能回收一点点内存空间,而你的程序却仍然在不停的产生新的对象实例, 这无疑导致了两种可能结果: \n1. 不停的进行GC\n2. 直接超出的堆内存大小\n\n这个问题还有一些细节需要我们去掌握,我们先从下面的例子来看吧\n\n###  最小复现Demo\n```java\npublic static void main(String args[]) throws Exception {\n        Map map = System.getProperties();\n        Random r = new Random();\n        while (true) {\n            map.put(r.nextInt(), \"value\");\n        }\n    }\n```\n\n代码说明:  这段代码不停的往map中加入新的key-value,导致map大小不断变大! 当到达堆内存顶点的时候,GC发生, 但是清理完毕后,JVM发现清理前后的堆内存大小改变很小,不到2%; 这时候程序继续运行,继续往map中加数据!GC又发生了!又只清理不到2%! 如此不停的循环, 最后JVM得出了一个判断! 你的Java程序在占用CPU进行运算的时间里,98%的时间都特么的在垃圾回收,而每次GC居然只能回收堆内存的2%空间, 这肯定是代码存在问题,于是抛出了这个异常. 如果这个时候,你断定不是自己的代码问题, 使用JVM参数-XX:-UseGCOverheadLimit来关闭这种检查! 然后你就会发现你的程序抛出了堆溢出异常! 为什么呢? 因为堆内存不断的被占满,最终导致最后一次加入新的int的时候, 堆内存空间直接不足了!\n\n### 这个异常一般如何处理\n\n和堆溢出的解决方式一致\n\n### 相关JVM参数\n\n-XX:-UseGCOverheadLimit\n\n## java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\n\n只存在于jdk1.8以前的java程序中! 这个异常表示,永久代大小不够!\n\n### 什么是Permgen\n\n是HotSpot在jdk1.8以前存在的一个区域,用于实现方法区\n\n### 什么时候会产生这个错误以及如何解决\n\n由于是实现方法区的地方, 所以肯定是类元信息或者常量（jdk1.7后部分常量已经挪到堆中），静态常量和JIT即时编译器编译后的代码等数据太多导致大小不够\n\n乍一看也许你会头晕! 不过没关系, 根据我两年的开发经验, 我碰到过的唯一一次Permgen space问题是因为SpringIoC容器一口气加载了过多的Bean导致的!\n\n所以正常来说, 直接扩大这个区域的大小即可!\n\n比如使用如下JVM参数扩大:\n-XX:MaxNewSize=xxxm -XX:MaxPermSize=xxxm\n\n### 最小复现Demo\n\n运行要求: jdk版本 <= 1.6\n\n```java\nimport javassist.ClassPool;\n\npublic class MicroGenerator {\n  public static void main(String[] args) throws Exception {\n    for (int i = 0; i < 100_000_000; i++) {\n      generate(\"eu.plumbr.demo.Generated\" + i);\n    }\n  }\n\n  public static Class generate(String name) throws Exception {\n    ClassPool pool = ClassPool.getDefault();\n    return pool.makeClass(name).toClass();\n  }\n}\n```\n\n借助了javassist来不停的加载新的class,直至爆掉永久代区域\n\n### 相关JVM参数\n\n-XX:PermSize=xxxm \n-XX:MaxPermSize=xxxm\n\n## java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\n\n这个异常表示: Metaspace的空间不足导致OOM异常发生\n\n### 什么是Metaspace\n\n有些不太专注JVM知识的小伙伴可能对Metaspace是陌生的, 因为这玩意是jdk8开始才正式登场的一块内存区域. 它专门用于替代原来的永久代, 且存在于本地内存中, 所以它的最大内存理论就是你电脑的最大内存. 和永久代不一样的是, 它可以进行自我扩容, 直到达到规定的MaxMetaspaceSize或者到达本机的最大可用内存为止. \n\nMetaspace接替了永久代的任务, 方法区的内容全部转移到此处(除了字符串常量池被挪到了堆中)\n\n不过相比于永久代, Metaspace进行GC的时候, 稍微改变了一点规则, Metaspace中类元数据是否需要回收是根据类加载器死活来来决定的, 这不同于永久代的, 只要类引用消失就会被回收. 这种规则会产生一些问题: \n\n1. https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit\n2. https://zhuanlan.zhihu.com/p/25634935\n\n\n所以在jdk8后使用反射,动态代理等会生成class对象的方法, 一定要小心MetaSpace是否会对其进行回收, 如果不会, 则需要进行相应的优化处理\n\n### 为什么要移除永久代\n\n1. 方法区大小难以设定，容易发生内存溢出。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出\n\n2. GC复杂且效率低。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。\n\n3. 促进HotSpot JVM与JRockit VM的融合。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。\n\n### 最小复现Demo\n\n```java\n\n/**\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n */\npublic class MetaSpaceOOMTest {\n\n    public static void main(String[] args) {\n        while (true) {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(OOMObject.class);\n            enhancer.setUseCache(false);\n            enhancer.setCallback(new MethodInterceptor() {\n                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n                    return proxy.invokeSuper(obj, args);\n                }\n            });\n            //无限创建动态代理，生成Class对象\n            enhancer.create();\n        }\n    }\n\n    static class OOMObject {\n\n    }\n}\n```\n\n### 如何解决这类异常\n\n1. 增大MetaSpace的最大空间大小\n\n2. 类似检查永久代异常一样的处理方式, 检查dump文件, 查看哪些类加载存在异常\n\n### 相关JVM参数\n\n -XX:MetaspaceSize=8m\n -XX:MaxMetaspaceSize=8m\n\n## java.lang.OutOfMemoryError: Unable to create new native thread\n\n这个异常表示,JVM无法再创建新的线程了!JVM能够创建的线程数是有限制的,\n\n### 复现demo\n```java\npublic class TestNativeOutOfMemoryError {  \n  \n    public static void main(String[] args) {  \n  \n        for (int i = 0;; i++) {  \n            System.out.println(\"i = \" + i);  \n            new Thread(new HoldThread()).start();  \n        }  \n    }  \n  \n}  \n  \nclass HoldThread extends Thread {  \n    CountDownLatch cdl = new CountDownLatch(1);  \n  \n    public HoldThread() {  \n        this.setDaemon(true);  \n    }  \n  \n    public void run() {  \n        try {  \n            cdl.await();  \n        } catch (InterruptedException e) {  \n        }  \n    }  \n}  \n```\n\n### 解决方案\n\n1. 去用线程池!\n\n2. 检查代码是否存在bug在不停的生成新线程!\n\n3. 如果确实需要那么多线程,那就修改OS和JVM的参数设置,并且加大你的硬件内存容量!\n\n## java.lang.OutOfMemoryError: request size bytes for reason \n\n如果你看到了这个异常, 说明你的OS内存不够用了, JVM想本地操作系统申请内存被拒绝, 导致JVM进程无法继续运行! 发生这个问题的原因一般是你的Java程序需要的内存容量超过了操作系统可提供给JVM的最大内存容量, 连swap内存都没了\n\n## java.lang.OutOfMemoryError: Requested array size exceeds VM\n\n当你正准备创建一个超过虚拟机允许的大小的数组时，这条错误就会出现在你眼前!\n\n\n\n## 尾\n\n本文对java常见的OOM异常做了总结说明,同时对于涉及的Java内存模型进行了说明,希望可以在日后遇到类似问题的时候可以沉着冷静,不慌不忙的来排查问题\n\n参考:\nhttps://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\nhttps://juejin.im/post/5ca02d046fb9a05e6a086cb7\nhttps://zhuanlan.zhihu.com/p/25634935\nhttps://www.zhihu.com/question/39990490/answer/369690291\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">","slug":"java-memory-error-solution-Theoretically","published":1,"updated":"2019-10-19T13:01:10.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9us004wm6elckxr3jpn","content":"<h2 id=\"被人说烂的Java内存模型\"><a href=\"#被人说烂的Java内存模型\" class=\"headerlink\" title=\"被人说烂的Java内存模型\"></a>被人说烂的Java内存模型</h2><p>Java内存模型的相关资料在网上实在是太多了,不管是过时的还是不过时的,网络上充斥的学习资料,比如各类研究Java内存模型的博文,也随着Java的发展,渐渐失去了其内容的准确性.</p>\n<p>要在那么多网络资料中找到对Java内存模型最新最全的说法,估计最好的方式只有翻阅Oracle的文档了!(字体大小太不舒服了!)</p>\n<p>我最近也不停的查阅和总结了不少网上的资料,不过由于类似资料实在太多,所以不打算重复的说明这个被人说烂的Java内存模型</p>\n<h2 id=\"从各种OOM异常出发来零距离的理解Java内存模型\"><a href=\"#从各种OOM异常出发来零距离的理解Java内存模型\" class=\"headerlink\" title=\"从各种OOM异常出发来零距离的理解Java内存模型\"></a>从各种OOM异常出发来零距离的理解Java内存模型</h2><p>对于大脑来说, 大脑更喜欢问题, 而不是从陈述开始.</p>\n<p>本文会从平时工作中可能会遇到的OOM异常出发,来一步步的深入理解我们所熟知的Java内存模型,从而哪怕可以更加理解一点这些方面的编程思想和设计精髓, 也是一个不小的进步</p>\n<h2 id=\"java-lang-StackOverFlowError\"><a href=\"#java-lang-StackOverFlowError\" class=\"headerlink\" title=\"java.lang.StackOverFlowError\"></a>java.lang.StackOverFlowError</h2><h3 id=\"这个Stack是什么鬼东西\"><a href=\"#这个Stack是什么鬼东西\" class=\"headerlink\" title=\"这个Stack是什么鬼东西\"></a>这个Stack是什么鬼东西</h3><p>Stack是个栈, 是一种数据结构, 会占用一块内存空间</p>\n<h3 id=\"Java在哪些地方会使用Stack来存储数据\"><a href=\"#Java在哪些地方会使用Stack来存储数据\" class=\"headerlink\" title=\"Java在哪些地方会使用Stack来存储数据\"></a>Java在哪些地方会使用Stack来存储数据</h3><ol>\n<li><p>最常见的就是虚拟机栈, 它是专门为java Method执行服务的一块内存, 每个方法调用都会往这个栈中压入一个栈帧(stackFrame), 由于方法可以互调,迭代,所以使用栈模型来服务Java Method是很适合的一种数据结构模型</p>\n</li>\n<li><p>别忘了还有一个本地方法栈, 它是专门为java的底层native方法执行服务的一块内存. 然而由于native方法都是术语jdk内部的测试稳定的程序,所以作为应用java开发人员的我们,一般是不可能遇到这个层面抛出的这个异常,同时我也几乎可以判断这种方法是不会直接抛出java.lang.StackOverFlowError异常的,所以我们可以缩小我们的关注范围,把抛出这个异常的原因全部指向于虚拟机栈即可</p>\n</li>\n</ol>\n<h3 id=\"这种异常是如何发生的\"><a href=\"#这种异常是如何发生的\" class=\"headerlink\" title=\"这种异常是如何发生的?\"></a>这种异常是如何发生的?</h3><p>我们知道每调用一次Java Method,就会往虚拟机栈中压入一个栈帧,在方法结束之前都不会出栈. 所以可以直接推理出在一个java线程运行过程中,如果同时调用的方法过多(比如递归的调用一个方法),就会出现这个异常</p>\n<p>事实上,除了恶性递归或者虚拟机栈可用内存过小的情况下, 也很难触发这种异常, 所以一般来说遇到这种异常几乎是可以直接断定程序中存在恶性递归导致的.</p>\n<p>这类问题在实际开发中遇到的并不多, 反而是在做一些算法问题的时候, 由于自己的疏忽从而引发不可预知的恶性递归</p>\n<h3 id=\"一个简单的Demo复现这种异常\"><a href=\"#一个简单的Demo复现这种异常\" class=\"headerlink\" title=\"一个简单的Demo复现这种异常\"></a>一个简单的Demo复现这种异常</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Main.main(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就会报StackOverFlowError, 因为main方法会被不停的循环执行, 直到超出虚拟机栈能够承受的大小</p>\n<h3 id=\"相关JVM参数\"><a href=\"#相关JVM参数\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-Xss, 正常取值128K~256K, 如果仍然不够可以进行加大, 这个选项对性能影响比较大，需要严格的测试哦</p>\n<h2 id=\"java-lang-OutOfMemoryError-Java-heap-space\"><a href=\"#java-lang-OutOfMemoryError-Java-heap-space\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Java heap space\"></a>java.lang.OutOfMemoryError: Java heap space</h2><p>这个异常表示, Java程序运行过程中遭遇了内存超限问题, 根本原因是Java的堆(Heap)内存超限</p>\n<h3 id=\"Java常用的内存空间对应计算机硬件是哪些组件\"><a href=\"#Java常用的内存空间对应计算机硬件是哪些组件\" class=\"headerlink\" title=\"Java常用的内存空间对应计算机硬件是哪些组件?\"></a>Java常用的内存空间对应计算机硬件是哪些组件?</h3><ol>\n<li>寄存器(比如每个Java线程独享程序计数器(Program Counter Register))</li>\n<li>RAM(也就是我们常说的内存,java中的虚拟机栈,堆内存都用的这块)</li>\n</ol>\n<h3 id=\"什么是Java的堆内存-Heap\"><a href=\"#什么是Java的堆内存-Heap\" class=\"headerlink\" title=\"什么是Java的堆内存(Heap)\"></a>什么是Java的堆内存(Heap)</h3><p>这就涉及了Java的运行时内存模型了~ </p>\n<p>我就简单来说下吧~</p>\n<p>一个JVM进程运行后, 会有一个主线程去运行我们写的Java程序, 那么每一个这种线程都拥有两大块内存空间</p>\n<ul>\n<li>线程共享内存空间<ul>\n<li>堆(Heap, 所有java的对象实例和数组,jdk8后还存放了字符串常量池和类静态变量)</li>\n<li>方法区(存放类元数据,符号引用,静态常量,jdk8后HotSpot将其从永久代移动到了Metaspace)</li>\n</ul>\n</li>\n<li>线程独享内存空间<ul>\n<li>虚拟机栈(为Java方法提供的一块内存空间,内部有栈帧组成)</li>\n<li>本地方法栈(为Java的native方法)</li>\n<li>程序计数器(PC寄存器,记录执行行号)</li>\n</ul>\n</li>\n</ul>\n<p>所以Java的堆内存就是JVM中设定的一块专门存储所有java的对象实例和数组,jdk8后甚至包括字符串常量池和类静态变量的内存区域</p>\n<h3 id=\"这种异常是如何发生的-1\"><a href=\"#这种异常是如何发生的-1\" class=\"headerlink\" title=\"这种异常是如何发生的?\"></a>这种异常是如何发生的?</h3><p>如果是1.7以前, Java堆溢出的问题根源是简单的, 就是运行时存在的对象实例和数组太多了!</p>\n<p>但是在1.8后, 由于还存放了字符串常量, 所以出现异常还有一种可能就是 interned Strings 过多导致的哦!</p>\n<h3 id=\"最小复现Demo\"><a href=\"#最小复现Demo\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><p>执行前最好先修改下JVM参数,防止等待时间过长<br>JVM参数:<br>-Xms20m<br>-Xmx20m<br>-XX:MetaspaceSize=10m<br>-XX:MaxMetaspaceSize=10m<br>-XX:-UseGCOverheadLimit</p>\n<p>JVM参数说明: 限制堆大小20M,方便快速报错! 由于我用的是jdk8,所以限制了元空间的大小为10m,说实话在这个情况下没啥用哈哈哈哈哈哈哈(就是觉得加上去舒服才加的,不信我说的你可以自己google)!最后一个参数-XX:-UseGCOverheadLimit这个有必要加一下. 因为我的demo程序属于那种恶意的程序,所以一次GC几乎没办法清理任何对象实例,因为他们都在被占用着! 所以必须使用这个参数来防止GC检测出我的这种恶意程序,从而正常的提示堆溢出的错误而不是GC Overhead limit exceeded错误(这个错误会在后面细讲)</p>\n<ol>\n<li>普通的对象实例爆掉堆内存</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Object&gt; list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>interned Strings过多爆掉堆内存(有待考证此代码的准确性,请不要盲目相信,要有自己的想法)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            list.add(String.valueOf(i++).intern());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码说明: 这串代码会每次生成一个新的interned String, 也就是数字递增对应的String表示, 所以最终爆掉内存, 证明了是interned Strings爆掉了内存, 相同的代码在jkd1.7以前是不会报堆内存溢出的, 请注意</p>\n<h3 id=\"相关JVM参数-1\"><a href=\"#相关JVM参数-1\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-Xms : 初始堆大小<br>-Xmx : 最大堆大小</p>\n<h3 id=\"如何处理\"><a href=\"#如何处理\" class=\"headerlink\" title=\"如何处理?\"></a>如何处理?</h3><p>查看jvm快照,分析占用内存大的对象是哪些, 然后定位到代码位置, 最后进行优化</p>\n<p>我一般使用visualVM来查看这类问题</p>\n<h2 id=\"java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded\"><a href=\"#java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: GC Overhead limit exceeded\"></a>java.lang.OutOfMemoryError: GC Overhead limit exceeded</h2><p>这个异常表示您的Java程序在运行的时候, 98%的时间都在执行GC回收, 但是每次回收只回收不到2%的空间!</p>\n<p>换句话说,其实这个异常往往是抛出java.lang.OutOfMemoryError: Java heap space异常的前兆! 因为Java程序每次都GC回收只能回收一点点内存空间,而你的程序却仍然在不停的产生新的对象实例, 这无疑导致了两种可能结果: </p>\n<ol>\n<li>不停的进行GC</li>\n<li>直接超出的堆内存大小</li>\n</ol>\n<p>这个问题还有一些细节需要我们去掌握,我们先从下面的例子来看吧</p>\n<h3 id=\"最小复现Demo-1\"><a href=\"#最小复现Demo-1\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Map map = System.getProperties();</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            map.put(r.nextInt(), <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码说明:  这段代码不停的往map中加入新的key-value,导致map大小不断变大! 当到达堆内存顶点的时候,GC发生, 但是清理完毕后,JVM发现清理前后的堆内存大小改变很小,不到2%; 这时候程序继续运行,继续往map中加数据!GC又发生了!又只清理不到2%! 如此不停的循环, 最后JVM得出了一个判断! 你的Java程序在占用CPU进行运算的时间里,98%的时间都特么的在垃圾回收,而每次GC居然只能回收堆内存的2%空间, 这肯定是代码存在问题,于是抛出了这个异常. 如果这个时候,你断定不是自己的代码问题, 使用JVM参数-XX:-UseGCOverheadLimit来关闭这种检查! 然后你就会发现你的程序抛出了堆溢出异常! 为什么呢? 因为堆内存不断的被占满,最终导致最后一次加入新的int的时候, 堆内存空间直接不足了!</p>\n<h3 id=\"这个异常一般如何处理\"><a href=\"#这个异常一般如何处理\" class=\"headerlink\" title=\"这个异常一般如何处理\"></a>这个异常一般如何处理</h3><p>和堆溢出的解决方式一致</p>\n<h3 id=\"相关JVM参数-2\"><a href=\"#相关JVM参数-2\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-XX:-UseGCOverheadLimit</p>\n<h2 id=\"java-lang-OutOfMemoryError-Permgen-space-jdk8已经不会出现此异常-请注意\"><a href=\"#java-lang-OutOfMemoryError-Permgen-space-jdk8已经不会出现此异常-请注意\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\"></a>java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)</h2><p>只存在于jdk1.8以前的java程序中! 这个异常表示,永久代大小不够!</p>\n<h3 id=\"什么是Permgen\"><a href=\"#什么是Permgen\" class=\"headerlink\" title=\"什么是Permgen\"></a>什么是Permgen</h3><p>是HotSpot在jdk1.8以前存在的一个区域,用于实现方法区</p>\n<h3 id=\"什么时候会产生这个错误以及如何解决\"><a href=\"#什么时候会产生这个错误以及如何解决\" class=\"headerlink\" title=\"什么时候会产生这个错误以及如何解决\"></a>什么时候会产生这个错误以及如何解决</h3><p>由于是实现方法区的地方, 所以肯定是类元信息或者常量（jdk1.7后部分常量已经挪到堆中），静态常量和JIT即时编译器编译后的代码等数据太多导致大小不够</p>\n<p>乍一看也许你会头晕! 不过没关系, 根据我两年的开发经验, 我碰到过的唯一一次Permgen space问题是因为SpringIoC容器一口气加载了过多的Bean导致的!</p>\n<p>所以正常来说, 直接扩大这个区域的大小即可!</p>\n<p>比如使用如下JVM参数扩大:<br>-XX:MaxNewSize=xxxm -XX:MaxPermSize=xxxm</p>\n<h3 id=\"最小复现Demo-2\"><a href=\"#最小复现Demo-2\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><p>运行要求: jdk版本 &lt;= 1.6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MicroGenerator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000_000</span>; i++) &#123;</span><br><span class=\"line\">      generate(<span class=\"string\">\"eu.plumbr.demo.Generated\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class <span class=\"title\">generate</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    ClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool.makeClass(name).toClass();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助了javassist来不停的加载新的class,直至爆掉永久代区域</p>\n<h3 id=\"相关JVM参数-3\"><a href=\"#相关JVM参数-3\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-XX:PermSize=xxxm<br>-XX:MaxPermSize=xxxm</p>\n<h2 id=\"java-lang-OutOfMemoryError-Metaspace-since-jdk8-才有可能抛出的错误\"><a href=\"#java-lang-OutOfMemoryError-Metaspace-since-jdk8-才有可能抛出的错误\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\"></a>java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)</h2><p>这个异常表示: Metaspace的空间不足导致OOM异常发生</p>\n<h3 id=\"什么是Metaspace\"><a href=\"#什么是Metaspace\" class=\"headerlink\" title=\"什么是Metaspace\"></a>什么是Metaspace</h3><p>有些不太专注JVM知识的小伙伴可能对Metaspace是陌生的, 因为这玩意是jdk8开始才正式登场的一块内存区域. 它专门用于替代原来的永久代, 且存在于本地内存中, 所以它的最大内存理论就是你电脑的最大内存. 和永久代不一样的是, 它可以进行自我扩容, 直到达到规定的MaxMetaspaceSize或者到达本机的最大可用内存为止. </p>\n<p>Metaspace接替了永久代的任务, 方法区的内容全部转移到此处(除了字符串常量池被挪到了堆中)</p>\n<p>不过相比于永久代, Metaspace进行GC的时候, 稍微改变了一点规则, Metaspace中类元数据是否需要回收是根据类加载器死活来来决定的, 这不同于永久代的, 只要类引用消失就会被回收. 这种规则会产生一些问题: </p>\n<ol>\n<li><a href=\"https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25634935\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25634935</a></li>\n</ol>\n<p>所以在jdk8后使用反射,动态代理等会生成class对象的方法, 一定要小心MetaSpace是否会对其进行回收, 如果不会, 则需要进行相应的优化处理</p>\n<h3 id=\"为什么要移除永久代\"><a href=\"#为什么要移除永久代\" class=\"headerlink\" title=\"为什么要移除永久代\"></a>为什么要移除永久代</h3><ol>\n<li><p>方法区大小难以设定，容易发生内存溢出。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出</p>\n</li>\n<li><p>GC复杂且效率低。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。</p>\n</li>\n<li><p>促进HotSpot JVM与JRockit VM的融合。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。</p>\n</li>\n</ol>\n<h3 id=\"最小复现Demo-3\"><a href=\"#最小复现Demo-3\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> -XX:MetaspaceSize=8m</span></span><br><span class=\"line\"><span class=\"comment\"> -XX:MaxMetaspaceSize=8m</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaSpaceOOMTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">            enhancer.setSuperclass(OOMObject.class);</span><br><span class=\"line\">            enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            enhancer.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> proxy.invokeSuper(obj, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">//无限创建动态代理，生成Class对象</span></span><br><span class=\"line\">            enhancer.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何解决这类异常\"><a href=\"#如何解决这类异常\" class=\"headerlink\" title=\"如何解决这类异常\"></a>如何解决这类异常</h3><ol>\n<li><p>增大MetaSpace的最大空间大小</p>\n</li>\n<li><p>类似检查永久代异常一样的处理方式, 检查dump文件, 查看哪些类加载存在异常</p>\n</li>\n</ol>\n<h3 id=\"相关JVM参数-4\"><a href=\"#相关JVM参数-4\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p> -XX:MetaspaceSize=8m<br> -XX:MaxMetaspaceSize=8m</p>\n<h2 id=\"java-lang-OutOfMemoryError-Unable-to-create-new-native-thread\"><a href=\"#java-lang-OutOfMemoryError-Unable-to-create-new-native-thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Unable to create new native thread\"></a>java.lang.OutOfMemoryError: Unable to create new native thread</h2><p>这个异常表示,JVM无法再创建新的线程了!JVM能够创建的线程数是有限制的,</p>\n<h3 id=\"复现demo\"><a href=\"#复现demo\" class=\"headerlink\" title=\"复现demo\"></a>复现demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNativeOutOfMemoryError</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;; i++) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"i = \"</span> + i);  </span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> HoldThread()).start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">    CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HoldThread</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setDaemon(<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            cdl.await();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li><p>去用线程池!</p>\n</li>\n<li><p>检查代码是否存在bug在不停的生成新线程!</p>\n</li>\n<li><p>如果确实需要那么多线程,那就修改OS和JVM的参数设置,并且加大你的硬件内存容量!</p>\n</li>\n</ol>\n<h2 id=\"java-lang-OutOfMemoryError-request-size-bytes-for-reason\"><a href=\"#java-lang-OutOfMemoryError-request-size-bytes-for-reason\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: request size bytes for reason\"></a>java.lang.OutOfMemoryError: request size bytes for reason</h2><p>如果你看到了这个异常, 说明你的OS内存不够用了, JVM想本地操作系统申请内存被拒绝, 导致JVM进程无法继续运行! 发生这个问题的原因一般是你的Java程序需要的内存容量超过了操作系统可提供给JVM的最大内存容量, 连swap内存都没了</p>\n<h2 id=\"java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM\"><a href=\"#java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Requested array size exceeds VM\"></a>java.lang.OutOfMemoryError: Requested array size exceeds VM</h2><p>当你正准备创建一个超过虚拟机允许的大小的数组时，这条错误就会出现在你眼前!</p>\n<h2 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h2><p>本文对java常见的OOM异常做了总结说明,同时对于涉及的Java内存模型进行了说明,希望可以在日后遇到类似问题的时候可以沉着冷静,不慌不忙的来排查问题</p>\n<p>参考:<br><a href=\"https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\" target=\"_blank\" rel=\"noopener\">https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973</a><br><a href=\"https://juejin.im/post/5ca02d046fb9a05e6a086cb7\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ca02d046fb9a05e6a086cb7</a><br><a href=\"https://zhuanlan.zhihu.com/p/25634935\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25634935</a><br><a href=\"https://www.zhihu.com/question/39990490/answer/369690291\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/39990490/answer/369690291</a></p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"被人说烂的Java内存模型\"><a href=\"#被人说烂的Java内存模型\" class=\"headerlink\" title=\"被人说烂的Java内存模型\"></a>被人说烂的Java内存模型</h2><p>Java内存模型的相关资料在网上实在是太多了,不管是过时的还是不过时的,网络上充斥的学习资料,比如各类研究Java内存模型的博文,也随着Java的发展,渐渐失去了其内容的准确性.</p>\n<p>要在那么多网络资料中找到对Java内存模型最新最全的说法,估计最好的方式只有翻阅Oracle的文档了!(字体大小太不舒服了!)</p>\n<p>我最近也不停的查阅和总结了不少网上的资料,不过由于类似资料实在太多,所以不打算重复的说明这个被人说烂的Java内存模型</p>\n<h2 id=\"从各种OOM异常出发来零距离的理解Java内存模型\"><a href=\"#从各种OOM异常出发来零距离的理解Java内存模型\" class=\"headerlink\" title=\"从各种OOM异常出发来零距离的理解Java内存模型\"></a>从各种OOM异常出发来零距离的理解Java内存模型</h2><p>对于大脑来说, 大脑更喜欢问题, 而不是从陈述开始.</p>\n<p>本文会从平时工作中可能会遇到的OOM异常出发,来一步步的深入理解我们所熟知的Java内存模型,从而哪怕可以更加理解一点这些方面的编程思想和设计精髓, 也是一个不小的进步</p>\n<h2 id=\"java-lang-StackOverFlowError\"><a href=\"#java-lang-StackOverFlowError\" class=\"headerlink\" title=\"java.lang.StackOverFlowError\"></a>java.lang.StackOverFlowError</h2><h3 id=\"这个Stack是什么鬼东西\"><a href=\"#这个Stack是什么鬼东西\" class=\"headerlink\" title=\"这个Stack是什么鬼东西\"></a>这个Stack是什么鬼东西</h3><p>Stack是个栈, 是一种数据结构, 会占用一块内存空间</p>\n<h3 id=\"Java在哪些地方会使用Stack来存储数据\"><a href=\"#Java在哪些地方会使用Stack来存储数据\" class=\"headerlink\" title=\"Java在哪些地方会使用Stack来存储数据\"></a>Java在哪些地方会使用Stack来存储数据</h3><ol>\n<li><p>最常见的就是虚拟机栈, 它是专门为java Method执行服务的一块内存, 每个方法调用都会往这个栈中压入一个栈帧(stackFrame), 由于方法可以互调,迭代,所以使用栈模型来服务Java Method是很适合的一种数据结构模型</p>\n</li>\n<li><p>别忘了还有一个本地方法栈, 它是专门为java的底层native方法执行服务的一块内存. 然而由于native方法都是术语jdk内部的测试稳定的程序,所以作为应用java开发人员的我们,一般是不可能遇到这个层面抛出的这个异常,同时我也几乎可以判断这种方法是不会直接抛出java.lang.StackOverFlowError异常的,所以我们可以缩小我们的关注范围,把抛出这个异常的原因全部指向于虚拟机栈即可</p>\n</li>\n</ol>\n<h3 id=\"这种异常是如何发生的\"><a href=\"#这种异常是如何发生的\" class=\"headerlink\" title=\"这种异常是如何发生的?\"></a>这种异常是如何发生的?</h3><p>我们知道每调用一次Java Method,就会往虚拟机栈中压入一个栈帧,在方法结束之前都不会出栈. 所以可以直接推理出在一个java线程运行过程中,如果同时调用的方法过多(比如递归的调用一个方法),就会出现这个异常</p>\n<p>事实上,除了恶性递归或者虚拟机栈可用内存过小的情况下, 也很难触发这种异常, 所以一般来说遇到这种异常几乎是可以直接断定程序中存在恶性递归导致的.</p>\n<p>这类问题在实际开发中遇到的并不多, 反而是在做一些算法问题的时候, 由于自己的疏忽从而引发不可预知的恶性递归</p>\n<h3 id=\"一个简单的Demo复现这种异常\"><a href=\"#一个简单的Demo复现这种异常\" class=\"headerlink\" title=\"一个简单的Demo复现这种异常\"></a>一个简单的Demo复现这种异常</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Main.main(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就会报StackOverFlowError, 因为main方法会被不停的循环执行, 直到超出虚拟机栈能够承受的大小</p>\n<h3 id=\"相关JVM参数\"><a href=\"#相关JVM参数\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-Xss, 正常取值128K~256K, 如果仍然不够可以进行加大, 这个选项对性能影响比较大，需要严格的测试哦</p>\n<h2 id=\"java-lang-OutOfMemoryError-Java-heap-space\"><a href=\"#java-lang-OutOfMemoryError-Java-heap-space\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Java heap space\"></a>java.lang.OutOfMemoryError: Java heap space</h2><p>这个异常表示, Java程序运行过程中遭遇了内存超限问题, 根本原因是Java的堆(Heap)内存超限</p>\n<h3 id=\"Java常用的内存空间对应计算机硬件是哪些组件\"><a href=\"#Java常用的内存空间对应计算机硬件是哪些组件\" class=\"headerlink\" title=\"Java常用的内存空间对应计算机硬件是哪些组件?\"></a>Java常用的内存空间对应计算机硬件是哪些组件?</h3><ol>\n<li>寄存器(比如每个Java线程独享程序计数器(Program Counter Register))</li>\n<li>RAM(也就是我们常说的内存,java中的虚拟机栈,堆内存都用的这块)</li>\n</ol>\n<h3 id=\"什么是Java的堆内存-Heap\"><a href=\"#什么是Java的堆内存-Heap\" class=\"headerlink\" title=\"什么是Java的堆内存(Heap)\"></a>什么是Java的堆内存(Heap)</h3><p>这就涉及了Java的运行时内存模型了~ </p>\n<p>我就简单来说下吧~</p>\n<p>一个JVM进程运行后, 会有一个主线程去运行我们写的Java程序, 那么每一个这种线程都拥有两大块内存空间</p>\n<ul>\n<li>线程共享内存空间<ul>\n<li>堆(Heap, 所有java的对象实例和数组,jdk8后还存放了字符串常量池和类静态变量)</li>\n<li>方法区(存放类元数据,符号引用,静态常量,jdk8后HotSpot将其从永久代移动到了Metaspace)</li>\n</ul>\n</li>\n<li>线程独享内存空间<ul>\n<li>虚拟机栈(为Java方法提供的一块内存空间,内部有栈帧组成)</li>\n<li>本地方法栈(为Java的native方法)</li>\n<li>程序计数器(PC寄存器,记录执行行号)</li>\n</ul>\n</li>\n</ul>\n<p>所以Java的堆内存就是JVM中设定的一块专门存储所有java的对象实例和数组,jdk8后甚至包括字符串常量池和类静态变量的内存区域</p>\n<h3 id=\"这种异常是如何发生的-1\"><a href=\"#这种异常是如何发生的-1\" class=\"headerlink\" title=\"这种异常是如何发生的?\"></a>这种异常是如何发生的?</h3><p>如果是1.7以前, Java堆溢出的问题根源是简单的, 就是运行时存在的对象实例和数组太多了!</p>\n<p>但是在1.8后, 由于还存放了字符串常量, 所以出现异常还有一种可能就是 interned Strings 过多导致的哦!</p>\n<h3 id=\"最小复现Demo\"><a href=\"#最小复现Demo\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><p>执行前最好先修改下JVM参数,防止等待时间过长<br>JVM参数:<br>-Xms20m<br>-Xmx20m<br>-XX:MetaspaceSize=10m<br>-XX:MaxMetaspaceSize=10m<br>-XX:-UseGCOverheadLimit</p>\n<p>JVM参数说明: 限制堆大小20M,方便快速报错! 由于我用的是jdk8,所以限制了元空间的大小为10m,说实话在这个情况下没啥用哈哈哈哈哈哈哈(就是觉得加上去舒服才加的,不信我说的你可以自己google)!最后一个参数-XX:-UseGCOverheadLimit这个有必要加一下. 因为我的demo程序属于那种恶意的程序,所以一次GC几乎没办法清理任何对象实例,因为他们都在被占用着! 所以必须使用这个参数来防止GC检测出我的这种恶意程序,从而正常的提示堆溢出的错误而不是GC Overhead limit exceeded错误(这个错误会在后面细讲)</p>\n<ol>\n<li>普通的对象实例爆掉堆内存</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Object&gt; list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>interned Strings过多爆掉堆内存(有待考证此代码的准确性,请不要盲目相信,要有自己的想法)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            list.add(String.valueOf(i++).intern());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码说明: 这串代码会每次生成一个新的interned String, 也就是数字递增对应的String表示, 所以最终爆掉内存, 证明了是interned Strings爆掉了内存, 相同的代码在jkd1.7以前是不会报堆内存溢出的, 请注意</p>\n<h3 id=\"相关JVM参数-1\"><a href=\"#相关JVM参数-1\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-Xms : 初始堆大小<br>-Xmx : 最大堆大小</p>\n<h3 id=\"如何处理\"><a href=\"#如何处理\" class=\"headerlink\" title=\"如何处理?\"></a>如何处理?</h3><p>查看jvm快照,分析占用内存大的对象是哪些, 然后定位到代码位置, 最后进行优化</p>\n<p>我一般使用visualVM来查看这类问题</p>\n<h2 id=\"java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded\"><a href=\"#java-lang-OutOfMemoryError-GC-Overhead-limit-exceeded\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: GC Overhead limit exceeded\"></a>java.lang.OutOfMemoryError: GC Overhead limit exceeded</h2><p>这个异常表示您的Java程序在运行的时候, 98%的时间都在执行GC回收, 但是每次回收只回收不到2%的空间!</p>\n<p>换句话说,其实这个异常往往是抛出java.lang.OutOfMemoryError: Java heap space异常的前兆! 因为Java程序每次都GC回收只能回收一点点内存空间,而你的程序却仍然在不停的产生新的对象实例, 这无疑导致了两种可能结果: </p>\n<ol>\n<li>不停的进行GC</li>\n<li>直接超出的堆内存大小</li>\n</ol>\n<p>这个问题还有一些细节需要我们去掌握,我们先从下面的例子来看吧</p>\n<h3 id=\"最小复现Demo-1\"><a href=\"#最小复现Demo-1\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Map map = System.getProperties();</span><br><span class=\"line\">        Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            map.put(r.nextInt(), <span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>代码说明:  这段代码不停的往map中加入新的key-value,导致map大小不断变大! 当到达堆内存顶点的时候,GC发生, 但是清理完毕后,JVM发现清理前后的堆内存大小改变很小,不到2%; 这时候程序继续运行,继续往map中加数据!GC又发生了!又只清理不到2%! 如此不停的循环, 最后JVM得出了一个判断! 你的Java程序在占用CPU进行运算的时间里,98%的时间都特么的在垃圾回收,而每次GC居然只能回收堆内存的2%空间, 这肯定是代码存在问题,于是抛出了这个异常. 如果这个时候,你断定不是自己的代码问题, 使用JVM参数-XX:-UseGCOverheadLimit来关闭这种检查! 然后你就会发现你的程序抛出了堆溢出异常! 为什么呢? 因为堆内存不断的被占满,最终导致最后一次加入新的int的时候, 堆内存空间直接不足了!</p>\n<h3 id=\"这个异常一般如何处理\"><a href=\"#这个异常一般如何处理\" class=\"headerlink\" title=\"这个异常一般如何处理\"></a>这个异常一般如何处理</h3><p>和堆溢出的解决方式一致</p>\n<h3 id=\"相关JVM参数-2\"><a href=\"#相关JVM参数-2\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-XX:-UseGCOverheadLimit</p>\n<h2 id=\"java-lang-OutOfMemoryError-Permgen-space-jdk8已经不会出现此异常-请注意\"><a href=\"#java-lang-OutOfMemoryError-Permgen-space-jdk8已经不会出现此异常-请注意\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)\"></a>java.lang.OutOfMemoryError: Permgen space  (jdk8已经不会出现此异常,请注意)</h2><p>只存在于jdk1.8以前的java程序中! 这个异常表示,永久代大小不够!</p>\n<h3 id=\"什么是Permgen\"><a href=\"#什么是Permgen\" class=\"headerlink\" title=\"什么是Permgen\"></a>什么是Permgen</h3><p>是HotSpot在jdk1.8以前存在的一个区域,用于实现方法区</p>\n<h3 id=\"什么时候会产生这个错误以及如何解决\"><a href=\"#什么时候会产生这个错误以及如何解决\" class=\"headerlink\" title=\"什么时候会产生这个错误以及如何解决\"></a>什么时候会产生这个错误以及如何解决</h3><p>由于是实现方法区的地方, 所以肯定是类元信息或者常量（jdk1.7后部分常量已经挪到堆中），静态常量和JIT即时编译器编译后的代码等数据太多导致大小不够</p>\n<p>乍一看也许你会头晕! 不过没关系, 根据我两年的开发经验, 我碰到过的唯一一次Permgen space问题是因为SpringIoC容器一口气加载了过多的Bean导致的!</p>\n<p>所以正常来说, 直接扩大这个区域的大小即可!</p>\n<p>比如使用如下JVM参数扩大:<br>-XX:MaxNewSize=xxxm -XX:MaxPermSize=xxxm</p>\n<h3 id=\"最小复现Demo-2\"><a href=\"#最小复现Demo-2\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><p>运行要求: jdk版本 &lt;= 1.6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MicroGenerator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000_000</span>; i++) &#123;</span><br><span class=\"line\">      generate(<span class=\"string\">\"eu.plumbr.demo.Generated\"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class <span class=\"title\">generate</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    ClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool.makeClass(name).toClass();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助了javassist来不停的加载新的class,直至爆掉永久代区域</p>\n<h3 id=\"相关JVM参数-3\"><a href=\"#相关JVM参数-3\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p>-XX:PermSize=xxxm<br>-XX:MaxPermSize=xxxm</p>\n<h2 id=\"java-lang-OutOfMemoryError-Metaspace-since-jdk8-才有可能抛出的错误\"><a href=\"#java-lang-OutOfMemoryError-Metaspace-since-jdk8-才有可能抛出的错误\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)\"></a>java.lang.OutOfMemoryError: Metaspace (since jdk8 才有可能抛出的错误)</h2><p>这个异常表示: Metaspace的空间不足导致OOM异常发生</p>\n<h3 id=\"什么是Metaspace\"><a href=\"#什么是Metaspace\" class=\"headerlink\" title=\"什么是Metaspace\"></a>什么是Metaspace</h3><p>有些不太专注JVM知识的小伙伴可能对Metaspace是陌生的, 因为这玩意是jdk8开始才正式登场的一块内存区域. 它专门用于替代原来的永久代, 且存在于本地内存中, 所以它的最大内存理论就是你电脑的最大内存. 和永久代不一样的是, 它可以进行自我扩容, 直到达到规定的MaxMetaspaceSize或者到达本机的最大可用内存为止. </p>\n<p>Metaspace接替了永久代的任务, 方法区的内容全部转移到此处(除了字符串常量池被挪到了堆中)</p>\n<p>不过相比于永久代, Metaspace进行GC的时候, 稍微改变了一点规则, Metaspace中类元数据是否需要回收是根据类加载器死活来来决定的, 这不同于永久代的, 只要类引用消失就会被回收. 这种规则会产生一些问题: </p>\n<ol>\n<li><a href=\"https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/xyghehehehe/article/details/78820135#commentsedit</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25634935\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25634935</a></li>\n</ol>\n<p>所以在jdk8后使用反射,动态代理等会生成class对象的方法, 一定要小心MetaSpace是否会对其进行回收, 如果不会, 则需要进行相应的优化处理</p>\n<h3 id=\"为什么要移除永久代\"><a href=\"#为什么要移除永久代\" class=\"headerlink\" title=\"为什么要移除永久代\"></a>为什么要移除永久代</h3><ol>\n<li><p>方法区大小难以设定，容易发生内存溢出。永久代会存放Class的相关信息，一般这些信息在编译期间就能确定大小。但是如果是在一些需要动态生成大量Class的应用中，如：Spring的动态代理、大量的JSP页面或动态生成JSP页面等，由于方法区的大小在一开始就要分配好，因此就能难确定大小，容易出现内存溢出</p>\n</li>\n<li><p>GC复杂且效率低。方法区存储了类的元数据信息和各种常量，它的内存回收目标理应当是对这些类型的卸载和常量的回收。但由于这些数据被类的实例引用，卸载条件变得复杂且严格，回收不当会导致堆中的类实例失去元数据信息和常量信息。因此，回收方法区内存不是一件简单高效的事情。</p>\n</li>\n<li><p>促进HotSpot JVM与JRockit VM的融合。JRockit没有方法区，移除永久代可以促进HotSpot JVM与JRockit VM的融合。</p>\n</li>\n</ol>\n<h3 id=\"最小复现Demo-3\"><a href=\"#最小复现Demo-3\" class=\"headerlink\" title=\"最小复现Demo\"></a>最小复现Demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> -XX:MetaspaceSize=8m</span></span><br><span class=\"line\"><span class=\"comment\"> -XX:MaxMetaspaceSize=8m</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MetaSpaceOOMTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">            enhancer.setSuperclass(OOMObject.class);</span><br><span class=\"line\">            enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            enhancer.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> proxy.invokeSuper(obj, args);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">//无限创建动态代理，生成Class对象</span></span><br><span class=\"line\">            enhancer.create();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何解决这类异常\"><a href=\"#如何解决这类异常\" class=\"headerlink\" title=\"如何解决这类异常\"></a>如何解决这类异常</h3><ol>\n<li><p>增大MetaSpace的最大空间大小</p>\n</li>\n<li><p>类似检查永久代异常一样的处理方式, 检查dump文件, 查看哪些类加载存在异常</p>\n</li>\n</ol>\n<h3 id=\"相关JVM参数-4\"><a href=\"#相关JVM参数-4\" class=\"headerlink\" title=\"相关JVM参数\"></a>相关JVM参数</h3><p> -XX:MetaspaceSize=8m<br> -XX:MaxMetaspaceSize=8m</p>\n<h2 id=\"java-lang-OutOfMemoryError-Unable-to-create-new-native-thread\"><a href=\"#java-lang-OutOfMemoryError-Unable-to-create-new-native-thread\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Unable to create new native thread\"></a>java.lang.OutOfMemoryError: Unable to create new native thread</h2><p>这个异常表示,JVM无法再创建新的线程了!JVM能够创建的线程数是有限制的,</p>\n<h3 id=\"复现demo\"><a href=\"#复现demo\" class=\"headerlink\" title=\"复现demo\"></a>复现demo</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestNativeOutOfMemoryError</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;; i++) &#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"i = \"</span> + i);  </span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> HoldThread()).start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HoldThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">    CountDownLatch cdl = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HoldThread</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setDaemon(<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            cdl.await();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li><p>去用线程池!</p>\n</li>\n<li><p>检查代码是否存在bug在不停的生成新线程!</p>\n</li>\n<li><p>如果确实需要那么多线程,那就修改OS和JVM的参数设置,并且加大你的硬件内存容量!</p>\n</li>\n</ol>\n<h2 id=\"java-lang-OutOfMemoryError-request-size-bytes-for-reason\"><a href=\"#java-lang-OutOfMemoryError-request-size-bytes-for-reason\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: request size bytes for reason\"></a>java.lang.OutOfMemoryError: request size bytes for reason</h2><p>如果你看到了这个异常, 说明你的OS内存不够用了, JVM想本地操作系统申请内存被拒绝, 导致JVM进程无法继续运行! 发生这个问题的原因一般是你的Java程序需要的内存容量超过了操作系统可提供给JVM的最大内存容量, 连swap内存都没了</p>\n<h2 id=\"java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM\"><a href=\"#java-lang-OutOfMemoryError-Requested-array-size-exceeds-VM\" class=\"headerlink\" title=\"java.lang.OutOfMemoryError: Requested array size exceeds VM\"></a>java.lang.OutOfMemoryError: Requested array size exceeds VM</h2><p>当你正准备创建一个超过虚拟机允许的大小的数组时，这条错误就会出现在你眼前!</p>\n<h2 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h2><p>本文对java常见的OOM异常做了总结说明,同时对于涉及的Java内存模型进行了说明,希望可以在日后遇到类似问题的时候可以沉着冷静,不慌不忙的来排查问题</p>\n<p>参考:<br><a href=\"https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973\" target=\"_blank\" rel=\"noopener\">https://medium.com/platform-engineer/understanding-java-memory-model-1d0863f6d973</a><br><a href=\"https://juejin.im/post/5ca02d046fb9a05e6a086cb7\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ca02d046fb9a05e6a086cb7</a><br><a href=\"https://zhuanlan.zhihu.com/p/25634935\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25634935</a><br><a href=\"https://www.zhihu.com/question/39990490/answer/369690291\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/39990490/answer/369690291</a></p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\"></div></div>"},{"title":"使用JavaSeurity进行数字签名(一)","date":"2019-04-24T06:26:26.000Z","_content":"\nHello,my blog.好久不见.由于最近项目有些地方有涉及到数字签名,RSA加解密,数字证书等东西.虽然对其不太了解,也没有过多的影响到自己的开发,但是抱着一颗好奇的心,对其相关知识进行了网上冲浪,现在对自己所看到的相关资料,进行自我整理以及消化.在这一章,你将了解到[什么是数字签名] [什么是公钥私钥] [JAVA如何生成公钥私钥进行数字签名]\n\n## 数字签名\n\n>数字签名何时诞生? \n\n1976年，Whitfield Diffie 和 Martin Hellman 两人第一次提出了数字签名的概念，当时虽然他们并没有现成的方法去得到数据的数字签名，但是他们推测可以使用相关数学函数去进行计算获取 到数字签名，这个方案是可行的。随后不久， Ronald Rivest, Adi Shamir, 和 Len Adleman便研究出了RSA算法，这是一个可以生成数字签名的算法(虽然当时RSA算法得到的数字签名被公认为还是不安全的)最后第一个可以为指定数据生成数字签名的软件包诞生， Lotus Notes 在1989年将其发布。\n\n>数字签名是什么\n\n简单来说，数字签名就是使用公认可靠的签名算法，使用公钥加密技术，生成一段数据的一串散列值。比如<code>hello,zazalu</code>这串数据的数字签名就类似于<code>BE459576785039E8</code>，我们可以将这一串值理解为非常难以破解的东西。\n\n>数字签名的用武之地在哪里\n\n我用一个生活中的简单例子来做个比喻.\n\n当我们收到自己爱人的来信时，激动不已的你急忙打开并且进行阅读。在这个简单的环节中，人的大脑其实自动帮你做了一个简单的验签的过程，你在看到那些熟悉的字体，熟悉的称呼或者一个简单的暗号后，你就为潜在的认为这封信确实是你的爱人写的，因为只有你熟悉他(她)的写法，只有你才知道暗号的含义。\n\n数字签名其实起到的就和“暗号”“写法”这类东西类似，都是用来证明发件人确实是你爱人用的。在没有数字签名之前，我们在网上收到一封重要文件，虽然系统提示你发件人为A，但是并不代表真的是A，有可能是B正好偷偷用A的电脑发的也说不定。总而言之，在没有数字签名的时候，你无法确定发件人是谁。而数字签名就是起到证明发件人确实是A的作用的东西。\n\n>数字签名如何生成？\n\n在前面，我有说到，数字签名是使用公认可靠的签名算法，使用公钥加密技术，为数据生成一串散列值。那么具体是怎么样的呢？\n\n首先我们来简单说明下公钥加密技术，目前我们常用于数字签名的公钥加密技术有两种，一个是RSA，还有一个是DSA。不过在进行数字签名这方面，他们的行为在语言描述上是一致的，这里也就不做区分说明。\n\n不管是RSA还是DSA算法，他们都需要两个密钥，一个叫公钥，一个叫私钥。使用加密算法前，我们需要先使用相关算法库，生成一对密钥对，使用公钥加密的信息只能由私钥进行解密\n\n是的，由于公钥是公有的，谁都能获取，所以按逻辑上来说，我们不应该使用私钥进行加密。但是我们却可以利用这一点来验证这串数据是由谁加密的，因为私钥是保密的。我使用私钥生成一串数字签名，那么只要使用我的公钥解析数字签名并且使用相同算法比较数据的散列值，如果是一样的，就说明这个数据就确实是由我发出的，不会有假。这也就说明了数字签名的有效性，可靠性。\n\n>参考\n\n上面几节，不知道讲没讲明白，但是我已经把我自己的理解全部整理了一遍，如果您还是不理解，不妨可以试试下面链接，都说明的不错\n\n1. https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted\n2. https://docs.oracle.com/javase/tutorial/security/apisign/step3.html\n3. https://www.jianshu.com/p/090e35989501\n\n## JAVA如何生成数字签名\n\n>获取RSA密钥对的接口方法getRSAKeyPair\n\n\n```java \npublic KeyPair getRSAKeyPair() throws NoSuchAlgorithmException{\n    //获得一个密码随机数生成器(用于密钥生成),使用SecureRandom以及SHA1PRNG \n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");//获得密钥生成器,java语言使用KeyPairGenerator\n    //SHA1PRNG意思便是使用SHA1密码散列函数,来生成伪随机数,PRNG = pseudo random number generator  \n    // 有兴趣的同学可以进行深入研究, 这里不会探讨此问题        \n    //我们的示例使用SHA1,当然你也可以试试SHA-2，SHA-3       \n    SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n    //初始化1024位密钥生成器       \n    keyGen.initialize(1024,random);        \n    //生成公钥私钥      \n    return keyGen.generateKeyPair();\n} \n```\n\n>使用我们刚刚生成的密钥对去生成指定文件的数字签名,getFileSignature接口参数,file为你指定的文件,keypair为你使用getRSAKeyPair生成的密钥对\n\n```java\npublic Signature getFileSignature(File file,KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n        if(file == null){\n            throw new FileNotFoundException();\n        }\n        //获取一个签名器,注意：生成密钥对的时候使用的是什么非对称加密算法和什么散列函数,String参数就填写对应\"XXXXwithXXX\"\n        //e.g. DSA密钥对,使用SHA1PRNG,则为\"SHA1withDSA\"\n        Signature dsa = Signature.getInstance(\"SHA1withRSA\");\n        //使用私钥初始化签名器,注意：请不要使用公钥初始化,只有私钥才能用来生成数字签名\n        PrivateKey priv = keyPair.getPrivate();\n        dsa.initSign(priv);\n        //使用签名器的update方法将要进行签名文件的数据导入到签名器中(光看api就感觉很类似导入的感觉,所以就这么说明了,如有违和的地方请指正)\n        dsa = updateDsaSignture(dsa,file);\n        //获取数字签名\n        return dsa;\n    }\n/**\n * 将文件数据导入至签名器中\n * @param dsa 签名器\n * @param file 需进行签名的文件\n * @Return: dsa 数据导入完毕的签名器\n * @Creator: hejj\n */\nprivate Signature updateDsaSignture(Signature dsa,File file) throws IOException, SignatureException {\n        FileInputStream fis = new FileInputStream(file);\n        BufferedInputStream bufin = new BufferedInputStream(fis);\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = bufin.read(buffer)) >= 0) {\n            dsa.update(buffer, 0, len);\n        }\n        bufin.close();\n        return dsa;\n    }\n```\n\n>把数字签名和公钥保存到本地\n\n```java\npublic void saveSignature(File signFile, Signature signature) throws IOException, SignatureException, NoSuchAlgorithmException, InvalidKeyException {\n        if(signFile == null){\n            signFile = new File(\"../resource/signFile\");\n        }\n        if(signFile.exists()){\n            signFile.delete();\n        }else{\n            signFile.createNewFile();\n        }\n        FileOutputStream sigfos = new FileOutputStream(signFile);\n        sigfos.write(signature.sign());\n        sigfos.close();\n    }\nprivate void savePublicKey(File pubKeyFile, PublicKey publicKey) throws NoSuchAlgorithmException, IOException {\n        if(pubKeyFile == null){\n            throw new FileNotFoundException();\n        }\n        if(pubKeyFile.exists()){\n            pubKeyFile.delete();\n        }else{\n            pubKeyFile.createNewFile();\n        }\n        byte[] key = publicKey.getEncoded();\n        FileOutputStream keyfos = new FileOutputStream(pubKeyFile);\n        keyfos.write(key);\n        keyfos.close();\n    }\n```\n\n>将所有接口整合，运行起来的demo\n\n```java\n@Test\npublic void signFile() throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n    MyRsaDsaUtil rsaDsaUtil = new MyRsaDsaUtil();\n    //获取密钥对\n    KeyPair keyPair = rsaDsaUtil.getRSAKeyPair();\n    //获取文件签名(请先预创建自己的rsaSigndFile文件)\n    String signFilePath = URLDecoder.decode(MyRsaDsaUtil.class.getResource(\"../resource/rsaSignFile\")\n            .getFile(),\"utf-8\") ;\n    Signature signature = rsaDsaUtil.getFileSignature(new File(signFilePath),keyPair);\n    //保存文件签名 保存后才能发送给别人哦\n    String signDataFileUrl = \"src/test/resource/signData\" ;\n    String pubKeyDataFileUrl = \"src/test/resource/pubKeyData\";\n    rsaDsaUtil.saveSignature(new File(signDataFileUrl),signature);\n    rsaDsaUtil.savePublicKey(new File(pubKeyDataFileUrl),keyPair.getPublic());\n}\n```\n\n## 小节\n\n本章我们先从数字签名的基础知识讲起，随后用了实际代码例子进行了练习，现在我们应该都已经学会了使用java生成某个文件的数字签名！\n\n在下一章中，我们将作为文件接收者，去验证这个数字签名是否正确，从而完成一整个使用数字签名验证发件人有效性的整个流程。\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","source":"_posts/使用JavaSeurity进行数字签名-一.md","raw":"---\ntitle: 使用JavaSeurity进行数字签名(一)\ntags: signature\ncategories: IT\ndate: 2019-04-24 14:26:26\n---\n\nHello,my blog.好久不见.由于最近项目有些地方有涉及到数字签名,RSA加解密,数字证书等东西.虽然对其不太了解,也没有过多的影响到自己的开发,但是抱着一颗好奇的心,对其相关知识进行了网上冲浪,现在对自己所看到的相关资料,进行自我整理以及消化.在这一章,你将了解到[什么是数字签名] [什么是公钥私钥] [JAVA如何生成公钥私钥进行数字签名]\n\n## 数字签名\n\n>数字签名何时诞生? \n\n1976年，Whitfield Diffie 和 Martin Hellman 两人第一次提出了数字签名的概念，当时虽然他们并没有现成的方法去得到数据的数字签名，但是他们推测可以使用相关数学函数去进行计算获取 到数字签名，这个方案是可行的。随后不久， Ronald Rivest, Adi Shamir, 和 Len Adleman便研究出了RSA算法，这是一个可以生成数字签名的算法(虽然当时RSA算法得到的数字签名被公认为还是不安全的)最后第一个可以为指定数据生成数字签名的软件包诞生， Lotus Notes 在1989年将其发布。\n\n>数字签名是什么\n\n简单来说，数字签名就是使用公认可靠的签名算法，使用公钥加密技术，生成一段数据的一串散列值。比如<code>hello,zazalu</code>这串数据的数字签名就类似于<code>BE459576785039E8</code>，我们可以将这一串值理解为非常难以破解的东西。\n\n>数字签名的用武之地在哪里\n\n我用一个生活中的简单例子来做个比喻.\n\n当我们收到自己爱人的来信时，激动不已的你急忙打开并且进行阅读。在这个简单的环节中，人的大脑其实自动帮你做了一个简单的验签的过程，你在看到那些熟悉的字体，熟悉的称呼或者一个简单的暗号后，你就为潜在的认为这封信确实是你的爱人写的，因为只有你熟悉他(她)的写法，只有你才知道暗号的含义。\n\n数字签名其实起到的就和“暗号”“写法”这类东西类似，都是用来证明发件人确实是你爱人用的。在没有数字签名之前，我们在网上收到一封重要文件，虽然系统提示你发件人为A，但是并不代表真的是A，有可能是B正好偷偷用A的电脑发的也说不定。总而言之，在没有数字签名的时候，你无法确定发件人是谁。而数字签名就是起到证明发件人确实是A的作用的东西。\n\n>数字签名如何生成？\n\n在前面，我有说到，数字签名是使用公认可靠的签名算法，使用公钥加密技术，为数据生成一串散列值。那么具体是怎么样的呢？\n\n首先我们来简单说明下公钥加密技术，目前我们常用于数字签名的公钥加密技术有两种，一个是RSA，还有一个是DSA。不过在进行数字签名这方面，他们的行为在语言描述上是一致的，这里也就不做区分说明。\n\n不管是RSA还是DSA算法，他们都需要两个密钥，一个叫公钥，一个叫私钥。使用加密算法前，我们需要先使用相关算法库，生成一对密钥对，使用公钥加密的信息只能由私钥进行解密\n\n是的，由于公钥是公有的，谁都能获取，所以按逻辑上来说，我们不应该使用私钥进行加密。但是我们却可以利用这一点来验证这串数据是由谁加密的，因为私钥是保密的。我使用私钥生成一串数字签名，那么只要使用我的公钥解析数字签名并且使用相同算法比较数据的散列值，如果是一样的，就说明这个数据就确实是由我发出的，不会有假。这也就说明了数字签名的有效性，可靠性。\n\n>参考\n\n上面几节，不知道讲没讲明白，但是我已经把我自己的理解全部整理了一遍，如果您还是不理解，不妨可以试试下面链接，都说明的不错\n\n1. https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted\n2. https://docs.oracle.com/javase/tutorial/security/apisign/step3.html\n3. https://www.jianshu.com/p/090e35989501\n\n## JAVA如何生成数字签名\n\n>获取RSA密钥对的接口方法getRSAKeyPair\n\n\n```java \npublic KeyPair getRSAKeyPair() throws NoSuchAlgorithmException{\n    //获得一个密码随机数生成器(用于密钥生成),使用SecureRandom以及SHA1PRNG \n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");//获得密钥生成器,java语言使用KeyPairGenerator\n    //SHA1PRNG意思便是使用SHA1密码散列函数,来生成伪随机数,PRNG = pseudo random number generator  \n    // 有兴趣的同学可以进行深入研究, 这里不会探讨此问题        \n    //我们的示例使用SHA1,当然你也可以试试SHA-2，SHA-3       \n    SecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n    //初始化1024位密钥生成器       \n    keyGen.initialize(1024,random);        \n    //生成公钥私钥      \n    return keyGen.generateKeyPair();\n} \n```\n\n>使用我们刚刚生成的密钥对去生成指定文件的数字签名,getFileSignature接口参数,file为你指定的文件,keypair为你使用getRSAKeyPair生成的密钥对\n\n```java\npublic Signature getFileSignature(File file,KeyPair keyPair) throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n        if(file == null){\n            throw new FileNotFoundException();\n        }\n        //获取一个签名器,注意：生成密钥对的时候使用的是什么非对称加密算法和什么散列函数,String参数就填写对应\"XXXXwithXXX\"\n        //e.g. DSA密钥对,使用SHA1PRNG,则为\"SHA1withDSA\"\n        Signature dsa = Signature.getInstance(\"SHA1withRSA\");\n        //使用私钥初始化签名器,注意：请不要使用公钥初始化,只有私钥才能用来生成数字签名\n        PrivateKey priv = keyPair.getPrivate();\n        dsa.initSign(priv);\n        //使用签名器的update方法将要进行签名文件的数据导入到签名器中(光看api就感觉很类似导入的感觉,所以就这么说明了,如有违和的地方请指正)\n        dsa = updateDsaSignture(dsa,file);\n        //获取数字签名\n        return dsa;\n    }\n/**\n * 将文件数据导入至签名器中\n * @param dsa 签名器\n * @param file 需进行签名的文件\n * @Return: dsa 数据导入完毕的签名器\n * @Creator: hejj\n */\nprivate Signature updateDsaSignture(Signature dsa,File file) throws IOException, SignatureException {\n        FileInputStream fis = new FileInputStream(file);\n        BufferedInputStream bufin = new BufferedInputStream(fis);\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = bufin.read(buffer)) >= 0) {\n            dsa.update(buffer, 0, len);\n        }\n        bufin.close();\n        return dsa;\n    }\n```\n\n>把数字签名和公钥保存到本地\n\n```java\npublic void saveSignature(File signFile, Signature signature) throws IOException, SignatureException, NoSuchAlgorithmException, InvalidKeyException {\n        if(signFile == null){\n            signFile = new File(\"../resource/signFile\");\n        }\n        if(signFile.exists()){\n            signFile.delete();\n        }else{\n            signFile.createNewFile();\n        }\n        FileOutputStream sigfos = new FileOutputStream(signFile);\n        sigfos.write(signature.sign());\n        sigfos.close();\n    }\nprivate void savePublicKey(File pubKeyFile, PublicKey publicKey) throws NoSuchAlgorithmException, IOException {\n        if(pubKeyFile == null){\n            throw new FileNotFoundException();\n        }\n        if(pubKeyFile.exists()){\n            pubKeyFile.delete();\n        }else{\n            pubKeyFile.createNewFile();\n        }\n        byte[] key = publicKey.getEncoded();\n        FileOutputStream keyfos = new FileOutputStream(pubKeyFile);\n        keyfos.write(key);\n        keyfos.close();\n    }\n```\n\n>将所有接口整合，运行起来的demo\n\n```java\n@Test\npublic void signFile() throws NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException {\n    MyRsaDsaUtil rsaDsaUtil = new MyRsaDsaUtil();\n    //获取密钥对\n    KeyPair keyPair = rsaDsaUtil.getRSAKeyPair();\n    //获取文件签名(请先预创建自己的rsaSigndFile文件)\n    String signFilePath = URLDecoder.decode(MyRsaDsaUtil.class.getResource(\"../resource/rsaSignFile\")\n            .getFile(),\"utf-8\") ;\n    Signature signature = rsaDsaUtil.getFileSignature(new File(signFilePath),keyPair);\n    //保存文件签名 保存后才能发送给别人哦\n    String signDataFileUrl = \"src/test/resource/signData\" ;\n    String pubKeyDataFileUrl = \"src/test/resource/pubKeyData\";\n    rsaDsaUtil.saveSignature(new File(signDataFileUrl),signature);\n    rsaDsaUtil.savePublicKey(new File(pubKeyDataFileUrl),keyPair.getPublic());\n}\n```\n\n## 小节\n\n本章我们先从数字签名的基础知识讲起，随后用了实际代码例子进行了练习，现在我们应该都已经学会了使用java生成某个文件的数字签名！\n\n在下一章中，我们将作为文件接收者，去验证这个数字签名是否正确，从而完成一整个使用数字签名验证发件人有效性的整个流程。\n\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n","slug":"使用JavaSeurity进行数字签名-一","published":1,"updated":"2019-10-19T13:01:10.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9ut004zm6el3nqp4a0v","content":"<p>Hello,my blog.好久不见.由于最近项目有些地方有涉及到数字签名,RSA加解密,数字证书等东西.虽然对其不太了解,也没有过多的影响到自己的开发,但是抱着一颗好奇的心,对其相关知识进行了网上冲浪,现在对自己所看到的相关资料,进行自我整理以及消化.在这一章,你将了解到[什么是数字签名] [什么是公钥私钥] [JAVA如何生成公钥私钥进行数字签名]</p>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><blockquote>\n<p>数字签名何时诞生? </p>\n</blockquote>\n<p>1976年，Whitfield Diffie 和 Martin Hellman 两人第一次提出了数字签名的概念，当时虽然他们并没有现成的方法去得到数据的数字签名，但是他们推测可以使用相关数学函数去进行计算获取 到数字签名，这个方案是可行的。随后不久， Ronald Rivest, Adi Shamir, 和 Len Adleman便研究出了RSA算法，这是一个可以生成数字签名的算法(虽然当时RSA算法得到的数字签名被公认为还是不安全的)最后第一个可以为指定数据生成数字签名的软件包诞生， Lotus Notes 在1989年将其发布。</p>\n<blockquote>\n<p>数字签名是什么</p>\n</blockquote>\n<p>简单来说，数字签名就是使用公认可靠的签名算法，使用公钥加密技术，生成一段数据的一串散列值。比如<code>hello,zazalu</code>这串数据的数字签名就类似于<code>BE459576785039E8</code>，我们可以将这一串值理解为非常难以破解的东西。</p>\n<blockquote>\n<p>数字签名的用武之地在哪里</p>\n</blockquote>\n<p>我用一个生活中的简单例子来做个比喻.</p>\n<p>当我们收到自己爱人的来信时，激动不已的你急忙打开并且进行阅读。在这个简单的环节中，人的大脑其实自动帮你做了一个简单的验签的过程，你在看到那些熟悉的字体，熟悉的称呼或者一个简单的暗号后，你就为潜在的认为这封信确实是你的爱人写的，因为只有你熟悉他(她)的写法，只有你才知道暗号的含义。</p>\n<p>数字签名其实起到的就和“暗号”“写法”这类东西类似，都是用来证明发件人确实是你爱人用的。在没有数字签名之前，我们在网上收到一封重要文件，虽然系统提示你发件人为A，但是并不代表真的是A，有可能是B正好偷偷用A的电脑发的也说不定。总而言之，在没有数字签名的时候，你无法确定发件人是谁。而数字签名就是起到证明发件人确实是A的作用的东西。</p>\n<blockquote>\n<p>数字签名如何生成？</p>\n</blockquote>\n<p>在前面，我有说到，数字签名是使用公认可靠的签名算法，使用公钥加密技术，为数据生成一串散列值。那么具体是怎么样的呢？</p>\n<p>首先我们来简单说明下公钥加密技术，目前我们常用于数字签名的公钥加密技术有两种，一个是RSA，还有一个是DSA。不过在进行数字签名这方面，他们的行为在语言描述上是一致的，这里也就不做区分说明。</p>\n<p>不管是RSA还是DSA算法，他们都需要两个密钥，一个叫公钥，一个叫私钥。使用加密算法前，我们需要先使用相关算法库，生成一对密钥对，使用公钥加密的信息只能由私钥进行解密</p>\n<p>是的，由于公钥是公有的，谁都能获取，所以按逻辑上来说，我们不应该使用私钥进行加密。但是我们却可以利用这一点来验证这串数据是由谁加密的，因为私钥是保密的。我使用私钥生成一串数字签名，那么只要使用我的公钥解析数字签名并且使用相同算法比较数据的散列值，如果是一样的，就说明这个数据就确实是由我发出的，不会有假。这也就说明了数字签名的有效性，可靠性。</p>\n<blockquote>\n<p>参考</p>\n</blockquote>\n<p>上面几节，不知道讲没讲明白，但是我已经把我自己的理解全部整理了一遍，如果您还是不理解，不妨可以试试下面链接，都说明的不错</p>\n<ol>\n<li><a href=\"https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted\" target=\"_blank\" rel=\"noopener\">https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/security/apisign/step3.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/tutorial/security/apisign/step3.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/090e35989501\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/090e35989501</a></li>\n</ol>\n<h2 id=\"JAVA如何生成数字签名\"><a href=\"#JAVA如何生成数字签名\" class=\"headerlink\" title=\"JAVA如何生成数字签名\"></a>JAVA如何生成数字签名</h2><blockquote>\n<p>获取RSA密钥对的接口方法getRSAKeyPair</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> KeyPair <span class=\"title\">getRSAKeyPair</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获得一个密码随机数生成器(用于密钥生成),使用SecureRandom以及SHA1PRNG </span></span><br><span class=\"line\">    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);<span class=\"comment\">//获得密钥生成器,java语言使用KeyPairGenerator</span></span><br><span class=\"line\">    <span class=\"comment\">//SHA1PRNG意思便是使用SHA1密码散列函数,来生成伪随机数,PRNG = pseudo random number generator  </span></span><br><span class=\"line\">    <span class=\"comment\">// 有兴趣的同学可以进行深入研究, 这里不会探讨此问题        </span></span><br><span class=\"line\">    <span class=\"comment\">//我们的示例使用SHA1,当然你也可以试试SHA-2，SHA-3       </span></span><br><span class=\"line\">    SecureRandom random = SecureRandom.getInstance(<span class=\"string\">\"SHA1PRNG\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//初始化1024位密钥生成器       </span></span><br><span class=\"line\">    keyGen.initialize(<span class=\"number\">1024</span>,random);        </span><br><span class=\"line\">    <span class=\"comment\">//生成公钥私钥      </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> keyGen.generateKeyPair();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用我们刚刚生成的密钥对去生成指定文件的数字签名,getFileSignature接口参数,file为你指定的文件,keypair为你使用getRSAKeyPair生成的密钥对</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Signature <span class=\"title\">getFileSignature</span><span class=\"params\">(File file,KeyPair keyPair)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(file == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取一个签名器,注意：生成密钥对的时候使用的是什么非对称加密算法和什么散列函数,String参数就填写对应\"XXXXwithXXX\"</span></span><br><span class=\"line\">        <span class=\"comment\">//e.g. DSA密钥对,使用SHA1PRNG,则为\"SHA1withDSA\"</span></span><br><span class=\"line\">        Signature dsa = Signature.getInstance(<span class=\"string\">\"SHA1withRSA\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用私钥初始化签名器,注意：请不要使用公钥初始化,只有私钥才能用来生成数字签名</span></span><br><span class=\"line\">        PrivateKey priv = keyPair.getPrivate();</span><br><span class=\"line\">        dsa.initSign(priv);</span><br><span class=\"line\">        <span class=\"comment\">//使用签名器的update方法将要进行签名文件的数据导入到签名器中(光看api就感觉很类似导入的感觉,所以就这么说明了,如有违和的地方请指正)</span></span><br><span class=\"line\">        dsa = updateDsaSignture(dsa,file);</span><br><span class=\"line\">        <span class=\"comment\">//获取数字签名</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dsa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将文件数据导入至签名器中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dsa 签名器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> file 需进行签名的文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Return</span>: dsa 数据导入完毕的签名器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Creator</span>: hejj</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Signature <span class=\"title\">updateDsaSignture</span><span class=\"params\">(Signature dsa,File file)</span> <span class=\"keyword\">throws</span> IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        BufferedInputStream bufin = <span class=\"keyword\">new</span> BufferedInputStream(fis);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = bufin.read(buffer)) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            dsa.update(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufin.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dsa;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把数字签名和公钥保存到本地</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveSignature</span><span class=\"params\">(File signFile, Signature signature)</span> <span class=\"keyword\">throws</span> IOException, SignatureException, NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(signFile == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            signFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"../resource/signFile\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(signFile.exists())&#123;</span><br><span class=\"line\">            signFile.delete();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            signFile.createNewFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileOutputStream sigfos = <span class=\"keyword\">new</span> FileOutputStream(signFile);</span><br><span class=\"line\">        sigfos.write(signature.sign());</span><br><span class=\"line\">        sigfos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">savePublicKey</span><span class=\"params\">(File pubKeyFile, PublicKey publicKey)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pubKeyFile == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pubKeyFile.exists())&#123;</span><br><span class=\"line\">            pubKeyFile.delete();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pubKeyFile.createNewFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = publicKey.getEncoded();</span><br><span class=\"line\">        FileOutputStream keyfos = <span class=\"keyword\">new</span> FileOutputStream(pubKeyFile);</span><br><span class=\"line\">        keyfos.write(key);</span><br><span class=\"line\">        keyfos.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将所有接口整合，运行起来的demo</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">signFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">    MyRsaDsaUtil rsaDsaUtil = <span class=\"keyword\">new</span> MyRsaDsaUtil();</span><br><span class=\"line\">    <span class=\"comment\">//获取密钥对</span></span><br><span class=\"line\">    KeyPair keyPair = rsaDsaUtil.getRSAKeyPair();</span><br><span class=\"line\">    <span class=\"comment\">//获取文件签名(请先预创建自己的rsaSigndFile文件)</span></span><br><span class=\"line\">    String signFilePath = URLDecoder.decode(MyRsaDsaUtil.class.getResource(<span class=\"string\">\"../resource/rsaSignFile\"</span>)</span><br><span class=\"line\">            .getFile(),<span class=\"string\">\"utf-8\"</span>) ;</span><br><span class=\"line\">    Signature signature = rsaDsaUtil.getFileSignature(<span class=\"keyword\">new</span> File(signFilePath),keyPair);</span><br><span class=\"line\">    <span class=\"comment\">//保存文件签名 保存后才能发送给别人哦</span></span><br><span class=\"line\">    String signDataFileUrl = <span class=\"string\">\"src/test/resource/signData\"</span> ;</span><br><span class=\"line\">    String pubKeyDataFileUrl = <span class=\"string\">\"src/test/resource/pubKeyData\"</span>;</span><br><span class=\"line\">    rsaDsaUtil.saveSignature(<span class=\"keyword\">new</span> File(signDataFileUrl),signature);</span><br><span class=\"line\">    rsaDsaUtil.savePublicKey(<span class=\"keyword\">new</span> File(pubKeyDataFileUrl),keyPair.getPublic());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h2><p>本章我们先从数字签名的基础知识讲起，随后用了实际代码例子进行了练习，现在我们应该都已经学会了使用java生成某个文件的数字签名！</p>\n<p>在下一章中，我们将作为文件接收者，去验证这个数字签名是否正确，从而完成一整个使用数字签名验证发件人有效性的整个流程。</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>","site":{"data":{}},"excerpt":"","more":"<p>Hello,my blog.好久不见.由于最近项目有些地方有涉及到数字签名,RSA加解密,数字证书等东西.虽然对其不太了解,也没有过多的影响到自己的开发,但是抱着一颗好奇的心,对其相关知识进行了网上冲浪,现在对自己所看到的相关资料,进行自我整理以及消化.在这一章,你将了解到[什么是数字签名] [什么是公钥私钥] [JAVA如何生成公钥私钥进行数字签名]</p>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><blockquote>\n<p>数字签名何时诞生? </p>\n</blockquote>\n<p>1976年，Whitfield Diffie 和 Martin Hellman 两人第一次提出了数字签名的概念，当时虽然他们并没有现成的方法去得到数据的数字签名，但是他们推测可以使用相关数学函数去进行计算获取 到数字签名，这个方案是可行的。随后不久， Ronald Rivest, Adi Shamir, 和 Len Adleman便研究出了RSA算法，这是一个可以生成数字签名的算法(虽然当时RSA算法得到的数字签名被公认为还是不安全的)最后第一个可以为指定数据生成数字签名的软件包诞生， Lotus Notes 在1989年将其发布。</p>\n<blockquote>\n<p>数字签名是什么</p>\n</blockquote>\n<p>简单来说，数字签名就是使用公认可靠的签名算法，使用公钥加密技术，生成一段数据的一串散列值。比如<code>hello,zazalu</code>这串数据的数字签名就类似于<code>BE459576785039E8</code>，我们可以将这一串值理解为非常难以破解的东西。</p>\n<blockquote>\n<p>数字签名的用武之地在哪里</p>\n</blockquote>\n<p>我用一个生活中的简单例子来做个比喻.</p>\n<p>当我们收到自己爱人的来信时，激动不已的你急忙打开并且进行阅读。在这个简单的环节中，人的大脑其实自动帮你做了一个简单的验签的过程，你在看到那些熟悉的字体，熟悉的称呼或者一个简单的暗号后，你就为潜在的认为这封信确实是你的爱人写的，因为只有你熟悉他(她)的写法，只有你才知道暗号的含义。</p>\n<p>数字签名其实起到的就和“暗号”“写法”这类东西类似，都是用来证明发件人确实是你爱人用的。在没有数字签名之前，我们在网上收到一封重要文件，虽然系统提示你发件人为A，但是并不代表真的是A，有可能是B正好偷偷用A的电脑发的也说不定。总而言之，在没有数字签名的时候，你无法确定发件人是谁。而数字签名就是起到证明发件人确实是A的作用的东西。</p>\n<blockquote>\n<p>数字签名如何生成？</p>\n</blockquote>\n<p>在前面，我有说到，数字签名是使用公认可靠的签名算法，使用公钥加密技术，为数据生成一串散列值。那么具体是怎么样的呢？</p>\n<p>首先我们来简单说明下公钥加密技术，目前我们常用于数字签名的公钥加密技术有两种，一个是RSA，还有一个是DSA。不过在进行数字签名这方面，他们的行为在语言描述上是一致的，这里也就不做区分说明。</p>\n<p>不管是RSA还是DSA算法，他们都需要两个密钥，一个叫公钥，一个叫私钥。使用加密算法前，我们需要先使用相关算法库，生成一对密钥对，使用公钥加密的信息只能由私钥进行解密</p>\n<p>是的，由于公钥是公有的，谁都能获取，所以按逻辑上来说，我们不应该使用私钥进行加密。但是我们却可以利用这一点来验证这串数据是由谁加密的，因为私钥是保密的。我使用私钥生成一串数字签名，那么只要使用我的公钥解析数字签名并且使用相同算法比较数据的散列值，如果是一样的，就说明这个数据就确实是由我发出的，不会有假。这也就说明了数字签名的有效性，可靠性。</p>\n<blockquote>\n<p>参考</p>\n</blockquote>\n<p>上面几节，不知道讲没讲明白，但是我已经把我自己的理解全部整理了一遍，如果您还是不理解，不妨可以试试下面链接，都说明的不错</p>\n<ol>\n<li><a href=\"https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted\" target=\"_blank\" rel=\"noopener\">https://security.stackexchange.com/questions/66392/why-should-i-sign-data-thats-already-encrypted</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/security/apisign/step3.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/tutorial/security/apisign/step3.html</a></li>\n<li><a href=\"https://www.jianshu.com/p/090e35989501\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/090e35989501</a></li>\n</ol>\n<h2 id=\"JAVA如何生成数字签名\"><a href=\"#JAVA如何生成数字签名\" class=\"headerlink\" title=\"JAVA如何生成数字签名\"></a>JAVA如何生成数字签名</h2><blockquote>\n<p>获取RSA密钥对的接口方法getRSAKeyPair</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> KeyPair <span class=\"title\">getRSAKeyPair</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获得一个密码随机数生成器(用于密钥生成),使用SecureRandom以及SHA1PRNG </span></span><br><span class=\"line\">    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(<span class=\"string\">\"RSA\"</span>);<span class=\"comment\">//获得密钥生成器,java语言使用KeyPairGenerator</span></span><br><span class=\"line\">    <span class=\"comment\">//SHA1PRNG意思便是使用SHA1密码散列函数,来生成伪随机数,PRNG = pseudo random number generator  </span></span><br><span class=\"line\">    <span class=\"comment\">// 有兴趣的同学可以进行深入研究, 这里不会探讨此问题        </span></span><br><span class=\"line\">    <span class=\"comment\">//我们的示例使用SHA1,当然你也可以试试SHA-2，SHA-3       </span></span><br><span class=\"line\">    SecureRandom random = SecureRandom.getInstance(<span class=\"string\">\"SHA1PRNG\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//初始化1024位密钥生成器       </span></span><br><span class=\"line\">    keyGen.initialize(<span class=\"number\">1024</span>,random);        </span><br><span class=\"line\">    <span class=\"comment\">//生成公钥私钥      </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> keyGen.generateKeyPair();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用我们刚刚生成的密钥对去生成指定文件的数字签名,getFileSignature接口参数,file为你指定的文件,keypair为你使用getRSAKeyPair生成的密钥对</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Signature <span class=\"title\">getFileSignature</span><span class=\"params\">(File file,KeyPair keyPair)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(file == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取一个签名器,注意：生成密钥对的时候使用的是什么非对称加密算法和什么散列函数,String参数就填写对应\"XXXXwithXXX\"</span></span><br><span class=\"line\">        <span class=\"comment\">//e.g. DSA密钥对,使用SHA1PRNG,则为\"SHA1withDSA\"</span></span><br><span class=\"line\">        Signature dsa = Signature.getInstance(<span class=\"string\">\"SHA1withRSA\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用私钥初始化签名器,注意：请不要使用公钥初始化,只有私钥才能用来生成数字签名</span></span><br><span class=\"line\">        PrivateKey priv = keyPair.getPrivate();</span><br><span class=\"line\">        dsa.initSign(priv);</span><br><span class=\"line\">        <span class=\"comment\">//使用签名器的update方法将要进行签名文件的数据导入到签名器中(光看api就感觉很类似导入的感觉,所以就这么说明了,如有违和的地方请指正)</span></span><br><span class=\"line\">        dsa = updateDsaSignture(dsa,file);</span><br><span class=\"line\">        <span class=\"comment\">//获取数字签名</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dsa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将文件数据导入至签名器中</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> dsa 签名器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> file 需进行签名的文件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Return</span>: dsa 数据导入完毕的签名器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Creator</span>: hejj</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Signature <span class=\"title\">updateDsaSignture</span><span class=\"params\">(Signature dsa,File file)</span> <span class=\"keyword\">throws</span> IOException, SignatureException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">        BufferedInputStream bufin = <span class=\"keyword\">new</span> BufferedInputStream(fis);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = bufin.read(buffer)) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            dsa.update(buffer, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bufin.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dsa;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>把数字签名和公钥保存到本地</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveSignature</span><span class=\"params\">(File signFile, Signature signature)</span> <span class=\"keyword\">throws</span> IOException, SignatureException, NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(signFile == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            signFile = <span class=\"keyword\">new</span> File(<span class=\"string\">\"../resource/signFile\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(signFile.exists())&#123;</span><br><span class=\"line\">            signFile.delete();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            signFile.createNewFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FileOutputStream sigfos = <span class=\"keyword\">new</span> FileOutputStream(signFile);</span><br><span class=\"line\">        sigfos.write(signature.sign());</span><br><span class=\"line\">        sigfos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">savePublicKey</span><span class=\"params\">(File pubKeyFile, PublicKey publicKey)</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pubKeyFile == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pubKeyFile.exists())&#123;</span><br><span class=\"line\">            pubKeyFile.delete();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            pubKeyFile.createNewFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] key = publicKey.getEncoded();</span><br><span class=\"line\">        FileOutputStream keyfos = <span class=\"keyword\">new</span> FileOutputStream(pubKeyFile);</span><br><span class=\"line\">        keyfos.write(key);</span><br><span class=\"line\">        keyfos.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将所有接口整合，运行起来的demo</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">signFile</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchAlgorithmException, InvalidKeyException, IOException, SignatureException </span>&#123;</span><br><span class=\"line\">    MyRsaDsaUtil rsaDsaUtil = <span class=\"keyword\">new</span> MyRsaDsaUtil();</span><br><span class=\"line\">    <span class=\"comment\">//获取密钥对</span></span><br><span class=\"line\">    KeyPair keyPair = rsaDsaUtil.getRSAKeyPair();</span><br><span class=\"line\">    <span class=\"comment\">//获取文件签名(请先预创建自己的rsaSigndFile文件)</span></span><br><span class=\"line\">    String signFilePath = URLDecoder.decode(MyRsaDsaUtil.class.getResource(<span class=\"string\">\"../resource/rsaSignFile\"</span>)</span><br><span class=\"line\">            .getFile(),<span class=\"string\">\"utf-8\"</span>) ;</span><br><span class=\"line\">    Signature signature = rsaDsaUtil.getFileSignature(<span class=\"keyword\">new</span> File(signFilePath),keyPair);</span><br><span class=\"line\">    <span class=\"comment\">//保存文件签名 保存后才能发送给别人哦</span></span><br><span class=\"line\">    String signDataFileUrl = <span class=\"string\">\"src/test/resource/signData\"</span> ;</span><br><span class=\"line\">    String pubKeyDataFileUrl = <span class=\"string\">\"src/test/resource/pubKeyData\"</span>;</span><br><span class=\"line\">    rsaDsaUtil.saveSignature(<span class=\"keyword\">new</span> File(signDataFileUrl),signature);</span><br><span class=\"line\">    rsaDsaUtil.savePublicKey(<span class=\"keyword\">new</span> File(pubKeyDataFileUrl),keyPair.getPublic());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h2><p>本章我们先从数字签名的基础知识讲起，随后用了实际代码例子进行了练习，现在我们应该都已经学会了使用java生成某个文件的数字签名！</p>\n<p>在下一章中，我们将作为文件接收者，去验证这个数字签名是否正确，从而完成一整个使用数字签名验证发件人有效性的整个流程。</p>\n<div id=\"donationPoint\">\n\n<div id=\"licensePoint\">\n</div></div>"},{"title":"我的恋爱文字冒险游戏答卷","date":"2019-04-24T05:44:13.000Z","_content":"\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=4922735&auto=1&height=66\"></iframe>\n\n恋爱文字冒险游戏影响了我一定程度的三观，所以特意也为其专门写一篇文章\n\n\n## 《clannad》如果说你认为它只是一部galgame，那么我就要生气了\n---\n\n这一礼拜重新回温了一款galgame，名叫《your diary》 （cube社的甜作）\n\n重温这款游戏的初因是9月30号晚上的一时兴起（我觉得最近自己总是一时兴起，但是真正去干好的事情却没有几个，无法彻彻底底的下定决心是我最近的一个大烦恼）\n\n在我看来，一部好的galgame真的可以改变一个人在现实生活中的处世态度和处世方式，证据就是我自己。我还记得我玩的第一部galgame的时候是高二，那时候高二暑假，临近高三，那年暑假是待在家里度过的（好像是？饿，应该没记错）我的第一部galgame名叫《clannad》，在哥哥的电脑上玩的。我对《clannad》的评价那便是\n\n>一款玩通之后会让你怀疑人生的作品\n\n也许看上去我这评价是负面的，但是毫无疑问，这是我对它的一个正面的最高的评价。爱情小说和肥皂剧我都有看过几部，但是感觉其震撼人心的程度却完全不及《clannad》的十万分之一。（不过这可能也只是我的片面评价，就像初高中女生评价自己喜欢的一个肥皂剧的时候，也会说它有多么多么的感动，不过我冷静的思考过后，我感觉我还是这么写比较好，首先这确实是我脑子里蹦出来的第一个想法，其次它确实是改变了我自身的各个方面，而前两者却没有）\n\n《clannad》牵涉到了爱情，友情，最后还有亲情，包含的东西确实是很多，我跨越了一个暑假的时间去仔细的推敲每个人说的每一句话，在感叹人心复杂外，也有很多很多对自己生活的思考。正是引发了很多对自己生活的思考，所以我觉得《clannad》是超越了小说还有电视剧的一个存在。《clannad》是一部galgame，它是galgame界的一个楷模，确实是带了一个好头，让其后的galgame中也冒出了很多经典的作品（白色相簿啊还有白色相簿啊还有白色相簿啊等等）\n\n呀，写着写着，《clannad》中的一幕幕又开始扫过自己的脑中，哎，不讲道理啊，就是这么有深度的一款galgame，不然也不会有那么多人说\n\n>读作clannad，写作人生\n\n感觉再说这作的事情，自己的情绪就要不受控了，暂且停笔吧\n\n## 《your diary》\n---\n\n所以说呢，作为大学四年最后一次国庆小长假，室友们好像也没有什么外出的安排（毕竟大二大三的时候，国庆节出去玩简直是累惨了，根本不是去看风景的，而是去看人海的吧！）好吧，我也没有什么安排，心已经沉下去了，正是整理自己足迹的时候了呢！\n\n所以说呢，我就在自己的回忆里，抽出了《your diary》这个作品，其实我玩过的galgame不多，除了《clannad》外，其余都是被一个大佬推荐后才去玩的，所有玩的galgame可以用一个手的手指数清楚。\n\n《your diary》是cube社的一个甜作，甜度确实可以，剧情也是蛮不错的，至少可以上台面的那种。\n当初选的由亚线，也是被由亚的那种性格(活泼，开朗，外表小清新，声线少女)所吸引了吧。当时的自己感觉还比较雀跃的那种，自然而然是对个性开朗，活波的女孩子比较有感觉吧。当时走入由亚线后，剧情也没有令我失望，虽然最后让由亚和男主又重新团圆的设定不是很完美，不过也算是给了一个happyend（网上很多人觉得如果由亚和男主彻底分开的结局更神，不过我感觉如果真那样了，又有一批人要致郁了吧）\n\n重新打开游戏后，一开始是想着重新重温由亚线的，重温与由亚的邂逅，让自己可以再次感受下她的温暖，勇敢面对自己的下一个阶段生活，重温下那甜甜的声音（cv满分，把握很好）剧情并不像《clannad》那么有深度，因为我不想把自己再搞的那么致郁，只是想着最后享受一次galgame的温暖，为我自己的galgame日记划上一个比较完美的句号（此处是我为自己设的flag也说不定）\n\n令我自己惊讶的是，由亚还是当时的由亚，而我玩着玩着，却走到了学姐线里去了（与由亚完全不同的女性，话少，沉稳，端庄，黑长直，御姐音：发声位置靠后且低，头腔共鸣和胸腔配合共鸣为主，声音稳重、成熟，但很有魅力）\n\n原来我已经开始憧憬起学姐这样的女性了吗？果然随着年龄的增长，心境自然而然的就发生了变化了呢。\n和声音稳重、成熟的女性聊天我会更有想深聊的想法，就如同红酒一样，可以慢慢品慢慢尝。\n\n---\n\n起初，我注意到学姐的时候，是剧情发展到由亚与学姐初次见面的时候，当时由亚应该是第一次与学姐见面的，但是我发现学姐的神情却不像是第一次与由亚见面。这就奇怪了，勾起了我想深究的欲望，等回过神来的时候，已经发现所有的分支选项我都选择了走入学姐线的选项。\n\n在真正进入学姐线之前，有一个小场景是比较触动我的心的。\n\n男主是图书馆副委员长，而学姐其实是图书馆委员长。有一次偶尔男主发现学姐在资料室的座位上靠着桌子睡着的时候，便拿自己的外套为学姐披上，防止学姐着凉。\n\n随后学姐在当晚居然亲自上门来还外套这个事件比较关键。因为，一般来讲外套其实可以在次日上学的时候顺路还给男主然后道谢就行了。但是当时学姐并没有这么做，而是选择当晚就来还外套。\n\n学姐自己陈述的原因是“外套里有你的学生手册”。学姐觉得，学生手册应该第一时间归还才行，因为如果老师在次日上学后要求检查学生手册的话，男主可能会遇到很多不必要的麻烦（其实一开始学姐的理由只是说，男主自己没有外套穿，第二天去上学也许会着凉，但是男主觉得这个理由还不足以学姐大晚上了还上门还外套的理由，学姐才说出了学生手册的原因，说实话，着凉的这个理由更能收拢男人的心啊）\n\n接下来用文字的形式重现下这个场景：\n>学姐：“早上还是很冷的”\n\n>男主：“走着走着，就会暖起来的”\n\n>学姐：“可是，穿这么薄的话...”\n\n>男主：“那么跑步就行了”\n\n>学姐：“出了汗的话，会着凉感冒的”（认真脸）\n\n>男主：“那我到时候换体育服咯”（体育服这装备那么强！？）\n\n>学姐：“那么，如果长峰同学被老师叫住，训斥的话...”（长峰是男主的姓，学姐没有直呼其名，也说明了两人关系还不够密切，也说明了虽然当了很久的副委员长，可是男主也没有和学姐走得很近这一点。同时也说明了学姐这个人人物的性格吧，难以接近？）\n\n>男主：“谁会训斥我啊，不过是没穿外套而已”（就是就是，学姐是不是想多了，我当时是这么想的）\n\n>学姐：“也许会被生活指导老师警告的”（日本学校的生活指导老师的威严还是很强的）\n\n>男主：“只要说忘记在教室之类的，就能应付过去了”\n\n>学姐：“但是如果还被要求拿出学生手册的话”（学姐的表情开始转变成略带沮丧的感觉）\n\n>男主：“这样的话，就会老老实实交出来的啊”（然后发现学生手册不在身上，哈哈）\n\n>学姐：“长峰同学的学生手册...在我这里噢？”\n\n>男主：“呃？”（男主诧异）\n\n>学姐：“在外套里，口袋里面...”（这句话有点意味，首先一般来说不会随便翻别人的衣服的吧？！然而学姐居然翻看了...如果说不是学姐的个人习惯的话，那么只能用学姐对男主也有一点在意这个理由来解释了）\n\n>男主：“...啊！”\n\n>学姐：“我以为你知道这个手册在哪里，但是为了确认一下，就...”\n\n>男主接过外套后说：“的确...是在这里呢”\n\n>学姐：“有其他丢了的东西吗”（这句话可以看出，学姐的心真的非常细腻啊，是我的话，还了就还了，怎么还会问这些有的没的。。。）\n\n\n\n学姐在这个小场景里表现是很有前辈范的，稳重，成熟，细腻的感觉透露的凌厉精致。考虑周全，思维缜密，语气稳重成熟的孩子是目前的我最喜欢的了，这也是让我决定走入学姐线的一个比较重大的原因。其实不管是学姐的第一个表面原因还是第二个的深层原因，都让我感受到人心的温暖。我在想现实生活中一定无时无刻不再发生这样的事情吧。只不过有些人不擅长把握吧。\n\n---\n\n随后，顺利的靠攻略的力量，走入了学姐线后，不得不提的第二件比较触动我心的事件发生了。\n\n但是在说明这个事件之前，有一个设定还是要说明一下的：\n\n>由亚是给人带来幸福的神明，由亚只会出现在需要幸福的人的身边，故事的开头便是由亚突然降临至男主身边，励志要为男主带来幸福。但其实男主并不是由亚服务的第一个人类，由亚服务的第一个人类，是学姐\n\n所以问题就那么来了，既然由亚服务的第一个人类是学姐，那么由亚有带给学姐幸福了。照着现状来看，是没有的。（这也是为什么之前男主向学姐介绍由亚的时候会有那个奇怪的反应了）\n\n学姐知道由亚，学姐也说过交上一个可以扯一辈子的朋友，是学姐的幸福。\n\n但是不巧的便是，随着由亚陪伴在学姐的时光增加，学姐渐渐的将由亚放在了自己心中最高的位置，有由亚在身边就是学姐最高的幸福\n\n但是有一天由亚突然从学姐身边消失了，为什么？\n\n因为由亚发现，学姐所想要的幸福，居然是和自己一直生活下去\n\n但是这对于一个神明来说，是不可能的，由亚有由亚的使命，总有一天当学姐实现愿望的时候，由亚就必须离开了。\n\n所以说，学姐在由亚消失后的日子了，一直是非常难受的，以为自己被由亚抛弃，以为自己被幸福之神抛弃，以为自己是一个不幸的人。从此不愿意和人有过多的接触。（成为图书委员长的原因也许就是这个）\n\n但是其实呢？由亚并没有真的离开学姐的身边，她只是将自己的形态隐藏了起来，然后一直默默的在学姐的身边守护了一年。每天都尝试着去说服学姐身边的同龄人，让他们和学姐友好相处，和学姐做做朋友。\n由亚只是觉得，不让学姐找到别的朋友，一直拘泥于自己，是永远得不到幸福的，因为由亚知道自己总有一天会离开学姐的。\n\n差不多就是这些原因，才导致了现在的学姐，一直认为自己是不幸的。学姐一直担心的事情便是，很少有永恒的友情，永恒的爱情。证据就是她自己的经历，友情方面便是由亚的离开，爱情方面便是自己父母的离婚。\n\n是的。确实拿着这两个强力的证据来推翻友情和爱情，是轻而易举的事情。\n\n对于友情，虽然我们全然不知自己和朋友们将来会怎么样，会不会因为一些事情而分离（比如毕业，就业），但是我想每个人应该都是想一只做朋友下去的，一直陪伴在朋友的身边。没有人会觉得分离是件好的事情。不过，总而言之生活不会如你所愿，分离在所难免。\n\n而学姐就是被这个“分离”所束缚了，当时由亚的突然离开，让她不敢和男主展开进一步的交往，怕男主也会在有一天离开自己。关于这段的学姐的怕，怕，怕，可以从下面学姐向男主袒露心声的对话中看出（即攻略成功的时候）\n\n>学姐：“不会丢下我一个人不见吧？”\n\n>男主：“跟你约定”\n\n>学姐：“不会比我先死吧？”（难为男主了，这个真不好回答啊）\n\n>男主：“为了学姐，我以后会注意身体的”\n\n>学姐：“绝对。绝对哦？”\n\n学姐说自己的父母离婚的理由是因为工作一直不能在一起，所以男主说“那么只要我们以后工作在一起不就行了，一起开个咖啡店怎么样？”\n\n呀，这个作为切入点，真的很不错。虽然我不是女生，不过我感觉我都要被男主的措辞感动了。\n\n---\n\n最后一个事件，我也想提一下。\n\n学姐在确定了与男主一起携手未来后，老师们开始埋怨起学姐了。\n\n学姐是一个超级优等生，一直是各种第一第一第一，而男主是那种成绩不怎么起眼的小角色，所以关于学姐在高三之际还进行恋爱什么的，可能会影响学业人生之类的话题\n\n当时学姐与老师争论人生未来的时候，说的理由实在是太油说服力了。加上学姐的cv强有力的配音，感觉学姐整个人的形象油然而生，不愧是学姐。我打心里佩服。。。。。\n\n----\n\n## 总结\n\n呼，总算是对自己的galgame经历有了一篇小小的交代总结。\n\n虽然感觉自己没写好，没有写出自己想表达的内容。\n\n不过，就这样吧。有这么一篇文章后，以后自己拿出来就有东西看了。我为自己的galgame日记划下一个句点，这是第一次，也是最后一次对自己体验过的galgame进行大篇幅的评价，说出来感觉心情舒畅呢～\n嘛，小长假过去了，又要开始好好工作学习，也祝自己能够顺顺利利吧，也恭祝日本的galgame越做越好！希望国人可以更加关注下正版，自己喜欢的东西一定要给点钱买个正版支持一下哦\n\n\n{% img http://i67.tinypic.com/2wciah2.png %}\n","source":"_posts/我的恋爱文字冒险游戏答卷.md","raw":"---\ntitle: 我的恋爱文字冒险游戏答卷\ntags: 回忆向\ncategories: 游戏\ndate: 2019-04-24 13:44:13\n---\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=4922735&auto=1&height=66\"></iframe>\n\n恋爱文字冒险游戏影响了我一定程度的三观，所以特意也为其专门写一篇文章\n\n\n## 《clannad》如果说你认为它只是一部galgame，那么我就要生气了\n---\n\n这一礼拜重新回温了一款galgame，名叫《your diary》 （cube社的甜作）\n\n重温这款游戏的初因是9月30号晚上的一时兴起（我觉得最近自己总是一时兴起，但是真正去干好的事情却没有几个，无法彻彻底底的下定决心是我最近的一个大烦恼）\n\n在我看来，一部好的galgame真的可以改变一个人在现实生活中的处世态度和处世方式，证据就是我自己。我还记得我玩的第一部galgame的时候是高二，那时候高二暑假，临近高三，那年暑假是待在家里度过的（好像是？饿，应该没记错）我的第一部galgame名叫《clannad》，在哥哥的电脑上玩的。我对《clannad》的评价那便是\n\n>一款玩通之后会让你怀疑人生的作品\n\n也许看上去我这评价是负面的，但是毫无疑问，这是我对它的一个正面的最高的评价。爱情小说和肥皂剧我都有看过几部，但是感觉其震撼人心的程度却完全不及《clannad》的十万分之一。（不过这可能也只是我的片面评价，就像初高中女生评价自己喜欢的一个肥皂剧的时候，也会说它有多么多么的感动，不过我冷静的思考过后，我感觉我还是这么写比较好，首先这确实是我脑子里蹦出来的第一个想法，其次它确实是改变了我自身的各个方面，而前两者却没有）\n\n《clannad》牵涉到了爱情，友情，最后还有亲情，包含的东西确实是很多，我跨越了一个暑假的时间去仔细的推敲每个人说的每一句话，在感叹人心复杂外，也有很多很多对自己生活的思考。正是引发了很多对自己生活的思考，所以我觉得《clannad》是超越了小说还有电视剧的一个存在。《clannad》是一部galgame，它是galgame界的一个楷模，确实是带了一个好头，让其后的galgame中也冒出了很多经典的作品（白色相簿啊还有白色相簿啊还有白色相簿啊等等）\n\n呀，写着写着，《clannad》中的一幕幕又开始扫过自己的脑中，哎，不讲道理啊，就是这么有深度的一款galgame，不然也不会有那么多人说\n\n>读作clannad，写作人生\n\n感觉再说这作的事情，自己的情绪就要不受控了，暂且停笔吧\n\n## 《your diary》\n---\n\n所以说呢，作为大学四年最后一次国庆小长假，室友们好像也没有什么外出的安排（毕竟大二大三的时候，国庆节出去玩简直是累惨了，根本不是去看风景的，而是去看人海的吧！）好吧，我也没有什么安排，心已经沉下去了，正是整理自己足迹的时候了呢！\n\n所以说呢，我就在自己的回忆里，抽出了《your diary》这个作品，其实我玩过的galgame不多，除了《clannad》外，其余都是被一个大佬推荐后才去玩的，所有玩的galgame可以用一个手的手指数清楚。\n\n《your diary》是cube社的一个甜作，甜度确实可以，剧情也是蛮不错的，至少可以上台面的那种。\n当初选的由亚线，也是被由亚的那种性格(活泼，开朗，外表小清新，声线少女)所吸引了吧。当时的自己感觉还比较雀跃的那种，自然而然是对个性开朗，活波的女孩子比较有感觉吧。当时走入由亚线后，剧情也没有令我失望，虽然最后让由亚和男主又重新团圆的设定不是很完美，不过也算是给了一个happyend（网上很多人觉得如果由亚和男主彻底分开的结局更神，不过我感觉如果真那样了，又有一批人要致郁了吧）\n\n重新打开游戏后，一开始是想着重新重温由亚线的，重温与由亚的邂逅，让自己可以再次感受下她的温暖，勇敢面对自己的下一个阶段生活，重温下那甜甜的声音（cv满分，把握很好）剧情并不像《clannad》那么有深度，因为我不想把自己再搞的那么致郁，只是想着最后享受一次galgame的温暖，为我自己的galgame日记划上一个比较完美的句号（此处是我为自己设的flag也说不定）\n\n令我自己惊讶的是，由亚还是当时的由亚，而我玩着玩着，却走到了学姐线里去了（与由亚完全不同的女性，话少，沉稳，端庄，黑长直，御姐音：发声位置靠后且低，头腔共鸣和胸腔配合共鸣为主，声音稳重、成熟，但很有魅力）\n\n原来我已经开始憧憬起学姐这样的女性了吗？果然随着年龄的增长，心境自然而然的就发生了变化了呢。\n和声音稳重、成熟的女性聊天我会更有想深聊的想法，就如同红酒一样，可以慢慢品慢慢尝。\n\n---\n\n起初，我注意到学姐的时候，是剧情发展到由亚与学姐初次见面的时候，当时由亚应该是第一次与学姐见面的，但是我发现学姐的神情却不像是第一次与由亚见面。这就奇怪了，勾起了我想深究的欲望，等回过神来的时候，已经发现所有的分支选项我都选择了走入学姐线的选项。\n\n在真正进入学姐线之前，有一个小场景是比较触动我的心的。\n\n男主是图书馆副委员长，而学姐其实是图书馆委员长。有一次偶尔男主发现学姐在资料室的座位上靠着桌子睡着的时候，便拿自己的外套为学姐披上，防止学姐着凉。\n\n随后学姐在当晚居然亲自上门来还外套这个事件比较关键。因为，一般来讲外套其实可以在次日上学的时候顺路还给男主然后道谢就行了。但是当时学姐并没有这么做，而是选择当晚就来还外套。\n\n学姐自己陈述的原因是“外套里有你的学生手册”。学姐觉得，学生手册应该第一时间归还才行，因为如果老师在次日上学后要求检查学生手册的话，男主可能会遇到很多不必要的麻烦（其实一开始学姐的理由只是说，男主自己没有外套穿，第二天去上学也许会着凉，但是男主觉得这个理由还不足以学姐大晚上了还上门还外套的理由，学姐才说出了学生手册的原因，说实话，着凉的这个理由更能收拢男人的心啊）\n\n接下来用文字的形式重现下这个场景：\n>学姐：“早上还是很冷的”\n\n>男主：“走着走着，就会暖起来的”\n\n>学姐：“可是，穿这么薄的话...”\n\n>男主：“那么跑步就行了”\n\n>学姐：“出了汗的话，会着凉感冒的”（认真脸）\n\n>男主：“那我到时候换体育服咯”（体育服这装备那么强！？）\n\n>学姐：“那么，如果长峰同学被老师叫住，训斥的话...”（长峰是男主的姓，学姐没有直呼其名，也说明了两人关系还不够密切，也说明了虽然当了很久的副委员长，可是男主也没有和学姐走得很近这一点。同时也说明了学姐这个人人物的性格吧，难以接近？）\n\n>男主：“谁会训斥我啊，不过是没穿外套而已”（就是就是，学姐是不是想多了，我当时是这么想的）\n\n>学姐：“也许会被生活指导老师警告的”（日本学校的生活指导老师的威严还是很强的）\n\n>男主：“只要说忘记在教室之类的，就能应付过去了”\n\n>学姐：“但是如果还被要求拿出学生手册的话”（学姐的表情开始转变成略带沮丧的感觉）\n\n>男主：“这样的话，就会老老实实交出来的啊”（然后发现学生手册不在身上，哈哈）\n\n>学姐：“长峰同学的学生手册...在我这里噢？”\n\n>男主：“呃？”（男主诧异）\n\n>学姐：“在外套里，口袋里面...”（这句话有点意味，首先一般来说不会随便翻别人的衣服的吧？！然而学姐居然翻看了...如果说不是学姐的个人习惯的话，那么只能用学姐对男主也有一点在意这个理由来解释了）\n\n>男主：“...啊！”\n\n>学姐：“我以为你知道这个手册在哪里，但是为了确认一下，就...”\n\n>男主接过外套后说：“的确...是在这里呢”\n\n>学姐：“有其他丢了的东西吗”（这句话可以看出，学姐的心真的非常细腻啊，是我的话，还了就还了，怎么还会问这些有的没的。。。）\n\n\n\n学姐在这个小场景里表现是很有前辈范的，稳重，成熟，细腻的感觉透露的凌厉精致。考虑周全，思维缜密，语气稳重成熟的孩子是目前的我最喜欢的了，这也是让我决定走入学姐线的一个比较重大的原因。其实不管是学姐的第一个表面原因还是第二个的深层原因，都让我感受到人心的温暖。我在想现实生活中一定无时无刻不再发生这样的事情吧。只不过有些人不擅长把握吧。\n\n---\n\n随后，顺利的靠攻略的力量，走入了学姐线后，不得不提的第二件比较触动我心的事件发生了。\n\n但是在说明这个事件之前，有一个设定还是要说明一下的：\n\n>由亚是给人带来幸福的神明，由亚只会出现在需要幸福的人的身边，故事的开头便是由亚突然降临至男主身边，励志要为男主带来幸福。但其实男主并不是由亚服务的第一个人类，由亚服务的第一个人类，是学姐\n\n所以问题就那么来了，既然由亚服务的第一个人类是学姐，那么由亚有带给学姐幸福了。照着现状来看，是没有的。（这也是为什么之前男主向学姐介绍由亚的时候会有那个奇怪的反应了）\n\n学姐知道由亚，学姐也说过交上一个可以扯一辈子的朋友，是学姐的幸福。\n\n但是不巧的便是，随着由亚陪伴在学姐的时光增加，学姐渐渐的将由亚放在了自己心中最高的位置，有由亚在身边就是学姐最高的幸福\n\n但是有一天由亚突然从学姐身边消失了，为什么？\n\n因为由亚发现，学姐所想要的幸福，居然是和自己一直生活下去\n\n但是这对于一个神明来说，是不可能的，由亚有由亚的使命，总有一天当学姐实现愿望的时候，由亚就必须离开了。\n\n所以说，学姐在由亚消失后的日子了，一直是非常难受的，以为自己被由亚抛弃，以为自己被幸福之神抛弃，以为自己是一个不幸的人。从此不愿意和人有过多的接触。（成为图书委员长的原因也许就是这个）\n\n但是其实呢？由亚并没有真的离开学姐的身边，她只是将自己的形态隐藏了起来，然后一直默默的在学姐的身边守护了一年。每天都尝试着去说服学姐身边的同龄人，让他们和学姐友好相处，和学姐做做朋友。\n由亚只是觉得，不让学姐找到别的朋友，一直拘泥于自己，是永远得不到幸福的，因为由亚知道自己总有一天会离开学姐的。\n\n差不多就是这些原因，才导致了现在的学姐，一直认为自己是不幸的。学姐一直担心的事情便是，很少有永恒的友情，永恒的爱情。证据就是她自己的经历，友情方面便是由亚的离开，爱情方面便是自己父母的离婚。\n\n是的。确实拿着这两个强力的证据来推翻友情和爱情，是轻而易举的事情。\n\n对于友情，虽然我们全然不知自己和朋友们将来会怎么样，会不会因为一些事情而分离（比如毕业，就业），但是我想每个人应该都是想一只做朋友下去的，一直陪伴在朋友的身边。没有人会觉得分离是件好的事情。不过，总而言之生活不会如你所愿，分离在所难免。\n\n而学姐就是被这个“分离”所束缚了，当时由亚的突然离开，让她不敢和男主展开进一步的交往，怕男主也会在有一天离开自己。关于这段的学姐的怕，怕，怕，可以从下面学姐向男主袒露心声的对话中看出（即攻略成功的时候）\n\n>学姐：“不会丢下我一个人不见吧？”\n\n>男主：“跟你约定”\n\n>学姐：“不会比我先死吧？”（难为男主了，这个真不好回答啊）\n\n>男主：“为了学姐，我以后会注意身体的”\n\n>学姐：“绝对。绝对哦？”\n\n学姐说自己的父母离婚的理由是因为工作一直不能在一起，所以男主说“那么只要我们以后工作在一起不就行了，一起开个咖啡店怎么样？”\n\n呀，这个作为切入点，真的很不错。虽然我不是女生，不过我感觉我都要被男主的措辞感动了。\n\n---\n\n最后一个事件，我也想提一下。\n\n学姐在确定了与男主一起携手未来后，老师们开始埋怨起学姐了。\n\n学姐是一个超级优等生，一直是各种第一第一第一，而男主是那种成绩不怎么起眼的小角色，所以关于学姐在高三之际还进行恋爱什么的，可能会影响学业人生之类的话题\n\n当时学姐与老师争论人生未来的时候，说的理由实在是太油说服力了。加上学姐的cv强有力的配音，感觉学姐整个人的形象油然而生，不愧是学姐。我打心里佩服。。。。。\n\n----\n\n## 总结\n\n呼，总算是对自己的galgame经历有了一篇小小的交代总结。\n\n虽然感觉自己没写好，没有写出自己想表达的内容。\n\n不过，就这样吧。有这么一篇文章后，以后自己拿出来就有东西看了。我为自己的galgame日记划下一个句点，这是第一次，也是最后一次对自己体验过的galgame进行大篇幅的评价，说出来感觉心情舒畅呢～\n嘛，小长假过去了，又要开始好好工作学习，也祝自己能够顺顺利利吧，也恭祝日本的galgame越做越好！希望国人可以更加关注下正版，自己喜欢的东西一定要给点钱买个正版支持一下哦\n\n\n{% img http://i67.tinypic.com/2wciah2.png %}\n","slug":"我的恋爱文字冒险游戏答卷","published":1,"updated":"2019-05-02T02:23:54.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gn9uv0053m6el4m7zt36l","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=4922735&auto=1&height=66\"></iframe>\n\n<p>恋爱文字冒险游戏影响了我一定程度的三观，所以特意也为其专门写一篇文章</p>\n<h2 id=\"《clannad》如果说你认为它只是一部galgame，那么我就要生气了\"><a href=\"#《clannad》如果说你认为它只是一部galgame，那么我就要生气了\" class=\"headerlink\" title=\"《clannad》如果说你认为它只是一部galgame，那么我就要生气了\"></a>《clannad》如果说你认为它只是一部galgame，那么我就要生气了</h2><hr>\n<p>这一礼拜重新回温了一款galgame，名叫《your diary》 （cube社的甜作）</p>\n<p>重温这款游戏的初因是9月30号晚上的一时兴起（我觉得最近自己总是一时兴起，但是真正去干好的事情却没有几个，无法彻彻底底的下定决心是我最近的一个大烦恼）</p>\n<p>在我看来，一部好的galgame真的可以改变一个人在现实生活中的处世态度和处世方式，证据就是我自己。我还记得我玩的第一部galgame的时候是高二，那时候高二暑假，临近高三，那年暑假是待在家里度过的（好像是？饿，应该没记错）我的第一部galgame名叫《clannad》，在哥哥的电脑上玩的。我对《clannad》的评价那便是</p>\n<blockquote>\n<p>一款玩通之后会让你怀疑人生的作品</p>\n</blockquote>\n<p>也许看上去我这评价是负面的，但是毫无疑问，这是我对它的一个正面的最高的评价。爱情小说和肥皂剧我都有看过几部，但是感觉其震撼人心的程度却完全不及《clannad》的十万分之一。（不过这可能也只是我的片面评价，就像初高中女生评价自己喜欢的一个肥皂剧的时候，也会说它有多么多么的感动，不过我冷静的思考过后，我感觉我还是这么写比较好，首先这确实是我脑子里蹦出来的第一个想法，其次它确实是改变了我自身的各个方面，而前两者却没有）</p>\n<p>《clannad》牵涉到了爱情，友情，最后还有亲情，包含的东西确实是很多，我跨越了一个暑假的时间去仔细的推敲每个人说的每一句话，在感叹人心复杂外，也有很多很多对自己生活的思考。正是引发了很多对自己生活的思考，所以我觉得《clannad》是超越了小说还有电视剧的一个存在。《clannad》是一部galgame，它是galgame界的一个楷模，确实是带了一个好头，让其后的galgame中也冒出了很多经典的作品（白色相簿啊还有白色相簿啊还有白色相簿啊等等）</p>\n<p>呀，写着写着，《clannad》中的一幕幕又开始扫过自己的脑中，哎，不讲道理啊，就是这么有深度的一款galgame，不然也不会有那么多人说</p>\n<blockquote>\n<p>读作clannad，写作人生</p>\n</blockquote>\n<p>感觉再说这作的事情，自己的情绪就要不受控了，暂且停笔吧</p>\n<h2 id=\"《your-diary》\"><a href=\"#《your-diary》\" class=\"headerlink\" title=\"《your diary》\"></a>《your diary》</h2><hr>\n<p>所以说呢，作为大学四年最后一次国庆小长假，室友们好像也没有什么外出的安排（毕竟大二大三的时候，国庆节出去玩简直是累惨了，根本不是去看风景的，而是去看人海的吧！）好吧，我也没有什么安排，心已经沉下去了，正是整理自己足迹的时候了呢！</p>\n<p>所以说呢，我就在自己的回忆里，抽出了《your diary》这个作品，其实我玩过的galgame不多，除了《clannad》外，其余都是被一个大佬推荐后才去玩的，所有玩的galgame可以用一个手的手指数清楚。</p>\n<p>《your diary》是cube社的一个甜作，甜度确实可以，剧情也是蛮不错的，至少可以上台面的那种。<br>当初选的由亚线，也是被由亚的那种性格(活泼，开朗，外表小清新，声线少女)所吸引了吧。当时的自己感觉还比较雀跃的那种，自然而然是对个性开朗，活波的女孩子比较有感觉吧。当时走入由亚线后，剧情也没有令我失望，虽然最后让由亚和男主又重新团圆的设定不是很完美，不过也算是给了一个happyend（网上很多人觉得如果由亚和男主彻底分开的结局更神，不过我感觉如果真那样了，又有一批人要致郁了吧）</p>\n<p>重新打开游戏后，一开始是想着重新重温由亚线的，重温与由亚的邂逅，让自己可以再次感受下她的温暖，勇敢面对自己的下一个阶段生活，重温下那甜甜的声音（cv满分，把握很好）剧情并不像《clannad》那么有深度，因为我不想把自己再搞的那么致郁，只是想着最后享受一次galgame的温暖，为我自己的galgame日记划上一个比较完美的句号（此处是我为自己设的flag也说不定）</p>\n<p>令我自己惊讶的是，由亚还是当时的由亚，而我玩着玩着，却走到了学姐线里去了（与由亚完全不同的女性，话少，沉稳，端庄，黑长直，御姐音：发声位置靠后且低，头腔共鸣和胸腔配合共鸣为主，声音稳重、成熟，但很有魅力）</p>\n<p>原来我已经开始憧憬起学姐这样的女性了吗？果然随着年龄的增长，心境自然而然的就发生了变化了呢。<br>和声音稳重、成熟的女性聊天我会更有想深聊的想法，就如同红酒一样，可以慢慢品慢慢尝。</p>\n<hr>\n<p>起初，我注意到学姐的时候，是剧情发展到由亚与学姐初次见面的时候，当时由亚应该是第一次与学姐见面的，但是我发现学姐的神情却不像是第一次与由亚见面。这就奇怪了，勾起了我想深究的欲望，等回过神来的时候，已经发现所有的分支选项我都选择了走入学姐线的选项。</p>\n<p>在真正进入学姐线之前，有一个小场景是比较触动我的心的。</p>\n<p>男主是图书馆副委员长，而学姐其实是图书馆委员长。有一次偶尔男主发现学姐在资料室的座位上靠着桌子睡着的时候，便拿自己的外套为学姐披上，防止学姐着凉。</p>\n<p>随后学姐在当晚居然亲自上门来还外套这个事件比较关键。因为，一般来讲外套其实可以在次日上学的时候顺路还给男主然后道谢就行了。但是当时学姐并没有这么做，而是选择当晚就来还外套。</p>\n<p>学姐自己陈述的原因是“外套里有你的学生手册”。学姐觉得，学生手册应该第一时间归还才行，因为如果老师在次日上学后要求检查学生手册的话，男主可能会遇到很多不必要的麻烦（其实一开始学姐的理由只是说，男主自己没有外套穿，第二天去上学也许会着凉，但是男主觉得这个理由还不足以学姐大晚上了还上门还外套的理由，学姐才说出了学生手册的原因，说实话，着凉的这个理由更能收拢男人的心啊）</p>\n<p>接下来用文字的形式重现下这个场景：</p>\n<blockquote>\n<p>学姐：“早上还是很冷的”</p>\n</blockquote>\n<blockquote>\n<p>男主：“走着走着，就会暖起来的”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“可是，穿这么薄的话…”</p>\n</blockquote>\n<blockquote>\n<p>男主：“那么跑步就行了”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“出了汗的话，会着凉感冒的”（认真脸）</p>\n</blockquote>\n<blockquote>\n<p>男主：“那我到时候换体育服咯”（体育服这装备那么强！？）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“那么，如果长峰同学被老师叫住，训斥的话…”（长峰是男主的姓，学姐没有直呼其名，也说明了两人关系还不够密切，也说明了虽然当了很久的副委员长，可是男主也没有和学姐走得很近这一点。同时也说明了学姐这个人人物的性格吧，难以接近？）</p>\n</blockquote>\n<blockquote>\n<p>男主：“谁会训斥我啊，不过是没穿外套而已”（就是就是，学姐是不是想多了，我当时是这么想的）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“也许会被生活指导老师警告的”（日本学校的生活指导老师的威严还是很强的）</p>\n</blockquote>\n<blockquote>\n<p>男主：“只要说忘记在教室之类的，就能应付过去了”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“但是如果还被要求拿出学生手册的话”（学姐的表情开始转变成略带沮丧的感觉）</p>\n</blockquote>\n<blockquote>\n<p>男主：“这样的话，就会老老实实交出来的啊”（然后发现学生手册不在身上，哈哈）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“长峰同学的学生手册…在我这里噢？”</p>\n</blockquote>\n<blockquote>\n<p>男主：“呃？”（男主诧异）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“在外套里，口袋里面…”（这句话有点意味，首先一般来说不会随便翻别人的衣服的吧？！然而学姐居然翻看了…如果说不是学姐的个人习惯的话，那么只能用学姐对男主也有一点在意这个理由来解释了）</p>\n</blockquote>\n<blockquote>\n<p>男主：“…啊！”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“我以为你知道这个手册在哪里，但是为了确认一下，就…”</p>\n</blockquote>\n<blockquote>\n<p>男主接过外套后说：“的确…是在这里呢”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“有其他丢了的东西吗”（这句话可以看出，学姐的心真的非常细腻啊，是我的话，还了就还了，怎么还会问这些有的没的。。。）</p>\n</blockquote>\n<p>学姐在这个小场景里表现是很有前辈范的，稳重，成熟，细腻的感觉透露的凌厉精致。考虑周全，思维缜密，语气稳重成熟的孩子是目前的我最喜欢的了，这也是让我决定走入学姐线的一个比较重大的原因。其实不管是学姐的第一个表面原因还是第二个的深层原因，都让我感受到人心的温暖。我在想现实生活中一定无时无刻不再发生这样的事情吧。只不过有些人不擅长把握吧。</p>\n<hr>\n<p>随后，顺利的靠攻略的力量，走入了学姐线后，不得不提的第二件比较触动我心的事件发生了。</p>\n<p>但是在说明这个事件之前，有一个设定还是要说明一下的：</p>\n<blockquote>\n<p>由亚是给人带来幸福的神明，由亚只会出现在需要幸福的人的身边，故事的开头便是由亚突然降临至男主身边，励志要为男主带来幸福。但其实男主并不是由亚服务的第一个人类，由亚服务的第一个人类，是学姐</p>\n</blockquote>\n<p>所以问题就那么来了，既然由亚服务的第一个人类是学姐，那么由亚有带给学姐幸福了。照着现状来看，是没有的。（这也是为什么之前男主向学姐介绍由亚的时候会有那个奇怪的反应了）</p>\n<p>学姐知道由亚，学姐也说过交上一个可以扯一辈子的朋友，是学姐的幸福。</p>\n<p>但是不巧的便是，随着由亚陪伴在学姐的时光增加，学姐渐渐的将由亚放在了自己心中最高的位置，有由亚在身边就是学姐最高的幸福</p>\n<p>但是有一天由亚突然从学姐身边消失了，为什么？</p>\n<p>因为由亚发现，学姐所想要的幸福，居然是和自己一直生活下去</p>\n<p>但是这对于一个神明来说，是不可能的，由亚有由亚的使命，总有一天当学姐实现愿望的时候，由亚就必须离开了。</p>\n<p>所以说，学姐在由亚消失后的日子了，一直是非常难受的，以为自己被由亚抛弃，以为自己被幸福之神抛弃，以为自己是一个不幸的人。从此不愿意和人有过多的接触。（成为图书委员长的原因也许就是这个）</p>\n<p>但是其实呢？由亚并没有真的离开学姐的身边，她只是将自己的形态隐藏了起来，然后一直默默的在学姐的身边守护了一年。每天都尝试着去说服学姐身边的同龄人，让他们和学姐友好相处，和学姐做做朋友。<br>由亚只是觉得，不让学姐找到别的朋友，一直拘泥于自己，是永远得不到幸福的，因为由亚知道自己总有一天会离开学姐的。</p>\n<p>差不多就是这些原因，才导致了现在的学姐，一直认为自己是不幸的。学姐一直担心的事情便是，很少有永恒的友情，永恒的爱情。证据就是她自己的经历，友情方面便是由亚的离开，爱情方面便是自己父母的离婚。</p>\n<p>是的。确实拿着这两个强力的证据来推翻友情和爱情，是轻而易举的事情。</p>\n<p>对于友情，虽然我们全然不知自己和朋友们将来会怎么样，会不会因为一些事情而分离（比如毕业，就业），但是我想每个人应该都是想一只做朋友下去的，一直陪伴在朋友的身边。没有人会觉得分离是件好的事情。不过，总而言之生活不会如你所愿，分离在所难免。</p>\n<p>而学姐就是被这个“分离”所束缚了，当时由亚的突然离开，让她不敢和男主展开进一步的交往，怕男主也会在有一天离开自己。关于这段的学姐的怕，怕，怕，可以从下面学姐向男主袒露心声的对话中看出（即攻略成功的时候）</p>\n<blockquote>\n<p>学姐：“不会丢下我一个人不见吧？”</p>\n</blockquote>\n<blockquote>\n<p>男主：“跟你约定”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“不会比我先死吧？”（难为男主了，这个真不好回答啊）</p>\n</blockquote>\n<blockquote>\n<p>男主：“为了学姐，我以后会注意身体的”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“绝对。绝对哦？”</p>\n</blockquote>\n<p>学姐说自己的父母离婚的理由是因为工作一直不能在一起，所以男主说“那么只要我们以后工作在一起不就行了，一起开个咖啡店怎么样？”</p>\n<p>呀，这个作为切入点，真的很不错。虽然我不是女生，不过我感觉我都要被男主的措辞感动了。</p>\n<hr>\n<p>最后一个事件，我也想提一下。</p>\n<p>学姐在确定了与男主一起携手未来后，老师们开始埋怨起学姐了。</p>\n<p>学姐是一个超级优等生，一直是各种第一第一第一，而男主是那种成绩不怎么起眼的小角色，所以关于学姐在高三之际还进行恋爱什么的，可能会影响学业人生之类的话题</p>\n<p>当时学姐与老师争论人生未来的时候，说的理由实在是太油说服力了。加上学姐的cv强有力的配音，感觉学姐整个人的形象油然而生，不愧是学姐。我打心里佩服。。。。。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>呼，总算是对自己的galgame经历有了一篇小小的交代总结。</p>\n<p>虽然感觉自己没写好，没有写出自己想表达的内容。</p>\n<p>不过，就这样吧。有这么一篇文章后，以后自己拿出来就有东西看了。我为自己的galgame日记划下一个句点，这是第一次，也是最后一次对自己体验过的galgame进行大篇幅的评价，说出来感觉心情舒畅呢～<br>嘛，小长假过去了，又要开始好好工作学习，也祝自己能够顺顺利利吧，也恭祝日本的galgame越做越好！希望国人可以更加关注下正版，自己喜欢的东西一定要给点钱买个正版支持一下哦</p>\n<img src=\"http://i67.tinypic.com/2wciah2.png\">\n","site":{"data":{}},"excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=4922735&auto=1&height=66\"></iframe>\n\n<p>恋爱文字冒险游戏影响了我一定程度的三观，所以特意也为其专门写一篇文章</p>\n<h2 id=\"《clannad》如果说你认为它只是一部galgame，那么我就要生气了\"><a href=\"#《clannad》如果说你认为它只是一部galgame，那么我就要生气了\" class=\"headerlink\" title=\"《clannad》如果说你认为它只是一部galgame，那么我就要生气了\"></a>《clannad》如果说你认为它只是一部galgame，那么我就要生气了</h2><hr>\n<p>这一礼拜重新回温了一款galgame，名叫《your diary》 （cube社的甜作）</p>\n<p>重温这款游戏的初因是9月30号晚上的一时兴起（我觉得最近自己总是一时兴起，但是真正去干好的事情却没有几个，无法彻彻底底的下定决心是我最近的一个大烦恼）</p>\n<p>在我看来，一部好的galgame真的可以改变一个人在现实生活中的处世态度和处世方式，证据就是我自己。我还记得我玩的第一部galgame的时候是高二，那时候高二暑假，临近高三，那年暑假是待在家里度过的（好像是？饿，应该没记错）我的第一部galgame名叫《clannad》，在哥哥的电脑上玩的。我对《clannad》的评价那便是</p>\n<blockquote>\n<p>一款玩通之后会让你怀疑人生的作品</p>\n</blockquote>\n<p>也许看上去我这评价是负面的，但是毫无疑问，这是我对它的一个正面的最高的评价。爱情小说和肥皂剧我都有看过几部，但是感觉其震撼人心的程度却完全不及《clannad》的十万分之一。（不过这可能也只是我的片面评价，就像初高中女生评价自己喜欢的一个肥皂剧的时候，也会说它有多么多么的感动，不过我冷静的思考过后，我感觉我还是这么写比较好，首先这确实是我脑子里蹦出来的第一个想法，其次它确实是改变了我自身的各个方面，而前两者却没有）</p>\n<p>《clannad》牵涉到了爱情，友情，最后还有亲情，包含的东西确实是很多，我跨越了一个暑假的时间去仔细的推敲每个人说的每一句话，在感叹人心复杂外，也有很多很多对自己生活的思考。正是引发了很多对自己生活的思考，所以我觉得《clannad》是超越了小说还有电视剧的一个存在。《clannad》是一部galgame，它是galgame界的一个楷模，确实是带了一个好头，让其后的galgame中也冒出了很多经典的作品（白色相簿啊还有白色相簿啊还有白色相簿啊等等）</p>\n<p>呀，写着写着，《clannad》中的一幕幕又开始扫过自己的脑中，哎，不讲道理啊，就是这么有深度的一款galgame，不然也不会有那么多人说</p>\n<blockquote>\n<p>读作clannad，写作人生</p>\n</blockquote>\n<p>感觉再说这作的事情，自己的情绪就要不受控了，暂且停笔吧</p>\n<h2 id=\"《your-diary》\"><a href=\"#《your-diary》\" class=\"headerlink\" title=\"《your diary》\"></a>《your diary》</h2><hr>\n<p>所以说呢，作为大学四年最后一次国庆小长假，室友们好像也没有什么外出的安排（毕竟大二大三的时候，国庆节出去玩简直是累惨了，根本不是去看风景的，而是去看人海的吧！）好吧，我也没有什么安排，心已经沉下去了，正是整理自己足迹的时候了呢！</p>\n<p>所以说呢，我就在自己的回忆里，抽出了《your diary》这个作品，其实我玩过的galgame不多，除了《clannad》外，其余都是被一个大佬推荐后才去玩的，所有玩的galgame可以用一个手的手指数清楚。</p>\n<p>《your diary》是cube社的一个甜作，甜度确实可以，剧情也是蛮不错的，至少可以上台面的那种。<br>当初选的由亚线，也是被由亚的那种性格(活泼，开朗，外表小清新，声线少女)所吸引了吧。当时的自己感觉还比较雀跃的那种，自然而然是对个性开朗，活波的女孩子比较有感觉吧。当时走入由亚线后，剧情也没有令我失望，虽然最后让由亚和男主又重新团圆的设定不是很完美，不过也算是给了一个happyend（网上很多人觉得如果由亚和男主彻底分开的结局更神，不过我感觉如果真那样了，又有一批人要致郁了吧）</p>\n<p>重新打开游戏后，一开始是想着重新重温由亚线的，重温与由亚的邂逅，让自己可以再次感受下她的温暖，勇敢面对自己的下一个阶段生活，重温下那甜甜的声音（cv满分，把握很好）剧情并不像《clannad》那么有深度，因为我不想把自己再搞的那么致郁，只是想着最后享受一次galgame的温暖，为我自己的galgame日记划上一个比较完美的句号（此处是我为自己设的flag也说不定）</p>\n<p>令我自己惊讶的是，由亚还是当时的由亚，而我玩着玩着，却走到了学姐线里去了（与由亚完全不同的女性，话少，沉稳，端庄，黑长直，御姐音：发声位置靠后且低，头腔共鸣和胸腔配合共鸣为主，声音稳重、成熟，但很有魅力）</p>\n<p>原来我已经开始憧憬起学姐这样的女性了吗？果然随着年龄的增长，心境自然而然的就发生了变化了呢。<br>和声音稳重、成熟的女性聊天我会更有想深聊的想法，就如同红酒一样，可以慢慢品慢慢尝。</p>\n<hr>\n<p>起初，我注意到学姐的时候，是剧情发展到由亚与学姐初次见面的时候，当时由亚应该是第一次与学姐见面的，但是我发现学姐的神情却不像是第一次与由亚见面。这就奇怪了，勾起了我想深究的欲望，等回过神来的时候，已经发现所有的分支选项我都选择了走入学姐线的选项。</p>\n<p>在真正进入学姐线之前，有一个小场景是比较触动我的心的。</p>\n<p>男主是图书馆副委员长，而学姐其实是图书馆委员长。有一次偶尔男主发现学姐在资料室的座位上靠着桌子睡着的时候，便拿自己的外套为学姐披上，防止学姐着凉。</p>\n<p>随后学姐在当晚居然亲自上门来还外套这个事件比较关键。因为，一般来讲外套其实可以在次日上学的时候顺路还给男主然后道谢就行了。但是当时学姐并没有这么做，而是选择当晚就来还外套。</p>\n<p>学姐自己陈述的原因是“外套里有你的学生手册”。学姐觉得，学生手册应该第一时间归还才行，因为如果老师在次日上学后要求检查学生手册的话，男主可能会遇到很多不必要的麻烦（其实一开始学姐的理由只是说，男主自己没有外套穿，第二天去上学也许会着凉，但是男主觉得这个理由还不足以学姐大晚上了还上门还外套的理由，学姐才说出了学生手册的原因，说实话，着凉的这个理由更能收拢男人的心啊）</p>\n<p>接下来用文字的形式重现下这个场景：</p>\n<blockquote>\n<p>学姐：“早上还是很冷的”</p>\n</blockquote>\n<blockquote>\n<p>男主：“走着走着，就会暖起来的”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“可是，穿这么薄的话…”</p>\n</blockquote>\n<blockquote>\n<p>男主：“那么跑步就行了”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“出了汗的话，会着凉感冒的”（认真脸）</p>\n</blockquote>\n<blockquote>\n<p>男主：“那我到时候换体育服咯”（体育服这装备那么强！？）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“那么，如果长峰同学被老师叫住，训斥的话…”（长峰是男主的姓，学姐没有直呼其名，也说明了两人关系还不够密切，也说明了虽然当了很久的副委员长，可是男主也没有和学姐走得很近这一点。同时也说明了学姐这个人人物的性格吧，难以接近？）</p>\n</blockquote>\n<blockquote>\n<p>男主：“谁会训斥我啊，不过是没穿外套而已”（就是就是，学姐是不是想多了，我当时是这么想的）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“也许会被生活指导老师警告的”（日本学校的生活指导老师的威严还是很强的）</p>\n</blockquote>\n<blockquote>\n<p>男主：“只要说忘记在教室之类的，就能应付过去了”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“但是如果还被要求拿出学生手册的话”（学姐的表情开始转变成略带沮丧的感觉）</p>\n</blockquote>\n<blockquote>\n<p>男主：“这样的话，就会老老实实交出来的啊”（然后发现学生手册不在身上，哈哈）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“长峰同学的学生手册…在我这里噢？”</p>\n</blockquote>\n<blockquote>\n<p>男主：“呃？”（男主诧异）</p>\n</blockquote>\n<blockquote>\n<p>学姐：“在外套里，口袋里面…”（这句话有点意味，首先一般来说不会随便翻别人的衣服的吧？！然而学姐居然翻看了…如果说不是学姐的个人习惯的话，那么只能用学姐对男主也有一点在意这个理由来解释了）</p>\n</blockquote>\n<blockquote>\n<p>男主：“…啊！”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“我以为你知道这个手册在哪里，但是为了确认一下，就…”</p>\n</blockquote>\n<blockquote>\n<p>男主接过外套后说：“的确…是在这里呢”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“有其他丢了的东西吗”（这句话可以看出，学姐的心真的非常细腻啊，是我的话，还了就还了，怎么还会问这些有的没的。。。）</p>\n</blockquote>\n<p>学姐在这个小场景里表现是很有前辈范的，稳重，成熟，细腻的感觉透露的凌厉精致。考虑周全，思维缜密，语气稳重成熟的孩子是目前的我最喜欢的了，这也是让我决定走入学姐线的一个比较重大的原因。其实不管是学姐的第一个表面原因还是第二个的深层原因，都让我感受到人心的温暖。我在想现实生活中一定无时无刻不再发生这样的事情吧。只不过有些人不擅长把握吧。</p>\n<hr>\n<p>随后，顺利的靠攻略的力量，走入了学姐线后，不得不提的第二件比较触动我心的事件发生了。</p>\n<p>但是在说明这个事件之前，有一个设定还是要说明一下的：</p>\n<blockquote>\n<p>由亚是给人带来幸福的神明，由亚只会出现在需要幸福的人的身边，故事的开头便是由亚突然降临至男主身边，励志要为男主带来幸福。但其实男主并不是由亚服务的第一个人类，由亚服务的第一个人类，是学姐</p>\n</blockquote>\n<p>所以问题就那么来了，既然由亚服务的第一个人类是学姐，那么由亚有带给学姐幸福了。照着现状来看，是没有的。（这也是为什么之前男主向学姐介绍由亚的时候会有那个奇怪的反应了）</p>\n<p>学姐知道由亚，学姐也说过交上一个可以扯一辈子的朋友，是学姐的幸福。</p>\n<p>但是不巧的便是，随着由亚陪伴在学姐的时光增加，学姐渐渐的将由亚放在了自己心中最高的位置，有由亚在身边就是学姐最高的幸福</p>\n<p>但是有一天由亚突然从学姐身边消失了，为什么？</p>\n<p>因为由亚发现，学姐所想要的幸福，居然是和自己一直生活下去</p>\n<p>但是这对于一个神明来说，是不可能的，由亚有由亚的使命，总有一天当学姐实现愿望的时候，由亚就必须离开了。</p>\n<p>所以说，学姐在由亚消失后的日子了，一直是非常难受的，以为自己被由亚抛弃，以为自己被幸福之神抛弃，以为自己是一个不幸的人。从此不愿意和人有过多的接触。（成为图书委员长的原因也许就是这个）</p>\n<p>但是其实呢？由亚并没有真的离开学姐的身边，她只是将自己的形态隐藏了起来，然后一直默默的在学姐的身边守护了一年。每天都尝试着去说服学姐身边的同龄人，让他们和学姐友好相处，和学姐做做朋友。<br>由亚只是觉得，不让学姐找到别的朋友，一直拘泥于自己，是永远得不到幸福的，因为由亚知道自己总有一天会离开学姐的。</p>\n<p>差不多就是这些原因，才导致了现在的学姐，一直认为自己是不幸的。学姐一直担心的事情便是，很少有永恒的友情，永恒的爱情。证据就是她自己的经历，友情方面便是由亚的离开，爱情方面便是自己父母的离婚。</p>\n<p>是的。确实拿着这两个强力的证据来推翻友情和爱情，是轻而易举的事情。</p>\n<p>对于友情，虽然我们全然不知自己和朋友们将来会怎么样，会不会因为一些事情而分离（比如毕业，就业），但是我想每个人应该都是想一只做朋友下去的，一直陪伴在朋友的身边。没有人会觉得分离是件好的事情。不过，总而言之生活不会如你所愿，分离在所难免。</p>\n<p>而学姐就是被这个“分离”所束缚了，当时由亚的突然离开，让她不敢和男主展开进一步的交往，怕男主也会在有一天离开自己。关于这段的学姐的怕，怕，怕，可以从下面学姐向男主袒露心声的对话中看出（即攻略成功的时候）</p>\n<blockquote>\n<p>学姐：“不会丢下我一个人不见吧？”</p>\n</blockquote>\n<blockquote>\n<p>男主：“跟你约定”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“不会比我先死吧？”（难为男主了，这个真不好回答啊）</p>\n</blockquote>\n<blockquote>\n<p>男主：“为了学姐，我以后会注意身体的”</p>\n</blockquote>\n<blockquote>\n<p>学姐：“绝对。绝对哦？”</p>\n</blockquote>\n<p>学姐说自己的父母离婚的理由是因为工作一直不能在一起，所以男主说“那么只要我们以后工作在一起不就行了，一起开个咖啡店怎么样？”</p>\n<p>呀，这个作为切入点，真的很不错。虽然我不是女生，不过我感觉我都要被男主的措辞感动了。</p>\n<hr>\n<p>最后一个事件，我也想提一下。</p>\n<p>学姐在确定了与男主一起携手未来后，老师们开始埋怨起学姐了。</p>\n<p>学姐是一个超级优等生，一直是各种第一第一第一，而男主是那种成绩不怎么起眼的小角色，所以关于学姐在高三之际还进行恋爱什么的，可能会影响学业人生之类的话题</p>\n<p>当时学姐与老师争论人生未来的时候，说的理由实在是太油说服力了。加上学姐的cv强有力的配音，感觉学姐整个人的形象油然而生，不愧是学姐。我打心里佩服。。。。。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>呼，总算是对自己的galgame经历有了一篇小小的交代总结。</p>\n<p>虽然感觉自己没写好，没有写出自己想表达的内容。</p>\n<p>不过，就这样吧。有这么一篇文章后，以后自己拿出来就有东西看了。我为自己的galgame日记划下一个句点，这是第一次，也是最后一次对自己体验过的galgame进行大篇幅的评价，说出来感觉心情舒畅呢～<br>嘛，小长假过去了，又要开始好好工作学习，也祝自己能够顺顺利利吧，也恭祝日本的galgame越做越好！希望国人可以更加关注下正版，自己喜欢的东西一定要给点钱买个正版支持一下哦</p>\n<img src=\"http://i67.tinypic.com/2wciah2.png\">\n"},{"title":"人性的混乱","date":"2019-05-29T07:40:34.000Z","_content":"\n## 导言\n\n最近事情太忙，所以有好几天没写博客了。但是今天，我在网上无意间看到了一篇视频，视频是一个北京老师针对目前很多学生”死学习“，“假努力”的现状的批判，最后抛出观点：我们作为一个普通人，首先要学会的是明确目标，然后展开行动。虽然有些地方我不是非常理解和认同老师的观点，但是也是确确实实的触动了我，引起了我个人的思考。我个人文化水平不高，只是一个普通的大学生，看的人性相关的书也不多，所以只能算是个小白。但是我看完视频后，非常想写一篇这方面方向思考的文章，虽然我可能表达有问题，理解有问题，但是我觉得我真的非常有必要记录下我对于这方面的到底是怎么考虑的。\n\n现在是个信息时代，是个提倡言论自由的时代，我也最讨厌洗脑这个概念。所以在我还不是非常明确某个结论的时候，我不想这篇文章被太多的人看到。我写这篇文章是有另外自己的目的的，那就是写给自己的父母看看。因为从今往后我们还要生活很长一段时间，所以交流是不可避免的。不交流那是一种自我否定，自我逃避。但是现在迫于环境的压力，我和父母的交流越来越少，能说的话也越来越少了。这让我感觉很惋惜，所以我想写一点文章，不是专门给大众看的，而是专门写点东西给父母看，向父母阐述自己的内心想法，好让他们对我有更加深刻的了解，以免父母做出各种奇奇怪怪的举动，我甚至不希望在我人生的发展阶段，让父母来干涉过多，所以我要做的首先，那必须是让父母理解我，知道我，这样他们就不会盲目的做出一些出乎我意料的举动，这样我也可以更好的规划未来的发展。\n\n我会尽量用比较通俗的语言来说明我想说的话题，而不是用一些父母看都看不懂的术语来增加阅读难度。因为我不喜欢“代沟”这个词，我希望我可以与任何年龄的人进行深层次的沟通，从而获得我想要的东西，为了达到这个目的，我觉得我必须学会把话讲的通俗易懂。\n\n那么接下来还是回到主题，从谈“死学习”“假努力”来讲述一些我认为不合理的社会现象\n\n## 从我的童年经历开始谈“死学习”“假努力”\n\n回想我初中时，班主任经常说我虽然各方面都干的不错，但就是缺乏自主性。我一度自信满满的觉得老师肯定不会说我坏话，因为我把各方面的事情都处理的还算不错，所以我听到老师说我没有自主性的时候，我很惊讶，到现在还记忆犹新。在高三那年，也许是我人生最努力的那段时间里，我也一度思考过自己的自主性问题。只可惜当时没能记录下来，现在没法参考当时的自己的心情。现在大学毕业工作已经一年多了，最近忙于换工作，忙于不停复习行业基础知识以应付面试，就在这种时候，我又开始了关于自主性问题的思考。看来这个问题的解决不是一个容易事，它也许会伴随人的一生，一直思考下去。说的更加虚无一点，也许当我真正想透了这个问题的时候，我可能已经失去了做人的那种实体感也说不定。\n\n从我小学记事开始，我的生活就没有自主性可言，那时候我最想做的事情无非就是认真完成作业，然后就是偷偷的自我娱乐，有时候听歌，有时候看电视，有时候玩玩电脑游戏。小学的我不知道为什么要学习。不过我的内心深处却明白另一个道理，我如果不好好学习，那么肯定会挨骂，会惨不忍睹。因为我小时候，身边的亲人都提倡一种观念，那就是一定要好好读书，将来才有出息。虽然这个原则换到现在大部分70，80年代当家长的情况下，依旧没有改变。**好好读书，将来才有出息**这句话没错，我从大局观的角度出发，这句话真的一点问题都没有。不过，这句话会产生一种奇怪的后果，这种后果是在我自己的亲身经历上证明了的，那就是会让小孩子觉得，**如果不读书，就会打屁屁，就会被父母骂的很惨**，这应该是我意识到要学习的第一个原因。在潜移默化之中，我慢慢的就把**好好读书，将来才有出息**的真正概念给偷换掉了。然而为什么我会歪曲对好好读书这句话的含义呢？我后来仔细想了想，也许是因为见识太浅的缘故吧。眼见为实耳听为虚，这是每个人都懂的道理。虽然家长们拼命的和你说，读书怎么怎么好，读书将来就有大出息（或者说赚钱），但是小学的我无法理解。小学的我没有亲眼见证一个读书好的人，最后有出息；小学的我从来都是道听途说，“你看别人家的某某某，多有出息”；正因为我内心有这种想法，所以导致我对于“学习”是一种观望的态度，我没有迫切的希望自己去学习。但是最终我还是老老实实开始了小学初中高中，是因为抚养我长大的爸爸妈妈告诉我，学习是好的，他们让我去学习，我不想被骂，所以我努力学习。我是听了自己认为最亲近的人的话，才去学习的。而不是因为学习可以有出息，才去学习的。\n\n刚刚我思考了自己为什么要”学习“，结论是非常露骨的，因为这个结论不是那种光明的，不是那种高尚的。而只是单纯的因为**如果不读书，就会打屁屁，就会被父母骂的很惨**\n\n针对这个结论，我想了很多，我一直想一直想，反复的想，甚至到最后开始有点自我矛盾，自我混乱。\n我曾想，可能是我不想让父母失望？没有那么简单\n\n不过幸运的是，我在中华字典里找到了可以描述这种结论发生原因的词。那就是**危机感**\n\n## ”假学习“”假努力“背后的危机意识\n\n人是一个具有危机感的生物，而不同的人对于危机感的感觉是不一样的；一个人危机感的强弱，或多或少的决定了他一生的下限。意思就是说至少危机感强的人肯定在社会上混的不差（除去那些已经抛弃危机感的人）。\n\n我为什么学习？我小时候每天晚上一回家，第一件事情就是做到自己的位置上，然后打开我的作业本，开始静悄悄的做作业。我最怕的也是最希望的就是奶奶进来给我送吃的，不是说吃的有多好吃，而是因为自己在好好学习的样子能够被奶奶发现。因为我知道奶奶的一些行为习惯，奶奶习惯在父母面前说我的一些情况，所以我最希望的就是奶奶进来，然后看到我好好做作业的样子，然后去给我的父母打小报告，说我在好好写作业。而为什么说我也最怕奶奶进来给我送吃的呢？因为我有时候也会开小差，小时候特别喜欢听音乐，或者QQ和同学聊天,或者玩游戏机，我怕奶奶突然进来，然后发现我在做其他事情。如果这些事情被父母知道了，那肯定就会挨骂，从而我的生活质量肯定就会下降，而那是我不允许发生的事情。\n\n这些内心描写，其实全都是因为**危机感**在作祟。也许当时的我还没有意识到**危机感**，但是我的本能告诉我，驱使着我努力在亲人面前表现一个比较好的自己。父母给了我居住的环境，父母给了我吃的穿的，我生怕我表现的不够好，导致自己在社会中处于一种比较危险的位置，甚至可能导致最后没得吃没得穿，如果没得吃那就直接导致了我个体的存亡问题。我这么说也许会非常的不人道，因为父母给孩子的一切，也是基于父爱和母爱。但是父爱和母爱怎样伟大，世界上仍然有很多养不起孩子的人，抛弃自己的孩子。我尊重父爱和母爱，它们都是人内心的本能，是一种原动力，这我从养一些小宠物中有点感同身受，虽然我还没有孩子。但是爱是对于有故事的人来说的，而**危机感**是一个刚出生的婴儿都懂的道理，就像小时候的我一样。\n\n一名北京老师在视频里说，现在的孩子太多的是”假学习“”假努力“，看上去学习很用功，但是实际上却成绩一般。这些问题的缘由我认为都可以用**危机感**去解释。因为我自己以前就是这样的，所以我猜测这些孩子的学习动力可能也是因为**危机感**。他们的学习动力就是**危机感**，只不过他们的**危机感**比一般人要强烈，所以看上去非常拼命，因为他们非常清楚，如果不做到这份上，那么可能会失去自己目前所拥有的一切，可能父母不会给自己买好吃的买好看的，或者可能会剥夺玩手机玩游戏的机会，或者出去和小伙伴玩耍的机会等等。只不过他们不明白，这种靠**危机感**来驱使的学习，不是自主的，只是本能驱使的。我敢断言，如果某一天突然告诉他们，自己的父母要出国出差10多年，但是会远程提供生活补助资金，那么这些孩子将会彻底的从**危机感**中解放出来，因为威胁他们的直接源头不在了，他们会处在一个真空的环境中，不被检测，不被施压，他们可以做自己想做的事情而且不需要担心没法活下去，因为父母会为自己提供远程生活补助资金。这些孩子爱父母，也依赖着父母，但是却不是完全的爱，是片面的爱，因为爱不是一个一句话就可以理解的事情，更不是一年两年就可以领悟的道理，爱只有在长年的酝酿之后才会悄悄的种在人的心里，作为人的原动力，让人变得”失去理智“。\n\n## 国内社会流行的”大学无用论“与”假学习“的联系\n\n在中国，在中流阶层，也就是不偏好也不偏坏，不好不坏的那些人中，非常流行一种说法，那就是”高考好好考，考个好大学就轻松了“。这句话，在现在看来。它是破坏性的，是误人子弟的，因为这种说法曾一度差点毁了我的一生，并且现在还有着各种后遗症纠缠着我\n\n首先，基于”假学习“的结论，很多孩子是被**危机感**驱使着去学习的，就像我小时候一样。如果把**危机感**比作一条狗，那么这条狗他最希望从你身上得到的是什么呢？ 我想肯定是能够给他一个狗窝，每天可以给他喂点吃的。换个说法就是，给他一套房，每天可以喂吃的，那么人生就足够了。\n\n我想表达的意思就是：**危机感可以带领我们活下去，甚至到达买房结婚这样的人生目标，但是这是危机感可以带给我们的极限，它不能带领我们走向更远**\n\n在我还是高中的时候，我和好几个前辈聊天，他们几乎都表达了”高考好好考，考个好大学就轻松了“这样的意思。当时的我已经是高三，心智慢慢的成熟，不过依旧还是被这句话带歪了方向。像我这样，一路学习，被**危机感**驱使过来的孩子。一听到这句话，内心是真的无比高兴的。就在高三那段时间里，我变了，我变得无比努力。因为我内心深处把这句话解读为**如果这次努力了，可能就再也不需要为自己的生活瞎操心了**。所以我拼命一般的学习。我记得我高中的时候，一天到晚就在那里做题看书，早上甚至5点不到爬起来，晚上甚至打灯夜读。那时的我已经完全不在乎奶奶来不来检查我是否在认真做作业了，我在乎的只有考好，然后得到梦寐以求的轻松的生活环境。我还曾一度傻傻的觉得自己懂事了，不需要奶奶，爸爸妈妈的监督就能够好好学习了。然而最可笑的事，我居然会把**自己不需要人管着就能够好好学习**这一点当做自己懂事的一个标准。\n\n虽然我现在还是挺感谢当时努力的自己。但是我仍然要说一句公道话，这是一种不科学的努力方式，是一种极易被破坏的学习方式，是一种典型的国内普遍存在着的，扭曲的学生学习道路。\n\n为什么说是一种具有破坏性的学习方式？从我上大学以后我慢慢明白了这个道理。上大学后，特别是大一，因为远离父母的管制，然后每个月还有父母的生活费的供给，我可以说我活的确实很轻松，我学着我自认为很喜欢的计算机知识，在休息时间玩着我喜欢的电脑游戏，再也不怕奶奶突然进来催我写作业。我甚至还能在游戏里充点钱，从而提高我的游戏体验。在大学课程上，我小心翼翼的完成必须完成的作业与学习内容，而对于其他不太重要的课程不太关心。我那时特别喜欢“玩手机”，看一些有趣的漫画，聊一些有趣的话题（学习无关）。我还特别喜欢在下课后买一份烤串+橙汁，回宿舍边看电影边吃，最终导致了大学后我的体重开始超标，老妈开始说我胖了。然而我在大一大二过程中表现出的这种散漫的学习态度，其最终缘由我觉得还是初中老师的那句话，那就是我缺乏自主性，也就是“假学习”“假努力”。我相信了亲人口中说的“高考好好考，考个好大学就轻松了”，但是仔细想来这不是父母和我说的，而是表哥表姐说的话。所以我也明白了一个道理，作为父母，对孩子一定不能传播负面消极的思想，要永远保持给孩子输出一个正面的思想，要永远保持告诉孩子做什么是绝对正确的，就比如“学习”，要把自己用时间去证明的好道理及时的告诉孩子，不管你用什么方式，口头也好，书面也罢，总之永远不要停止交流，如果发现交流存在困难，那么最好就像我现在这样，用书面的形式去表达，把大家的思想再次统一到一个水平线上。（我认为告诉孩子学习是一件绝对正确的事情，作为父母，我认为绝对不能向自己的孩子传输不学习也没关系的话）\n\n## 兴趣也许可以打败危机意识\n\n我从初中到高中一直被老师诟病的缺乏自主性，直到我大学毕业才真正理解，并且付出了惨痛的代价。我经过这好几年的洗礼，至少明白了一点，我确实喜欢编程。在我高中填志愿一眼看到“软件工程”的那一瞬间，我才第一次有种为自己学习的感觉。在大学毕业后，我心里就产生了一个梦想，我一直想去实现。但是这个梦想没法转换为消费力，也就是说它可能没法赚到钱，所以我从来只字不提。但是毕竟今天聊到了这份上，那么把它搬出来也是无可奈何的。相比于赚钱糊口，这个小梦想总能在我动摇的时候给我更大的原动力去继续坚持编程。入行以后，我才懂得了这一行水太深，想做到优秀，那付出可不比做个主刀医生简单。但是非常遗憾的是，软件在国内才刚刚红火，不像医生职业那样，有非常清晰的发展方向。做编程，最好的方法只有实战，不停的实战，然后悟出其中的道理，最后达到融会贯通，才算刚刚入门。这也是一开始我没有去考研究生的一部分原因（另一部分原因是我想休息，不想继续学习，我想把我的知识化为生产力）。在随后的工作中，我虽然如愿以偿的赚到了一些钱，但是渐渐地我也发现了这行业的问题，无止境的加班，混乱的行业标准，这些都让我一度对软件这行业彻底失望。不过关键时候让我坚持过来的，不是赚钱，而是我那小小的梦想。\n\n一旦坚持过来后，我想说的是，原本“假学习”的思想就再也不存在了，我可以坦诚的面对这一切，我甚至可以冷静的分析考研读博的好处，而不是一味的坚持实战至上的理论。我开始不关心自己身边的朋友或者亲人的孩子混的怎么怎么样，攀比的心理逐渐消失。如果他们混的很好，那么我会恭喜他们，而不是眼红他们；如果他们混的不好，那么我开始分析为什么，而不是单纯关心别人，问候别人；以前是父母带着我走，而现在是我开始自己摸索想走的路，虽然我感觉我懂的很晚，但是我觉得这一切都来得及。下一个阶段是我人生真正意义上的第二个阶段，如果你问我你的目标是什么。那么简单点来说，我想有自己的房，有自己的家；但是心灵深处，我比任何人都知道一件事，那就是房子是为了生存，是**危机感**驱使着我行动的第二目标。但是我的那个梦想是真正扶持着我努力的第一目标。\n\n当然我也知道，有很多人为了赚钱，为了自己的孩子，最后可能放弃了自己的梦想，选择拥抱自己认为的，可以实现的，最快速的赚钱方式去疯狂赚钱。我也知道肯定有一大部分人在当初觉得自己的梦想可以等赚够钱了再去实现也没问题。\n\n我不知道我在未来会不会被生活的洪流逼得也只能拼命赚钱，但是也正因为如此，我觉得我写这篇文章就更有意义。这篇文章是现阶段我心灵思考的产物，一切东西都是我真实的所想所闻。10年后的自己看到这篇文章会是什么想法呢？我很好奇。\n\n## 尾\n\n总体而言全篇是根据自我经历出发，阐述了当今中国小孩子“假学习”的现状，最后表达个人看法和报复的一篇文章。","source":"_posts/人性的混乱.md","raw":"---\ntitle: 人性的混乱\ntags: 随笔\ncategories: 生活\ndate: 2019-05-29 15:40:34\n---\n\n## 导言\n\n最近事情太忙，所以有好几天没写博客了。但是今天，我在网上无意间看到了一篇视频，视频是一个北京老师针对目前很多学生”死学习“，“假努力”的现状的批判，最后抛出观点：我们作为一个普通人，首先要学会的是明确目标，然后展开行动。虽然有些地方我不是非常理解和认同老师的观点，但是也是确确实实的触动了我，引起了我个人的思考。我个人文化水平不高，只是一个普通的大学生，看的人性相关的书也不多，所以只能算是个小白。但是我看完视频后，非常想写一篇这方面方向思考的文章，虽然我可能表达有问题，理解有问题，但是我觉得我真的非常有必要记录下我对于这方面的到底是怎么考虑的。\n\n现在是个信息时代，是个提倡言论自由的时代，我也最讨厌洗脑这个概念。所以在我还不是非常明确某个结论的时候，我不想这篇文章被太多的人看到。我写这篇文章是有另外自己的目的的，那就是写给自己的父母看看。因为从今往后我们还要生活很长一段时间，所以交流是不可避免的。不交流那是一种自我否定，自我逃避。但是现在迫于环境的压力，我和父母的交流越来越少，能说的话也越来越少了。这让我感觉很惋惜，所以我想写一点文章，不是专门给大众看的，而是专门写点东西给父母看，向父母阐述自己的内心想法，好让他们对我有更加深刻的了解，以免父母做出各种奇奇怪怪的举动，我甚至不希望在我人生的发展阶段，让父母来干涉过多，所以我要做的首先，那必须是让父母理解我，知道我，这样他们就不会盲目的做出一些出乎我意料的举动，这样我也可以更好的规划未来的发展。\n\n我会尽量用比较通俗的语言来说明我想说的话题，而不是用一些父母看都看不懂的术语来增加阅读难度。因为我不喜欢“代沟”这个词，我希望我可以与任何年龄的人进行深层次的沟通，从而获得我想要的东西，为了达到这个目的，我觉得我必须学会把话讲的通俗易懂。\n\n那么接下来还是回到主题，从谈“死学习”“假努力”来讲述一些我认为不合理的社会现象\n\n## 从我的童年经历开始谈“死学习”“假努力”\n\n回想我初中时，班主任经常说我虽然各方面都干的不错，但就是缺乏自主性。我一度自信满满的觉得老师肯定不会说我坏话，因为我把各方面的事情都处理的还算不错，所以我听到老师说我没有自主性的时候，我很惊讶，到现在还记忆犹新。在高三那年，也许是我人生最努力的那段时间里，我也一度思考过自己的自主性问题。只可惜当时没能记录下来，现在没法参考当时的自己的心情。现在大学毕业工作已经一年多了，最近忙于换工作，忙于不停复习行业基础知识以应付面试，就在这种时候，我又开始了关于自主性问题的思考。看来这个问题的解决不是一个容易事，它也许会伴随人的一生，一直思考下去。说的更加虚无一点，也许当我真正想透了这个问题的时候，我可能已经失去了做人的那种实体感也说不定。\n\n从我小学记事开始，我的生活就没有自主性可言，那时候我最想做的事情无非就是认真完成作业，然后就是偷偷的自我娱乐，有时候听歌，有时候看电视，有时候玩玩电脑游戏。小学的我不知道为什么要学习。不过我的内心深处却明白另一个道理，我如果不好好学习，那么肯定会挨骂，会惨不忍睹。因为我小时候，身边的亲人都提倡一种观念，那就是一定要好好读书，将来才有出息。虽然这个原则换到现在大部分70，80年代当家长的情况下，依旧没有改变。**好好读书，将来才有出息**这句话没错，我从大局观的角度出发，这句话真的一点问题都没有。不过，这句话会产生一种奇怪的后果，这种后果是在我自己的亲身经历上证明了的，那就是会让小孩子觉得，**如果不读书，就会打屁屁，就会被父母骂的很惨**，这应该是我意识到要学习的第一个原因。在潜移默化之中，我慢慢的就把**好好读书，将来才有出息**的真正概念给偷换掉了。然而为什么我会歪曲对好好读书这句话的含义呢？我后来仔细想了想，也许是因为见识太浅的缘故吧。眼见为实耳听为虚，这是每个人都懂的道理。虽然家长们拼命的和你说，读书怎么怎么好，读书将来就有大出息（或者说赚钱），但是小学的我无法理解。小学的我没有亲眼见证一个读书好的人，最后有出息；小学的我从来都是道听途说，“你看别人家的某某某，多有出息”；正因为我内心有这种想法，所以导致我对于“学习”是一种观望的态度，我没有迫切的希望自己去学习。但是最终我还是老老实实开始了小学初中高中，是因为抚养我长大的爸爸妈妈告诉我，学习是好的，他们让我去学习，我不想被骂，所以我努力学习。我是听了自己认为最亲近的人的话，才去学习的。而不是因为学习可以有出息，才去学习的。\n\n刚刚我思考了自己为什么要”学习“，结论是非常露骨的，因为这个结论不是那种光明的，不是那种高尚的。而只是单纯的因为**如果不读书，就会打屁屁，就会被父母骂的很惨**\n\n针对这个结论，我想了很多，我一直想一直想，反复的想，甚至到最后开始有点自我矛盾，自我混乱。\n我曾想，可能是我不想让父母失望？没有那么简单\n\n不过幸运的是，我在中华字典里找到了可以描述这种结论发生原因的词。那就是**危机感**\n\n## ”假学习“”假努力“背后的危机意识\n\n人是一个具有危机感的生物，而不同的人对于危机感的感觉是不一样的；一个人危机感的强弱，或多或少的决定了他一生的下限。意思就是说至少危机感强的人肯定在社会上混的不差（除去那些已经抛弃危机感的人）。\n\n我为什么学习？我小时候每天晚上一回家，第一件事情就是做到自己的位置上，然后打开我的作业本，开始静悄悄的做作业。我最怕的也是最希望的就是奶奶进来给我送吃的，不是说吃的有多好吃，而是因为自己在好好学习的样子能够被奶奶发现。因为我知道奶奶的一些行为习惯，奶奶习惯在父母面前说我的一些情况，所以我最希望的就是奶奶进来，然后看到我好好做作业的样子，然后去给我的父母打小报告，说我在好好写作业。而为什么说我也最怕奶奶进来给我送吃的呢？因为我有时候也会开小差，小时候特别喜欢听音乐，或者QQ和同学聊天,或者玩游戏机，我怕奶奶突然进来，然后发现我在做其他事情。如果这些事情被父母知道了，那肯定就会挨骂，从而我的生活质量肯定就会下降，而那是我不允许发生的事情。\n\n这些内心描写，其实全都是因为**危机感**在作祟。也许当时的我还没有意识到**危机感**，但是我的本能告诉我，驱使着我努力在亲人面前表现一个比较好的自己。父母给了我居住的环境，父母给了我吃的穿的，我生怕我表现的不够好，导致自己在社会中处于一种比较危险的位置，甚至可能导致最后没得吃没得穿，如果没得吃那就直接导致了我个体的存亡问题。我这么说也许会非常的不人道，因为父母给孩子的一切，也是基于父爱和母爱。但是父爱和母爱怎样伟大，世界上仍然有很多养不起孩子的人，抛弃自己的孩子。我尊重父爱和母爱，它们都是人内心的本能，是一种原动力，这我从养一些小宠物中有点感同身受，虽然我还没有孩子。但是爱是对于有故事的人来说的，而**危机感**是一个刚出生的婴儿都懂的道理，就像小时候的我一样。\n\n一名北京老师在视频里说，现在的孩子太多的是”假学习“”假努力“，看上去学习很用功，但是实际上却成绩一般。这些问题的缘由我认为都可以用**危机感**去解释。因为我自己以前就是这样的，所以我猜测这些孩子的学习动力可能也是因为**危机感**。他们的学习动力就是**危机感**，只不过他们的**危机感**比一般人要强烈，所以看上去非常拼命，因为他们非常清楚，如果不做到这份上，那么可能会失去自己目前所拥有的一切，可能父母不会给自己买好吃的买好看的，或者可能会剥夺玩手机玩游戏的机会，或者出去和小伙伴玩耍的机会等等。只不过他们不明白，这种靠**危机感**来驱使的学习，不是自主的，只是本能驱使的。我敢断言，如果某一天突然告诉他们，自己的父母要出国出差10多年，但是会远程提供生活补助资金，那么这些孩子将会彻底的从**危机感**中解放出来，因为威胁他们的直接源头不在了，他们会处在一个真空的环境中，不被检测，不被施压，他们可以做自己想做的事情而且不需要担心没法活下去，因为父母会为自己提供远程生活补助资金。这些孩子爱父母，也依赖着父母，但是却不是完全的爱，是片面的爱，因为爱不是一个一句话就可以理解的事情，更不是一年两年就可以领悟的道理，爱只有在长年的酝酿之后才会悄悄的种在人的心里，作为人的原动力，让人变得”失去理智“。\n\n## 国内社会流行的”大学无用论“与”假学习“的联系\n\n在中国，在中流阶层，也就是不偏好也不偏坏，不好不坏的那些人中，非常流行一种说法，那就是”高考好好考，考个好大学就轻松了“。这句话，在现在看来。它是破坏性的，是误人子弟的，因为这种说法曾一度差点毁了我的一生，并且现在还有着各种后遗症纠缠着我\n\n首先，基于”假学习“的结论，很多孩子是被**危机感**驱使着去学习的，就像我小时候一样。如果把**危机感**比作一条狗，那么这条狗他最希望从你身上得到的是什么呢？ 我想肯定是能够给他一个狗窝，每天可以给他喂点吃的。换个说法就是，给他一套房，每天可以喂吃的，那么人生就足够了。\n\n我想表达的意思就是：**危机感可以带领我们活下去，甚至到达买房结婚这样的人生目标，但是这是危机感可以带给我们的极限，它不能带领我们走向更远**\n\n在我还是高中的时候，我和好几个前辈聊天，他们几乎都表达了”高考好好考，考个好大学就轻松了“这样的意思。当时的我已经是高三，心智慢慢的成熟，不过依旧还是被这句话带歪了方向。像我这样，一路学习，被**危机感**驱使过来的孩子。一听到这句话，内心是真的无比高兴的。就在高三那段时间里，我变了，我变得无比努力。因为我内心深处把这句话解读为**如果这次努力了，可能就再也不需要为自己的生活瞎操心了**。所以我拼命一般的学习。我记得我高中的时候，一天到晚就在那里做题看书，早上甚至5点不到爬起来，晚上甚至打灯夜读。那时的我已经完全不在乎奶奶来不来检查我是否在认真做作业了，我在乎的只有考好，然后得到梦寐以求的轻松的生活环境。我还曾一度傻傻的觉得自己懂事了，不需要奶奶，爸爸妈妈的监督就能够好好学习了。然而最可笑的事，我居然会把**自己不需要人管着就能够好好学习**这一点当做自己懂事的一个标准。\n\n虽然我现在还是挺感谢当时努力的自己。但是我仍然要说一句公道话，这是一种不科学的努力方式，是一种极易被破坏的学习方式，是一种典型的国内普遍存在着的，扭曲的学生学习道路。\n\n为什么说是一种具有破坏性的学习方式？从我上大学以后我慢慢明白了这个道理。上大学后，特别是大一，因为远离父母的管制，然后每个月还有父母的生活费的供给，我可以说我活的确实很轻松，我学着我自认为很喜欢的计算机知识，在休息时间玩着我喜欢的电脑游戏，再也不怕奶奶突然进来催我写作业。我甚至还能在游戏里充点钱，从而提高我的游戏体验。在大学课程上，我小心翼翼的完成必须完成的作业与学习内容，而对于其他不太重要的课程不太关心。我那时特别喜欢“玩手机”，看一些有趣的漫画，聊一些有趣的话题（学习无关）。我还特别喜欢在下课后买一份烤串+橙汁，回宿舍边看电影边吃，最终导致了大学后我的体重开始超标，老妈开始说我胖了。然而我在大一大二过程中表现出的这种散漫的学习态度，其最终缘由我觉得还是初中老师的那句话，那就是我缺乏自主性，也就是“假学习”“假努力”。我相信了亲人口中说的“高考好好考，考个好大学就轻松了”，但是仔细想来这不是父母和我说的，而是表哥表姐说的话。所以我也明白了一个道理，作为父母，对孩子一定不能传播负面消极的思想，要永远保持给孩子输出一个正面的思想，要永远保持告诉孩子做什么是绝对正确的，就比如“学习”，要把自己用时间去证明的好道理及时的告诉孩子，不管你用什么方式，口头也好，书面也罢，总之永远不要停止交流，如果发现交流存在困难，那么最好就像我现在这样，用书面的形式去表达，把大家的思想再次统一到一个水平线上。（我认为告诉孩子学习是一件绝对正确的事情，作为父母，我认为绝对不能向自己的孩子传输不学习也没关系的话）\n\n## 兴趣也许可以打败危机意识\n\n我从初中到高中一直被老师诟病的缺乏自主性，直到我大学毕业才真正理解，并且付出了惨痛的代价。我经过这好几年的洗礼，至少明白了一点，我确实喜欢编程。在我高中填志愿一眼看到“软件工程”的那一瞬间，我才第一次有种为自己学习的感觉。在大学毕业后，我心里就产生了一个梦想，我一直想去实现。但是这个梦想没法转换为消费力，也就是说它可能没法赚到钱，所以我从来只字不提。但是毕竟今天聊到了这份上，那么把它搬出来也是无可奈何的。相比于赚钱糊口，这个小梦想总能在我动摇的时候给我更大的原动力去继续坚持编程。入行以后，我才懂得了这一行水太深，想做到优秀，那付出可不比做个主刀医生简单。但是非常遗憾的是，软件在国内才刚刚红火，不像医生职业那样，有非常清晰的发展方向。做编程，最好的方法只有实战，不停的实战，然后悟出其中的道理，最后达到融会贯通，才算刚刚入门。这也是一开始我没有去考研究生的一部分原因（另一部分原因是我想休息，不想继续学习，我想把我的知识化为生产力）。在随后的工作中，我虽然如愿以偿的赚到了一些钱，但是渐渐地我也发现了这行业的问题，无止境的加班，混乱的行业标准，这些都让我一度对软件这行业彻底失望。不过关键时候让我坚持过来的，不是赚钱，而是我那小小的梦想。\n\n一旦坚持过来后，我想说的是，原本“假学习”的思想就再也不存在了，我可以坦诚的面对这一切，我甚至可以冷静的分析考研读博的好处，而不是一味的坚持实战至上的理论。我开始不关心自己身边的朋友或者亲人的孩子混的怎么怎么样，攀比的心理逐渐消失。如果他们混的很好，那么我会恭喜他们，而不是眼红他们；如果他们混的不好，那么我开始分析为什么，而不是单纯关心别人，问候别人；以前是父母带着我走，而现在是我开始自己摸索想走的路，虽然我感觉我懂的很晚，但是我觉得这一切都来得及。下一个阶段是我人生真正意义上的第二个阶段，如果你问我你的目标是什么。那么简单点来说，我想有自己的房，有自己的家；但是心灵深处，我比任何人都知道一件事，那就是房子是为了生存，是**危机感**驱使着我行动的第二目标。但是我的那个梦想是真正扶持着我努力的第一目标。\n\n当然我也知道，有很多人为了赚钱，为了自己的孩子，最后可能放弃了自己的梦想，选择拥抱自己认为的，可以实现的，最快速的赚钱方式去疯狂赚钱。我也知道肯定有一大部分人在当初觉得自己的梦想可以等赚够钱了再去实现也没问题。\n\n我不知道我在未来会不会被生活的洪流逼得也只能拼命赚钱，但是也正因为如此，我觉得我写这篇文章就更有意义。这篇文章是现阶段我心灵思考的产物，一切东西都是我真实的所想所闻。10年后的自己看到这篇文章会是什么想法呢？我很好奇。\n\n## 尾\n\n总体而言全篇是根据自我经历出发，阐述了当今中国小孩子“假学习”的现状，最后表达个人看法和报复的一篇文章。","slug":"人性的混乱","published":1,"updated":"2019-05-30T02:23:53.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck20gna00005cm6elj2oyqtok","content":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>最近事情太忙，所以有好几天没写博客了。但是今天，我在网上无意间看到了一篇视频，视频是一个北京老师针对目前很多学生”死学习“，“假努力”的现状的批判，最后抛出观点：我们作为一个普通人，首先要学会的是明确目标，然后展开行动。虽然有些地方我不是非常理解和认同老师的观点，但是也是确确实实的触动了我，引起了我个人的思考。我个人文化水平不高，只是一个普通的大学生，看的人性相关的书也不多，所以只能算是个小白。但是我看完视频后，非常想写一篇这方面方向思考的文章，虽然我可能表达有问题，理解有问题，但是我觉得我真的非常有必要记录下我对于这方面的到底是怎么考虑的。</p>\n<p>现在是个信息时代，是个提倡言论自由的时代，我也最讨厌洗脑这个概念。所以在我还不是非常明确某个结论的时候，我不想这篇文章被太多的人看到。我写这篇文章是有另外自己的目的的，那就是写给自己的父母看看。因为从今往后我们还要生活很长一段时间，所以交流是不可避免的。不交流那是一种自我否定，自我逃避。但是现在迫于环境的压力，我和父母的交流越来越少，能说的话也越来越少了。这让我感觉很惋惜，所以我想写一点文章，不是专门给大众看的，而是专门写点东西给父母看，向父母阐述自己的内心想法，好让他们对我有更加深刻的了解，以免父母做出各种奇奇怪怪的举动，我甚至不希望在我人生的发展阶段，让父母来干涉过多，所以我要做的首先，那必须是让父母理解我，知道我，这样他们就不会盲目的做出一些出乎我意料的举动，这样我也可以更好的规划未来的发展。</p>\n<p>我会尽量用比较通俗的语言来说明我想说的话题，而不是用一些父母看都看不懂的术语来增加阅读难度。因为我不喜欢“代沟”这个词，我希望我可以与任何年龄的人进行深层次的沟通，从而获得我想要的东西，为了达到这个目的，我觉得我必须学会把话讲的通俗易懂。</p>\n<p>那么接下来还是回到主题，从谈“死学习”“假努力”来讲述一些我认为不合理的社会现象</p>\n<h2 id=\"从我的童年经历开始谈“死学习”“假努力”\"><a href=\"#从我的童年经历开始谈“死学习”“假努力”\" class=\"headerlink\" title=\"从我的童年经历开始谈“死学习”“假努力”\"></a>从我的童年经历开始谈“死学习”“假努力”</h2><p>回想我初中时，班主任经常说我虽然各方面都干的不错，但就是缺乏自主性。我一度自信满满的觉得老师肯定不会说我坏话，因为我把各方面的事情都处理的还算不错，所以我听到老师说我没有自主性的时候，我很惊讶，到现在还记忆犹新。在高三那年，也许是我人生最努力的那段时间里，我也一度思考过自己的自主性问题。只可惜当时没能记录下来，现在没法参考当时的自己的心情。现在大学毕业工作已经一年多了，最近忙于换工作，忙于不停复习行业基础知识以应付面试，就在这种时候，我又开始了关于自主性问题的思考。看来这个问题的解决不是一个容易事，它也许会伴随人的一生，一直思考下去。说的更加虚无一点，也许当我真正想透了这个问题的时候，我可能已经失去了做人的那种实体感也说不定。</p>\n<p>从我小学记事开始，我的生活就没有自主性可言，那时候我最想做的事情无非就是认真完成作业，然后就是偷偷的自我娱乐，有时候听歌，有时候看电视，有时候玩玩电脑游戏。小学的我不知道为什么要学习。不过我的内心深处却明白另一个道理，我如果不好好学习，那么肯定会挨骂，会惨不忍睹。因为我小时候，身边的亲人都提倡一种观念，那就是一定要好好读书，将来才有出息。虽然这个原则换到现在大部分70，80年代当家长的情况下，依旧没有改变。<strong>好好读书，将来才有出息</strong>这句话没错，我从大局观的角度出发，这句话真的一点问题都没有。不过，这句话会产生一种奇怪的后果，这种后果是在我自己的亲身经历上证明了的，那就是会让小孩子觉得，<strong>如果不读书，就会打屁屁，就会被父母骂的很惨</strong>，这应该是我意识到要学习的第一个原因。在潜移默化之中，我慢慢的就把<strong>好好读书，将来才有出息</strong>的真正概念给偷换掉了。然而为什么我会歪曲对好好读书这句话的含义呢？我后来仔细想了想，也许是因为见识太浅的缘故吧。眼见为实耳听为虚，这是每个人都懂的道理。虽然家长们拼命的和你说，读书怎么怎么好，读书将来就有大出息（或者说赚钱），但是小学的我无法理解。小学的我没有亲眼见证一个读书好的人，最后有出息；小学的我从来都是道听途说，“你看别人家的某某某，多有出息”；正因为我内心有这种想法，所以导致我对于“学习”是一种观望的态度，我没有迫切的希望自己去学习。但是最终我还是老老实实开始了小学初中高中，是因为抚养我长大的爸爸妈妈告诉我，学习是好的，他们让我去学习，我不想被骂，所以我努力学习。我是听了自己认为最亲近的人的话，才去学习的。而不是因为学习可以有出息，才去学习的。</p>\n<p>刚刚我思考了自己为什么要”学习“，结论是非常露骨的，因为这个结论不是那种光明的，不是那种高尚的。而只是单纯的因为<strong>如果不读书，就会打屁屁，就会被父母骂的很惨</strong></p>\n<p>针对这个结论，我想了很多，我一直想一直想，反复的想，甚至到最后开始有点自我矛盾，自我混乱。<br>我曾想，可能是我不想让父母失望？没有那么简单</p>\n<p>不过幸运的是，我在中华字典里找到了可以描述这种结论发生原因的词。那就是<strong>危机感</strong></p>\n<h2 id=\"”假学习“”假努力“背后的危机意识\"><a href=\"#”假学习“”假努力“背后的危机意识\" class=\"headerlink\" title=\"”假学习“”假努力“背后的危机意识\"></a>”假学习“”假努力“背后的危机意识</h2><p>人是一个具有危机感的生物，而不同的人对于危机感的感觉是不一样的；一个人危机感的强弱，或多或少的决定了他一生的下限。意思就是说至少危机感强的人肯定在社会上混的不差（除去那些已经抛弃危机感的人）。</p>\n<p>我为什么学习？我小时候每天晚上一回家，第一件事情就是做到自己的位置上，然后打开我的作业本，开始静悄悄的做作业。我最怕的也是最希望的就是奶奶进来给我送吃的，不是说吃的有多好吃，而是因为自己在好好学习的样子能够被奶奶发现。因为我知道奶奶的一些行为习惯，奶奶习惯在父母面前说我的一些情况，所以我最希望的就是奶奶进来，然后看到我好好做作业的样子，然后去给我的父母打小报告，说我在好好写作业。而为什么说我也最怕奶奶进来给我送吃的呢？因为我有时候也会开小差，小时候特别喜欢听音乐，或者QQ和同学聊天,或者玩游戏机，我怕奶奶突然进来，然后发现我在做其他事情。如果这些事情被父母知道了，那肯定就会挨骂，从而我的生活质量肯定就会下降，而那是我不允许发生的事情。</p>\n<p>这些内心描写，其实全都是因为<strong>危机感</strong>在作祟。也许当时的我还没有意识到<strong>危机感</strong>，但是我的本能告诉我，驱使着我努力在亲人面前表现一个比较好的自己。父母给了我居住的环境，父母给了我吃的穿的，我生怕我表现的不够好，导致自己在社会中处于一种比较危险的位置，甚至可能导致最后没得吃没得穿，如果没得吃那就直接导致了我个体的存亡问题。我这么说也许会非常的不人道，因为父母给孩子的一切，也是基于父爱和母爱。但是父爱和母爱怎样伟大，世界上仍然有很多养不起孩子的人，抛弃自己的孩子。我尊重父爱和母爱，它们都是人内心的本能，是一种原动力，这我从养一些小宠物中有点感同身受，虽然我还没有孩子。但是爱是对于有故事的人来说的，而<strong>危机感</strong>是一个刚出生的婴儿都懂的道理，就像小时候的我一样。</p>\n<p>一名北京老师在视频里说，现在的孩子太多的是”假学习“”假努力“，看上去学习很用功，但是实际上却成绩一般。这些问题的缘由我认为都可以用<strong>危机感</strong>去解释。因为我自己以前就是这样的，所以我猜测这些孩子的学习动力可能也是因为<strong>危机感</strong>。他们的学习动力就是<strong>危机感</strong>，只不过他们的<strong>危机感</strong>比一般人要强烈，所以看上去非常拼命，因为他们非常清楚，如果不做到这份上，那么可能会失去自己目前所拥有的一切，可能父母不会给自己买好吃的买好看的，或者可能会剥夺玩手机玩游戏的机会，或者出去和小伙伴玩耍的机会等等。只不过他们不明白，这种靠<strong>危机感</strong>来驱使的学习，不是自主的，只是本能驱使的。我敢断言，如果某一天突然告诉他们，自己的父母要出国出差10多年，但是会远程提供生活补助资金，那么这些孩子将会彻底的从<strong>危机感</strong>中解放出来，因为威胁他们的直接源头不在了，他们会处在一个真空的环境中，不被检测，不被施压，他们可以做自己想做的事情而且不需要担心没法活下去，因为父母会为自己提供远程生活补助资金。这些孩子爱父母，也依赖着父母，但是却不是完全的爱，是片面的爱，因为爱不是一个一句话就可以理解的事情，更不是一年两年就可以领悟的道理，爱只有在长年的酝酿之后才会悄悄的种在人的心里，作为人的原动力，让人变得”失去理智“。</p>\n<h2 id=\"国内社会流行的”大学无用论“与”假学习“的联系\"><a href=\"#国内社会流行的”大学无用论“与”假学习“的联系\" class=\"headerlink\" title=\"国内社会流行的”大学无用论“与”假学习“的联系\"></a>国内社会流行的”大学无用论“与”假学习“的联系</h2><p>在中国，在中流阶层，也就是不偏好也不偏坏，不好不坏的那些人中，非常流行一种说法，那就是”高考好好考，考个好大学就轻松了“。这句话，在现在看来。它是破坏性的，是误人子弟的，因为这种说法曾一度差点毁了我的一生，并且现在还有着各种后遗症纠缠着我</p>\n<p>首先，基于”假学习“的结论，很多孩子是被<strong>危机感</strong>驱使着去学习的，就像我小时候一样。如果把<strong>危机感</strong>比作一条狗，那么这条狗他最希望从你身上得到的是什么呢？ 我想肯定是能够给他一个狗窝，每天可以给他喂点吃的。换个说法就是，给他一套房，每天可以喂吃的，那么人生就足够了。</p>\n<p>我想表达的意思就是：<strong>危机感可以带领我们活下去，甚至到达买房结婚这样的人生目标，但是这是危机感可以带给我们的极限，它不能带领我们走向更远</strong></p>\n<p>在我还是高中的时候，我和好几个前辈聊天，他们几乎都表达了”高考好好考，考个好大学就轻松了“这样的意思。当时的我已经是高三，心智慢慢的成熟，不过依旧还是被这句话带歪了方向。像我这样，一路学习，被<strong>危机感</strong>驱使过来的孩子。一听到这句话，内心是真的无比高兴的。就在高三那段时间里，我变了，我变得无比努力。因为我内心深处把这句话解读为<strong>如果这次努力了，可能就再也不需要为自己的生活瞎操心了</strong>。所以我拼命一般的学习。我记得我高中的时候，一天到晚就在那里做题看书，早上甚至5点不到爬起来，晚上甚至打灯夜读。那时的我已经完全不在乎奶奶来不来检查我是否在认真做作业了，我在乎的只有考好，然后得到梦寐以求的轻松的生活环境。我还曾一度傻傻的觉得自己懂事了，不需要奶奶，爸爸妈妈的监督就能够好好学习了。然而最可笑的事，我居然会把<strong>自己不需要人管着就能够好好学习</strong>这一点当做自己懂事的一个标准。</p>\n<p>虽然我现在还是挺感谢当时努力的自己。但是我仍然要说一句公道话，这是一种不科学的努力方式，是一种极易被破坏的学习方式，是一种典型的国内普遍存在着的，扭曲的学生学习道路。</p>\n<p>为什么说是一种具有破坏性的学习方式？从我上大学以后我慢慢明白了这个道理。上大学后，特别是大一，因为远离父母的管制，然后每个月还有父母的生活费的供给，我可以说我活的确实很轻松，我学着我自认为很喜欢的计算机知识，在休息时间玩着我喜欢的电脑游戏，再也不怕奶奶突然进来催我写作业。我甚至还能在游戏里充点钱，从而提高我的游戏体验。在大学课程上，我小心翼翼的完成必须完成的作业与学习内容，而对于其他不太重要的课程不太关心。我那时特别喜欢“玩手机”，看一些有趣的漫画，聊一些有趣的话题（学习无关）。我还特别喜欢在下课后买一份烤串+橙汁，回宿舍边看电影边吃，最终导致了大学后我的体重开始超标，老妈开始说我胖了。然而我在大一大二过程中表现出的这种散漫的学习态度，其最终缘由我觉得还是初中老师的那句话，那就是我缺乏自主性，也就是“假学习”“假努力”。我相信了亲人口中说的“高考好好考，考个好大学就轻松了”，但是仔细想来这不是父母和我说的，而是表哥表姐说的话。所以我也明白了一个道理，作为父母，对孩子一定不能传播负面消极的思想，要永远保持给孩子输出一个正面的思想，要永远保持告诉孩子做什么是绝对正确的，就比如“学习”，要把自己用时间去证明的好道理及时的告诉孩子，不管你用什么方式，口头也好，书面也罢，总之永远不要停止交流，如果发现交流存在困难，那么最好就像我现在这样，用书面的形式去表达，把大家的思想再次统一到一个水平线上。（我认为告诉孩子学习是一件绝对正确的事情，作为父母，我认为绝对不能向自己的孩子传输不学习也没关系的话）</p>\n<h2 id=\"兴趣也许可以打败危机意识\"><a href=\"#兴趣也许可以打败危机意识\" class=\"headerlink\" title=\"兴趣也许可以打败危机意识\"></a>兴趣也许可以打败危机意识</h2><p>我从初中到高中一直被老师诟病的缺乏自主性，直到我大学毕业才真正理解，并且付出了惨痛的代价。我经过这好几年的洗礼，至少明白了一点，我确实喜欢编程。在我高中填志愿一眼看到“软件工程”的那一瞬间，我才第一次有种为自己学习的感觉。在大学毕业后，我心里就产生了一个梦想，我一直想去实现。但是这个梦想没法转换为消费力，也就是说它可能没法赚到钱，所以我从来只字不提。但是毕竟今天聊到了这份上，那么把它搬出来也是无可奈何的。相比于赚钱糊口，这个小梦想总能在我动摇的时候给我更大的原动力去继续坚持编程。入行以后，我才懂得了这一行水太深，想做到优秀，那付出可不比做个主刀医生简单。但是非常遗憾的是，软件在国内才刚刚红火，不像医生职业那样，有非常清晰的发展方向。做编程，最好的方法只有实战，不停的实战，然后悟出其中的道理，最后达到融会贯通，才算刚刚入门。这也是一开始我没有去考研究生的一部分原因（另一部分原因是我想休息，不想继续学习，我想把我的知识化为生产力）。在随后的工作中，我虽然如愿以偿的赚到了一些钱，但是渐渐地我也发现了这行业的问题，无止境的加班，混乱的行业标准，这些都让我一度对软件这行业彻底失望。不过关键时候让我坚持过来的，不是赚钱，而是我那小小的梦想。</p>\n<p>一旦坚持过来后，我想说的是，原本“假学习”的思想就再也不存在了，我可以坦诚的面对这一切，我甚至可以冷静的分析考研读博的好处，而不是一味的坚持实战至上的理论。我开始不关心自己身边的朋友或者亲人的孩子混的怎么怎么样，攀比的心理逐渐消失。如果他们混的很好，那么我会恭喜他们，而不是眼红他们；如果他们混的不好，那么我开始分析为什么，而不是单纯关心别人，问候别人；以前是父母带着我走，而现在是我开始自己摸索想走的路，虽然我感觉我懂的很晚，但是我觉得这一切都来得及。下一个阶段是我人生真正意义上的第二个阶段，如果你问我你的目标是什么。那么简单点来说，我想有自己的房，有自己的家；但是心灵深处，我比任何人都知道一件事，那就是房子是为了生存，是<strong>危机感</strong>驱使着我行动的第二目标。但是我的那个梦想是真正扶持着我努力的第一目标。</p>\n<p>当然我也知道，有很多人为了赚钱，为了自己的孩子，最后可能放弃了自己的梦想，选择拥抱自己认为的，可以实现的，最快速的赚钱方式去疯狂赚钱。我也知道肯定有一大部分人在当初觉得自己的梦想可以等赚够钱了再去实现也没问题。</p>\n<p>我不知道我在未来会不会被生活的洪流逼得也只能拼命赚钱，但是也正因为如此，我觉得我写这篇文章就更有意义。这篇文章是现阶段我心灵思考的产物，一切东西都是我真实的所想所闻。10年后的自己看到这篇文章会是什么想法呢？我很好奇。</p>\n<h2 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h2><p>总体而言全篇是根据自我经历出发，阐述了当今中国小孩子“假学习”的现状，最后表达个人看法和报复的一篇文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导言\"><a href=\"#导言\" class=\"headerlink\" title=\"导言\"></a>导言</h2><p>最近事情太忙，所以有好几天没写博客了。但是今天，我在网上无意间看到了一篇视频，视频是一个北京老师针对目前很多学生”死学习“，“假努力”的现状的批判，最后抛出观点：我们作为一个普通人，首先要学会的是明确目标，然后展开行动。虽然有些地方我不是非常理解和认同老师的观点，但是也是确确实实的触动了我，引起了我个人的思考。我个人文化水平不高，只是一个普通的大学生，看的人性相关的书也不多，所以只能算是个小白。但是我看完视频后，非常想写一篇这方面方向思考的文章，虽然我可能表达有问题，理解有问题，但是我觉得我真的非常有必要记录下我对于这方面的到底是怎么考虑的。</p>\n<p>现在是个信息时代，是个提倡言论自由的时代，我也最讨厌洗脑这个概念。所以在我还不是非常明确某个结论的时候，我不想这篇文章被太多的人看到。我写这篇文章是有另外自己的目的的，那就是写给自己的父母看看。因为从今往后我们还要生活很长一段时间，所以交流是不可避免的。不交流那是一种自我否定，自我逃避。但是现在迫于环境的压力，我和父母的交流越来越少，能说的话也越来越少了。这让我感觉很惋惜，所以我想写一点文章，不是专门给大众看的，而是专门写点东西给父母看，向父母阐述自己的内心想法，好让他们对我有更加深刻的了解，以免父母做出各种奇奇怪怪的举动，我甚至不希望在我人生的发展阶段，让父母来干涉过多，所以我要做的首先，那必须是让父母理解我，知道我，这样他们就不会盲目的做出一些出乎我意料的举动，这样我也可以更好的规划未来的发展。</p>\n<p>我会尽量用比较通俗的语言来说明我想说的话题，而不是用一些父母看都看不懂的术语来增加阅读难度。因为我不喜欢“代沟”这个词，我希望我可以与任何年龄的人进行深层次的沟通，从而获得我想要的东西，为了达到这个目的，我觉得我必须学会把话讲的通俗易懂。</p>\n<p>那么接下来还是回到主题，从谈“死学习”“假努力”来讲述一些我认为不合理的社会现象</p>\n<h2 id=\"从我的童年经历开始谈“死学习”“假努力”\"><a href=\"#从我的童年经历开始谈“死学习”“假努力”\" class=\"headerlink\" title=\"从我的童年经历开始谈“死学习”“假努力”\"></a>从我的童年经历开始谈“死学习”“假努力”</h2><p>回想我初中时，班主任经常说我虽然各方面都干的不错，但就是缺乏自主性。我一度自信满满的觉得老师肯定不会说我坏话，因为我把各方面的事情都处理的还算不错，所以我听到老师说我没有自主性的时候，我很惊讶，到现在还记忆犹新。在高三那年，也许是我人生最努力的那段时间里，我也一度思考过自己的自主性问题。只可惜当时没能记录下来，现在没法参考当时的自己的心情。现在大学毕业工作已经一年多了，最近忙于换工作，忙于不停复习行业基础知识以应付面试，就在这种时候，我又开始了关于自主性问题的思考。看来这个问题的解决不是一个容易事，它也许会伴随人的一生，一直思考下去。说的更加虚无一点，也许当我真正想透了这个问题的时候，我可能已经失去了做人的那种实体感也说不定。</p>\n<p>从我小学记事开始，我的生活就没有自主性可言，那时候我最想做的事情无非就是认真完成作业，然后就是偷偷的自我娱乐，有时候听歌，有时候看电视，有时候玩玩电脑游戏。小学的我不知道为什么要学习。不过我的内心深处却明白另一个道理，我如果不好好学习，那么肯定会挨骂，会惨不忍睹。因为我小时候，身边的亲人都提倡一种观念，那就是一定要好好读书，将来才有出息。虽然这个原则换到现在大部分70，80年代当家长的情况下，依旧没有改变。<strong>好好读书，将来才有出息</strong>这句话没错，我从大局观的角度出发，这句话真的一点问题都没有。不过，这句话会产生一种奇怪的后果，这种后果是在我自己的亲身经历上证明了的，那就是会让小孩子觉得，<strong>如果不读书，就会打屁屁，就会被父母骂的很惨</strong>，这应该是我意识到要学习的第一个原因。在潜移默化之中，我慢慢的就把<strong>好好读书，将来才有出息</strong>的真正概念给偷换掉了。然而为什么我会歪曲对好好读书这句话的含义呢？我后来仔细想了想，也许是因为见识太浅的缘故吧。眼见为实耳听为虚，这是每个人都懂的道理。虽然家长们拼命的和你说，读书怎么怎么好，读书将来就有大出息（或者说赚钱），但是小学的我无法理解。小学的我没有亲眼见证一个读书好的人，最后有出息；小学的我从来都是道听途说，“你看别人家的某某某，多有出息”；正因为我内心有这种想法，所以导致我对于“学习”是一种观望的态度，我没有迫切的希望自己去学习。但是最终我还是老老实实开始了小学初中高中，是因为抚养我长大的爸爸妈妈告诉我，学习是好的，他们让我去学习，我不想被骂，所以我努力学习。我是听了自己认为最亲近的人的话，才去学习的。而不是因为学习可以有出息，才去学习的。</p>\n<p>刚刚我思考了自己为什么要”学习“，结论是非常露骨的，因为这个结论不是那种光明的，不是那种高尚的。而只是单纯的因为<strong>如果不读书，就会打屁屁，就会被父母骂的很惨</strong></p>\n<p>针对这个结论，我想了很多，我一直想一直想，反复的想，甚至到最后开始有点自我矛盾，自我混乱。<br>我曾想，可能是我不想让父母失望？没有那么简单</p>\n<p>不过幸运的是，我在中华字典里找到了可以描述这种结论发生原因的词。那就是<strong>危机感</strong></p>\n<h2 id=\"”假学习“”假努力“背后的危机意识\"><a href=\"#”假学习“”假努力“背后的危机意识\" class=\"headerlink\" title=\"”假学习“”假努力“背后的危机意识\"></a>”假学习“”假努力“背后的危机意识</h2><p>人是一个具有危机感的生物，而不同的人对于危机感的感觉是不一样的；一个人危机感的强弱，或多或少的决定了他一生的下限。意思就是说至少危机感强的人肯定在社会上混的不差（除去那些已经抛弃危机感的人）。</p>\n<p>我为什么学习？我小时候每天晚上一回家，第一件事情就是做到自己的位置上，然后打开我的作业本，开始静悄悄的做作业。我最怕的也是最希望的就是奶奶进来给我送吃的，不是说吃的有多好吃，而是因为自己在好好学习的样子能够被奶奶发现。因为我知道奶奶的一些行为习惯，奶奶习惯在父母面前说我的一些情况，所以我最希望的就是奶奶进来，然后看到我好好做作业的样子，然后去给我的父母打小报告，说我在好好写作业。而为什么说我也最怕奶奶进来给我送吃的呢？因为我有时候也会开小差，小时候特别喜欢听音乐，或者QQ和同学聊天,或者玩游戏机，我怕奶奶突然进来，然后发现我在做其他事情。如果这些事情被父母知道了，那肯定就会挨骂，从而我的生活质量肯定就会下降，而那是我不允许发生的事情。</p>\n<p>这些内心描写，其实全都是因为<strong>危机感</strong>在作祟。也许当时的我还没有意识到<strong>危机感</strong>，但是我的本能告诉我，驱使着我努力在亲人面前表现一个比较好的自己。父母给了我居住的环境，父母给了我吃的穿的，我生怕我表现的不够好，导致自己在社会中处于一种比较危险的位置，甚至可能导致最后没得吃没得穿，如果没得吃那就直接导致了我个体的存亡问题。我这么说也许会非常的不人道，因为父母给孩子的一切，也是基于父爱和母爱。但是父爱和母爱怎样伟大，世界上仍然有很多养不起孩子的人，抛弃自己的孩子。我尊重父爱和母爱，它们都是人内心的本能，是一种原动力，这我从养一些小宠物中有点感同身受，虽然我还没有孩子。但是爱是对于有故事的人来说的，而<strong>危机感</strong>是一个刚出生的婴儿都懂的道理，就像小时候的我一样。</p>\n<p>一名北京老师在视频里说，现在的孩子太多的是”假学习“”假努力“，看上去学习很用功，但是实际上却成绩一般。这些问题的缘由我认为都可以用<strong>危机感</strong>去解释。因为我自己以前就是这样的，所以我猜测这些孩子的学习动力可能也是因为<strong>危机感</strong>。他们的学习动力就是<strong>危机感</strong>，只不过他们的<strong>危机感</strong>比一般人要强烈，所以看上去非常拼命，因为他们非常清楚，如果不做到这份上，那么可能会失去自己目前所拥有的一切，可能父母不会给自己买好吃的买好看的，或者可能会剥夺玩手机玩游戏的机会，或者出去和小伙伴玩耍的机会等等。只不过他们不明白，这种靠<strong>危机感</strong>来驱使的学习，不是自主的，只是本能驱使的。我敢断言，如果某一天突然告诉他们，自己的父母要出国出差10多年，但是会远程提供生活补助资金，那么这些孩子将会彻底的从<strong>危机感</strong>中解放出来，因为威胁他们的直接源头不在了，他们会处在一个真空的环境中，不被检测，不被施压，他们可以做自己想做的事情而且不需要担心没法活下去，因为父母会为自己提供远程生活补助资金。这些孩子爱父母，也依赖着父母，但是却不是完全的爱，是片面的爱，因为爱不是一个一句话就可以理解的事情，更不是一年两年就可以领悟的道理，爱只有在长年的酝酿之后才会悄悄的种在人的心里，作为人的原动力，让人变得”失去理智“。</p>\n<h2 id=\"国内社会流行的”大学无用论“与”假学习“的联系\"><a href=\"#国内社会流行的”大学无用论“与”假学习“的联系\" class=\"headerlink\" title=\"国内社会流行的”大学无用论“与”假学习“的联系\"></a>国内社会流行的”大学无用论“与”假学习“的联系</h2><p>在中国，在中流阶层，也就是不偏好也不偏坏，不好不坏的那些人中，非常流行一种说法，那就是”高考好好考，考个好大学就轻松了“。这句话，在现在看来。它是破坏性的，是误人子弟的，因为这种说法曾一度差点毁了我的一生，并且现在还有着各种后遗症纠缠着我</p>\n<p>首先，基于”假学习“的结论，很多孩子是被<strong>危机感</strong>驱使着去学习的，就像我小时候一样。如果把<strong>危机感</strong>比作一条狗，那么这条狗他最希望从你身上得到的是什么呢？ 我想肯定是能够给他一个狗窝，每天可以给他喂点吃的。换个说法就是，给他一套房，每天可以喂吃的，那么人生就足够了。</p>\n<p>我想表达的意思就是：<strong>危机感可以带领我们活下去，甚至到达买房结婚这样的人生目标，但是这是危机感可以带给我们的极限，它不能带领我们走向更远</strong></p>\n<p>在我还是高中的时候，我和好几个前辈聊天，他们几乎都表达了”高考好好考，考个好大学就轻松了“这样的意思。当时的我已经是高三，心智慢慢的成熟，不过依旧还是被这句话带歪了方向。像我这样，一路学习，被<strong>危机感</strong>驱使过来的孩子。一听到这句话，内心是真的无比高兴的。就在高三那段时间里，我变了，我变得无比努力。因为我内心深处把这句话解读为<strong>如果这次努力了，可能就再也不需要为自己的生活瞎操心了</strong>。所以我拼命一般的学习。我记得我高中的时候，一天到晚就在那里做题看书，早上甚至5点不到爬起来，晚上甚至打灯夜读。那时的我已经完全不在乎奶奶来不来检查我是否在认真做作业了，我在乎的只有考好，然后得到梦寐以求的轻松的生活环境。我还曾一度傻傻的觉得自己懂事了，不需要奶奶，爸爸妈妈的监督就能够好好学习了。然而最可笑的事，我居然会把<strong>自己不需要人管着就能够好好学习</strong>这一点当做自己懂事的一个标准。</p>\n<p>虽然我现在还是挺感谢当时努力的自己。但是我仍然要说一句公道话，这是一种不科学的努力方式，是一种极易被破坏的学习方式，是一种典型的国内普遍存在着的，扭曲的学生学习道路。</p>\n<p>为什么说是一种具有破坏性的学习方式？从我上大学以后我慢慢明白了这个道理。上大学后，特别是大一，因为远离父母的管制，然后每个月还有父母的生活费的供给，我可以说我活的确实很轻松，我学着我自认为很喜欢的计算机知识，在休息时间玩着我喜欢的电脑游戏，再也不怕奶奶突然进来催我写作业。我甚至还能在游戏里充点钱，从而提高我的游戏体验。在大学课程上，我小心翼翼的完成必须完成的作业与学习内容，而对于其他不太重要的课程不太关心。我那时特别喜欢“玩手机”，看一些有趣的漫画，聊一些有趣的话题（学习无关）。我还特别喜欢在下课后买一份烤串+橙汁，回宿舍边看电影边吃，最终导致了大学后我的体重开始超标，老妈开始说我胖了。然而我在大一大二过程中表现出的这种散漫的学习态度，其最终缘由我觉得还是初中老师的那句话，那就是我缺乏自主性，也就是“假学习”“假努力”。我相信了亲人口中说的“高考好好考，考个好大学就轻松了”，但是仔细想来这不是父母和我说的，而是表哥表姐说的话。所以我也明白了一个道理，作为父母，对孩子一定不能传播负面消极的思想，要永远保持给孩子输出一个正面的思想，要永远保持告诉孩子做什么是绝对正确的，就比如“学习”，要把自己用时间去证明的好道理及时的告诉孩子，不管你用什么方式，口头也好，书面也罢，总之永远不要停止交流，如果发现交流存在困难，那么最好就像我现在这样，用书面的形式去表达，把大家的思想再次统一到一个水平线上。（我认为告诉孩子学习是一件绝对正确的事情，作为父母，我认为绝对不能向自己的孩子传输不学习也没关系的话）</p>\n<h2 id=\"兴趣也许可以打败危机意识\"><a href=\"#兴趣也许可以打败危机意识\" class=\"headerlink\" title=\"兴趣也许可以打败危机意识\"></a>兴趣也许可以打败危机意识</h2><p>我从初中到高中一直被老师诟病的缺乏自主性，直到我大学毕业才真正理解，并且付出了惨痛的代价。我经过这好几年的洗礼，至少明白了一点，我确实喜欢编程。在我高中填志愿一眼看到“软件工程”的那一瞬间，我才第一次有种为自己学习的感觉。在大学毕业后，我心里就产生了一个梦想，我一直想去实现。但是这个梦想没法转换为消费力，也就是说它可能没法赚到钱，所以我从来只字不提。但是毕竟今天聊到了这份上，那么把它搬出来也是无可奈何的。相比于赚钱糊口，这个小梦想总能在我动摇的时候给我更大的原动力去继续坚持编程。入行以后，我才懂得了这一行水太深，想做到优秀，那付出可不比做个主刀医生简单。但是非常遗憾的是，软件在国内才刚刚红火，不像医生职业那样，有非常清晰的发展方向。做编程，最好的方法只有实战，不停的实战，然后悟出其中的道理，最后达到融会贯通，才算刚刚入门。这也是一开始我没有去考研究生的一部分原因（另一部分原因是我想休息，不想继续学习，我想把我的知识化为生产力）。在随后的工作中，我虽然如愿以偿的赚到了一些钱，但是渐渐地我也发现了这行业的问题，无止境的加班，混乱的行业标准，这些都让我一度对软件这行业彻底失望。不过关键时候让我坚持过来的，不是赚钱，而是我那小小的梦想。</p>\n<p>一旦坚持过来后，我想说的是，原本“假学习”的思想就再也不存在了，我可以坦诚的面对这一切，我甚至可以冷静的分析考研读博的好处，而不是一味的坚持实战至上的理论。我开始不关心自己身边的朋友或者亲人的孩子混的怎么怎么样，攀比的心理逐渐消失。如果他们混的很好，那么我会恭喜他们，而不是眼红他们；如果他们混的不好，那么我开始分析为什么，而不是单纯关心别人，问候别人；以前是父母带着我走，而现在是我开始自己摸索想走的路，虽然我感觉我懂的很晚，但是我觉得这一切都来得及。下一个阶段是我人生真正意义上的第二个阶段，如果你问我你的目标是什么。那么简单点来说，我想有自己的房，有自己的家；但是心灵深处，我比任何人都知道一件事，那就是房子是为了生存，是<strong>危机感</strong>驱使着我行动的第二目标。但是我的那个梦想是真正扶持着我努力的第一目标。</p>\n<p>当然我也知道，有很多人为了赚钱，为了自己的孩子，最后可能放弃了自己的梦想，选择拥抱自己认为的，可以实现的，最快速的赚钱方式去疯狂赚钱。我也知道肯定有一大部分人在当初觉得自己的梦想可以等赚够钱了再去实现也没问题。</p>\n<p>我不知道我在未来会不会被生活的洪流逼得也只能拼命赚钱，但是也正因为如此，我觉得我写这篇文章就更有意义。这篇文章是现阶段我心灵思考的产物，一切东西都是我真实的所想所闻。10年后的自己看到这篇文章会是什么想法呢？我很好奇。</p>\n<h2 id=\"尾\"><a href=\"#尾\" class=\"headerlink\" title=\"尾\"></a>尾</h2><p>总体而言全篇是根据自我经历出发，阐述了当今中国小孩子“假学习”的现状，最后表达个人看法和报复的一篇文章。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck20gn9sk0001m6elgtd4vg9n","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9sy000im6elch7rbjy3"},{"post_id":"ck20gn9sw000gm6elntzmjdkl","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9t1000om6eltrd30epg"},{"post_id":"ck20gn9sn0003m6eli9s0c7wn","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9t2000sm6el175cnh0b"},{"post_id":"ck20gn9sx000hm6el4123fhmo","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9t3000vm6elsb2k85o1"},{"post_id":"ck20gn9sz000lm6elpoy7t5kq","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9t40010m6el0zcnducf"},{"post_id":"ck20gn9sr0007m6eldueam1qr","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9t50013m6elefemb3vr"},{"post_id":"ck20gn9t0000nm6eldthgevlh","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9t60016m6elxpfyjc5n"},{"post_id":"ck20gn9t2000rm6elzhqo1a95","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9t8001am6elunqk1to2"},{"post_id":"ck20gn9ss0009m6elbczqm8sg","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9t8001cm6eld4dly4aq"},{"post_id":"ck20gn9t4000zm6el67c2zftr","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9ta001gm6elhaftx6kf"},{"post_id":"ck20gn9su000bm6el5fhuugvz","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tb001im6ela42n3g0q"},{"post_id":"ck20gn9t50012m6elm8hv3km4","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tc001lm6el3dodjhkp"},{"post_id":"ck20gn9t60015m6ele7jo34j6","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9td001om6el6jexifjt"},{"post_id":"ck20gn9t3000um6eln2yp788m","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9te001rm6elfkv4ioug"},{"post_id":"ck20gn9t70019m6elyq8kqs38","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9tf001um6elp8bc80r1"},{"post_id":"ck20gn9t8001bm6eldr5s6l4j","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tg001xm6elkkkj2wy2"},{"post_id":"ck20gn9t9001fm6el9ic7y1zm","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9th0020m6eltvhndiag"},{"post_id":"ck20gn9ta001hm6el1yjgazem","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9ti0023m6elfi06m876"},{"post_id":"ck20gn9tb001km6elljpu9jv9","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tj0027m6ellvzfobir"},{"post_id":"ck20gn9td001nm6elkzzuvxfo","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tk0029m6elzv32bjor"},{"post_id":"ck20gn9te001qm6elpxdhedpn","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tm002dm6el31wst0de"},{"post_id":"ck20gn9tf001tm6el9oz6gele","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9tn002fm6elnojhxa3b"},{"post_id":"ck20gn9tg001wm6elv46y7rd7","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9to002jm6elhrbmji1x"},{"post_id":"ck20gn9th001zm6elrqol85sx","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tp002lm6elyjv2mcgr"},{"post_id":"ck20gn9ti0022m6elk16n647m","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9tq002pm6elnkbkyrbn"},{"post_id":"ck20gn9tj0026m6elfhh1ub52","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tr002rm6elcz02vt2b"},{"post_id":"ck20gn9tk0028m6elznwutksc","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9ts002um6el9ltdxc4s"},{"post_id":"ck20gn9tl002cm6elqxdl9upn","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tt002xm6el7hwtpejg"},{"post_id":"ck20gn9tm002em6ellose67fj","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tv0030m6elpds50cmv"},{"post_id":"ck20gn9tn002im6el39kh9bnz","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tv0033m6el71qpi165"},{"post_id":"ck20gn9to002km6eldxgyxg1l","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9tw0036m6el3cqu6kj5"},{"post_id":"ck20gn9tp002om6eluak9d159","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9tx0039m6elxbz3fmtw"},{"post_id":"ck20gn9tr002qm6elztonuhrc","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9ty003cm6elbhypdxz3"},{"post_id":"ck20gn9ts002tm6el1l1a72ro","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9tz003gm6el63rhkmhd"},{"post_id":"ck20gn9tt002wm6elrz3pyqx6","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9u0003im6elq9cftej7"},{"post_id":"ck20gn9tu002zm6el4nurhhrv","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9u0003lm6el1ncn02vb"},{"post_id":"ck20gn9tv0032m6elw0jzicaq","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9u0003nm6el0504b9zd"},{"post_id":"ck20gn9tw0035m6elyxnwctrk","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9u1003qm6el64yr2161"},{"post_id":"ck20gn9tx0038m6el5wf0ry0f","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gn9u1003sm6el4hvjdod5"},{"post_id":"ck20gn9tx003bm6elmqsmriqf","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9u1003vm6elskwdss0g"},{"post_id":"ck20gn9tz003fm6eletlcv4hx","category_id":"ck20gn9t50014m6elklio0sp0","_id":"ck20gn9u2003xm6elkhk5uodx"},{"post_id":"ck20gn9uo004nm6elxnquz3ga","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9us004um6el5vlj0xjj"},{"post_id":"ck20gn9up004pm6eln6sg4xdi","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9ut004xm6el7t7uw8me"},{"post_id":"ck20gn9uq004rm6el8oxg7sp6","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9uu0050m6el6qg9r02h"},{"post_id":"ck20gn9us004tm6el5i7f0i8h","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9uv0054m6elq437sm07"},{"post_id":"ck20gn9us004wm6elckxr3jpn","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9uw0056m6el4q8t7grh"},{"post_id":"ck20gn9ut004zm6el3nqp4a0v","category_id":"ck20gn9sv000cm6eluq3rvust","_id":"ck20gn9uw0059m6eliuvt1av8"},{"post_id":"ck20gn9uv0053m6el4m7zt36l","category_id":"ck20gn9uw0057m6elrk28w51b","_id":"ck20gn9ux005bm6elnzq08ltg"},{"post_id":"ck20gna00005cm6elj2oyqtok","category_id":"ck20gn9sp0004m6elwkwxxa6q","_id":"ck20gna03005em6elysa756wx"}],"PostTag":[{"post_id":"ck20gn9sk0001m6elgtd4vg9n","tag_id":"ck20gn9sq0005m6elqrvyl7uj","_id":"ck20gn9sw000em6el9nzjsl8j"},{"post_id":"ck20gn9sn0003m6eli9s0c7wn","tag_id":"ck20gn9sv000dm6ellrucudnz","_id":"ck20gn9t0000mm6elp2xssj4h"},{"post_id":"ck20gn9sr0007m6eldueam1qr","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gn9t2000tm6ellox493p1"},{"post_id":"ck20gn9t2000rm6elzhqo1a95","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gn9t4000xm6elve4wo9e3"},{"post_id":"ck20gn9su000bm6el5fhuugvz","tag_id":"ck20gn9t1000qm6el9d3mz680","_id":"ck20gn9t50011m6elc9c4n871"},{"post_id":"ck20gn9sw000gm6elntzmjdkl","tag_id":"ck20gn9t4000ym6elfamn2tat","_id":"ck20gn9t70018m6elauzwniyz"},{"post_id":"ck20gn9sx000hm6el4123fhmo","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gn9t9001em6elqx5w2jxb"},{"post_id":"ck20gn9sz000lm6elpoy7t5kq","tag_id":"ck20gn9t9001dm6el35wy9cob","_id":"ck20gn9tc001mm6elqdovfhnf"},{"post_id":"ck20gn9t0000nm6eldthgevlh","tag_id":"ck20gn9tb001jm6elwhf2plq9","_id":"ck20gn9tf001sm6elmmessf45"},{"post_id":"ck20gn9t3000um6eln2yp788m","tag_id":"ck20gn9te001pm6el3top0jmx","_id":"ck20gn9th001ym6elc5ec9y7i"},{"post_id":"ck20gn9tg001wm6elv46y7rd7","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gn9ti0021m6elpqkd8r27"},{"post_id":"ck20gn9t4000zm6el67c2zftr","tag_id":"ck20gn9tg001vm6el7drjuva4","_id":"ck20gn9tj0025m6el7kggfvl1"},{"post_id":"ck20gn9t50012m6elm8hv3km4","tag_id":"ck20gn9tg001vm6el7drjuva4","_id":"ck20gn9tl002bm6el1qux2ic8"},{"post_id":"ck20gn9t60015m6ele7jo34j6","tag_id":"ck20gn9tg001vm6el7drjuva4","_id":"ck20gn9tn002hm6el2j6t78pm"},{"post_id":"ck20gn9t70019m6elyq8kqs38","tag_id":"ck20gn9t9001dm6el35wy9cob","_id":"ck20gn9tp002nm6elq4gezhht"},{"post_id":"ck20gn9t8001bm6eldr5s6l4j","tag_id":"ck20gn9tp002mm6elnhejdp0h","_id":"ck20gn9tt002vm6elz8yy21lo"},{"post_id":"ck20gn9t9001fm6el9ic7y1zm","tag_id":"ck20gn9ts002sm6elk7ffqxir","_id":"ck20gn9tv0031m6elbzk1oe3w"},{"post_id":"ck20gn9ta001hm6el1yjgazem","tag_id":"ck20gn9tu002ym6ele5nbg75m","_id":"ck20gn9tw0037m6el23ij4ewv"},{"post_id":"ck20gn9tv0032m6elw0jzicaq","tag_id":"ck20gn9t9001dm6el35wy9cob","_id":"ck20gn9tx003am6eldjj61h82"},{"post_id":"ck20gn9tw0035m6elyxnwctrk","tag_id":"ck20gn9t4000ym6elfamn2tat","_id":"ck20gn9tz003em6els9mjxaf2"},{"post_id":"ck20gn9tx0038m6el5wf0ry0f","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gn9u0003hm6el3zxgzcob"},{"post_id":"ck20gn9tb001km6elljpu9jv9","tag_id":"ck20gn9tw0034m6eladj2cq85","_id":"ck20gn9u0003km6elmkok8mvh"},{"post_id":"ck20gn9tx003bm6elmqsmriqf","tag_id":"ck20gn9t9001dm6el35wy9cob","_id":"ck20gn9u0003mm6elilulnk33"},{"post_id":"ck20gn9tz003fm6eletlcv4hx","tag_id":"ck20gn9t9001dm6el35wy9cob","_id":"ck20gn9u0003pm6elgv1wvxdf"},{"post_id":"ck20gn9td001nm6elkzzuvxfo","tag_id":"ck20gn9tg001vm6el7drjuva4","_id":"ck20gn9u1003rm6el1u1n09da"},{"post_id":"ck20gn9te001qm6elpxdhedpn","tag_id":"ck20gn9u0003jm6ellk55a1fw","_id":"ck20gn9u1003um6elqtm8zwpe"},{"post_id":"ck20gn9tf001tm6el9oz6gele","tag_id":"ck20gn9u0003om6el3pikp6j2","_id":"ck20gn9u2003wm6elgr0ti21n"},{"post_id":"ck20gn9th001zm6elrqol85sx","tag_id":"ck20gn9u1003tm6elwg539r00","_id":"ck20gn9u2003zm6el86ggxxuh"},{"post_id":"ck20gn9ti0022m6elk16n647m","tag_id":"ck20gn9u2003ym6eltylh5my2","_id":"ck20gn9u30041m6el5b8kqgq6"},{"post_id":"ck20gn9tj0026m6elfhh1ub52","tag_id":"ck20gn9u20040m6el4dl0q6rm","_id":"ck20gn9u30043m6elsy1mqwzn"},{"post_id":"ck20gn9tk0028m6elznwutksc","tag_id":"ck20gn9u30042m6elhescvfp1","_id":"ck20gn9u30045m6el5nos4cmt"},{"post_id":"ck20gn9tl002cm6elqxdl9upn","tag_id":"ck20gn9u30044m6elk4ah4skl","_id":"ck20gn9u30047m6elgj2w3jd6"},{"post_id":"ck20gn9tm002em6ellose67fj","tag_id":"ck20gn9u30046m6el4f606jgy","_id":"ck20gn9u40049m6elmx0aoyyz"},{"post_id":"ck20gn9tn002im6el39kh9bnz","tag_id":"ck20gn9u40048m6elmklflv6p","_id":"ck20gn9u4004bm6elphnol6yw"},{"post_id":"ck20gn9to002km6eldxgyxg1l","tag_id":"ck20gn9u4004am6elli9tfkj5","_id":"ck20gn9u4004dm6elmk8we0xo"},{"post_id":"ck20gn9tp002om6eluak9d159","tag_id":"ck20gn9u4004cm6elfdcpx3i1","_id":"ck20gn9u5004fm6elh23y1rx3"},{"post_id":"ck20gn9tr002qm6elztonuhrc","tag_id":"ck20gn9u4004am6elli9tfkj5","_id":"ck20gn9u5004hm6eloo6ek2so"},{"post_id":"ck20gn9ts002tm6el1l1a72ro","tag_id":"ck20gn9u4004cm6elfdcpx3i1","_id":"ck20gn9u5004jm6elhqbb1qod"},{"post_id":"ck20gn9tt002wm6elrz3pyqx6","tag_id":"ck20gn9u0003jm6ellk55a1fw","_id":"ck20gn9u6004lm6elytr4viks"},{"post_id":"ck20gn9tu002zm6el4nurhhrv","tag_id":"ck20gn9u6004km6eluqq93n0u","_id":"ck20gn9u6004mm6elqd073c70"},{"post_id":"ck20gn9uo004nm6elxnquz3ga","tag_id":"ck20gn9t4000ym6elfamn2tat","_id":"ck20gn9uq004qm6el52d77i4c"},{"post_id":"ck20gn9uq004rm6el8oxg7sp6","tag_id":"ck20gn9tp002mm6elnhejdp0h","_id":"ck20gn9us004vm6elsp2f7y8h"},{"post_id":"ck20gn9us004tm6el5i7f0i8h","tag_id":"ck20gn9ts002sm6elk7ffqxir","_id":"ck20gn9ut004ym6elzawps5nl"},{"post_id":"ck20gn9up004pm6eln6sg4xdi","tag_id":"ck20gn9ur004sm6elqfyv4jos","_id":"ck20gn9uu0052m6elzbsauiv2"},{"post_id":"ck20gn9ut004zm6el3nqp4a0v","tag_id":"ck20gn9u40048m6elmklflv6p","_id":"ck20gn9uw0055m6eldry7qx26"},{"post_id":"ck20gn9uv0053m6el4m7zt36l","tag_id":"ck20gn9u4004cm6elfdcpx3i1","_id":"ck20gn9uw0058m6elk78ajx1t"},{"post_id":"ck20gn9us004wm6elckxr3jpn","tag_id":"ck20gn9uu0051m6elnjm505uu","_id":"ck20gn9uw005am6el15ypdpj1"},{"post_id":"ck20gna00005cm6elj2oyqtok","tag_id":"ck20gn9sy000km6elr2h4j1dg","_id":"ck20gna02005dm6el0uvypge8"}],"Tag":[{"name":"国庆","_id":"ck20gn9sq0005m6elqrvyl7uj"},{"name":"数据结构","_id":"ck20gn9sv000dm6ellrucudnz"},{"name":"随笔","_id":"ck20gn9sy000km6elr2h4j1dg"},{"name":"跨域访问","_id":"ck20gn9t1000qm6el9d3mz680"},{"name":"编码","_id":"ck20gn9t4000ym6elfamn2tat"},{"name":"Bugs","_id":"ck20gn9t9001dm6el35wy9cob"},{"name":"Gitalk","_id":"ck20gn9tb001jm6elwhf2plq9"},{"name":"时区","_id":"ck20gn9te001pm6el3top0jmx"},{"name":"hexo","_id":"ck20gn9tg001vm6el7drjuva4"},{"name":"Java高精度计算","_id":"ck20gn9tp002mm6elnhejdp0h"},{"name":"FunctionalProgramming","_id":"ck20gn9ts002sm6elk7ffqxir"},{"name":"cookie","_id":"ck20gn9tu002ym6ele5nbg75m"},{"name":"mybatis","_id":"ck20gn9tw0034m6eladj2cq85"},{"name":"redis","_id":"ck20gn9u0003jm6ellk55a1fw"},{"name":"batchInsert","_id":"ck20gn9u0003om6el3pikp6j2"},{"name":"Hexo魔改","_id":"ck20gn9u1003tm6elwg539r00"},{"name":"数据库优化","_id":"ck20gn9u2003ym6eltylh5my2"},{"name":"mysql","_id":"ck20gn9u20040m6el4dl0q6rm"},{"name":"hexo魔改","_id":"ck20gn9u30042m6elhescvfp1"},{"name":"Proxy","_id":"ck20gn9u30044m6elk4ah4skl"},{"name":"云服务","_id":"ck20gn9u30046m6el4f606jgy"},{"name":"signature","_id":"ck20gn9u40048m6elmklflv6p"},{"name":"ubuntu","_id":"ck20gn9u4004am6elli9tfkj5"},{"name":"回忆向","_id":"ck20gn9u4004cm6elfdcpx3i1"},{"name":"java","_id":"ck20gn9u6004km6eluqq93n0u"},{"name":"JavaWeb","_id":"ck20gn9ur004sm6elqfyv4jos"},{"name":"JVM","_id":"ck20gn9uu0051m6elnjm505uu"}]}}